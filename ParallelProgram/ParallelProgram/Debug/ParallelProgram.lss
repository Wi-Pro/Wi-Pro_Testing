
ParallelProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800200  0000113e  000011d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000113e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  008002b8  008002b8  0000128a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000128a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b8  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000276e  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b79  00000000  00000000  00003d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000107f  00000000  00000000  00004885  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006fc  00000000  00000000  00005904  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006bb  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001220  00000000  00000000  000066bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000220  00000000  00000000  000078db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ee e3       	ldi	r30, 0x3E	; 62
      f8:	f1 e1       	ldi	r31, 0x11	; 17
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	a8 3b       	cpi	r26, 0xB8	; 184
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	a8 eb       	ldi	r26, 0xB8	; 184
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	af 3d       	cpi	r26, 0xDF	; 223
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
     11a:	0c 94 9d 08 	jmp	0x113a	; 0x113a <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <SPI_FPGA_Write>:
	SPI_FPGA_Write(FPGA_Disable);
}

void SPI_FPGA_Write(unsigned char SPI_Data)
{
	FPGA_CS_PORT &= ~(1<<FPGA_SPI_CS);
     122:	a4 98       	cbi	0x14, 4	; 20
	// Start Write transmission
	SPDR = SPI_Data;
     124:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     126:	0d b4       	in	r0, 0x2d	; 45
     128:	07 fe       	sbrs	r0, 7
     12a:	fd cf       	rjmp	.-6      	; 0x126 <SPI_FPGA_Write+0x4>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     12c:	a4 9a       	sbi	0x14, 4	; 20
     12e:	08 95       	ret

00000130 <SPI_FPGA_Init>:
#include <util/delay.h>
#include "FPGA.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
     130:	9c 9a       	sbi	0x13, 4	; 19
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     132:	a4 9a       	sbi	0x14, 4	; 20
	
	WR_DDR |= 1<<FPGAWR;
     134:	e4 e0       	ldi	r30, 0x04	; 4
     136:	f1 e0       	ldi	r31, 0x01	; 1
     138:	80 81       	ld	r24, Z
     13a:	84 60       	ori	r24, 0x04	; 4
     13c:	80 83       	st	Z, r24
	WR_PORT &= ~(1<<FPGAWR);
     13e:	e5 e0       	ldi	r30, 0x05	; 5
     140:	f1 e0       	ldi	r31, 0x01	; 1
     142:	80 81       	ld	r24, Z
     144:	8b 7f       	andi	r24, 0xFB	; 251
     146:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_Disable);
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	0e 94 91 00 	call	0x122	; 0x122 <SPI_FPGA_Write>
     14e:	08 95       	ret

00000150 <writeHexFileTest>:
	
	return hexRow; 
}

void writeHexFileTest()
{	
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	c0 e0       	ldi	r28, 0x00	; 0
     15e:	d2 e0       	ldi	r29, 0x02	; 2
     160:	0f 2e       	mov	r0, r31
     162:	f2 e3       	ldi	r31, 0x32	; 50
     164:	ef 2e       	mov	r14, r31
     166:	f2 e0       	ldi	r31, 0x02	; 2
     168:	ff 2e       	mov	r15, r31
     16a:	f0 2d       	mov	r31, r0
	for (int i = 0; i<50; i++)
	{
		printf("0x%02X ", *(buffer + i));
     16c:	0a e4       	ldi	r16, 0x4A	; 74
     16e:	12 e0       	ldi	r17, 0x02	; 2
     170:	89 91       	ld	r24, Y+
     172:	1f 92       	push	r1
     174:	8f 93       	push	r24
     176:	1f 93       	push	r17
     178:	0f 93       	push	r16
     17a:	0e 94 df 05 	call	0xbbe	; 0xbbe <printf>
	return hexRow; 
}

void writeHexFileTest()
{	
	for (int i = 0; i<50; i++)
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	0f 90       	pop	r0
     186:	ce 15       	cp	r28, r14
     188:	df 05       	cpc	r29, r15
     18a:	91 f7       	brne	.-28     	; 0x170 <writeHexFileTest+0x20>
	{
		printf("0x%02X ", *(buffer + i));
	}
				
	RAMWrite(buffer, HEX_FILE_ADDRESS, 50);
     18c:	42 e3       	ldi	r20, 0x32	; 50
     18e:	50 e0       	ldi	r21, 0x00	; 0
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <RAMWrite>
					
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
     1a4:	ff 90       	pop	r15
     1a6:	ef 90       	pop	r14
     1a8:	08 95       	ret

000001aa <ProgInit>:
#include "Print/PrintDriver.h"


void ProgInit(void)
{
	SPI_Switching_Circuitry_Init(); 
     1aa:	0e 94 96 04 	call	0x92c	; 0x92c <SPI_Switching_Circuitry_Init>
	SPI_FPGA_Init();
     1ae:	0e 94 98 00 	call	0x130	; 0x130 <SPI_FPGA_Init>
	
	voltageControlInit();
     1b2:	0e 94 6d 05 	call	0xada	; 0xada <voltageControlInit>
	setVpp(VPP_12V);
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <setVpp>
	setVcc(VCC_5V);
     1bc:	84 e0       	ldi	r24, 0x04	; 4
     1be:	0e 94 7f 05 	call	0xafe	; 0xafe <setVcc>
	setVLogic(VL_5V);
     1c2:	86 e0       	ldi	r24, 0x06	; 6
     1c4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <setVLogic>
	
	//Setting up Control lines
	CONTROL_DDR |= ( (1<<XTAL1) | (1<<OE) | (1<<WR) | (1<<BS1_PAGEL) | (1<<XA0) | (1<<XA1_BS2) | (1<<PAGEL) | (1<<BS2));
     1c8:	8a b1       	in	r24, 0x0a	; 10
     1ca:	8f ef       	ldi	r24, 0xFF	; 255
     1cc:	8a b9       	out	0x0a, r24	; 10
	RDY_BSY_DDR &= ~(1<<RDY_BSY);
     1ce:	38 98       	cbi	0x07, 0	; 7
	DATA_DDR = 0xFF;
     1d0:	80 93 0a 01 	sts	0x010A, r24
	
	LED_PORT &= ~((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
     1d4:	84 b3       	in	r24, 0x14	; 20
     1d6:	88 7f       	andi	r24, 0xF8	; 248
     1d8:	84 bb       	out	0x14, r24	; 20
     1da:	08 95       	ret

000001dc <LoadCommand>:
}

void LoadCommand(char command)
{
	//A: Load Command "Program Flash"
	CONTROL_PORT |= 1<<XA1_BS2;
     1dc:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     1de:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     1e0:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = command;
     1e2:	80 93 0b 01 	sts	0x010B, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e6:	82 e4       	ldi	r24, 0x42	; 66
     1e8:	8a 95       	dec	r24
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LoadCommand+0xc>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LoadCommand+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     1ee:	58 9a       	sbi	0x0b, 0	; 11
     1f0:	82 e4       	ldi	r24, 0x42	; 66
     1f2:	8a 95       	dec	r24
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LoadCommand+0x16>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LoadCommand+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     1f8:	58 98       	cbi	0x0b, 0	; 11
     1fa:	82 e4       	ldi	r24, 0x42	; 66
     1fc:	8a 95       	dec	r24
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <LoadCommand+0x20>
     200:	00 c0       	rjmp	.+0      	; 0x202 <LoadCommand+0x26>
     202:	08 95       	ret

00000204 <EnableProgMode>:
	CONTROL_PORT &= ~(1<<XTAL1);
	_delay_us(25);
}

void EnableProgMode(unsigned char TargetMicrocontroller)
{
     204:	cf 93       	push	r28
     206:	c8 2f       	mov	r28, r24
	CONTROL_PORT &= ~(1<<XTAL1);
     208:	58 98       	cbi	0x0b, 0	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2 | 1<<XA0 | 1<<BS1_PAGEL | 1<<WR);
     20a:	8b b1       	in	r24, 0x0b	; 11
     20c:	83 7c       	andi	r24, 0xC3	; 195
     20e:	8b b9       	out	0x0b, r24	; 11
	DATA_PORT = 0x00;
     210:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
     214:	1b b8       	out	0x0b, r1	; 11
	enableVccRegulator();
     216:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <enableVccRegulator>
	enableVLogic();
     21a:	0e 94 9b 05 	call	0xb36	; 0xb36 <enableVLogic>
	
	WR_PORT &= ~(1<<FPGAWR);
     21e:	e5 e0       	ldi	r30, 0x05	; 5
     220:	f1 e0       	ldi	r31, 0x01	; 1
     222:	80 81       	ld	r24, Z
     224:	8b 7f       	andi	r24, 0xFB	; 251
     226:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_ATtiny2313_Mapping);
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	0e 94 91 00 	call	0x122	; 0x122 <SPI_FPGA_Write>
	
	switch (TargetMicrocontroller)
     22e:	c1 30       	cpi	r28, 0x01	; 1
     230:	11 f4       	brne	.+4      	; 0x236 <EnableProgMode+0x32>
	{
		case 1 :
			setAtTiny2313();
     232:	0e 94 1a 05 	call	0xa34	; 0xa34 <setAtTiny2313>
     236:	85 e8       	ldi	r24, 0x85	; 133
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <EnableProgMode+0x34>
     23c:	00 00       	nop
			break;
	}
	
	_delay_us(50);
	
	enableVppRegulator();
     23e:	0e 94 77 05 	call	0xaee	; 0xaee <enableVppRegulator>
     242:	95 e8       	ldi	r25, 0x85	; 133
     244:	9a 95       	dec	r25
     246:	f1 f7       	brne	.-4      	; 0x244 <EnableProgMode+0x40>
     248:	00 00       	nop
	_delay_us(50);
	CONTROL_PORT |= (1<<WR | 1<<OE);
     24a:	8b b1       	in	r24, 0x0b	; 11
     24c:	86 60       	ori	r24, 0x06	; 6
     24e:	8b b9       	out	0x0b, r24	; 11
     250:	8f e1       	ldi	r24, 0x1F	; 31
     252:	93 e0       	ldi	r25, 0x03	; 3
     254:	01 97       	sbiw	r24, 0x01	; 1
     256:	f1 f7       	brne	.-4      	; 0x254 <EnableProgMode+0x50>
     258:	00 c0       	rjmp	.+0      	; 0x25a <EnableProgMode+0x56>
     25a:	00 00       	nop
	_delay_us(400);
}
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <ReadSignatureBytes>:
char* ReadSignatureBytes(void)
{
	static char SignatureBytes[3];
	
	//A: Load Command "Read Signature Bytes"
	LoadCommand(READ_SIG_BYTE);
     260:	88 e0       	ldi	r24, 0x08	; 8
     262:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LoadCommand>
	
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     266:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     268:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     26a:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x00;
     26c:	10 92 0b 01 	sts	0x010B, r1
     270:	87 ec       	ldi	r24, 0xC7	; 199
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <ReadSignatureBytes+0x14>
     278:	00 c0       	rjmp	.+0      	; 0x27a <ReadSignatureBytes+0x1a>
     27a:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
     27c:	58 9a       	sbi	0x0b, 0	; 11
     27e:	92 e4       	ldi	r25, 0x42	; 66
     280:	9a 95       	dec	r25
     282:	f1 f7       	brne	.-4      	; 0x280 <ReadSignatureBytes+0x20>
     284:	00 c0       	rjmp	.+0      	; 0x286 <ReadSignatureBytes+0x26>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     286:	58 98       	cbi	0x0b, 0	; 11
     288:	87 ec       	ldi	r24, 0xC7	; 199
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <ReadSignatureBytes+0x2c>
     290:	00 c0       	rjmp	.+0      	; 0x292 <ReadSignatureBytes+0x32>
     292:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     294:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
     298:	e5 e0       	ldi	r30, 0x05	; 5
     29a:	f1 e0       	ldi	r31, 0x01	; 1
     29c:	80 81       	ld	r24, Z
     29e:	84 60       	ori	r24, 0x04	; 4
     2a0:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
     2a2:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     2a4:	5b 98       	cbi	0x0b, 3	; 11
     2a6:	87 ee       	ldi	r24, 0xE7	; 231
     2a8:	93 e0       	ldi	r25, 0x03	; 3
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <ReadSignatureBytes+0x4a>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <ReadSignatureBytes+0x50>
     2b0:	00 00       	nop
	_delay_us(500);
	SignatureBytes[0] = DATA_PIN;
     2b2:	80 91 09 01 	lds	r24, 0x0109
     2b6:	80 93 b8 02 	sts	0x02B8, r24
	printf("0x%02X ", SignatureBytes[0]);
     2ba:	1f 92       	push	r1
     2bc:	8f 93       	push	r24
     2be:	8a e4       	ldi	r24, 0x4A	; 74
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	9f 93       	push	r25
     2c4:	8f 93       	push	r24
     2c6:	0e 94 df 05 	call	0xbbe	; 0xbbe <printf>
	CONTROL_PORT |= 1<<OE;
     2ca:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
     2cc:	e5 e0       	ldi	r30, 0x05	; 5
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	80 81       	ld	r24, Z
     2d2:	8b 7f       	andi	r24, 0xFB	; 251
     2d4:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
     2d6:	8f ef       	ldi	r24, 0xFF	; 255
     2d8:	80 93 0a 01 	sts	0x010A, r24
     2dc:	87 ec       	ldi	r24, 0xC7	; 199
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <ReadSignatureBytes+0x80>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <ReadSignatureBytes+0x86>
     2e6:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     2e8:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     2ea:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     2ec:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x01;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 93 0b 01 	sts	0x010B, r24
     2f4:	87 ec       	ldi	r24, 0xC7	; 199
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <ReadSignatureBytes+0x98>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <ReadSignatureBytes+0x9e>
     2fe:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
     300:	58 9a       	sbi	0x0b, 0	; 11
     302:	92 e4       	ldi	r25, 0x42	; 66
     304:	9a 95       	dec	r25
     306:	f1 f7       	brne	.-4      	; 0x304 <ReadSignatureBytes+0xa4>
     308:	00 c0       	rjmp	.+0      	; 0x30a <ReadSignatureBytes+0xaa>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     30a:	58 98       	cbi	0x0b, 0	; 11
     30c:	87 ec       	ldi	r24, 0xC7	; 199
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <ReadSignatureBytes+0xb0>
     314:	00 c0       	rjmp	.+0      	; 0x316 <ReadSignatureBytes+0xb6>
     316:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     318:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
     31c:	80 81       	ld	r24, Z
     31e:	84 60       	ori	r24, 0x04	; 4
     320:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
     322:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     324:	5b 98       	cbi	0x0b, 3	; 11
     326:	87 ee       	ldi	r24, 0xE7	; 231
     328:	93 e0       	ldi	r25, 0x03	; 3
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <ReadSignatureBytes+0xca>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <ReadSignatureBytes+0xd0>
     330:	00 00       	nop
	_delay_us(500);
	SignatureBytes[1] = DATA_PIN;
     332:	80 91 09 01 	lds	r24, 0x0109
     336:	80 93 b9 02 	sts	0x02B9, r24
	printf("0x%02X ", SignatureBytes[1]);
     33a:	1f 92       	push	r1
     33c:	8f 93       	push	r24
     33e:	8a e4       	ldi	r24, 0x4A	; 74
     340:	92 e0       	ldi	r25, 0x02	; 2
     342:	9f 93       	push	r25
     344:	8f 93       	push	r24
     346:	0e 94 df 05 	call	0xbbe	; 0xbbe <printf>
	CONTROL_PORT |= 1<<OE;
     34a:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
     34c:	e5 e0       	ldi	r30, 0x05	; 5
     34e:	f1 e0       	ldi	r31, 0x01	; 1
     350:	80 81       	ld	r24, Z
     352:	8b 7f       	andi	r24, 0xFB	; 251
     354:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	80 93 0a 01 	sts	0x010A, r24
     35c:	87 ec       	ldi	r24, 0xC7	; 199
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <ReadSignatureBytes+0x100>
     364:	00 c0       	rjmp	.+0      	; 0x366 <ReadSignatureBytes+0x106>
     366:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     368:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     36a:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     36c:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x02;
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	80 93 0b 01 	sts	0x010B, r24
     374:	87 ec       	ldi	r24, 0xC7	; 199
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <ReadSignatureBytes+0x118>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <ReadSignatureBytes+0x11e>
     37e:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
     380:	58 9a       	sbi	0x0b, 0	; 11
     382:	92 e4       	ldi	r25, 0x42	; 66
     384:	9a 95       	dec	r25
     386:	f1 f7       	brne	.-4      	; 0x384 <ReadSignatureBytes+0x124>
     388:	00 c0       	rjmp	.+0      	; 0x38a <ReadSignatureBytes+0x12a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     38a:	58 98       	cbi	0x0b, 0	; 11
     38c:	87 ec       	ldi	r24, 0xC7	; 199
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <ReadSignatureBytes+0x130>
     394:	00 c0       	rjmp	.+0      	; 0x396 <ReadSignatureBytes+0x136>
     396:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     398:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
     39c:	80 81       	ld	r24, Z
     39e:	84 60       	ori	r24, 0x04	; 4
     3a0:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
     3a2:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     3a4:	5b 98       	cbi	0x0b, 3	; 11
     3a6:	87 ee       	ldi	r24, 0xE7	; 231
     3a8:	93 e0       	ldi	r25, 0x03	; 3
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <ReadSignatureBytes+0x14a>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <ReadSignatureBytes+0x150>
     3b0:	00 00       	nop
	_delay_us(500);
	SignatureBytes[2] = DATA_PIN;
     3b2:	80 91 09 01 	lds	r24, 0x0109
     3b6:	80 93 ba 02 	sts	0x02BA, r24
	printf("0x%02X ", SignatureBytes[2]);
     3ba:	1f 92       	push	r1
     3bc:	8f 93       	push	r24
     3be:	8a e4       	ldi	r24, 0x4A	; 74
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	9f 93       	push	r25
     3c4:	8f 93       	push	r24
     3c6:	0e 94 df 05 	call	0xbbe	; 0xbbe <printf>
	CONTROL_PORT |= 1<<OE;
     3ca:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
     3cc:	e5 e0       	ldi	r30, 0x05	; 5
     3ce:	f1 e0       	ldi	r31, 0x01	; 1
     3d0:	80 81       	ld	r24, Z
     3d2:	8b 7f       	andi	r24, 0xFB	; 251
     3d4:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	80 93 0a 01 	sts	0x010A, r24
	DATA_PORT = 0x00;
     3dc:	10 92 0b 01 	sts	0x010B, r1
	
	return SignatureBytes;
     3e0:	8d b7       	in	r24, 0x3d	; 61
     3e2:	9e b7       	in	r25, 0x3e	; 62
     3e4:	0c 96       	adiw	r24, 0x0c	; 12
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	9e bf       	out	0x3e, r25	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	8d bf       	out	0x3d, r24	; 61
}
     3f0:	88 eb       	ldi	r24, 0xB8	; 184
     3f2:	92 e0       	ldi	r25, 0x02	; 2
     3f4:	08 95       	ret

000003f6 <ReadFlash>:

void ReadFlash(void)
{
     3f6:	7f 92       	push	r7
     3f8:	8f 92       	push	r8
     3fa:	9f 92       	push	r9
     3fc:	af 92       	push	r10
     3fe:	bf 92       	push	r11
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	91 2c       	mov	r9, r1
	{
		//A: Load Command "Read Flash"
		CONTROL_PORT |= 1<<XA1_BS2;
		CONTROL_PORT &= ~(1<<XA0);
		CONTROL_PORT &= ~(1<<BS1_PAGEL);
		DATA_PORT = 0x02;
     412:	0f 2e       	mov	r0, r31
     414:	fb e0       	ldi	r31, 0x0B	; 11
     416:	ef 2e       	mov	r14, r31
     418:	ff 24       	eor	r15, r15
     41a:	f3 94       	inc	r15
     41c:	f0 2d       	mov	r31, r0
     41e:	68 94       	set
     420:	77 24       	eor	r7, r7
     422:	71 f8       	bld	r7, 1
		_delay_us(25);
		CONTROL_PORT &= ~(1<<XTAL1);
		_delay_us(25);
		
		//Read data
		DATA_DDR = 0;
     424:	0f 2e       	mov	r0, r31
     426:	fa e0       	ldi	r31, 0x0A	; 10
     428:	af 2e       	mov	r10, r31
     42a:	bb 24       	eor	r11, r11
     42c:	b3 94       	inc	r11
     42e:	f0 2d       	mov	r31, r0
		WR_PORT |= (1<<FPGAWR);
     430:	05 e0       	ldi	r16, 0x05	; 5
     432:	11 e0       	ldi	r17, 0x01	; 1
		CONTROL_PORT &= ~(1<<OE);
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
		_delay_us(100);
		DataValueIn = DATA_PIN;
     434:	0f 2e       	mov	r0, r31
     436:	f9 e0       	ldi	r31, 0x09	; 9
     438:	cf 2e       	mov	r12, r31
     43a:	dd 24       	eor	r13, r13
     43c:	d3 94       	inc	r13
     43e:	f0 2d       	mov	r31, r0
		printf("0x%02X ", DataValueIn);
     440:	ca e4       	ldi	r28, 0x4A	; 74
     442:	d2 e0       	ldi	r29, 0x02	; 2
		_delay_us(100);
		DataValueIn = DATA_PIN;
		printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
     444:	88 24       	eor	r8, r8
     446:	8a 94       	dec	r8
	char DataValueIn = 0;
	
	for (unsigned int LowAddressByte = 0; LowAddressByte <= 0x18; LowAddressByte++)
	{
		//A: Load Command "Read Flash"
		CONTROL_PORT |= 1<<XA1_BS2;
     448:	5d 9a       	sbi	0x0b, 5	; 11
		CONTROL_PORT &= ~(1<<XA0);
     44a:	5c 98       	cbi	0x0b, 4	; 11
		CONTROL_PORT &= ~(1<<BS1_PAGEL);
     44c:	5b 98       	cbi	0x0b, 3	; 11
		DATA_PORT = 0x02;
     44e:	f7 01       	movw	r30, r14
     450:	70 82       	st	Z, r7
     452:	f2 e4       	ldi	r31, 0x42	; 66
     454:	fa 95       	dec	r31
     456:	f1 f7       	brne	.-4      	; 0x454 <ReadFlash+0x5e>
     458:	00 c0       	rjmp	.+0      	; 0x45a <ReadFlash+0x64>
		_delay_us(25);
		CONTROL_PORT |= 1<<XTAL1;
     45a:	58 9a       	sbi	0x0b, 0	; 11
     45c:	82 e4       	ldi	r24, 0x42	; 66
     45e:	8a 95       	dec	r24
     460:	f1 f7       	brne	.-4      	; 0x45e <ReadFlash+0x68>
     462:	00 c0       	rjmp	.+0      	; 0x464 <ReadFlash+0x6e>
		_delay_us(25);
		CONTROL_PORT &= ~(1<<XTAL1);
     464:	58 98       	cbi	0x0b, 0	; 11
     466:	92 e4       	ldi	r25, 0x42	; 66
     468:	9a 95       	dec	r25
     46a:	f1 f7       	brne	.-4      	; 0x468 <ReadFlash+0x72>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <ReadFlash+0x78>
		_delay_us(25);
		
		//F: Load Address High Byte
		CONTROL_PORT &= ~(1<<XA1_BS2);
     46e:	5d 98       	cbi	0x0b, 5	; 11
		CONTROL_PORT &= ~(1<<XA0);
     470:	5c 98       	cbi	0x0b, 4	; 11
		CONTROL_PORT |= 1<<BS1_PAGEL;
     472:	5b 9a       	sbi	0x0b, 3	; 11
		DATA_PORT = 0x00;
     474:	f7 01       	movw	r30, r14
     476:	10 82       	st	Z, r1
     478:	f2 e4       	ldi	r31, 0x42	; 66
     47a:	fa 95       	dec	r31
     47c:	f1 f7       	brne	.-4      	; 0x47a <ReadFlash+0x84>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <ReadFlash+0x8a>
		_delay_us(25);
		CONTROL_PORT |= 1<<XTAL1;
     480:	58 9a       	sbi	0x0b, 0	; 11
     482:	82 e4       	ldi	r24, 0x42	; 66
     484:	8a 95       	dec	r24
     486:	f1 f7       	brne	.-4      	; 0x484 <ReadFlash+0x8e>
     488:	00 c0       	rjmp	.+0      	; 0x48a <ReadFlash+0x94>
		_delay_us(25);
		CONTROL_PORT &= ~(1<<XTAL1);
     48a:	58 98       	cbi	0x0b, 0	; 11
     48c:	92 e4       	ldi	r25, 0x42	; 66
     48e:	9a 95       	dec	r25
     490:	f1 f7       	brne	.-4      	; 0x48e <ReadFlash+0x98>
     492:	00 c0       	rjmp	.+0      	; 0x494 <ReadFlash+0x9e>
		_delay_us(25);
		
		//B: Load Address Low Byte
		CONTROL_PORT &= ~(1<<XA1_BS2);
     494:	5d 98       	cbi	0x0b, 5	; 11
		CONTROL_PORT &= ~(1<<XA0);
     496:	5c 98       	cbi	0x0b, 4	; 11
		CONTROL_PORT &= ~(1<<BS1_PAGEL);
     498:	5b 98       	cbi	0x0b, 3	; 11
		DATA_PORT = LowAddressByte;
     49a:	f7 01       	movw	r30, r14
     49c:	90 82       	st	Z, r9
     49e:	f2 e4       	ldi	r31, 0x42	; 66
     4a0:	fa 95       	dec	r31
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <ReadFlash+0xaa>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <ReadFlash+0xb0>
		_delay_us(25);
		CONTROL_PORT |= 1<<XTAL1;
     4a6:	58 9a       	sbi	0x0b, 0	; 11
     4a8:	82 e4       	ldi	r24, 0x42	; 66
     4aa:	8a 95       	dec	r24
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <ReadFlash+0xb4>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <ReadFlash+0xba>
		_delay_us(25);
		CONTROL_PORT &= ~(1<<XTAL1);
     4b0:	58 98       	cbi	0x0b, 0	; 11
     4b2:	92 e4       	ldi	r25, 0x42	; 66
     4b4:	9a 95       	dec	r25
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <ReadFlash+0xbe>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <ReadFlash+0xc4>
		_delay_us(25);
		
		//Read data
		DATA_DDR = 0;
     4ba:	f5 01       	movw	r30, r10
     4bc:	10 82       	st	Z, r1
		WR_PORT |= (1<<FPGAWR);
     4be:	f8 01       	movw	r30, r16
     4c0:	80 81       	ld	r24, Z
     4c2:	84 60       	ori	r24, 0x04	; 4
     4c4:	80 83       	st	Z, r24
		CONTROL_PORT &= ~(1<<OE);
     4c6:	59 98       	cbi	0x0b, 1	; 11
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
     4c8:	5b 98       	cbi	0x0b, 3	; 11
     4ca:	87 ec       	ldi	r24, 0xC7	; 199
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <ReadFlash+0xd8>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <ReadFlash+0xde>
     4d4:	00 00       	nop
		_delay_us(100);
		DataValueIn = DATA_PIN;
     4d6:	f6 01       	movw	r30, r12
     4d8:	80 81       	ld	r24, Z
		printf("0x%02X ", DataValueIn);
     4da:	1f 92       	push	r1
     4dc:	8f 93       	push	r24
     4de:	df 93       	push	r29
     4e0:	cf 93       	push	r28
     4e2:	0e 94 df 05 	call	0xbbe	; 0xbbe <printf>
		CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
     4e6:	5b 9a       	sbi	0x0b, 3	; 11
     4e8:	e7 ec       	ldi	r30, 0xC7	; 199
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	31 97       	sbiw	r30, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <ReadFlash+0xf6>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <ReadFlash+0xfc>
     4f2:	00 00       	nop
		_delay_us(100);
		DataValueIn = DATA_PIN;
     4f4:	f6 01       	movw	r30, r12
     4f6:	80 81       	ld	r24, Z
		printf("0x%02X ", DataValueIn);
     4f8:	1f 92       	push	r1
     4fa:	8f 93       	push	r24
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	0e 94 df 05 	call	0xbbe	; 0xbbe <printf>
		CONTROL_PORT |= 1<<OE;
     504:	59 9a       	sbi	0x0b, 1	; 11
		WR_PORT &= ~(1<<FPGAWR);
     506:	f8 01       	movw	r30, r16
     508:	80 81       	ld	r24, Z
     50a:	8b 7f       	andi	r24, 0xFB	; 251
     50c:	80 83       	st	Z, r24
		DATA_DDR = 0xFF;
     50e:	f5 01       	movw	r30, r10
     510:	80 82       	st	Z, r8
     512:	f2 e4       	ldi	r31, 0x42	; 66
     514:	fa 95       	dec	r31
     516:	f1 f7       	brne	.-4      	; 0x514 <ReadFlash+0x11e>
     518:	00 c0       	rjmp	.+0      	; 0x51a <ReadFlash+0x124>
     51a:	93 94       	inc	r9

void ReadFlash(void)
{
	char DataValueIn = 0;
	
	for (unsigned int LowAddressByte = 0; LowAddressByte <= 0x18; LowAddressByte++)
     51c:	8d b7       	in	r24, 0x3d	; 61
     51e:	9e b7       	in	r25, 0x3e	; 62
     520:	08 96       	adiw	r24, 0x08	; 8
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	9e bf       	out	0x3e, r25	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	8d bf       	out	0x3d, r24	; 61
     52c:	99 e1       	ldi	r25, 0x19	; 25
     52e:	99 12       	cpse	r9, r25
     530:	8b cf       	rjmp	.-234    	; 0x448 <ReadFlash+0x52>
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
		_delay_us(25);
	}
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	bf 90       	pop	r11
     544:	af 90       	pop	r10
     546:	9f 90       	pop	r9
     548:	8f 90       	pop	r8
     54a:	7f 90       	pop	r7
     54c:	08 95       	ret

0000054e <ChipErase>:

void ChipErase(void)
{
	CONTROL_PORT |= 1<<XA1_BS2;
     54e:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     550:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     552:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x80;
     554:	80 e8       	ldi	r24, 0x80	; 128
     556:	80 93 0b 01 	sts	0x010B, r24
     55a:	22 e4       	ldi	r18, 0x42	; 66
     55c:	2a 95       	dec	r18
     55e:	f1 f7       	brne	.-4      	; 0x55c <ChipErase+0xe>
     560:	00 c0       	rjmp	.+0      	; 0x562 <ChipErase+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     562:	58 9a       	sbi	0x0b, 0	; 11
     564:	82 e4       	ldi	r24, 0x42	; 66
     566:	8a 95       	dec	r24
     568:	f1 f7       	brne	.-4      	; 0x566 <ChipErase+0x18>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <ChipErase+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     56c:	58 98       	cbi	0x0b, 0	; 11
     56e:	92 e4       	ldi	r25, 0x42	; 66
     570:	9a 95       	dec	r25
     572:	f1 f7       	brne	.-4      	; 0x570 <ChipErase+0x22>
     574:	00 c0       	rjmp	.+0      	; 0x576 <ChipErase+0x28>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<WR);
     576:	5a 98       	cbi	0x0b, 2	; 11
     578:	22 e4       	ldi	r18, 0x42	; 66
     57a:	2a 95       	dec	r18
     57c:	f1 f7       	brne	.-4      	; 0x57a <ChipErase+0x2c>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <ChipErase+0x32>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
     580:	5a 9a       	sbi	0x0b, 2	; 11
     582:	82 e4       	ldi	r24, 0x42	; 66
     584:	8a 95       	dec	r24
     586:	f1 f7       	brne	.-4      	; 0x584 <ChipErase+0x36>
     588:	00 c0       	rjmp	.+0      	; 0x58a <ChipErase+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58a:	9f ef       	ldi	r25, 0xFF	; 255
     58c:	24 e3       	ldi	r18, 0x34	; 52
     58e:	8c e0       	ldi	r24, 0x0C	; 12
     590:	91 50       	subi	r25, 0x01	; 1
     592:	20 40       	sbci	r18, 0x00	; 0
     594:	80 40       	sbci	r24, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <ChipErase+0x42>
     598:	00 c0       	rjmp	.+0      	; 0x59a <ChipErase+0x4c>
     59a:	00 00       	nop
     59c:	08 95       	ret

0000059e <ExitParallelProgrammingMode>:
     59e:	8f e0       	ldi	r24, 0x0F	; 15
     5a0:	97 e2       	ldi	r25, 0x27	; 39
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <ExitParallelProgrammingMode+0x4>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <ExitParallelProgrammingMode+0xa>
     5a8:	00 00       	nop
}

void ExitParallelProgrammingMode(void)
{
	_delay_ms(5);
	DATA_PORT = 0x00;
     5aa:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
     5ae:	1b b8       	out	0x0b, r1	; 11
     5b0:	8f ec       	ldi	r24, 0xCF	; 207
     5b2:	97 e0       	ldi	r25, 0x07	; 7
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <ExitParallelProgrammingMode+0x16>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <ExitParallelProgrammingMode+0x1c>
     5ba:	00 00       	nop
	_delay_ms(1);
	SPI_FPGA_Write(FPGA_Disable);
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 91 00 	call	0x122	; 0x122 <SPI_FPGA_Write>
	
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
     5c2:	e5 e0       	ldi	r30, 0x05	; 5
     5c4:	f1 e0       	ldi	r31, 0x01	; 1
     5c6:	80 81       	ld	r24, Z
     5c8:	8f 7d       	andi	r24, 0xDF	; 223
     5ca:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5cc:	95 e3       	ldi	r25, 0x35	; 53
     5ce:	9a 95       	dec	r25
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <ExitParallelProgrammingMode+0x30>
     5d2:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SR_RESET);
     5d4:	80 81       	ld	r24, Z
     5d6:	80 62       	ori	r24, 0x20	; 32
     5d8:	80 83       	st	Z, r24
	
	SR_CNTRL_PORT &= ~(1<<SRCS);
     5da:	80 81       	ld	r24, Z
     5dc:	8f 7e       	andi	r24, 0xEF	; 239
     5de:	80 83       	st	Z, r24
     5e0:	25 e3       	ldi	r18, 0x35	; 53
     5e2:	2a 95       	dec	r18
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <ExitParallelProgrammingMode+0x44>
     5e6:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SRCS);
     5e8:	80 81       	ld	r24, Z
     5ea:	80 61       	ori	r24, 0x10	; 16
     5ec:	80 83       	st	Z, r24
	
	SR_CNTRL_PORT |= (1<<SROE);
     5ee:	80 81       	ld	r24, Z
     5f0:	88 60       	ori	r24, 0x08	; 8
     5f2:	80 83       	st	Z, r24
	
	LED_PORT |= (1<<LED_Green);
     5f4:	a0 9a       	sbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	99 e6       	ldi	r25, 0x69	; 105
     5fa:	28 e1       	ldi	r18, 0x18	; 24
     5fc:	81 50       	subi	r24, 0x01	; 1
     5fe:	90 40       	sbci	r25, 0x00	; 0
     600:	20 40       	sbci	r18, 0x00	; 0
     602:	e1 f7       	brne	.-8      	; 0x5fc <ExitParallelProgrammingMode+0x5e>
     604:	00 c0       	rjmp	.+0      	; 0x606 <ExitParallelProgrammingMode+0x68>
     606:	00 00       	nop
	_delay_ms(1000);
	LED_PORT &= ~((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
     608:	84 b3       	in	r24, 0x14	; 20
     60a:	88 7f       	andi	r24, 0xF8	; 248
     60c:	84 bb       	out	0x14, r24	; 20
	
	disableVccRegulator();
     60e:	0e 94 7d 05 	call	0xafa	; 0xafa <disableVccRegulator>
	disableVppRegulator();
     612:	0e 94 79 05 	call	0xaf2	; 0xaf2 <disableVppRegulator>
	disableVLogic();
     616:	0e 94 9d 05 	call	0xb3a	; 0xb3a <disableVLogic>
     61a:	08 95       	ret

0000061c <main>:
#define ATmega48P 4

int main(void)
{
	char* SignatureBytes;
	uart2_init();
     61c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <uart2_init>
	//Write test file to external RAM 
	SPI_Init();
     620:	0e 94 88 04 	call	0x910	; 0x910 <SPI_Init>
	writeHexFileTest(); 
     624:	0e 94 a8 00 	call	0x150	; 0x150 <writeHexFileTest>
	RAMPrint(HEX_FILE_ADDRESS, 50);
     628:	42 e3       	ldi	r20, 0x32	; 50
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	cb 01       	movw	r24, r22
     632:	0e 94 28 04 	call	0x850	; 0x850 <RAMPrint>
	//Test switching circuitry code
	ProgInit();
     636:	0e 94 d5 00 	call	0x1aa	; 0x1aa <ProgInit>
	EnableProgMode(ATtiny2313);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 02 01 	call	0x204	; 0x204 <EnableProgMode>
	SignatureBytes = ReadSignatureBytes();
     640:	0e 94 30 01 	call	0x260	; 0x260 <ReadSignatureBytes>
     644:	ec 01       	movw	r28, r24
	
	printf("\nSignature Bytes: %02X %02X %02X\n", *SignatureBytes, *(SignatureBytes + 1), *(SignatureBytes + 2));
     646:	8a 81       	ldd	r24, Y+2	; 0x02
     648:	1f 92       	push	r1
     64a:	8f 93       	push	r24
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	1f 92       	push	r1
     650:	8f 93       	push	r24
     652:	88 81       	ld	r24, Y
     654:	1f 92       	push	r1
     656:	8f 93       	push	r24
     658:	82 e5       	ldi	r24, 0x52	; 82
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	9f 93       	push	r25
     65e:	8f 93       	push	r24
     660:	0e 94 df 05 	call	0xbbe	; 0xbbe <printf>
	
	if ( (*SignatureBytes == 0x1E) && (*(SignatureBytes + 1) == 0x91) && (*(SignatureBytes + 2) == 0x0A) )
     664:	8d b7       	in	r24, 0x3d	; 61
     666:	9e b7       	in	r25, 0x3e	; 62
     668:	08 96       	adiw	r24, 0x08	; 8
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	9e bf       	out	0x3e, r25	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	8d bf       	out	0x3d, r24	; 61
     674:	88 81       	ld	r24, Y
     676:	8e 31       	cpi	r24, 0x1E	; 30
     678:	d1 f4       	brne	.+52     	; 0x6ae <main+0x92>
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	81 39       	cpi	r24, 0x91	; 145
     67e:	b9 f4       	brne	.+46     	; 0x6ae <main+0x92>
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	8a 30       	cpi	r24, 0x0A	; 10
     684:	a1 f4       	brne	.+40     	; 0x6ae <main+0x92>
	{
		printf("Programming!\n");
     686:	87 e8       	ldi	r24, 0x87	; 135
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <puts>
		ChipErase();
     68e:	0e 94 a7 02 	call	0x54e	; 0x54e <ChipErase>
		printf("Done Erasing!\n");
     692:	84 e7       	ldi	r24, 0x74	; 116
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <puts>
		//ProgramFlash();
		printf("Done Programming!\n");
     69a:	82 e8       	ldi	r24, 0x82	; 130
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <puts>
		ReadFlash();
     6a2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ReadFlash>
		printf("\nDone!\n\n");
     6a6:	84 e9       	ldi	r24, 0x94	; 148
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <puts>
	}
	ExitParallelProgrammingMode();
     6ae:	0e 94 cf 02 	call	0x59e	; 0x59e <ExitParallelProgrammingMode>
     6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <main+0x96>

000006b4 <uart_sendStream>:
	putchar('m');
}


int uart_sendStream(char ch,FILE *stream)
{
     6b4:	cf 93       	push	r28
     6b6:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     6b8:	8a 30       	cpi	r24, 0x0A	; 10
     6ba:	19 f4       	brne	.+6      	; 0x6c2 <uart_sendStream+0xe>
	uart_sendStream('\r', stream);
     6bc:	8d e0       	ldi	r24, 0x0D	; 13
     6be:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <uart_sendStream>
	while (!(UCSR2A & (1<<UDRE2)));
     6c2:	e0 ed       	ldi	r30, 0xD0	; 208
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	90 81       	ld	r25, Z
     6c8:	95 ff       	sbrs	r25, 5
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <uart_sendStream+0x12>
	UDR2=ch;
     6cc:	c0 93 d6 00 	sts	0x00D6, r28
	return 0;
}
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <uart_receiveStream>:

int uart_receiveStream(FILE *stream)
{
     6d8:	cf 93       	push	r28
     6da:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR2A & (1<<RXC2)));
     6dc:	e0 ed       	ldi	r30, 0xD0	; 208
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	88 23       	and	r24, r24
     6e4:	ec f7       	brge	.-6      	; 0x6e0 <uart_receiveStream+0x8>
	ch=UDR2;
     6e6:	c0 91 d6 00 	lds	r28, 0x00D6

	/* Echo the Output Back to terminal */
	uart_sendStream(ch,stream);
     6ea:	8c 2f       	mov	r24, r28
     6ec:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <uart_sendStream>

	return ch;
}
     6f0:	8c 2f       	mov	r24, r28
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret

000006f8 <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     6f8:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     6fc:	83 e3       	ldi	r24, 0x33	; 51
     6fe:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     702:	88 e1       	ldi	r24, 0x18	; 24
     704:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     708:	86 e0       	ldi	r24, 0x06	; 6
     70a:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     70e:	8c e3       	ldi	r24, 0x3C	; 60
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	90 93 da 02 	sts	0x02DA, r25
     716:	80 93 d9 02 	sts	0x02D9, r24
     71a:	90 93 dc 02 	sts	0x02DC, r25
     71e:	80 93 db 02 	sts	0x02DB, r24
     722:	08 95       	ret

00000724 <getRAMStatus>:
}

int getRAMStatus()
{
	//Enable RAM CS
	RAM_PORT &= ~(1<<RAM_CS);
     724:	a3 98       	cbi	0x14, 3	; 20
	SPDR = RDSR;
     726:	85 e0       	ldi	r24, 0x05	; 5
     728:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     72a:	0d b4       	in	r0, 0x2d	; 45
     72c:	07 fe       	sbrs	r0, 7
     72e:	fd cf       	rjmp	.-6      	; 0x72a <getRAMStatus+0x6>
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     730:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     732:	0d b4       	in	r0, 0x2d	; 45
     734:	07 fe       	sbrs	r0, 7
     736:	fd cf       	rjmp	.-6      	; 0x732 <getRAMStatus+0xe>
	//Disable RAM CS
	RAM_PORT |= (1<<RAM_CS);
     738:	a3 9a       	sbi	0x14, 3	; 20
	return(SPDR);
     73a:	8e b5       	in	r24, 0x2e	; 46
}
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	08 95       	ret

00000740 <setRAMStatus>:

void setRAMStatus(char mode)
{
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     740:	a3 98       	cbi	0x14, 3	; 20
	SPDR = WRSR;
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     746:	0d b4       	in	r0, 0x2d	; 45
     748:	07 fe       	sbrs	r0, 7
     74a:	fd cf       	rjmp	.-6      	; 0x746 <setRAMStatus+0x6>
	// Start Data transmission
	SPDR = mode;
     74c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     74e:	0d b4       	in	r0, 0x2d	; 45
     750:	07 fe       	sbrs	r0, 7
     752:	fd cf       	rjmp	.-6      	; 0x74e <setRAMStatus+0xe>
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
     754:	a3 9a       	sbi	0x14, 3	; 20
     756:	08 95       	ret

00000758 <SPI_WriteAddress>:
}

void SPI_WriteAddress(uint32_t address)
{
     758:	26 2f       	mov	r18, r22
     75a:	97 2f       	mov	r25, r23
     75c:	48 2f       	mov	r20, r24
	SPDR = WRITE;
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     762:	0d b4       	in	r0, 0x2d	; 45
     764:	07 fe       	sbrs	r0, 7
     766:	fd cf       	rjmp	.-6      	; 0x762 <SPI_WriteAddress+0xa>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (address & 0xFF0000) >> 16;
     768:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     76a:	0d b4       	in	r0, 0x2d	; 45
     76c:	07 fe       	sbrs	r0, 7
     76e:	fd cf       	rjmp	.-6      	; 0x76a <SPI_WriteAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     770:	89 2f       	mov	r24, r25
     772:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     774:	0d b4       	in	r0, 0x2d	; 45
     776:	07 fe       	sbrs	r0, 7
     778:	fd cf       	rjmp	.-6      	; 0x774 <SPI_WriteAddress+0x1c>
	SPDR = (address & 0x0000FF);
     77a:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     77c:	0d b4       	in	r0, 0x2d	; 45
     77e:	07 fe       	sbrs	r0, 7
     780:	fd cf       	rjmp	.-6      	; 0x77c <SPI_WriteAddress+0x24>
}
     782:	08 95       	ret

00000784 <SPI_WriteData>:

void SPI_WriteData(char data)
{
	// Start Data transmission
	SPDR = data;
     784:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     786:	0d b4       	in	r0, 0x2d	; 45
     788:	07 fe       	sbrs	r0, 7
     78a:	fd cf       	rjmp	.-6      	; 0x786 <SPI_WriteData+0x2>
}
     78c:	08 95       	ret

0000078e <SPI_ReadAddress>:

void SPI_ReadAddress(uint32_t address)
{
     78e:	26 2f       	mov	r18, r22
     790:	97 2f       	mov	r25, r23
     792:	48 2f       	mov	r20, r24
	SPDR = READ;
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     798:	0d b4       	in	r0, 0x2d	; 45
     79a:	07 fe       	sbrs	r0, 7
     79c:	fd cf       	rjmp	.-6      	; 0x798 <SPI_ReadAddress+0xa>
	SPDR = (address & 0xFF0000) >> 16;
     79e:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     7a0:	0d b4       	in	r0, 0x2d	; 45
     7a2:	07 fe       	sbrs	r0, 7
     7a4:	fd cf       	rjmp	.-6      	; 0x7a0 <SPI_ReadAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     7a6:	89 2f       	mov	r24, r25
     7a8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     7aa:	0d b4       	in	r0, 0x2d	; 45
     7ac:	07 fe       	sbrs	r0, 7
     7ae:	fd cf       	rjmp	.-6      	; 0x7aa <SPI_ReadAddress+0x1c>
	SPDR = (address & 0x0000FF);
     7b0:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     7b2:	0d b4       	in	r0, 0x2d	; 45
     7b4:	07 fe       	sbrs	r0, 7
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <SPI_ReadAddress+0x24>
}
     7b8:	08 95       	ret

000007ba <SPI_ReadData>:

char SPI_ReadData()
{
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     7ba:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     7bc:	0d b4       	in	r0, 0x2d	; 45
     7be:	07 fe       	sbrs	r0, 7
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <SPI_ReadData+0x2>
	return(SPDR);
     7c2:	8e b5       	in	r24, 0x2e	; 46
}
     7c4:	08 95       	ret

000007c6 <RAMWrite>:

uint16_t RAMWrite(char* data, uint16_t startAddress, uint16_t length)
{
     7c6:	af 92       	push	r10
     7c8:	bf 92       	push	r11
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ec 01       	movw	r28, r24
     7dc:	8b 01       	movw	r16, r22
     7de:	5a 01       	movw	r10, r20
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     7e0:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     7e2:	6b 01       	movw	r12, r22
     7e4:	e1 2c       	mov	r14, r1
     7e6:	f1 2c       	mov	r15, r1
     7e8:	c7 01       	movw	r24, r14
     7ea:	b6 01       	movw	r22, r12
     7ec:	0e 94 ac 03 	call	0x758	; 0x758 <SPI_WriteAddress>
	SPI_WriteData(0x00);
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	0e 94 c2 03 	call	0x784	; 0x784 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     7f6:	a3 9a       	sbi	0x14, 3	; 20
	setRAMStatus(SEQ);
     7f8:	80 e4       	ldi	r24, 0x40	; 64
     7fa:	0e 94 a0 03 	call	0x740	; 0x740 <setRAMStatus>
	getRAMStatus();
     7fe:	0e 94 92 03 	call	0x724	; 0x724 <getRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     802:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     804:	c7 01       	movw	r24, r14
     806:	b6 01       	movw	r22, r12
     808:	0e 94 ac 03 	call	0x758	; 0x758 <SPI_WriteAddress>
	for(int i = 0; i < length; i++)
     80c:	a1 14       	cp	r10, r1
     80e:	b1 04       	cpc	r11, r1
     810:	91 f0       	breq	.+36     	; 0x836 <RAMWrite+0x70>
     812:	65 01       	movw	r12, r10
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	e1 2c       	mov	r14, r1
     81a:	f1 2c       	mov	r15, r1
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
     81c:	fe 01       	movw	r30, r28
     81e:	e8 0f       	add	r30, r24
     820:	f9 1f       	adc	r31, r25
     822:	80 81       	ld	r24, Z
     824:	0e 94 c2 03 	call	0x784	; 0x784 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
	setRAMStatus(SEQ);
	getRAMStatus();
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_WriteAddress(startAddress);
	for(int i = 0; i < length; i++)
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	e8 1a       	sub	r14, r24
     82c:	f8 0a       	sbc	r15, r24
     82e:	c7 01       	movw	r24, r14
     830:	ec 14       	cp	r14, r12
     832:	fd 04       	cpc	r15, r13
     834:	99 f7       	brne	.-26     	; 0x81c <RAMWrite+0x56>
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
	}
	RAM_PORT |= (1<<RAM_CS);
     836:	a3 9a       	sbi	0x14, 3	; 20
		

	return startAddress; 
}
     838:	c8 01       	movw	r24, r16
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	08 95       	ret

00000850 <RAMPrint>:
	//printf("%d\n", buffer);
	return buffer; 
}

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	c6 2f       	mov	r28, r22
     85e:	d7 2f       	mov	r29, r23
     860:	18 2f       	mov	r17, r24
     862:	09 2f       	mov	r16, r25
     864:	7a 01       	movw	r14, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     866:	80 e4       	ldi	r24, 0x40	; 64
     868:	0e 94 a0 03 	call	0x740	; 0x740 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     86c:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     86e:	6c 2f       	mov	r22, r28
     870:	7d 2f       	mov	r23, r29
     872:	81 2f       	mov	r24, r17
     874:	90 2f       	mov	r25, r16
     876:	0e 94 c7 03 	call	0x78e	; 0x78e <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	df 93       	push	r29
     880:	cf 93       	push	r28
     882:	8c e9       	ldi	r24, 0x9C	; 156
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	9f 93       	push	r25
     888:	8f 93       	push	r24
     88a:	0e 94 df 05 	call	0xbbe	; 0xbbe <printf>
	int i; 
	for(i=0; i<length; i++)
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	e1 14       	cp	r14, r1
     89c:	f1 04       	cpc	r15, r1
     89e:	a9 f0       	breq	.+42     	; 0x8ca <RAMPrint+0x7a>
     8a0:	c0 e0       	ldi	r28, 0x00	; 0
     8a2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("0x%02X ", SPI_ReadData());
     8a4:	0a e4       	ldi	r16, 0x4A	; 74
     8a6:	12 e0       	ldi	r17, 0x02	; 2
     8a8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <SPI_ReadData>
     8ac:	1f 92       	push	r1
     8ae:	8f 93       	push	r24
     8b0:	1f 93       	push	r17
     8b2:	0f 93       	push	r16
     8b4:	0e 94 df 05 	call	0xbbe	; 0xbbe <printf>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     8b8:	21 96       	adiw	r28, 0x01	; 1
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	ce 15       	cp	r28, r14
     8c4:	df 05       	cpc	r29, r15
     8c6:	81 f7       	brne	.-32     	; 0x8a8 <RAMPrint+0x58>
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <RAMPrint+0x7e>
     8ca:	e1 2c       	mov	r14, r1
     8cc:	f1 2c       	mov	r15, r1
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     8ce:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     8d0:	ff 92       	push	r15
     8d2:	ef 92       	push	r14
     8d4:	8d ea       	ldi	r24, 0xAD	; 173
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	9f 93       	push	r25
     8da:	8f 93       	push	r24
     8dc:	0e 94 df 05 	call	0xbbe	; 0xbbe <printf>
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	08 95       	ret

000008f6 <RAMWriteByte>:

void RAMWriteByte(char data, uint16_t address)
{
     8f6:	cf 93       	push	r28
     8f8:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     8fa:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 ac 03 	call	0x758	; 0x758 <SPI_WriteAddress>
	SPI_WriteData(data);
     904:	8c 2f       	mov	r24, r28
     906:	0e 94 c2 03 	call	0x784	; 0x784 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     90a:	a3 9a       	sbi	0x14, 3	; 20
}
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
     910:	87 e0       	ldi	r24, 0x07	; 7
     912:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     914:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     916:	a3 9a       	sbi	0x14, 3	; 20
	
	RAM_HOLD_DDR |= (1<<RAM_HOLD);
     918:	27 9a       	sbi	0x04, 7	; 4
	RAM_HOLD_PORT |= (1<<RAM_HOLD);
     91a:	2f 9a       	sbi	0x05, 7	; 5
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     91c:	81 e5       	ldi	r24, 0x51	; 81
     91e:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	82 e3       	ldi	r24, 0x32	; 50
     926:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <RAMWriteByte>
     92a:	08 95       	ret

0000092c <SPI_Switching_Circuitry_Init>:


void SPI_Switching_Circuitry_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1<<SS));
     92c:	84 b1       	in	r24, 0x04	; 4
     92e:	87 60       	ori	r24, 0x07	; 7
     930:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1<<MISO);
     932:	23 98       	cbi	0x04, 3	; 4
	
	// Enable SPI, Master Mode 0, set the clock rate fck/64
	SPCR = ((1<<SPE)|(1<<MSTR)|(1<<SPR1));
     934:	82 e5       	ldi	r24, 0x52	; 82
     936:	8c bd       	out	0x2c, r24	; 44
	
	LT_OE_DDR |= 1<<LTOE;
     938:	9d 9a       	sbi	0x13, 5	; 19
	SR_CNTRL_DDR |= ((1<<SR_RESET) | (1<<SRCS) | (1<<SROE));
     93a:	e4 e0       	ldi	r30, 0x04	; 4
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	80 81       	ld	r24, Z
     940:	88 63       	ori	r24, 0x38	; 56
     942:	80 83       	st	Z, r24
	SR_CNTRL_PORT |= ((1<<SRCS) | (1<<SROE));
     944:	e5 e0       	ldi	r30, 0x05	; 5
     946:	f1 e0       	ldi	r31, 0x01	; 1
     948:	80 81       	ld	r24, Z
     94a:	88 61       	ori	r24, 0x18	; 24
     94c:	80 83       	st	Z, r24
	SR_CNTRL_PORT &= ~(1<<SR_RESET);
     94e:	80 81       	ld	r24, Z
     950:	8f 7d       	andi	r24, 0xDF	; 223
     952:	80 83       	st	Z, r24
	LT_OE_PORT |= 1<<LTOE;
     954:	a5 9a       	sbi	0x14, 5	; 20
     956:	08 95       	ret

00000958 <SPI_Switching_Circuitry_Write>:
}

void SPI_Switching_Circuitry_Write(unsigned char SPI_Data)
{
	// Start Write transmission
	SPDR = SPI_Data;
     958:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     95a:	0d b4       	in	r0, 0x2d	; 45
     95c:	07 fe       	sbrs	r0, 7
     95e:	fd cf       	rjmp	.-6      	; 0x95a <SPI_Switching_Circuitry_Write+0x2>
}
     960:	08 95       	ret

00000962 <SwitchingCircuitryEnable>:

void SwitchingCircuitryEnable()
{
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
     962:	e5 e0       	ldi	r30, 0x05	; 5
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	80 81       	ld	r24, Z
     968:	8f 7d       	andi	r24, 0xDF	; 223
     96a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     96c:	82 e4       	ldi	r24, 0x42	; 66
     96e:	8a 95       	dec	r24
     970:	f1 f7       	brne	.-4      	; 0x96e <SwitchingCircuitryEnable+0xc>
     972:	00 c0       	rjmp	.+0      	; 0x974 <SwitchingCircuitryEnable+0x12>
	_delay_us(25);
	SR_CNTRL_PORT |= (1<<SR_RESET);
     974:	80 81       	ld	r24, Z
     976:	80 62       	ori	r24, 0x20	; 32
     978:	80 83       	st	Z, r24
	
	SR_CNTRL_PORT &= ~(1<<SROE);
     97a:	80 81       	ld	r24, Z
     97c:	87 7f       	andi	r24, 0xF7	; 247
     97e:	80 83       	st	Z, r24

	SR_CNTRL_PORT &= ~(1<<SRCS); //Applying VCC and GND
     980:	80 81       	ld	r24, Z
     982:	8f 7e       	andi	r24, 0xEF	; 239
     984:	80 83       	st	Z, r24
     986:	08 95       	ret

00000988 <SetShiftRegData>:
	}
}


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
     988:	db 01       	movw	r26, r22
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
	{
		ShiftRegData[pinType][i] = *(data + i); 
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	fc 01       	movw	r30, r24
     98e:	ee 0f       	add	r30, r30
     990:	ff 1f       	adc	r31, r31
     992:	ee 0f       	add	r30, r30
     994:	ff 1f       	adc	r31, r31
     996:	e8 0f       	add	r30, r24
     998:	f9 1f       	adc	r31, r25
     99a:	e5 54       	subi	r30, 0x45	; 69
     99c:	fd 4f       	sbci	r31, 0xFD	; 253


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
	{
		ShiftRegData[pinType][i] = *(data + i); 
     9a2:	2d 91       	ld	r18, X+
     9a4:	21 93       	st	Z+, r18


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	85 30       	cpi	r24, 0x05	; 5
     9aa:	91 05       	cpc	r25, r1
     9ac:	d1 f7       	brne	.-12     	; 0x9a2 <SetShiftRegData+0x1a>
	{
		ShiftRegData[pinType][i] = *(data + i); 
	}
}
     9ae:	08 95       	ret

000009b0 <WriteShiftRegData>:

void WriteShiftRegData()
{
     9b0:	af 92       	push	r10
     9b2:	bf 92       	push	r11
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
	SwitchingCircuitryEnable(); 
     9c4:	0e 94 b1 04 	call	0x962	; 0x962 <SwitchingCircuitryEnable>
     9c8:	0f 2e       	mov	r0, r31
     9ca:	fb eb       	ldi	r31, 0xBB	; 187
     9cc:	ef 2e       	mov	r14, r31
     9ce:	f2 e0       	ldi	r31, 0x02	; 2
     9d0:	ff 2e       	mov	r15, r31
     9d2:	f0 2d       	mov	r31, r0
     9d4:	0f 2e       	mov	r0, r31
     9d6:	f9 ed       	ldi	r31, 0xD9	; 217
     9d8:	cf 2e       	mov	r12, r31
     9da:	f2 e0       	ldi	r31, 0x02	; 2
     9dc:	df 2e       	mov	r13, r31
     9de:	f0 2d       	mov	r31, r0
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     9e0:	a1 2c       	mov	r10, r1
     9e2:	b1 2c       	mov	r11, r1
     9e4:	13 c0       	rjmp	.+38     	; 0xa0c <WriteShiftRegData+0x5c>
	
	for(int i=0; i<PIN_TYPES; i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
     9e6:	f8 01       	movw	r30, r16
     9e8:	81 91       	ld	r24, Z+
     9ea:	8f 01       	movw	r16, r30
     9ec:	0e 94 ac 04 	call	0x958	; 0x958 <SPI_Switching_Circuitry_Write>
     9f0:	fa e1       	ldi	r31, 0x1A	; 26
     9f2:	fa 95       	dec	r31
     9f4:	f1 f7       	brne	.-4      	; 0x9f2 <WriteShiftRegData+0x42>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <WriteShiftRegData+0x48>
{
	SwitchingCircuitryEnable(); 
	
	for(int i=0; i<PIN_TYPES; i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
     9f8:	21 96       	adiw	r28, 0x01	; 1
     9fa:	c5 30       	cpi	r28, 0x05	; 5
     9fc:	d1 05       	cpc	r29, r1
     9fe:	99 f7       	brne	.-26     	; 0x9e6 <WriteShiftRegData+0x36>
     a00:	85 e0       	ldi	r24, 0x05	; 5
     a02:	e8 0e       	add	r14, r24
     a04:	f1 1c       	adc	r15, r1

void WriteShiftRegData()
{
	SwitchingCircuitryEnable(); 
	
	for(int i=0; i<PIN_TYPES; i++)
     a06:	ec 14       	cp	r14, r12
     a08:	fd 04       	cpc	r15, r13
     a0a:	21 f0       	breq	.+8      	; 0xa14 <WriteShiftRegData+0x64>
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     a0c:	87 01       	movw	r16, r14
     a0e:	ca 2d       	mov	r28, r10
     a10:	db 2d       	mov	r29, r11
     a12:	e9 cf       	rjmp	.-46     	; 0x9e6 <WriteShiftRegData+0x36>
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
			_delay_us(10); 
		}
	}
	
	SR_CNTRL_PORT |= (1<<SRCS);
     a14:	e5 e0       	ldi	r30, 0x05	; 5
     a16:	f1 e0       	ldi	r31, 0x01	; 1
     a18:	80 81       	ld	r24, Z
     a1a:	80 61       	ori	r24, 0x10	; 16
     a1c:	80 83       	st	Z, r24
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	df 90       	pop	r13
     a2c:	cf 90       	pop	r12
     a2e:	bf 90       	pop	r11
     a30:	af 90       	pop	r10
     a32:	08 95       	ret

00000a34 <setAtTiny2313>:

void setAtTiny2313()
{
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <setAtTiny2313+0xa>
     a3e:	00 d0       	rcall	.+0      	; 0xa40 <setAtTiny2313+0xc>
     a40:	1f 92       	push	r1
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
	char shiftTempBuff[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
     a46:	8e 01       	movw	r16, r28
     a48:	0f 5f       	subi	r16, 0xFF	; 255
     a4a:	1f 4f       	sbci	r17, 0xFF	; 255
     a4c:	85 e0       	ldi	r24, 0x05	; 5
     a4e:	f8 01       	movw	r30, r16
     a50:	11 92       	st	Z+, r1
     a52:	8a 95       	dec	r24
     a54:	e9 f7       	brne	.-6      	; 0xa50 <setAtTiny2313+0x1c>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     a56:	b8 01       	movw	r22, r16
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 c4 04 	call	0x988	; 0x988 <SetShiftRegData>
	//Modify Values and shift again 
	shiftTempBuff[0] = 0x00;
     a5e:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     a60:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
     a62:	88 e0       	ldi	r24, 0x08	; 8
     a64:	8b 83       	std	Y+3, r24	; 0x03
	shiftTempBuff[3] = 0x00;
     a66:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     a68:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
     a6a:	b8 01       	movw	r22, r16
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	0e 94 c4 04 	call	0x988	; 0x988 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     a72:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     a74:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     a76:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     a78:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     a7a:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
     a7c:	b8 01       	movw	r22, r16
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	0e 94 c4 04 	call	0x988	; 0x988 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     a84:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
     a86:	80 e2       	ldi	r24, 0x20	; 32
     a88:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
     a8a:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     a8c:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     a8e:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
     a90:	b8 01       	movw	r22, r16
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	0e 94 c4 04 	call	0x988	; 0x988 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     a98:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     a9a:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     a9c:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
     a9e:	84 e0       	ldi	r24, 0x04	; 4
     aa0:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     aa2:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
     aa4:	b8 01       	movw	r22, r16
     aa6:	0e 94 c4 04 	call	0x988	; 0x988 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     aaa:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x1F;
     aac:	8f e1       	ldi	r24, 0x1F	; 31
     aae:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0xF7;
     ab0:	87 ef       	ldi	r24, 0xF7	; 247
     ab2:	8b 83       	std	Y+3, r24	; 0x03
	shiftTempBuff[3] = 0xD0;
     ab4:	80 ed       	ldi	r24, 0xD0	; 208
     ab6:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     ab8:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(LOGIC, shiftTempBuff);
     aba:	b8 01       	movw	r22, r16
     abc:	85 e0       	ldi	r24, 0x05	; 5
     abe:	0e 94 c4 04 	call	0x988	; 0x988 <SetShiftRegData>
	
	WriteShiftRegData();
     ac2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <WriteShiftRegData>
}
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <voltageControlInit>:
	VCNTRL_PORT &= ~((1<<VPP_9V) | (1<<VPP_12V) | (1<VPP_13V));
}

void voltageControlInit()
{
	VCNTRL_DDR = 0xFF;
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	80 bb       	out	0x10, r24	; 16
	VCNTRL_PORT = 0x00;
     ade:	11 ba       	out	0x11, r1	; 17
	
	VEN_DDR |= ((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
     ae0:	84 b1       	in	r24, 0x04	; 4
     ae2:	80 67       	ori	r24, 0x70	; 112
     ae4:	84 b9       	out	0x04, r24	; 4
	VEN_PORT &= ~((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
     ae6:	85 b1       	in	r24, 0x05	; 5
     ae8:	8f 78       	andi	r24, 0x8F	; 143
     aea:	85 b9       	out	0x05, r24	; 5
     aec:	08 95       	ret

00000aee <enableVppRegulator>:
}

void enableVppRegulator()
{
	VEN_PORT |= (1<<VPPENABLE); 
     aee:	2c 9a       	sbi	0x05, 4	; 5
     af0:	08 95       	ret

00000af2 <disableVppRegulator>:
}

void disableVppRegulator()
{
	VEN_PORT &= ~((1<<VPPENABLE));
     af2:	2c 98       	cbi	0x05, 4	; 5
     af4:	08 95       	ret

00000af6 <enableVccRegulator>:
	VCNTRL_PORT &= ~((1<<VCC_3_3V) | (1<<VCC_5V) | (1<<VCC_6_5V));
}

void enableVccRegulator() 
{
	VEN_PORT |= (1<<VCCENABLE);
     af6:	2d 9a       	sbi	0x05, 5	; 5
     af8:	08 95       	ret

00000afa <disableVccRegulator>:
}

void disableVccRegulator()
{
	VEN_PORT &= ~(1<<VCCENABLE);
     afa:	2d 98       	cbi	0x05, 5	; 5
     afc:	08 95       	ret

00000afe <setVcc>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VCC_3_3V || VCC_5V || VCC_6_5V))
	//	return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     afe:	41 b3       	in	r20, 0x11	; 17
     b00:	21 e0       	ldi	r18, 0x01	; 1
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	b9 01       	movw	r22, r18
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <setVcc+0xe>
     b08:	66 0f       	add	r22, r22
     b0a:	77 1f       	adc	r23, r23
     b0c:	8a 95       	dec	r24
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <setVcc+0xa>
     b10:	cb 01       	movw	r24, r22
     b12:	84 2b       	or	r24, r20
     b14:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	08 95       	ret

00000b1a <setVpp>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VPP_9V || VPP_12V || VPP_13V))
		//return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     b1a:	41 b3       	in	r20, 0x11	; 17
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	b9 01       	movw	r22, r18
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <setVpp+0xe>
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	8a 95       	dec	r24
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <setVpp+0xa>
     b2c:	cb 01       	movw	r24, r22
     b2e:	84 2b       	or	r24, r20
     b30:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	08 95       	ret

00000b36 <enableVLogic>:
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
}

void enableVLogic()
{
	VEN_PORT |= (1<<VLENABLE);
     b36:	2e 9a       	sbi	0x05, 6	; 5
     b38:	08 95       	ret

00000b3a <disableVLogic>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
     b3a:	2e 98       	cbi	0x05, 6	; 5
     b3c:	08 95       	ret

00000b3e <setVLogic>:
	//prevents accidental triggering of the wrong regulator
	//if(voltageLevel != (VL_3_3V || VL_5V))
	//	return 0;
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     b3e:	41 b3       	in	r20, 0x11	; 17
     b40:	21 e0       	ldi	r18, 0x01	; 1
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	b9 01       	movw	r22, r18
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <setVLogic+0xe>
     b48:	66 0f       	add	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	8a 95       	dec	r24
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <setVLogic+0xa>
     b50:	cb 01       	movw	r24, r22
     b52:	84 2b       	or	r24, r20
     b54:	81 bb       	out	0x11, r24	; 17
		return 1;
	//}
}
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	08 95       	ret

00000b5a <fputc>:
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	18 2f       	mov	r17, r24
     b64:	09 2f       	mov	r16, r25
     b66:	eb 01       	movw	r28, r22
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	81 fd       	sbrc	r24, 1
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <fputc+0x1a>
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	9f ef       	ldi	r25, 0xFF	; 255
     b72:	20 c0       	rjmp	.+64     	; 0xbb4 <fputc+0x5a>
     b74:	82 ff       	sbrs	r24, 2
     b76:	10 c0       	rjmp	.+32     	; 0xb98 <fputc+0x3e>
     b78:	4e 81       	ldd	r20, Y+6	; 0x06
     b7a:	5f 81       	ldd	r21, Y+7	; 0x07
     b7c:	2c 81       	ldd	r18, Y+4	; 0x04
     b7e:	3d 81       	ldd	r19, Y+5	; 0x05
     b80:	42 17       	cp	r20, r18
     b82:	53 07       	cpc	r21, r19
     b84:	7c f4       	brge	.+30     	; 0xba4 <fputc+0x4a>
     b86:	e8 81       	ld	r30, Y
     b88:	f9 81       	ldd	r31, Y+1	; 0x01
     b8a:	9f 01       	movw	r18, r30
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	39 83       	std	Y+1, r19	; 0x01
     b92:	28 83       	st	Y, r18
     b94:	10 83       	st	Z, r17
     b96:	06 c0       	rjmp	.+12     	; 0xba4 <fputc+0x4a>
     b98:	e8 85       	ldd	r30, Y+8	; 0x08
     b9a:	f9 85       	ldd	r31, Y+9	; 0x09
     b9c:	81 2f       	mov	r24, r17
     b9e:	09 95       	icall
     ba0:	89 2b       	or	r24, r25
     ba2:	29 f7       	brne	.-54     	; 0xb6e <fputc+0x14>
     ba4:	2e 81       	ldd	r18, Y+6	; 0x06
     ba6:	3f 81       	ldd	r19, Y+7	; 0x07
     ba8:	2f 5f       	subi	r18, 0xFF	; 255
     baa:	3f 4f       	sbci	r19, 0xFF	; 255
     bac:	3f 83       	std	Y+7, r19	; 0x07
     bae:	2e 83       	std	Y+6, r18	; 0x06
     bb0:	81 2f       	mov	r24, r17
     bb2:	90 2f       	mov	r25, r16
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	08 95       	ret

00000bbe <printf>:
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 ee       	ldi	r30, 0xE5	; 229
     bc4:	f5 e0       	ldi	r31, 0x05	; 5
     bc6:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__prologue_saves__+0x20>
     bca:	fe 01       	movw	r30, r28
     bcc:	35 96       	adiw	r30, 0x05	; 5
     bce:	61 91       	ld	r22, Z+
     bd0:	71 91       	ld	r23, Z+
     bd2:	af 01       	movw	r20, r30
     bd4:	80 91 db 02 	lds	r24, 0x02DB
     bd8:	90 91 dc 02 	lds	r25, 0x02DC
     bdc:	0e 94 20 06 	call	0xc40	; 0xc40 <vfprintf>
     be0:	e2 e0       	ldi	r30, 0x02	; 2
     be2:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__epilogue_restores__+0x20>

00000be6 <puts>:
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	e0 91 db 02 	lds	r30, 0x02DB
     bf2:	f0 91 dc 02 	lds	r31, 0x02DC
     bf6:	23 81       	ldd	r18, Z+3	; 0x03
     bf8:	21 ff       	sbrs	r18, 1
     bfa:	1b c0       	rjmp	.+54     	; 0xc32 <puts+0x4c>
     bfc:	ec 01       	movw	r28, r24
     bfe:	00 e0       	ldi	r16, 0x00	; 0
     c00:	10 e0       	ldi	r17, 0x00	; 0
     c02:	89 91       	ld	r24, Y+
     c04:	60 91 db 02 	lds	r22, 0x02DB
     c08:	70 91 dc 02 	lds	r23, 0x02DC
     c0c:	db 01       	movw	r26, r22
     c0e:	18 96       	adiw	r26, 0x08	; 8
     c10:	ed 91       	ld	r30, X+
     c12:	fc 91       	ld	r31, X
     c14:	19 97       	sbiw	r26, 0x09	; 9
     c16:	88 23       	and	r24, r24
     c18:	31 f0       	breq	.+12     	; 0xc26 <puts+0x40>
     c1a:	09 95       	icall
     c1c:	89 2b       	or	r24, r25
     c1e:	89 f3       	breq	.-30     	; 0xc02 <puts+0x1c>
     c20:	0f ef       	ldi	r16, 0xFF	; 255
     c22:	1f ef       	ldi	r17, 0xFF	; 255
     c24:	ee cf       	rjmp	.-36     	; 0xc02 <puts+0x1c>
     c26:	8a e0       	ldi	r24, 0x0A	; 10
     c28:	09 95       	icall
     c2a:	89 2b       	or	r24, r25
     c2c:	11 f4       	brne	.+4      	; 0xc32 <puts+0x4c>
     c2e:	c8 01       	movw	r24, r16
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <puts+0x50>
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	08 95       	ret

00000c40 <vfprintf>:
     c40:	ac e0       	ldi	r26, 0x0C	; 12
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e6 e2       	ldi	r30, 0x26	; 38
     c46:	f6 e0       	ldi	r31, 0x06	; 6
     c48:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__prologue_saves__>
     c4c:	7c 01       	movw	r14, r24
     c4e:	6b 01       	movw	r12, r22
     c50:	8a 01       	movw	r16, r20
     c52:	fc 01       	movw	r30, r24
     c54:	17 82       	std	Z+7, r1	; 0x07
     c56:	16 82       	std	Z+6, r1	; 0x06
     c58:	83 81       	ldd	r24, Z+3	; 0x03
     c5a:	81 ff       	sbrs	r24, 1
     c5c:	bd c1       	rjmp	.+890    	; 0xfd8 <vfprintf+0x398>
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	4c 01       	movw	r8, r24
     c64:	f7 01       	movw	r30, r14
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	f6 01       	movw	r30, r12
     c6a:	93 fd       	sbrc	r25, 3
     c6c:	85 91       	lpm	r24, Z+
     c6e:	93 ff       	sbrs	r25, 3
     c70:	81 91       	ld	r24, Z+
     c72:	6f 01       	movw	r12, r30
     c74:	88 23       	and	r24, r24
     c76:	09 f4       	brne	.+2      	; 0xc7a <vfprintf+0x3a>
     c78:	ab c1       	rjmp	.+854    	; 0xfd0 <vfprintf+0x390>
     c7a:	85 32       	cpi	r24, 0x25	; 37
     c7c:	39 f4       	brne	.+14     	; 0xc8c <vfprintf+0x4c>
     c7e:	93 fd       	sbrc	r25, 3
     c80:	85 91       	lpm	r24, Z+
     c82:	93 ff       	sbrs	r25, 3
     c84:	81 91       	ld	r24, Z+
     c86:	6f 01       	movw	r12, r30
     c88:	85 32       	cpi	r24, 0x25	; 37
     c8a:	29 f4       	brne	.+10     	; 0xc96 <vfprintf+0x56>
     c8c:	b7 01       	movw	r22, r14
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 ad 05 	call	0xb5a	; 0xb5a <fputc>
     c94:	e7 cf       	rjmp	.-50     	; 0xc64 <vfprintf+0x24>
     c96:	51 2c       	mov	r5, r1
     c98:	31 2c       	mov	r3, r1
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	20 32       	cpi	r18, 0x20	; 32
     c9e:	a0 f4       	brcc	.+40     	; 0xcc8 <vfprintf+0x88>
     ca0:	8b 32       	cpi	r24, 0x2B	; 43
     ca2:	69 f0       	breq	.+26     	; 0xcbe <vfprintf+0x7e>
     ca4:	30 f4       	brcc	.+12     	; 0xcb2 <vfprintf+0x72>
     ca6:	80 32       	cpi	r24, 0x20	; 32
     ca8:	59 f0       	breq	.+22     	; 0xcc0 <vfprintf+0x80>
     caa:	83 32       	cpi	r24, 0x23	; 35
     cac:	69 f4       	brne	.+26     	; 0xcc8 <vfprintf+0x88>
     cae:	20 61       	ori	r18, 0x10	; 16
     cb0:	2c c0       	rjmp	.+88     	; 0xd0a <vfprintf+0xca>
     cb2:	8d 32       	cpi	r24, 0x2D	; 45
     cb4:	39 f0       	breq	.+14     	; 0xcc4 <vfprintf+0x84>
     cb6:	80 33       	cpi	r24, 0x30	; 48
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <vfprintf+0x88>
     cba:	21 60       	ori	r18, 0x01	; 1
     cbc:	26 c0       	rjmp	.+76     	; 0xd0a <vfprintf+0xca>
     cbe:	22 60       	ori	r18, 0x02	; 2
     cc0:	24 60       	ori	r18, 0x04	; 4
     cc2:	23 c0       	rjmp	.+70     	; 0xd0a <vfprintf+0xca>
     cc4:	28 60       	ori	r18, 0x08	; 8
     cc6:	21 c0       	rjmp	.+66     	; 0xd0a <vfprintf+0xca>
     cc8:	27 fd       	sbrc	r18, 7
     cca:	27 c0       	rjmp	.+78     	; 0xd1a <vfprintf+0xda>
     ccc:	30 ed       	ldi	r19, 0xD0	; 208
     cce:	38 0f       	add	r19, r24
     cd0:	3a 30       	cpi	r19, 0x0A	; 10
     cd2:	78 f4       	brcc	.+30     	; 0xcf2 <vfprintf+0xb2>
     cd4:	26 ff       	sbrs	r18, 6
     cd6:	06 c0       	rjmp	.+12     	; 0xce4 <vfprintf+0xa4>
     cd8:	fa e0       	ldi	r31, 0x0A	; 10
     cda:	5f 9e       	mul	r5, r31
     cdc:	30 0d       	add	r19, r0
     cde:	11 24       	eor	r1, r1
     ce0:	53 2e       	mov	r5, r19
     ce2:	13 c0       	rjmp	.+38     	; 0xd0a <vfprintf+0xca>
     ce4:	8a e0       	ldi	r24, 0x0A	; 10
     ce6:	38 9e       	mul	r3, r24
     ce8:	30 0d       	add	r19, r0
     cea:	11 24       	eor	r1, r1
     cec:	33 2e       	mov	r3, r19
     cee:	20 62       	ori	r18, 0x20	; 32
     cf0:	0c c0       	rjmp	.+24     	; 0xd0a <vfprintf+0xca>
     cf2:	8e 32       	cpi	r24, 0x2E	; 46
     cf4:	21 f4       	brne	.+8      	; 0xcfe <vfprintf+0xbe>
     cf6:	26 fd       	sbrc	r18, 6
     cf8:	6b c1       	rjmp	.+726    	; 0xfd0 <vfprintf+0x390>
     cfa:	20 64       	ori	r18, 0x40	; 64
     cfc:	06 c0       	rjmp	.+12     	; 0xd0a <vfprintf+0xca>
     cfe:	8c 36       	cpi	r24, 0x6C	; 108
     d00:	11 f4       	brne	.+4      	; 0xd06 <vfprintf+0xc6>
     d02:	20 68       	ori	r18, 0x80	; 128
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <vfprintf+0xca>
     d06:	88 36       	cpi	r24, 0x68	; 104
     d08:	41 f4       	brne	.+16     	; 0xd1a <vfprintf+0xda>
     d0a:	f6 01       	movw	r30, r12
     d0c:	93 fd       	sbrc	r25, 3
     d0e:	85 91       	lpm	r24, Z+
     d10:	93 ff       	sbrs	r25, 3
     d12:	81 91       	ld	r24, Z+
     d14:	6f 01       	movw	r12, r30
     d16:	81 11       	cpse	r24, r1
     d18:	c1 cf       	rjmp	.-126    	; 0xc9c <vfprintf+0x5c>
     d1a:	98 2f       	mov	r25, r24
     d1c:	9f 7d       	andi	r25, 0xDF	; 223
     d1e:	95 54       	subi	r25, 0x45	; 69
     d20:	93 30       	cpi	r25, 0x03	; 3
     d22:	28 f4       	brcc	.+10     	; 0xd2e <vfprintf+0xee>
     d24:	0c 5f       	subi	r16, 0xFC	; 252
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	ff e3       	ldi	r31, 0x3F	; 63
     d2a:	f9 83       	std	Y+1, r31	; 0x01
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <vfprintf+0x108>
     d2e:	83 36       	cpi	r24, 0x63	; 99
     d30:	31 f0       	breq	.+12     	; 0xd3e <vfprintf+0xfe>
     d32:	83 37       	cpi	r24, 0x73	; 115
     d34:	71 f0       	breq	.+28     	; 0xd52 <vfprintf+0x112>
     d36:	83 35       	cpi	r24, 0x53	; 83
     d38:	09 f0       	breq	.+2      	; 0xd3c <vfprintf+0xfc>
     d3a:	5b c0       	rjmp	.+182    	; 0xdf2 <vfprintf+0x1b2>
     d3c:	22 c0       	rjmp	.+68     	; 0xd82 <vfprintf+0x142>
     d3e:	f8 01       	movw	r30, r16
     d40:	80 81       	ld	r24, Z
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	0e 5f       	subi	r16, 0xFE	; 254
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	44 24       	eor	r4, r4
     d4a:	43 94       	inc	r4
     d4c:	51 2c       	mov	r5, r1
     d4e:	54 01       	movw	r10, r8
     d50:	15 c0       	rjmp	.+42     	; 0xd7c <vfprintf+0x13c>
     d52:	38 01       	movw	r6, r16
     d54:	f2 e0       	ldi	r31, 0x02	; 2
     d56:	6f 0e       	add	r6, r31
     d58:	71 1c       	adc	r7, r1
     d5a:	f8 01       	movw	r30, r16
     d5c:	a0 80       	ld	r10, Z
     d5e:	b1 80       	ldd	r11, Z+1	; 0x01
     d60:	26 ff       	sbrs	r18, 6
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <vfprintf+0x12a>
     d64:	65 2d       	mov	r22, r5
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <vfprintf+0x12e>
     d6a:	6f ef       	ldi	r22, 0xFF	; 255
     d6c:	7f ef       	ldi	r23, 0xFF	; 255
     d6e:	c5 01       	movw	r24, r10
     d70:	2c 87       	std	Y+12, r18	; 0x0c
     d72:	0e 94 fd 07 	call	0xffa	; 0xffa <strnlen>
     d76:	2c 01       	movw	r4, r24
     d78:	83 01       	movw	r16, r6
     d7a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d7c:	2f 77       	andi	r18, 0x7F	; 127
     d7e:	22 2e       	mov	r2, r18
     d80:	17 c0       	rjmp	.+46     	; 0xdb0 <vfprintf+0x170>
     d82:	38 01       	movw	r6, r16
     d84:	f2 e0       	ldi	r31, 0x02	; 2
     d86:	6f 0e       	add	r6, r31
     d88:	71 1c       	adc	r7, r1
     d8a:	f8 01       	movw	r30, r16
     d8c:	a0 80       	ld	r10, Z
     d8e:	b1 80       	ldd	r11, Z+1	; 0x01
     d90:	26 ff       	sbrs	r18, 6
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <vfprintf+0x15a>
     d94:	65 2d       	mov	r22, r5
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0x15e>
     d9a:	6f ef       	ldi	r22, 0xFF	; 255
     d9c:	7f ef       	ldi	r23, 0xFF	; 255
     d9e:	c5 01       	movw	r24, r10
     da0:	2c 87       	std	Y+12, r18	; 0x0c
     da2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <strnlen_P>
     da6:	2c 01       	movw	r4, r24
     da8:	2c 85       	ldd	r18, Y+12	; 0x0c
     daa:	20 68       	ori	r18, 0x80	; 128
     dac:	22 2e       	mov	r2, r18
     dae:	83 01       	movw	r16, r6
     db0:	23 fc       	sbrc	r2, 3
     db2:	1b c0       	rjmp	.+54     	; 0xdea <vfprintf+0x1aa>
     db4:	83 2d       	mov	r24, r3
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	48 16       	cp	r4, r24
     dba:	59 06       	cpc	r5, r25
     dbc:	b0 f4       	brcc	.+44     	; 0xdea <vfprintf+0x1aa>
     dbe:	b7 01       	movw	r22, r14
     dc0:	80 e2       	ldi	r24, 0x20	; 32
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <fputc>
     dc8:	3a 94       	dec	r3
     dca:	f4 cf       	rjmp	.-24     	; 0xdb4 <vfprintf+0x174>
     dcc:	f5 01       	movw	r30, r10
     dce:	27 fc       	sbrc	r2, 7
     dd0:	85 91       	lpm	r24, Z+
     dd2:	27 fe       	sbrs	r2, 7
     dd4:	81 91       	ld	r24, Z+
     dd6:	5f 01       	movw	r10, r30
     dd8:	b7 01       	movw	r22, r14
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <fputc>
     de0:	31 10       	cpse	r3, r1
     de2:	3a 94       	dec	r3
     de4:	f1 e0       	ldi	r31, 0x01	; 1
     de6:	4f 1a       	sub	r4, r31
     de8:	51 08       	sbc	r5, r1
     dea:	41 14       	cp	r4, r1
     dec:	51 04       	cpc	r5, r1
     dee:	71 f7       	brne	.-36     	; 0xdcc <vfprintf+0x18c>
     df0:	e5 c0       	rjmp	.+458    	; 0xfbc <vfprintf+0x37c>
     df2:	84 36       	cpi	r24, 0x64	; 100
     df4:	11 f0       	breq	.+4      	; 0xdfa <vfprintf+0x1ba>
     df6:	89 36       	cpi	r24, 0x69	; 105
     df8:	39 f5       	brne	.+78     	; 0xe48 <vfprintf+0x208>
     dfa:	f8 01       	movw	r30, r16
     dfc:	27 ff       	sbrs	r18, 7
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <vfprintf+0x1ce>
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	0c 5f       	subi	r16, 0xFC	; 252
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	08 c0       	rjmp	.+16     	; 0xe1e <vfprintf+0x1de>
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	88 27       	eor	r24, r24
     e14:	77 fd       	sbrc	r23, 7
     e16:	80 95       	com	r24
     e18:	98 2f       	mov	r25, r24
     e1a:	0e 5f       	subi	r16, 0xFE	; 254
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	2f 76       	andi	r18, 0x6F	; 111
     e20:	b2 2e       	mov	r11, r18
     e22:	97 ff       	sbrs	r25, 7
     e24:	09 c0       	rjmp	.+18     	; 0xe38 <vfprintf+0x1f8>
     e26:	90 95       	com	r25
     e28:	80 95       	com	r24
     e2a:	70 95       	com	r23
     e2c:	61 95       	neg	r22
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	8f 4f       	sbci	r24, 0xFF	; 255
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	20 68       	ori	r18, 0x80	; 128
     e36:	b2 2e       	mov	r11, r18
     e38:	2a e0       	ldi	r18, 0x0A	; 10
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	a4 01       	movw	r20, r8
     e3e:	0e 94 08 08 	call	0x1010	; 0x1010 <__ultoa_invert>
     e42:	a8 2e       	mov	r10, r24
     e44:	a8 18       	sub	r10, r8
     e46:	44 c0       	rjmp	.+136    	; 0xed0 <vfprintf+0x290>
     e48:	85 37       	cpi	r24, 0x75	; 117
     e4a:	29 f4       	brne	.+10     	; 0xe56 <vfprintf+0x216>
     e4c:	2f 7e       	andi	r18, 0xEF	; 239
     e4e:	b2 2e       	mov	r11, r18
     e50:	2a e0       	ldi	r18, 0x0A	; 10
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	25 c0       	rjmp	.+74     	; 0xea0 <vfprintf+0x260>
     e56:	f2 2f       	mov	r31, r18
     e58:	f9 7f       	andi	r31, 0xF9	; 249
     e5a:	bf 2e       	mov	r11, r31
     e5c:	8f 36       	cpi	r24, 0x6F	; 111
     e5e:	c1 f0       	breq	.+48     	; 0xe90 <vfprintf+0x250>
     e60:	18 f4       	brcc	.+6      	; 0xe68 <vfprintf+0x228>
     e62:	88 35       	cpi	r24, 0x58	; 88
     e64:	79 f0       	breq	.+30     	; 0xe84 <vfprintf+0x244>
     e66:	b4 c0       	rjmp	.+360    	; 0xfd0 <vfprintf+0x390>
     e68:	80 37       	cpi	r24, 0x70	; 112
     e6a:	19 f0       	breq	.+6      	; 0xe72 <vfprintf+0x232>
     e6c:	88 37       	cpi	r24, 0x78	; 120
     e6e:	21 f0       	breq	.+8      	; 0xe78 <vfprintf+0x238>
     e70:	af c0       	rjmp	.+350    	; 0xfd0 <vfprintf+0x390>
     e72:	2f 2f       	mov	r18, r31
     e74:	20 61       	ori	r18, 0x10	; 16
     e76:	b2 2e       	mov	r11, r18
     e78:	b4 fe       	sbrs	r11, 4
     e7a:	0d c0       	rjmp	.+26     	; 0xe96 <vfprintf+0x256>
     e7c:	8b 2d       	mov	r24, r11
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	b8 2e       	mov	r11, r24
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <vfprintf+0x256>
     e84:	24 ff       	sbrs	r18, 4
     e86:	0a c0       	rjmp	.+20     	; 0xe9c <vfprintf+0x25c>
     e88:	9f 2f       	mov	r25, r31
     e8a:	96 60       	ori	r25, 0x06	; 6
     e8c:	b9 2e       	mov	r11, r25
     e8e:	06 c0       	rjmp	.+12     	; 0xe9c <vfprintf+0x25c>
     e90:	28 e0       	ldi	r18, 0x08	; 8
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <vfprintf+0x260>
     e96:	20 e1       	ldi	r18, 0x10	; 16
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <vfprintf+0x260>
     e9c:	20 e1       	ldi	r18, 0x10	; 16
     e9e:	32 e0       	ldi	r19, 0x02	; 2
     ea0:	f8 01       	movw	r30, r16
     ea2:	b7 fe       	sbrs	r11, 7
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <vfprintf+0x274>
     ea6:	60 81       	ld	r22, Z
     ea8:	71 81       	ldd	r23, Z+1	; 0x01
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	93 81       	ldd	r25, Z+3	; 0x03
     eae:	0c 5f       	subi	r16, 0xFC	; 252
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <vfprintf+0x280>
     eb4:	60 81       	ld	r22, Z
     eb6:	71 81       	ldd	r23, Z+1	; 0x01
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 5f       	subi	r16, 0xFE	; 254
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	a4 01       	movw	r20, r8
     ec2:	0e 94 08 08 	call	0x1010	; 0x1010 <__ultoa_invert>
     ec6:	a8 2e       	mov	r10, r24
     ec8:	a8 18       	sub	r10, r8
     eca:	fb 2d       	mov	r31, r11
     ecc:	ff 77       	andi	r31, 0x7F	; 127
     ece:	bf 2e       	mov	r11, r31
     ed0:	b6 fe       	sbrs	r11, 6
     ed2:	0b c0       	rjmp	.+22     	; 0xeea <vfprintf+0x2aa>
     ed4:	2b 2d       	mov	r18, r11
     ed6:	2e 7f       	andi	r18, 0xFE	; 254
     ed8:	a5 14       	cp	r10, r5
     eda:	50 f4       	brcc	.+20     	; 0xef0 <vfprintf+0x2b0>
     edc:	b4 fe       	sbrs	r11, 4
     ede:	0a c0       	rjmp	.+20     	; 0xef4 <vfprintf+0x2b4>
     ee0:	b2 fc       	sbrc	r11, 2
     ee2:	08 c0       	rjmp	.+16     	; 0xef4 <vfprintf+0x2b4>
     ee4:	2b 2d       	mov	r18, r11
     ee6:	2e 7e       	andi	r18, 0xEE	; 238
     ee8:	05 c0       	rjmp	.+10     	; 0xef4 <vfprintf+0x2b4>
     eea:	7a 2c       	mov	r7, r10
     eec:	2b 2d       	mov	r18, r11
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <vfprintf+0x2b6>
     ef0:	7a 2c       	mov	r7, r10
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <vfprintf+0x2b6>
     ef4:	75 2c       	mov	r7, r5
     ef6:	24 ff       	sbrs	r18, 4
     ef8:	0d c0       	rjmp	.+26     	; 0xf14 <vfprintf+0x2d4>
     efa:	fe 01       	movw	r30, r28
     efc:	ea 0d       	add	r30, r10
     efe:	f1 1d       	adc	r31, r1
     f00:	80 81       	ld	r24, Z
     f02:	80 33       	cpi	r24, 0x30	; 48
     f04:	11 f4       	brne	.+4      	; 0xf0a <vfprintf+0x2ca>
     f06:	29 7e       	andi	r18, 0xE9	; 233
     f08:	09 c0       	rjmp	.+18     	; 0xf1c <vfprintf+0x2dc>
     f0a:	22 ff       	sbrs	r18, 2
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <vfprintf+0x2da>
     f0e:	73 94       	inc	r7
     f10:	73 94       	inc	r7
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <vfprintf+0x2dc>
     f14:	82 2f       	mov	r24, r18
     f16:	86 78       	andi	r24, 0x86	; 134
     f18:	09 f0       	breq	.+2      	; 0xf1c <vfprintf+0x2dc>
     f1a:	73 94       	inc	r7
     f1c:	23 fd       	sbrc	r18, 3
     f1e:	13 c0       	rjmp	.+38     	; 0xf46 <vfprintf+0x306>
     f20:	20 ff       	sbrs	r18, 0
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <vfprintf+0x2f0>
     f24:	5a 2c       	mov	r5, r10
     f26:	73 14       	cp	r7, r3
     f28:	18 f4       	brcc	.+6      	; 0xf30 <vfprintf+0x2f0>
     f2a:	53 0c       	add	r5, r3
     f2c:	57 18       	sub	r5, r7
     f2e:	73 2c       	mov	r7, r3
     f30:	73 14       	cp	r7, r3
     f32:	68 f4       	brcc	.+26     	; 0xf4e <vfprintf+0x30e>
     f34:	b7 01       	movw	r22, r14
     f36:	80 e2       	ldi	r24, 0x20	; 32
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	2c 87       	std	Y+12, r18	; 0x0c
     f3c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <fputc>
     f40:	73 94       	inc	r7
     f42:	2c 85       	ldd	r18, Y+12	; 0x0c
     f44:	f5 cf       	rjmp	.-22     	; 0xf30 <vfprintf+0x2f0>
     f46:	73 14       	cp	r7, r3
     f48:	10 f4       	brcc	.+4      	; 0xf4e <vfprintf+0x30e>
     f4a:	37 18       	sub	r3, r7
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <vfprintf+0x310>
     f4e:	31 2c       	mov	r3, r1
     f50:	24 ff       	sbrs	r18, 4
     f52:	12 c0       	rjmp	.+36     	; 0xf78 <vfprintf+0x338>
     f54:	b7 01       	movw	r22, r14
     f56:	80 e3       	ldi	r24, 0x30	; 48
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	2c 87       	std	Y+12, r18	; 0x0c
     f5c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <fputc>
     f60:	2c 85       	ldd	r18, Y+12	; 0x0c
     f62:	22 ff       	sbrs	r18, 2
     f64:	17 c0       	rjmp	.+46     	; 0xf94 <vfprintf+0x354>
     f66:	21 ff       	sbrs	r18, 1
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <vfprintf+0x330>
     f6a:	88 e5       	ldi	r24, 0x58	; 88
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <vfprintf+0x334>
     f70:	88 e7       	ldi	r24, 0x78	; 120
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	b7 01       	movw	r22, r14
     f76:	0c c0       	rjmp	.+24     	; 0xf90 <vfprintf+0x350>
     f78:	82 2f       	mov	r24, r18
     f7a:	86 78       	andi	r24, 0x86	; 134
     f7c:	59 f0       	breq	.+22     	; 0xf94 <vfprintf+0x354>
     f7e:	21 fd       	sbrc	r18, 1
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <vfprintf+0x346>
     f82:	80 e2       	ldi	r24, 0x20	; 32
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <vfprintf+0x348>
     f86:	8b e2       	ldi	r24, 0x2B	; 43
     f88:	27 fd       	sbrc	r18, 7
     f8a:	8d e2       	ldi	r24, 0x2D	; 45
     f8c:	b7 01       	movw	r22, r14
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 ad 05 	call	0xb5a	; 0xb5a <fputc>
     f94:	a5 14       	cp	r10, r5
     f96:	38 f4       	brcc	.+14     	; 0xfa6 <vfprintf+0x366>
     f98:	b7 01       	movw	r22, r14
     f9a:	80 e3       	ldi	r24, 0x30	; 48
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <fputc>
     fa2:	5a 94       	dec	r5
     fa4:	f7 cf       	rjmp	.-18     	; 0xf94 <vfprintf+0x354>
     fa6:	aa 94       	dec	r10
     fa8:	f4 01       	movw	r30, r8
     faa:	ea 0d       	add	r30, r10
     fac:	f1 1d       	adc	r31, r1
     fae:	80 81       	ld	r24, Z
     fb0:	b7 01       	movw	r22, r14
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <fputc>
     fb8:	a1 10       	cpse	r10, r1
     fba:	f5 cf       	rjmp	.-22     	; 0xfa6 <vfprintf+0x366>
     fbc:	33 20       	and	r3, r3
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <vfprintf+0x382>
     fc0:	51 ce       	rjmp	.-862    	; 0xc64 <vfprintf+0x24>
     fc2:	b7 01       	movw	r22, r14
     fc4:	80 e2       	ldi	r24, 0x20	; 32
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <fputc>
     fcc:	3a 94       	dec	r3
     fce:	f6 cf       	rjmp	.-20     	; 0xfbc <vfprintf+0x37c>
     fd0:	f7 01       	movw	r30, r14
     fd2:	86 81       	ldd	r24, Z+6	; 0x06
     fd4:	97 81       	ldd	r25, Z+7	; 0x07
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <vfprintf+0x39c>
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	2c 96       	adiw	r28, 0x0c	; 12
     fde:	e2 e1       	ldi	r30, 0x12	; 18
     fe0:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__epilogue_restores__>

00000fe4 <strnlen_P>:
     fe4:	fc 01       	movw	r30, r24
     fe6:	05 90       	lpm	r0, Z+
     fe8:	61 50       	subi	r22, 0x01	; 1
     fea:	70 40       	sbci	r23, 0x00	; 0
     fec:	01 10       	cpse	r0, r1
     fee:	d8 f7       	brcc	.-10     	; 0xfe6 <strnlen_P+0x2>
     ff0:	80 95       	com	r24
     ff2:	90 95       	com	r25
     ff4:	8e 0f       	add	r24, r30
     ff6:	9f 1f       	adc	r25, r31
     ff8:	08 95       	ret

00000ffa <strnlen>:
     ffa:	fc 01       	movw	r30, r24
     ffc:	61 50       	subi	r22, 0x01	; 1
     ffe:	70 40       	sbci	r23, 0x00	; 0
    1000:	01 90       	ld	r0, Z+
    1002:	01 10       	cpse	r0, r1
    1004:	d8 f7       	brcc	.-10     	; 0xffc <strnlen+0x2>
    1006:	80 95       	com	r24
    1008:	90 95       	com	r25
    100a:	8e 0f       	add	r24, r30
    100c:	9f 1f       	adc	r25, r31
    100e:	08 95       	ret

00001010 <__ultoa_invert>:
    1010:	fa 01       	movw	r30, r20
    1012:	aa 27       	eor	r26, r26
    1014:	28 30       	cpi	r18, 0x08	; 8
    1016:	51 f1       	breq	.+84     	; 0x106c <__ultoa_invert+0x5c>
    1018:	20 31       	cpi	r18, 0x10	; 16
    101a:	81 f1       	breq	.+96     	; 0x107c <__ultoa_invert+0x6c>
    101c:	e8 94       	clt
    101e:	6f 93       	push	r22
    1020:	6e 7f       	andi	r22, 0xFE	; 254
    1022:	6e 5f       	subi	r22, 0xFE	; 254
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	af 4f       	sbci	r26, 0xFF	; 255
    102c:	b1 e0       	ldi	r27, 0x01	; 1
    102e:	3e d0       	rcall	.+124    	; 0x10ac <__ultoa_invert+0x9c>
    1030:	b4 e0       	ldi	r27, 0x04	; 4
    1032:	3c d0       	rcall	.+120    	; 0x10ac <__ultoa_invert+0x9c>
    1034:	67 0f       	add	r22, r23
    1036:	78 1f       	adc	r23, r24
    1038:	89 1f       	adc	r24, r25
    103a:	9a 1f       	adc	r25, r26
    103c:	a1 1d       	adc	r26, r1
    103e:	68 0f       	add	r22, r24
    1040:	79 1f       	adc	r23, r25
    1042:	8a 1f       	adc	r24, r26
    1044:	91 1d       	adc	r25, r1
    1046:	a1 1d       	adc	r26, r1
    1048:	6a 0f       	add	r22, r26
    104a:	71 1d       	adc	r23, r1
    104c:	81 1d       	adc	r24, r1
    104e:	91 1d       	adc	r25, r1
    1050:	a1 1d       	adc	r26, r1
    1052:	20 d0       	rcall	.+64     	; 0x1094 <__ultoa_invert+0x84>
    1054:	09 f4       	brne	.+2      	; 0x1058 <__ultoa_invert+0x48>
    1056:	68 94       	set
    1058:	3f 91       	pop	r19
    105a:	2a e0       	ldi	r18, 0x0A	; 10
    105c:	26 9f       	mul	r18, r22
    105e:	11 24       	eor	r1, r1
    1060:	30 19       	sub	r19, r0
    1062:	30 5d       	subi	r19, 0xD0	; 208
    1064:	31 93       	st	Z+, r19
    1066:	de f6       	brtc	.-74     	; 0x101e <__ultoa_invert+0xe>
    1068:	cf 01       	movw	r24, r30
    106a:	08 95       	ret
    106c:	46 2f       	mov	r20, r22
    106e:	47 70       	andi	r20, 0x07	; 7
    1070:	40 5d       	subi	r20, 0xD0	; 208
    1072:	41 93       	st	Z+, r20
    1074:	b3 e0       	ldi	r27, 0x03	; 3
    1076:	0f d0       	rcall	.+30     	; 0x1096 <__ultoa_invert+0x86>
    1078:	c9 f7       	brne	.-14     	; 0x106c <__ultoa_invert+0x5c>
    107a:	f6 cf       	rjmp	.-20     	; 0x1068 <__ultoa_invert+0x58>
    107c:	46 2f       	mov	r20, r22
    107e:	4f 70       	andi	r20, 0x0F	; 15
    1080:	40 5d       	subi	r20, 0xD0	; 208
    1082:	4a 33       	cpi	r20, 0x3A	; 58
    1084:	18 f0       	brcs	.+6      	; 0x108c <__ultoa_invert+0x7c>
    1086:	49 5d       	subi	r20, 0xD9	; 217
    1088:	31 fd       	sbrc	r19, 1
    108a:	40 52       	subi	r20, 0x20	; 32
    108c:	41 93       	st	Z+, r20
    108e:	02 d0       	rcall	.+4      	; 0x1094 <__ultoa_invert+0x84>
    1090:	a9 f7       	brne	.-22     	; 0x107c <__ultoa_invert+0x6c>
    1092:	ea cf       	rjmp	.-44     	; 0x1068 <__ultoa_invert+0x58>
    1094:	b4 e0       	ldi	r27, 0x04	; 4
    1096:	a6 95       	lsr	r26
    1098:	97 95       	ror	r25
    109a:	87 95       	ror	r24
    109c:	77 95       	ror	r23
    109e:	67 95       	ror	r22
    10a0:	ba 95       	dec	r27
    10a2:	c9 f7       	brne	.-14     	; 0x1096 <__ultoa_invert+0x86>
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	61 05       	cpc	r22, r1
    10a8:	71 05       	cpc	r23, r1
    10aa:	08 95       	ret
    10ac:	9b 01       	movw	r18, r22
    10ae:	ac 01       	movw	r20, r24
    10b0:	0a 2e       	mov	r0, r26
    10b2:	06 94       	lsr	r0
    10b4:	57 95       	ror	r21
    10b6:	47 95       	ror	r20
    10b8:	37 95       	ror	r19
    10ba:	27 95       	ror	r18
    10bc:	ba 95       	dec	r27
    10be:	c9 f7       	brne	.-14     	; 0x10b2 <__ultoa_invert+0xa2>
    10c0:	62 0f       	add	r22, r18
    10c2:	73 1f       	adc	r23, r19
    10c4:	84 1f       	adc	r24, r20
    10c6:	95 1f       	adc	r25, r21
    10c8:	a0 1d       	adc	r26, r0
    10ca:	08 95       	ret

000010cc <__prologue_saves__>:
    10cc:	2f 92       	push	r2
    10ce:	3f 92       	push	r3
    10d0:	4f 92       	push	r4
    10d2:	5f 92       	push	r5
    10d4:	6f 92       	push	r6
    10d6:	7f 92       	push	r7
    10d8:	8f 92       	push	r8
    10da:	9f 92       	push	r9
    10dc:	af 92       	push	r10
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	ca 1b       	sub	r28, r26
    10f6:	db 0b       	sbc	r29, r27
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	09 94       	ijmp

00001104 <__epilogue_restores__>:
    1104:	2a 88       	ldd	r2, Y+18	; 0x12
    1106:	39 88       	ldd	r3, Y+17	; 0x11
    1108:	48 88       	ldd	r4, Y+16	; 0x10
    110a:	5f 84       	ldd	r5, Y+15	; 0x0f
    110c:	6e 84       	ldd	r6, Y+14	; 0x0e
    110e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1110:	8c 84       	ldd	r8, Y+12	; 0x0c
    1112:	9b 84       	ldd	r9, Y+11	; 0x0b
    1114:	aa 84       	ldd	r10, Y+10	; 0x0a
    1116:	b9 84       	ldd	r11, Y+9	; 0x09
    1118:	c8 84       	ldd	r12, Y+8	; 0x08
    111a:	df 80       	ldd	r13, Y+7	; 0x07
    111c:	ee 80       	ldd	r14, Y+6	; 0x06
    111e:	fd 80       	ldd	r15, Y+5	; 0x05
    1120:	0c 81       	ldd	r16, Y+4	; 0x04
    1122:	1b 81       	ldd	r17, Y+3	; 0x03
    1124:	aa 81       	ldd	r26, Y+2	; 0x02
    1126:	b9 81       	ldd	r27, Y+1	; 0x01
    1128:	ce 0f       	add	r28, r30
    112a:	d1 1d       	adc	r29, r1
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	ed 01       	movw	r28, r26
    1138:	08 95       	ret

0000113a <_exit>:
    113a:	f8 94       	cli

0000113c <__stop_program>:
    113c:	ff cf       	rjmp	.-2      	; 0x113c <__stop_program>
