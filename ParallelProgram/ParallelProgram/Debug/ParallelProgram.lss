
ParallelProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  00000f7c  00001010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  00800274  00800274  00001084  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d8  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a42  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b9a  00000000  00000000  00003dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a97  00000000  00000000  00004994  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006e4  00000000  00000000  0000642c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000718  00000000  00000000  00006b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001073  00000000  00000000  00007228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0000829b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ec e7       	ldi	r30, 0x7C	; 124
  f8:	ff e0       	ldi	r31, 0x0F	; 15
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a4 37       	cpi	r26, 0x74	; 116
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a4 e7       	ldi	r26, 0x74	; 116
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	af 3c       	cpi	r26, 0xCF	; 207
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	d3 d1       	rcall	.+934    	; 0x4c2 <main>
 11c:	2d c7       	rjmp	.+3674   	; 0xf78 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <SPI_FPGA_Write>:
	SPI_FPGA_Write(FPGA_Disable);
}

void SPI_FPGA_Write(unsigned char SPI_Data)
{
	FPGA_CS_PORT &= ~(1<<FPGA_SPI_CS);
 120:	a4 98       	cbi	0x14, 4	; 20
	// Start Write transmission
	SPDR = SPI_Data;
 122:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 124:	0d b4       	in	r0, 0x2d	; 45
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <SPI_FPGA_Write+0x4>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
 12a:	a4 9a       	sbi	0x14, 4	; 20
 12c:	08 95       	ret

0000012e <SPI_FPGA_Init>:
#include <util/delay.h>
#include "FPGA.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
 12e:	9c 9a       	sbi	0x13, 4	; 19
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
 130:	a4 9a       	sbi	0x14, 4	; 20
	
	WR_DDR |= 1<<FPGAWR;
 132:	e4 e0       	ldi	r30, 0x04	; 4
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	80 81       	ld	r24, Z
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	80 83       	st	Z, r24
	WR_PORT &= ~(1<<FPGAWR);
 13c:	e5 e0       	ldi	r30, 0x05	; 5
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	80 81       	ld	r24, Z
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_Disable);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	eb cf       	rjmp	.-42     	; 0x120 <SPI_FPGA_Write>
 14a:	08 95       	ret

0000014c <hexInit>:
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		RAMOffset++; 
	}
	
	return hexRow; 
}
 14c:	10 92 aa 02 	sts	0x02AA, r1
 150:	10 92 a9 02 	sts	0x02A9, r1
 154:	82 e3       	ldi	r24, 0x32	; 50
 156:	e7 e7       	ldi	r30, 0x77	; 119
 158:	f2 e0       	ldi	r31, 0x02	; 2
 15a:	df 01       	movw	r26, r30
 15c:	1d 92       	st	X+, r1
 15e:	8a 95       	dec	r24
 160:	e9 f7       	brne	.-6      	; 0x15c <hexInit+0x10>
 162:	08 95       	ret

00000164 <writeHexFileTest>:

void writeHexFileTest()
{	
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d2 e0       	ldi	r29, 0x02	; 2
 174:	0f 2e       	mov	r0, r31
 176:	f2 e3       	ldi	r31, 0x32	; 50
 178:	ef 2e       	mov	r14, r31
 17a:	f2 e0       	ldi	r31, 0x02	; 2
 17c:	ff 2e       	mov	r15, r31
 17e:	f0 2d       	mov	r31, r0
	for (int i = 0; i<50; i++)
	{
		printf("0x%02X ", *(buffer + i));
 180:	0f e4       	ldi	r16, 0x4F	; 79
 182:	12 e0       	ldi	r17, 0x02	; 2
 184:	89 91       	ld	r24, Y+
 186:	1f 92       	push	r1
 188:	8f 93       	push	r24
 18a:	1f 93       	push	r17
 18c:	0f 93       	push	r16
 18e:	4f d4       	rcall	.+2206   	; 0xa2e <printf>
	return hexRow; 
}

void writeHexFileTest()
{	
	for (int i = 0; i<50; i++)
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	ce 15       	cp	r28, r14
 19a:	df 05       	cpc	r29, r15
 19c:	99 f7       	brne	.-26     	; 0x184 <writeHexFileTest+0x20>
	{
		printf("0x%02X ", *(buffer + i));
	}
	printf("\n");
 19e:	8a e0       	ldi	r24, 0x0A	; 10
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	56 d4       	rcall	.+2220   	; 0xa50 <putchar>
				
	RAMWrite(buffer, HEX_FILE_ADDRESS, 50);
 1a4:	42 e3       	ldi	r20, 0x32	; 50
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	23 d2       	rcall	.+1094   	; 0x5f8 <RAMWrite>
					
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	ff 90       	pop	r15
 1bc:	ef 90       	pop	r14
 1be:	08 95       	ret

000001c0 <ProgInit>:
	
	//G: Program Page
	ProgramPage();
	
	//I: End Page Programming
	EndPageProgramming();
 1c0:	b6 df       	rcall	.-148    	; 0x12e <SPI_FPGA_Init>
 1c2:	c3 d3       	rcall	.+1926   	; 0x94a <voltageControlInit>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	e1 d3       	rcall	.+1986   	; 0x98a <setVpp>
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	d1 d3       	rcall	.+1954   	; 0x96e <setVcc>
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	ef d3       	rcall	.+2014   	; 0x9ae <setVLogic>
 1d0:	8a e1       	ldi	r24, 0x1A	; 26
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <ProgInit+0x12>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <ProgInit+0x18>
 1d8:	c6 d3       	rcall	.+1932   	; 0x966 <enableVccRegulator>
 1da:	e5 d3       	rcall	.+1994   	; 0x9a6 <enableVLogic>
 1dc:	8f e4       	ldi	r24, 0x4F	; 79
 1de:	93 ec       	ldi	r25, 0xC3	; 195
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <ProgInit+0x20>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <ProgInit+0x26>
 1e6:	00 00       	nop
 1e8:	8a b1       	in	r24, 0x0a	; 10
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	8a b9       	out	0x0a, r24	; 10
 1ee:	38 98       	cbi	0x07, 0	; 7
 1f0:	80 93 0a 01 	sts	0x010A, r24
 1f4:	83 b3       	in	r24, 0x13	; 19
 1f6:	87 60       	ori	r24, 0x07	; 7
 1f8:	83 bb       	out	0x13, r24	; 19
 1fa:	a0 9a       	sbi	0x14, 0	; 20
 1fc:	08 95       	ret

000001fe <ApplyPullDowns>:
 1fe:	a1 d2       	rcall	.+1346   	; 0x742 <SPI_Switching_Circuitry_Init>
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	b2 d2       	rcall	.+1380   	; 0x768 <SPI_Switching_Circuitry_Write>
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	b0 d2       	rcall	.+1376   	; 0x768 <SPI_Switching_Circuitry_Write>
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	ae d2       	rcall	.+1372   	; 0x768 <SPI_Switching_Circuitry_Write>
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	ac d2       	rcall	.+1368   	; 0x768 <SPI_Switching_Circuitry_Write>
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	aa d2       	rcall	.+1364   	; 0x768 <SPI_Switching_Circuitry_Write>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	a8 d2       	rcall	.+1360   	; 0x768 <SPI_Switching_Circuitry_Write>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	a6 d2       	rcall	.+1356   	; 0x768 <SPI_Switching_Circuitry_Write>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	a4 d2       	rcall	.+1352   	; 0x768 <SPI_Switching_Circuitry_Write>
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	a2 d2       	rcall	.+1348   	; 0x768 <SPI_Switching_Circuitry_Write>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	a0 d2       	rcall	.+1344   	; 0x768 <SPI_Switching_Circuitry_Write>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	9e d2       	rcall	.+1340   	; 0x768 <SPI_Switching_Circuitry_Write>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	9c d2       	rcall	.+1336   	; 0x768 <SPI_Switching_Circuitry_Write>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	9a d2       	rcall	.+1332   	; 0x768 <SPI_Switching_Circuitry_Write>
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	98 d2       	rcall	.+1328   	; 0x768 <SPI_Switching_Circuitry_Write>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	96 d2       	rcall	.+1324   	; 0x768 <SPI_Switching_Circuitry_Write>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	94 d2       	rcall	.+1320   	; 0x768 <SPI_Switching_Circuitry_Write>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	92 d2       	rcall	.+1316   	; 0x768 <SPI_Switching_Circuitry_Write>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 d2       	rcall	.+1312   	; 0x768 <SPI_Switching_Circuitry_Write>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	8e d2       	rcall	.+1308   	; 0x768 <SPI_Switching_Circuitry_Write>
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	8c d2       	rcall	.+1304   	; 0x768 <SPI_Switching_Circuitry_Write>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	8a d2       	rcall	.+1300   	; 0x768 <SPI_Switching_Circuitry_Write>
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	88 d2       	rcall	.+1296   	; 0x768 <SPI_Switching_Circuitry_Write>
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	86 d2       	rcall	.+1292   	; 0x768 <SPI_Switching_Circuitry_Write>
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	84 d2       	rcall	.+1288   	; 0x768 <SPI_Switching_Circuitry_Write>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	82 d2       	rcall	.+1284   	; 0x768 <SPI_Switching_Circuitry_Write>
 264:	e5 e0       	ldi	r30, 0x05	; 5
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	80 81       	ld	r24, Z
 26a:	80 61       	ori	r24, 0x10	; 16
 26c:	80 83       	st	Z, r24
 26e:	85 e3       	ldi	r24, 0x35	; 53
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <ApplyPullDowns+0x72>
 274:	00 00       	nop
 276:	80 81       	ld	r24, Z
 278:	8f 7e       	andi	r24, 0xEF	; 239
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

0000027e <LoadCommand>:
 27e:	5d 9a       	sbi	0x0b, 5	; 11
 280:	5c 98       	cbi	0x0b, 4	; 11
 282:	5b 98       	cbi	0x0b, 3	; 11
 284:	80 93 0b 01 	sts	0x010B, r24
 288:	82 e4       	ldi	r24, 0x42	; 66
 28a:	8a 95       	dec	r24
 28c:	f1 f7       	brne	.-4      	; 0x28a <LoadCommand+0xc>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LoadCommand+0x12>
 290:	58 9a       	sbi	0x0b, 0	; 11
 292:	82 e4       	ldi	r24, 0x42	; 66
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <LoadCommand+0x16>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LoadCommand+0x1c>
 29a:	58 98       	cbi	0x0b, 0	; 11
 29c:	82 e4       	ldi	r24, 0x42	; 66
 29e:	8a 95       	dec	r24
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LoadCommand+0x20>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LoadCommand+0x26>
 2a4:	08 95       	ret

000002a6 <EnableProgMode>:
 2a6:	cf 93       	push	r28
 2a8:	c8 2f       	mov	r28, r24
 2aa:	58 98       	cbi	0x0b, 0	; 11
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	83 7c       	andi	r24, 0xC3	; 195
 2b0:	8b b9       	out	0x0b, r24	; 11
 2b2:	10 92 0b 01 	sts	0x010B, r1
 2b6:	1b b8       	out	0x0b, r1	; 11
 2b8:	e5 e0       	ldi	r30, 0x05	; 5
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	80 81       	ld	r24, Z
 2be:	8b 7f       	andi	r24, 0xFB	; 251
 2c0:	80 83       	st	Z, r24
 2c2:	8c 2f       	mov	r24, r28
 2c4:	2d df       	rcall	.-422    	; 0x120 <SPI_FPGA_Write>
 2c6:	c1 30       	cpi	r28, 0x01	; 1
 2c8:	19 f0       	breq	.+6      	; 0x2d0 <EnableProgMode+0x2a>
 2ca:	c2 30       	cpi	r28, 0x02	; 2
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <EnableProgMode+0x2e>
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <EnableProgMode+0x30>
 2d0:	a8 d2       	rcall	.+1360   	; 0x822 <setAtTiny2313>
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <EnableProgMode+0x30>
 2d4:	ef d2       	rcall	.+1502   	; 0x8b4 <setAtMega324PA>
 2d6:	87 ec       	ldi	r24, 0xC7	; 199
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <EnableProgMode+0x34>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <EnableProgMode+0x3a>
 2e0:	00 00       	nop
 2e2:	3d d3       	rcall	.+1658   	; 0x95e <enableVppRegulator>
 2e4:	95 e8       	ldi	r25, 0x85	; 133
 2e6:	9a 95       	dec	r25
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <EnableProgMode+0x40>
 2ea:	00 00       	nop
 2ec:	8b b1       	in	r24, 0x0b	; 11
 2ee:	86 60       	ori	r24, 0x06	; 6
 2f0:	8b b9       	out	0x0b, r24	; 11
 2f2:	87 ee       	ldi	r24, 0xE7	; 231
 2f4:	93 e0       	ldi	r25, 0x03	; 3
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <EnableProgMode+0x50>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <EnableProgMode+0x56>
 2fc:	00 00       	nop
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <ReadSignatureBytes>:
 302:	88 e0       	ldi	r24, 0x08	; 8
 304:	bc df       	rcall	.-136    	; 0x27e <LoadCommand>
 306:	5d 98       	cbi	0x0b, 5	; 11
 308:	5c 98       	cbi	0x0b, 4	; 11
 30a:	5b 98       	cbi	0x0b, 3	; 11
 30c:	10 92 0b 01 	sts	0x010B, r1
 310:	82 e4       	ldi	r24, 0x42	; 66
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <ReadSignatureBytes+0x10>
 316:	00 c0       	rjmp	.+0      	; 0x318 <ReadSignatureBytes+0x16>
 318:	58 9a       	sbi	0x0b, 0	; 11
 31a:	92 e4       	ldi	r25, 0x42	; 66
 31c:	9a 95       	dec	r25
 31e:	f1 f7       	brne	.-4      	; 0x31c <ReadSignatureBytes+0x1a>
 320:	00 c0       	rjmp	.+0      	; 0x322 <ReadSignatureBytes+0x20>
 322:	58 98       	cbi	0x0b, 0	; 11
 324:	87 ec       	ldi	r24, 0xC7	; 199
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <ReadSignatureBytes+0x26>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <ReadSignatureBytes+0x2c>
 32e:	00 00       	nop
 330:	10 92 0a 01 	sts	0x010A, r1
 334:	e5 e0       	ldi	r30, 0x05	; 5
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	80 81       	ld	r24, Z
 33a:	84 60       	ori	r24, 0x04	; 4
 33c:	80 83       	st	Z, r24
 33e:	59 98       	cbi	0x0b, 1	; 11
 340:	5b 98       	cbi	0x0b, 3	; 11
 342:	87 ee       	ldi	r24, 0xE7	; 231
 344:	93 e0       	ldi	r25, 0x03	; 3
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <ReadSignatureBytes+0x44>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <ReadSignatureBytes+0x4a>
 34c:	00 00       	nop
 34e:	80 91 09 01 	lds	r24, 0x0109
 352:	80 93 74 02 	sts	0x0274, r24
 356:	59 9a       	sbi	0x0b, 1	; 11
 358:	80 81       	ld	r24, Z
 35a:	8b 7f       	andi	r24, 0xFB	; 251
 35c:	80 83       	st	Z, r24
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	80 93 0a 01 	sts	0x010A, r24
 364:	87 ec       	ldi	r24, 0xC7	; 199
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <ReadSignatureBytes+0x66>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <ReadSignatureBytes+0x6c>
 36e:	00 00       	nop
 370:	5d 98       	cbi	0x0b, 5	; 11
 372:	5c 98       	cbi	0x0b, 4	; 11
 374:	5b 98       	cbi	0x0b, 3	; 11
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	80 93 0b 01 	sts	0x010B, r24
 37c:	92 e4       	ldi	r25, 0x42	; 66
 37e:	9a 95       	dec	r25
 380:	f1 f7       	brne	.-4      	; 0x37e <ReadSignatureBytes+0x7c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <ReadSignatureBytes+0x82>
 384:	58 9a       	sbi	0x0b, 0	; 11
 386:	82 e4       	ldi	r24, 0x42	; 66
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <ReadSignatureBytes+0x86>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <ReadSignatureBytes+0x8c>
 38e:	58 98       	cbi	0x0b, 0	; 11
 390:	87 ec       	ldi	r24, 0xC7	; 199
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <ReadSignatureBytes+0x92>
 398:	00 c0       	rjmp	.+0      	; 0x39a <ReadSignatureBytes+0x98>
 39a:	00 00       	nop
 39c:	10 92 0a 01 	sts	0x010A, r1
 3a0:	80 81       	ld	r24, Z
 3a2:	84 60       	ori	r24, 0x04	; 4
 3a4:	80 83       	st	Z, r24
 3a6:	59 98       	cbi	0x0b, 1	; 11
 3a8:	5b 98       	cbi	0x0b, 3	; 11
 3aa:	87 ee       	ldi	r24, 0xE7	; 231
 3ac:	93 e0       	ldi	r25, 0x03	; 3
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <ReadSignatureBytes+0xac>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <ReadSignatureBytes+0xb2>
 3b4:	00 00       	nop
 3b6:	80 91 09 01 	lds	r24, 0x0109
 3ba:	80 93 75 02 	sts	0x0275, r24
 3be:	59 9a       	sbi	0x0b, 1	; 11
 3c0:	80 81       	ld	r24, Z
 3c2:	8b 7f       	andi	r24, 0xFB	; 251
 3c4:	80 83       	st	Z, r24
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	80 93 0a 01 	sts	0x010A, r24
 3cc:	87 ec       	ldi	r24, 0xC7	; 199
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <ReadSignatureBytes+0xce>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <ReadSignatureBytes+0xd4>
 3d6:	00 00       	nop
 3d8:	5d 98       	cbi	0x0b, 5	; 11
 3da:	5c 98       	cbi	0x0b, 4	; 11
 3dc:	5b 98       	cbi	0x0b, 3	; 11
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	80 93 0b 01 	sts	0x010B, r24
 3e4:	92 e4       	ldi	r25, 0x42	; 66
 3e6:	9a 95       	dec	r25
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <ReadSignatureBytes+0xe4>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <ReadSignatureBytes+0xea>
 3ec:	58 9a       	sbi	0x0b, 0	; 11
 3ee:	82 e4       	ldi	r24, 0x42	; 66
 3f0:	8a 95       	dec	r24
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <ReadSignatureBytes+0xee>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <ReadSignatureBytes+0xf4>
 3f6:	58 98       	cbi	0x0b, 0	; 11
 3f8:	87 ec       	ldi	r24, 0xC7	; 199
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <ReadSignatureBytes+0xfa>
 400:	00 c0       	rjmp	.+0      	; 0x402 <ReadSignatureBytes+0x100>
 402:	00 00       	nop
 404:	10 92 0a 01 	sts	0x010A, r1
 408:	80 81       	ld	r24, Z
 40a:	84 60       	ori	r24, 0x04	; 4
 40c:	80 83       	st	Z, r24
 40e:	59 98       	cbi	0x0b, 1	; 11
 410:	5b 98       	cbi	0x0b, 3	; 11
 412:	87 ee       	ldi	r24, 0xE7	; 231
 414:	93 e0       	ldi	r25, 0x03	; 3
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <ReadSignatureBytes+0x114>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <ReadSignatureBytes+0x11a>
 41c:	00 00       	nop
 41e:	80 91 09 01 	lds	r24, 0x0109
 422:	80 93 76 02 	sts	0x0276, r24
 426:	59 9a       	sbi	0x0b, 1	; 11
 428:	80 81       	ld	r24, Z
 42a:	8b 7f       	andi	r24, 0xFB	; 251
 42c:	80 83       	st	Z, r24
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	80 93 0a 01 	sts	0x010A, r24
 434:	10 92 0b 01 	sts	0x010B, r1
 438:	84 e7       	ldi	r24, 0x74	; 116
 43a:	92 e0       	ldi	r25, 0x02	; 2
 43c:	08 95       	ret

0000043e <ExitParallelProgrammingMode>:
}

void ExitParallelProgrammingMode(void)
{
	disableVppRegulator();
 43e:	91 d2       	rcall	.+1314   	; 0x962 <disableVppRegulator>
	disableVccRegulator();
 440:	94 d2       	rcall	.+1320   	; 0x96a <disableVccRegulator>
	disableVLogic();
 442:	b3 d2       	rcall	.+1382   	; 0x9aa <disableVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 444:	8f e0       	ldi	r24, 0x0F	; 15
 446:	97 e2       	ldi	r25, 0x27	; 39
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <ExitParallelProgrammingMode+0xa>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <ExitParallelProgrammingMode+0x10>
 44e:	00 00       	nop
	
	_delay_ms(5);
	DATA_PORT = 0x00;
 450:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
 454:	1b b8       	out	0x0b, r1	; 11
 456:	8f ec       	ldi	r24, 0xCF	; 207
 458:	97 e0       	ldi	r25, 0x07	; 7
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <ExitParallelProgrammingMode+0x1c>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <ExitParallelProgrammingMode+0x22>
 460:	00 00       	nop
	_delay_ms(1);
	SPI_FPGA_Write(FPGA_Disable);
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	5d de       	rcall	.-838    	; 0x120 <SPI_FPGA_Write>
	
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Shift Registers
 466:	e5 e0       	ldi	r30, 0x05	; 5
 468:	f1 e0       	ldi	r31, 0x01	; 1
 46a:	80 81       	ld	r24, Z
 46c:	8f 7d       	andi	r24, 0xDF	; 223
 46e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 470:	95 e3       	ldi	r25, 0x35	; 53
 472:	9a 95       	dec	r25
 474:	f1 f7       	brne	.-4      	; 0x472 <ExitParallelProgrammingMode+0x34>
 476:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SR_RESET);
 478:	80 81       	ld	r24, Z
 47a:	80 62       	ori	r24, 0x20	; 32
 47c:	80 83       	st	Z, r24
 47e:	2d e0       	ldi	r18, 0x0D	; 13
 480:	2a 95       	dec	r18
 482:	f1 f7       	brne	.-4      	; 0x480 <ExitParallelProgrammingMode+0x42>
 484:	00 00       	nop
	_delay_us(5);
	SR_CNTRL_PORT |= (1<<SRCS);
 486:	80 81       	ld	r24, Z
 488:	80 61       	ori	r24, 0x10	; 16
 48a:	80 83       	st	Z, r24
 48c:	85 e3       	ldi	r24, 0x35	; 53
 48e:	8a 95       	dec	r24
 490:	f1 f7       	brne	.-4      	; 0x48e <ExitParallelProgrammingMode+0x50>
 492:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
 494:	80 81       	ld	r24, Z
 496:	8f 7e       	andi	r24, 0xEF	; 239
 498:	80 83       	st	Z, r24
	
	SR_CNTRL_PORT |= (1<<SROE);
 49a:	80 81       	ld	r24, Z
 49c:	88 60       	ori	r24, 0x08	; 8
 49e:	80 83       	st	Z, r24
	
	LED_PORT |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
 4a0:	84 b3       	in	r24, 0x14	; 20
 4a2:	87 60       	ori	r24, 0x07	; 7
 4a4:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a6:	9f ef       	ldi	r25, 0xFF	; 255
 4a8:	29 e6       	ldi	r18, 0x69	; 105
 4aa:	88 e1       	ldi	r24, 0x18	; 24
 4ac:	91 50       	subi	r25, 0x01	; 1
 4ae:	20 40       	sbci	r18, 0x00	; 0
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <ExitParallelProgrammingMode+0x6e>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <ExitParallelProgrammingMode+0x78>
 4b6:	00 00       	nop
	_delay_ms(1000);
	LED_PORT |= (1<<LED_Green);
 4b8:	a0 9a       	sbi	0x14, 0	; 20
	LED_PORT &= ~((1<<LED_Yellow) | (1<<LED_Red));
 4ba:	84 b3       	in	r24, 0x14	; 20
 4bc:	89 7f       	andi	r24, 0xF9	; 249
 4be:	84 bb       	out	0x14, r24	; 20
 4c0:	08 95       	ret

000004c2 <main>:
#define ATmega48P 4

int main(void)
{
	char* SignatureBytes;
	uart2_init();
 4c2:	33 d0       	rcall	.+102    	; 0x52a <uart2_init>
	hexInit();
 4c4:	43 de       	rcall	.-890    	; 0x14c <hexInit>
//
	SPI_Init();
 4c6:	2f d1       	rcall	.+606    	; 0x726 <SPI_Init>
	printf("\n\n");
 4c8:	81 e7       	ldi	r24, 0x71	; 113
 4ca:	92 e0       	ldi	r25, 0x02	; 2
 4cc:	c6 d2       	rcall	.+1420   	; 0xa5a <puts>
	writeHexFileTest();
 4ce:	4a de       	rcall	.-876    	; 0x164 <writeHexFileTest>
	RAMPrint(HEX_FILE_ADDRESS, 50);
 4d0:	42 e3       	ldi	r20, 0x32	; 50
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	cb 01       	movw	r24, r22
 4da:	cd d0       	rcall	.+410    	; 0x676 <RAMPrint>
	//Write test file to external RAM 
	//Test switching circuitry code
	
	ApplyPullDowns();
 4dc:	90 de       	rcall	.-736    	; 0x1fe <ApplyPullDowns>
	ProgInit();
 4de:	70 de       	rcall	.-800    	; 0x1c0 <ProgInit>
	EnableProgMode(ATtiny2313);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	e1 de       	rcall	.-574    	; 0x2a6 <EnableProgMode>
	//EnableProgMode(ATmega324PA);
	SignatureBytes = ReadSignatureBytes();
 4e4:	0e df       	rcall	.-484    	; 0x302 <ReadSignatureBytes>
	//else
	//{
	//printf("ERROR: Signature Bytes Mismatch\n");
	//}
	
	ExitParallelProgrammingMode();
 4e6:	ab df       	rcall	.-170    	; 0x43e <ExitParallelProgrammingMode>
 4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <main+0x26>

000004ea <uart_sendStream>:
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
	putchar('[');
	putchar('0');
	putchar('m');
}
 4ea:	cf 93       	push	r28
 4ec:	c8 2f       	mov	r28, r24
 4ee:	8a 30       	cpi	r24, 0x0A	; 10
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <uart_sendStream+0xc>
 4f2:	8d e0       	ldi	r24, 0x0D	; 13
 4f4:	fa df       	rcall	.-12     	; 0x4ea <uart_sendStream>
 4f6:	e0 ed       	ldi	r30, 0xD0	; 208
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	90 81       	ld	r25, Z
 4fc:	95 ff       	sbrs	r25, 5
 4fe:	fd cf       	rjmp	.-6      	; 0x4fa <uart_sendStream+0x10>
 500:	c0 93 d6 00 	sts	0x00D6, r28
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <uart_receiveStream>:
 50c:	cf 93       	push	r28
 50e:	bc 01       	movw	r22, r24
 510:	e0 ed       	ldi	r30, 0xD0	; 208
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	88 23       	and	r24, r24
 518:	ec f7       	brge	.-6      	; 0x514 <uart_receiveStream+0x8>
 51a:	c0 91 d6 00 	lds	r28, 0x00D6
 51e:	8c 2f       	mov	r24, r28
 520:	e4 df       	rcall	.-56     	; 0x4ea <uart_sendStream>
 522:	8c 2f       	mov	r24, r28
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
 52a:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
 52e:	83 e3       	ldi	r24, 0x33	; 51
 530:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
 534:	88 e1       	ldi	r24, 0x18	; 24
 536:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
 53a:	86 e0       	ldi	r24, 0x06	; 6
 53c:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
 540:	8c e3       	ldi	r24, 0x3C	; 60
 542:	92 e0       	ldi	r25, 0x02	; 2
 544:	90 93 ca 02 	sts	0x02CA, r25
 548:	80 93 c9 02 	sts	0x02C9, r24
 54c:	90 93 cc 02 	sts	0x02CC, r25
 550:	80 93 cb 02 	sts	0x02CB, r24
 554:	08 95       	ret

00000556 <getRAMStatus>:
		*(buffer + i) = SPI_ReadData();
	}
	RAM_PORT |= (1<<RAM_CS); 
	//printf("%d\n", buffer);
	return buffer; 
}
 556:	a3 98       	cbi	0x14, 3	; 20
 558:	85 e0       	ldi	r24, 0x05	; 5
 55a:	8e bd       	out	0x2e, r24	; 46
 55c:	0d b4       	in	r0, 0x2d	; 45
 55e:	07 fe       	sbrs	r0, 7
 560:	fd cf       	rjmp	.-6      	; 0x55c <getRAMStatus+0x6>
 562:	1e bc       	out	0x2e, r1	; 46
 564:	0d b4       	in	r0, 0x2d	; 45
 566:	07 fe       	sbrs	r0, 7
 568:	fd cf       	rjmp	.-6      	; 0x564 <getRAMStatus+0xe>
 56a:	a3 9a       	sbi	0x14, 3	; 20
 56c:	8e b5       	in	r24, 0x2e	; 46
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	08 95       	ret

00000572 <setRAMStatus>:
 572:	a3 98       	cbi	0x14, 3	; 20
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	9e bd       	out	0x2e, r25	; 46
 578:	0d b4       	in	r0, 0x2d	; 45
 57a:	07 fe       	sbrs	r0, 7
 57c:	fd cf       	rjmp	.-6      	; 0x578 <setRAMStatus+0x6>
 57e:	8e bd       	out	0x2e, r24	; 46
 580:	0d b4       	in	r0, 0x2d	; 45
 582:	07 fe       	sbrs	r0, 7
 584:	fd cf       	rjmp	.-6      	; 0x580 <setRAMStatus+0xe>
 586:	a3 9a       	sbi	0x14, 3	; 20
 588:	08 95       	ret

0000058a <SPI_WriteAddress>:
 58a:	26 2f       	mov	r18, r22
 58c:	97 2f       	mov	r25, r23
 58e:	48 2f       	mov	r20, r24
 590:	82 e0       	ldi	r24, 0x02	; 2
 592:	8e bd       	out	0x2e, r24	; 46
 594:	0d b4       	in	r0, 0x2d	; 45
 596:	07 fe       	sbrs	r0, 7
 598:	fd cf       	rjmp	.-6      	; 0x594 <SPI_WriteAddress+0xa>
 59a:	4e bd       	out	0x2e, r20	; 46
 59c:	0d b4       	in	r0, 0x2d	; 45
 59e:	07 fe       	sbrs	r0, 7
 5a0:	fd cf       	rjmp	.-6      	; 0x59c <SPI_WriteAddress+0x12>
 5a2:	89 2f       	mov	r24, r25
 5a4:	8e bd       	out	0x2e, r24	; 46
 5a6:	0d b4       	in	r0, 0x2d	; 45
 5a8:	07 fe       	sbrs	r0, 7
 5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <SPI_WriteAddress+0x1c>
 5ac:	2e bd       	out	0x2e, r18	; 46
 5ae:	0d b4       	in	r0, 0x2d	; 45
 5b0:	07 fe       	sbrs	r0, 7
 5b2:	fd cf       	rjmp	.-6      	; 0x5ae <SPI_WriteAddress+0x24>
 5b4:	08 95       	ret

000005b6 <SPI_WriteData>:
 5b6:	8e bd       	out	0x2e, r24	; 46
 5b8:	0d b4       	in	r0, 0x2d	; 45
 5ba:	07 fe       	sbrs	r0, 7
 5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <SPI_WriteData+0x2>
 5be:	08 95       	ret

000005c0 <SPI_ReadAddress>:
 5c0:	26 2f       	mov	r18, r22
 5c2:	97 2f       	mov	r25, r23
 5c4:	48 2f       	mov	r20, r24
 5c6:	83 e0       	ldi	r24, 0x03	; 3
 5c8:	8e bd       	out	0x2e, r24	; 46
 5ca:	0d b4       	in	r0, 0x2d	; 45
 5cc:	07 fe       	sbrs	r0, 7
 5ce:	fd cf       	rjmp	.-6      	; 0x5ca <SPI_ReadAddress+0xa>
 5d0:	4e bd       	out	0x2e, r20	; 46
 5d2:	0d b4       	in	r0, 0x2d	; 45
 5d4:	07 fe       	sbrs	r0, 7
 5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <SPI_ReadAddress+0x12>
 5d8:	89 2f       	mov	r24, r25
 5da:	8e bd       	out	0x2e, r24	; 46
 5dc:	0d b4       	in	r0, 0x2d	; 45
 5de:	07 fe       	sbrs	r0, 7
 5e0:	fd cf       	rjmp	.-6      	; 0x5dc <SPI_ReadAddress+0x1c>
 5e2:	2e bd       	out	0x2e, r18	; 46
 5e4:	0d b4       	in	r0, 0x2d	; 45
 5e6:	07 fe       	sbrs	r0, 7
 5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <SPI_ReadAddress+0x24>
 5ea:	08 95       	ret

000005ec <SPI_ReadData>:
 5ec:	1e bc       	out	0x2e, r1	; 46
 5ee:	0d b4       	in	r0, 0x2d	; 45
 5f0:	07 fe       	sbrs	r0, 7
 5f2:	fd cf       	rjmp	.-6      	; 0x5ee <SPI_ReadData+0x2>
 5f4:	8e b5       	in	r24, 0x2e	; 46
 5f6:	08 95       	ret

000005f8 <RAMWrite>:
 5f8:	af 92       	push	r10
 5fa:	bf 92       	push	r11
 5fc:	cf 92       	push	r12
 5fe:	df 92       	push	r13
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	ec 01       	movw	r28, r24
 60e:	8b 01       	movw	r16, r22
 610:	5a 01       	movw	r10, r20
 612:	a3 98       	cbi	0x14, 3	; 20
 614:	6b 01       	movw	r12, r22
 616:	e1 2c       	mov	r14, r1
 618:	f1 2c       	mov	r15, r1
 61a:	c7 01       	movw	r24, r14
 61c:	b6 01       	movw	r22, r12
 61e:	b5 df       	rcall	.-150    	; 0x58a <SPI_WriteAddress>
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	c9 df       	rcall	.-110    	; 0x5b6 <SPI_WriteData>
 624:	a3 9a       	sbi	0x14, 3	; 20
 626:	80 e4       	ldi	r24, 0x40	; 64
 628:	a4 df       	rcall	.-184    	; 0x572 <setRAMStatus>
 62a:	95 df       	rcall	.-214    	; 0x556 <getRAMStatus>
 62c:	a3 98       	cbi	0x14, 3	; 20
 62e:	c7 01       	movw	r24, r14
 630:	b6 01       	movw	r22, r12
 632:	ab df       	rcall	.-170    	; 0x58a <SPI_WriteAddress>
 634:	a1 14       	cp	r10, r1
 636:	b1 04       	cpc	r11, r1
 638:	89 f0       	breq	.+34     	; 0x65c <RAMWrite+0x64>
 63a:	65 01       	movw	r12, r10
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	e1 2c       	mov	r14, r1
 642:	f1 2c       	mov	r15, r1
 644:	fe 01       	movw	r30, r28
 646:	e8 0f       	add	r30, r24
 648:	f9 1f       	adc	r31, r25
 64a:	80 81       	ld	r24, Z
 64c:	b4 df       	rcall	.-152    	; 0x5b6 <SPI_WriteData>
 64e:	8f ef       	ldi	r24, 0xFF	; 255
 650:	e8 1a       	sub	r14, r24
 652:	f8 0a       	sbc	r15, r24
 654:	c7 01       	movw	r24, r14
 656:	ec 14       	cp	r14, r12
 658:	fd 04       	cpc	r15, r13
 65a:	a1 f7       	brne	.-24     	; 0x644 <RAMWrite+0x4c>
 65c:	a3 9a       	sbi	0x14, 3	; 20
 65e:	c8 01       	movw	r24, r16
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	ff 90       	pop	r15
 66a:	ef 90       	pop	r14
 66c:	df 90       	pop	r13
 66e:	cf 90       	pop	r12
 670:	bf 90       	pop	r11
 672:	af 90       	pop	r10
 674:	08 95       	ret

00000676 <RAMPrint>:

void RAMPrint(uint32_t startAddress, uint16_t length)
{
 676:	ef 92       	push	r14
 678:	ff 92       	push	r15
 67a:	0f 93       	push	r16
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	c6 2f       	mov	r28, r22
 684:	d7 2f       	mov	r29, r23
 686:	18 2f       	mov	r17, r24
 688:	09 2f       	mov	r16, r25
 68a:	7a 01       	movw	r14, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
 68c:	80 e4       	ldi	r24, 0x40	; 64
 68e:	71 df       	rcall	.-286    	; 0x572 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
 690:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
 692:	6c 2f       	mov	r22, r28
 694:	7d 2f       	mov	r23, r29
 696:	81 2f       	mov	r24, r17
 698:	90 2f       	mov	r25, r16
 69a:	92 df       	rcall	.-220    	; 0x5c0 <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	df 93       	push	r29
 6a2:	cf 93       	push	r28
 6a4:	87 e5       	ldi	r24, 0x57	; 87
 6a6:	92 e0       	ldi	r25, 0x02	; 2
 6a8:	9f 93       	push	r25
 6aa:	8f 93       	push	r24
 6ac:	c0 d1       	rcall	.+896    	; 0xa2e <printf>
	int i; 
	for(i=0; i<length; i++)
 6ae:	0f 90       	pop	r0
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	e1 14       	cp	r14, r1
 6bc:	f1 04       	cpc	r15, r1
 6be:	99 f0       	breq	.+38     	; 0x6e6 <RAMPrint+0x70>
 6c0:	c0 e0       	ldi	r28, 0x00	; 0
 6c2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("0x%02X ", SPI_ReadData());
 6c4:	0f e4       	ldi	r16, 0x4F	; 79
 6c6:	12 e0       	ldi	r17, 0x02	; 2
 6c8:	91 df       	rcall	.-222    	; 0x5ec <SPI_ReadData>
 6ca:	1f 92       	push	r1
 6cc:	8f 93       	push	r24
 6ce:	1f 93       	push	r17
 6d0:	0f 93       	push	r16
 6d2:	ad d1       	rcall	.+858    	; 0xa2e <printf>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
 6d4:	21 96       	adiw	r28, 0x01	; 1
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	ce 15       	cp	r28, r14
 6e0:	df 05       	cpc	r29, r15
 6e2:	91 f7       	brne	.-28     	; 0x6c8 <RAMPrint+0x52>
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <RAMPrint+0x74>
 6e6:	e1 2c       	mov	r14, r1
 6e8:	f1 2c       	mov	r15, r1
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
 6ea:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
 6ec:	ff 92       	push	r15
 6ee:	ef 92       	push	r14
 6f0:	88 e6       	ldi	r24, 0x68	; 104
 6f2:	92 e0       	ldi	r25, 0x02	; 2
 6f4:	9f 93       	push	r25
 6f6:	8f 93       	push	r24
 6f8:	9a d1       	rcall	.+820    	; 0xa2e <printf>
 6fa:	0f 90       	pop	r0
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
}
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	1f 91       	pop	r17
 708:	0f 91       	pop	r16
 70a:	ff 90       	pop	r15
 70c:	ef 90       	pop	r14
 70e:	08 95       	ret

00000710 <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
 710:	cf 93       	push	r28
 712:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
 714:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
 716:	cb 01       	movw	r24, r22
 718:	ba 01       	movw	r22, r20
 71a:	37 df       	rcall	.-402    	; 0x58a <SPI_WriteAddress>
	SPI_WriteData(data);
 71c:	8c 2f       	mov	r24, r28
 71e:	4b df       	rcall	.-362    	; 0x5b6 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
 720:	a3 9a       	sbi	0x14, 3	; 20
}
 722:	cf 91       	pop	r28
 724:	08 95       	ret

00000726 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
 726:	87 e0       	ldi	r24, 0x07	; 7
 728:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
 72a:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
 72c:	a3 9a       	sbi	0x14, 3	; 20
	
	RAM_HOLD_DDR |= (1<<RAM_HOLD);
 72e:	27 9a       	sbi	0x04, 7	; 4
	RAM_HOLD_PORT |= (1<<RAM_HOLD);
 730:	2f 9a       	sbi	0x05, 7	; 5
	
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 732:	81 e5       	ldi	r24, 0x51	; 81
 734:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	ba 01       	movw	r22, r20
 73c:	82 e3       	ldi	r24, 0x32	; 50
 73e:	e8 cf       	rjmp	.-48     	; 0x710 <RAMWriteByte>
 740:	08 95       	ret

00000742 <SPI_Switching_Circuitry_Init>:
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			ShiftRegData[i][j] = 0x00; 
		}
	}
}
 742:	84 b1       	in	r24, 0x04	; 4
 744:	87 60       	ori	r24, 0x07	; 7
 746:	84 b9       	out	0x04, r24	; 4
 748:	82 e5       	ldi	r24, 0x52	; 82
 74a:	8c bd       	out	0x2c, r24	; 44
 74c:	e4 e0       	ldi	r30, 0x04	; 4
 74e:	f1 e0       	ldi	r31, 0x01	; 1
 750:	80 81       	ld	r24, Z
 752:	88 63       	ori	r24, 0x38	; 56
 754:	80 83       	st	Z, r24
 756:	e5 e0       	ldi	r30, 0x05	; 5
 758:	f1 e0       	ldi	r31, 0x01	; 1
 75a:	80 81       	ld	r24, Z
 75c:	80 62       	ori	r24, 0x20	; 32
 75e:	80 83       	st	Z, r24
 760:	80 81       	ld	r24, Z
 762:	87 7e       	andi	r24, 0xE7	; 231
 764:	80 83       	st	Z, r24
 766:	08 95       	ret

00000768 <SPI_Switching_Circuitry_Write>:
 768:	8e bd       	out	0x2e, r24	; 46
 76a:	0d b4       	in	r0, 0x2d	; 45
 76c:	07 fe       	sbrs	r0, 7
 76e:	fd cf       	rjmp	.-6      	; 0x76a <SPI_Switching_Circuitry_Write+0x2>
 770:	08 95       	ret

00000772 <SetShiftRegData>:


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
 772:	db 01       	movw	r26, r22
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
	{
		ShiftRegData[pinType][i] = *(data + i); 
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	fc 01       	movw	r30, r24
 778:	ee 0f       	add	r30, r30
 77a:	ff 1f       	adc	r31, r31
 77c:	ee 0f       	add	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	e8 0f       	add	r30, r24
 782:	f9 1f       	adc	r31, r25
 784:	e5 55       	subi	r30, 0x55	; 85
 786:	fd 4f       	sbci	r31, 0xFD	; 253


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	90 e0       	ldi	r25, 0x00	; 0
	{
		ShiftRegData[pinType][i] = *(data + i); 
 78c:	2d 91       	ld	r18, X+
 78e:	21 93       	st	Z+, r18


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
 790:	01 96       	adiw	r24, 0x01	; 1
 792:	85 30       	cpi	r24, 0x05	; 5
 794:	91 05       	cpc	r25, r1
 796:	d1 f7       	brne	.-12     	; 0x78c <SetShiftRegData+0x1a>
	{
		ShiftRegData[pinType][i] = *(data + i); 
	}
}
 798:	08 95       	ret

0000079a <WriteShiftRegData>:

void WriteShiftRegData()
{
 79a:	af 92       	push	r10
 79c:	bf 92       	push	r11
 79e:	cf 92       	push	r12
 7a0:	df 92       	push	r13
 7a2:	ef 92       	push	r14
 7a4:	ff 92       	push	r15
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	0f 2e       	mov	r0, r31
 7b0:	f0 eb       	ldi	r31, 0xB0	; 176
 7b2:	ef 2e       	mov	r14, r31
 7b4:	f2 e0       	ldi	r31, 0x02	; 2
 7b6:	ff 2e       	mov	r15, r31
 7b8:	f0 2d       	mov	r31, r0
 7ba:	0f 2e       	mov	r0, r31
 7bc:	f9 ec       	ldi	r31, 0xC9	; 201
 7be:	cf 2e       	mov	r12, r31
 7c0:	f2 e0       	ldi	r31, 0x02	; 2
 7c2:	df 2e       	mov	r13, r31
 7c4:	f0 2d       	mov	r31, r0
 7c6:	a1 2c       	mov	r10, r1
 7c8:	b1 2c       	mov	r11, r1
 7ca:	0e c0       	rjmp	.+28     	; 0x7e8 <WriteShiftRegData+0x4e>
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
 7cc:	f8 01       	movw	r30, r16
 7ce:	81 91       	ld	r24, Z+
 7d0:	8f 01       	movw	r16, r30
 7d2:	ca df       	rcall	.-108    	; 0x768 <SPI_Switching_Circuitry_Write>
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
 7d4:	21 96       	adiw	r28, 0x01	; 1
 7d6:	c5 30       	cpi	r28, 0x05	; 5
 7d8:	d1 05       	cpc	r29, r1
 7da:	c1 f7       	brne	.-16     	; 0x7cc <WriteShiftRegData+0x32>
 7dc:	f5 e0       	ldi	r31, 0x05	; 5
 7de:	ef 0e       	add	r14, r31
 7e0:	f1 1c       	adc	r15, r1
	//{
		//SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
 7e2:	ec 14       	cp	r14, r12
 7e4:	fd 04       	cpc	r15, r13
 7e6:	21 f0       	breq	.+8      	; 0x7f0 <WriteShiftRegData+0x56>
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
 7e8:	87 01       	movw	r16, r14
 7ea:	ca 2d       	mov	r28, r10
 7ec:	db 2d       	mov	r29, r11
 7ee:	ee cf       	rjmp	.-36     	; 0x7cc <WriteShiftRegData+0x32>
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
		}
	}
	
	SR_CNTRL_PORT |= (1<<SRCS);
 7f0:	e5 e0       	ldi	r30, 0x05	; 5
 7f2:	f1 e0       	ldi	r31, 0x01	; 1
 7f4:	80 81       	ld	r24, Z
 7f6:	80 61       	ori	r24, 0x10	; 16
 7f8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7fa:	f5 e3       	ldi	r31, 0x35	; 53
 7fc:	fa 95       	dec	r31
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <WriteShiftRegData+0x62>
 800:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
 802:	e5 e0       	ldi	r30, 0x05	; 5
 804:	f1 e0       	ldi	r31, 0x01	; 1
 806:	80 81       	ld	r24, Z
 808:	8f 7e       	andi	r24, 0xEF	; 239
 80a:	80 83       	st	Z, r24
}
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	ff 90       	pop	r15
 816:	ef 90       	pop	r14
 818:	df 90       	pop	r13
 81a:	cf 90       	pop	r12
 81c:	bf 90       	pop	r11
 81e:	af 90       	pop	r10
 820:	08 95       	ret

00000822 <setAtTiny2313>:

void setAtTiny2313()
{
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	00 d0       	rcall	.+0      	; 0x828 <setAtTiny2313+0x6>
 828:	00 d0       	rcall	.+0      	; 0x82a <setAtTiny2313+0x8>
 82a:	1f 92       	push	r1
 82c:	cd b7       	in	r28, 0x3d	; 61
 82e:	de b7       	in	r29, 0x3e	; 62
	//char shiftTempBuff[5] = {0x00, 0x1F, 0xF7, 0xD0, 0xFF};
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 830:	85 e0       	ldi	r24, 0x05	; 5
 832:	ea e4       	ldi	r30, 0x4A	; 74
 834:	f2 e0       	ldi	r31, 0x02	; 2
 836:	de 01       	movw	r26, r28
 838:	11 96       	adiw	r26, 0x01	; 1
 83a:	01 90       	ld	r0, Z+
 83c:	0d 92       	st	X+, r0
 83e:	8a 95       	dec	r24
 840:	e1 f7       	brne	.-8      	; 0x83a <setAtTiny2313+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
 842:	be 01       	movw	r22, r28
 844:	6f 5f       	subi	r22, 0xFF	; 255
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	93 df       	rcall	.-218    	; 0x772 <SetShiftRegData>
	//Modify Values and shift again 
	shiftTempBuff[0] = 0x00;
 84c:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
 84e:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
 850:	88 e0       	ldi	r24, 0x08	; 8
 852:	8b 83       	std	Y+3, r24	; 0x03
	shiftTempBuff[3] = 0x00;
 854:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
 856:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
 858:	be 01       	movw	r22, r28
 85a:	6f 5f       	subi	r22, 0xFF	; 255
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	88 df       	rcall	.-240    	; 0x772 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
 862:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
 864:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
 866:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
 868:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
 86a:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
 86c:	be 01       	movw	r22, r28
 86e:	6f 5f       	subi	r22, 0xFF	; 255
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	83 e0       	ldi	r24, 0x03	; 3
 874:	7e df       	rcall	.-260    	; 0x772 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
 876:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
 878:	80 e2       	ldi	r24, 0x20	; 32
 87a:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
 87c:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
 87e:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
 880:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
 882:	be 01       	movw	r22, r28
 884:	6f 5f       	subi	r22, 0xFF	; 255
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	84 e0       	ldi	r24, 0x04	; 4
 88a:	73 df       	rcall	.-282    	; 0x772 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
 88c:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
 88e:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
 890:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
 892:	84 e0       	ldi	r24, 0x04	; 4
 894:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
 896:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
 898:	be 01       	movw	r22, r28
 89a:	6f 5f       	subi	r22, 0xFF	; 255
 89c:	7f 4f       	sbci	r23, 0xFF	; 255
 89e:	85 e0       	ldi	r24, 0x05	; 5
 8a0:	68 df       	rcall	.-304    	; 0x772 <SetShiftRegData>
	//shiftTempBuff[2] = 0xF7;
	//shiftTempBuff[3] = 0xD0; //Setting up Logic
	//shiftTempBuff[4] = 0x00;
	//SetShiftRegData(LOGIC, shiftTempBuff);
	
	WriteShiftRegData();
 8a2:	7b df       	rcall	.-266    	; 0x79a <WriteShiftRegData>
}
 8a4:	0f 90       	pop	r0
 8a6:	0f 90       	pop	r0
 8a8:	0f 90       	pop	r0
 8aa:	0f 90       	pop	r0
 8ac:	0f 90       	pop	r0
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	08 95       	ret

000008b4 <setAtMega324PA>:

void setAtMega324PA()
{
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	00 d0       	rcall	.+0      	; 0x8ba <setAtMega324PA+0x6>
 8ba:	00 d0       	rcall	.+0      	; 0x8bc <setAtMega324PA+0x8>
 8bc:	1f 92       	push	r1
 8be:	cd b7       	in	r28, 0x3d	; 61
 8c0:	de b7       	in	r29, 0x3e	; 62
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8c2:	85 e0       	ldi	r24, 0x05	; 5
 8c4:	ea e4       	ldi	r30, 0x4A	; 74
 8c6:	f2 e0       	ldi	r31, 0x02	; 2
 8c8:	de 01       	movw	r26, r28
 8ca:	11 96       	adiw	r26, 0x01	; 1
 8cc:	01 90       	ld	r0, Z+
 8ce:	0d 92       	st	X+, r0
 8d0:	8a 95       	dec	r24
 8d2:	e1 f7       	brne	.-8      	; 0x8cc <setAtMega324PA+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
 8d4:	be 01       	movw	r22, r28
 8d6:	6f 5f       	subi	r22, 0xFF	; 255
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	4a df       	rcall	.-364    	; 0x772 <SetShiftRegData>
	//Modify Values and shift again
	shiftTempBuff[0] = 0x00;
 8de:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x40;
 8e0:	80 e4       	ldi	r24, 0x40	; 64
 8e2:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00; //setting GND to ZIF19
 8e4:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04;
 8e6:	84 e0       	ldi	r24, 0x04	; 4
 8e8:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
 8ea:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
 8ec:	be 01       	movw	r22, r28
 8ee:	6f 5f       	subi	r22, 0xFF	; 255
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	3e df       	rcall	.-388    	; 0x772 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
 8f6:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
 8f8:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
 8fa:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
 8fc:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
 8fe:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
 900:	be 01       	movw	r22, r28
 902:	6f 5f       	subi	r22, 0xFF	; 255
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	83 e0       	ldi	r24, 0x03	; 3
 908:	34 df       	rcall	.-408    	; 0x772 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
 90a:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
 910:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x02;
 912:	82 e0       	ldi	r24, 0x02	; 2
 914:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
 916:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
 918:	be 01       	movw	r22, r28
 91a:	6f 5f       	subi	r22, 0xFF	; 255
 91c:	7f 4f       	sbci	r23, 0xFF	; 255
 91e:	84 e0       	ldi	r24, 0x04	; 4
 920:	28 df       	rcall	.-432    	; 0x772 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
 922:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
 924:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
 926:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x01; //Setting VPP to ZIF10
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
 92c:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
 92e:	be 01       	movw	r22, r28
 930:	6f 5f       	subi	r22, 0xFF	; 255
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	85 e0       	ldi	r24, 0x05	; 5
 936:	1d df       	rcall	.-454    	; 0x772 <SetShiftRegData>
	
	WriteShiftRegData();
 938:	30 df       	rcall	.-416    	; 0x79a <WriteShiftRegData>
}
 93a:	0f 90       	pop	r0
 93c:	0f 90       	pop	r0
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	0f 90       	pop	r0
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	08 95       	ret

0000094a <voltageControlInit>:
}

void VLogicClear()
{
	VEN_PORT &= ~(1<<VLENABLE);
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
 94a:	8f ef       	ldi	r24, 0xFF	; 255
 94c:	80 bb       	out	0x10, r24	; 16
 94e:	11 ba       	out	0x11, r1	; 17
 950:	84 b1       	in	r24, 0x04	; 4
 952:	80 67       	ori	r24, 0x70	; 112
 954:	84 b9       	out	0x04, r24	; 4
 956:	85 b1       	in	r24, 0x05	; 5
 958:	8f 78       	andi	r24, 0x8F	; 143
 95a:	85 b9       	out	0x05, r24	; 5
 95c:	08 95       	ret

0000095e <enableVppRegulator>:
 95e:	2c 9a       	sbi	0x05, 4	; 5
 960:	08 95       	ret

00000962 <disableVppRegulator>:
 962:	2c 98       	cbi	0x05, 4	; 5
 964:	08 95       	ret

00000966 <enableVccRegulator>:
 966:	2d 9a       	sbi	0x05, 5	; 5
 968:	08 95       	ret

0000096a <disableVccRegulator>:
 96a:	2d 98       	cbi	0x05, 5	; 5
 96c:	08 95       	ret

0000096e <setVcc>:
 96e:	41 b3       	in	r20, 0x11	; 17
 970:	21 e0       	ldi	r18, 0x01	; 1
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	b9 01       	movw	r22, r18
 976:	02 c0       	rjmp	.+4      	; 0x97c <setVcc+0xe>
 978:	66 0f       	add	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	8a 95       	dec	r24
 97e:	e2 f7       	brpl	.-8      	; 0x978 <setVcc+0xa>
 980:	cb 01       	movw	r24, r22
 982:	84 2b       	or	r24, r20
 984:	81 bb       	out	0x11, r24	; 17
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	08 95       	ret

0000098a <setVpp>:
 98a:	41 b3       	in	r20, 0x11	; 17
 98c:	21 e0       	ldi	r18, 0x01	; 1
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	b9 01       	movw	r22, r18
 992:	02 c0       	rjmp	.+4      	; 0x998 <setVpp+0xe>
 994:	66 0f       	add	r22, r22
 996:	77 1f       	adc	r23, r23
 998:	8a 95       	dec	r24
 99a:	e2 f7       	brpl	.-8      	; 0x994 <setVpp+0xa>
 99c:	cb 01       	movw	r24, r22
 99e:	84 2b       	or	r24, r20
 9a0:	81 bb       	out	0x11, r24	; 17
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	08 95       	ret

000009a6 <enableVLogic>:
}

void enableVLogic()
{
	VEN_PORT |= (1<<VLENABLE);
 9a6:	2e 9a       	sbi	0x05, 6	; 5
 9a8:	08 95       	ret

000009aa <disableVLogic>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
 9aa:	2e 98       	cbi	0x05, 6	; 5
 9ac:	08 95       	ret

000009ae <setVLogic>:
	//prevents accidental triggering of the wrong regulator
	//if(voltageLevel != (VL_3_3V || VL_5V))
	//	return 0;
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
 9ae:	41 b3       	in	r20, 0x11	; 17
 9b0:	21 e0       	ldi	r18, 0x01	; 1
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	b9 01       	movw	r22, r18
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <setVLogic+0xe>
 9b8:	66 0f       	add	r22, r22
 9ba:	77 1f       	adc	r23, r23
 9bc:	8a 95       	dec	r24
 9be:	e2 f7       	brpl	.-8      	; 0x9b8 <setVLogic+0xa>
 9c0:	cb 01       	movw	r24, r22
 9c2:	84 2b       	or	r24, r20
 9c4:	81 bb       	out	0x11, r24	; 17
		return 1;
	//}
}
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	08 95       	ret

000009ca <fputc>:
 9ca:	0f 93       	push	r16
 9cc:	1f 93       	push	r17
 9ce:	cf 93       	push	r28
 9d0:	df 93       	push	r29
 9d2:	18 2f       	mov	r17, r24
 9d4:	09 2f       	mov	r16, r25
 9d6:	eb 01       	movw	r28, r22
 9d8:	8b 81       	ldd	r24, Y+3	; 0x03
 9da:	81 fd       	sbrc	r24, 1
 9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <fputc+0x1a>
 9de:	8f ef       	ldi	r24, 0xFF	; 255
 9e0:	9f ef       	ldi	r25, 0xFF	; 255
 9e2:	20 c0       	rjmp	.+64     	; 0xa24 <fputc+0x5a>
 9e4:	82 ff       	sbrs	r24, 2
 9e6:	10 c0       	rjmp	.+32     	; 0xa08 <fputc+0x3e>
 9e8:	4e 81       	ldd	r20, Y+6	; 0x06
 9ea:	5f 81       	ldd	r21, Y+7	; 0x07
 9ec:	2c 81       	ldd	r18, Y+4	; 0x04
 9ee:	3d 81       	ldd	r19, Y+5	; 0x05
 9f0:	42 17       	cp	r20, r18
 9f2:	53 07       	cpc	r21, r19
 9f4:	7c f4       	brge	.+30     	; 0xa14 <fputc+0x4a>
 9f6:	e8 81       	ld	r30, Y
 9f8:	f9 81       	ldd	r31, Y+1	; 0x01
 9fa:	9f 01       	movw	r18, r30
 9fc:	2f 5f       	subi	r18, 0xFF	; 255
 9fe:	3f 4f       	sbci	r19, 0xFF	; 255
 a00:	39 83       	std	Y+1, r19	; 0x01
 a02:	28 83       	st	Y, r18
 a04:	10 83       	st	Z, r17
 a06:	06 c0       	rjmp	.+12     	; 0xa14 <fputc+0x4a>
 a08:	e8 85       	ldd	r30, Y+8	; 0x08
 a0a:	f9 85       	ldd	r31, Y+9	; 0x09
 a0c:	81 2f       	mov	r24, r17
 a0e:	09 95       	icall
 a10:	89 2b       	or	r24, r25
 a12:	29 f7       	brne	.-54     	; 0x9de <fputc+0x14>
 a14:	2e 81       	ldd	r18, Y+6	; 0x06
 a16:	3f 81       	ldd	r19, Y+7	; 0x07
 a18:	2f 5f       	subi	r18, 0xFF	; 255
 a1a:	3f 4f       	sbci	r19, 0xFF	; 255
 a1c:	3f 83       	std	Y+7, r19	; 0x07
 a1e:	2e 83       	std	Y+6, r18	; 0x06
 a20:	81 2f       	mov	r24, r17
 a22:	90 2f       	mov	r25, r16
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	08 95       	ret

00000a2e <printf>:
 a2e:	cf 93       	push	r28
 a30:	df 93       	push	r29
 a32:	cd b7       	in	r28, 0x3d	; 61
 a34:	de b7       	in	r29, 0x3e	; 62
 a36:	fe 01       	movw	r30, r28
 a38:	35 96       	adiw	r30, 0x05	; 5
 a3a:	61 91       	ld	r22, Z+
 a3c:	71 91       	ld	r23, Z+
 a3e:	af 01       	movw	r20, r30
 a40:	80 91 cb 02 	lds	r24, 0x02CB
 a44:	90 91 cc 02 	lds	r25, 0x02CC
 a48:	35 d0       	rcall	.+106    	; 0xab4 <vfprintf>
 a4a:	df 91       	pop	r29
 a4c:	cf 91       	pop	r28
 a4e:	08 95       	ret

00000a50 <putchar>:
 a50:	60 91 cb 02 	lds	r22, 0x02CB
 a54:	70 91 cc 02 	lds	r23, 0x02CC
 a58:	b8 cf       	rjmp	.-144    	; 0x9ca <fputc>

00000a5a <puts>:
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	e0 91 cb 02 	lds	r30, 0x02CB
 a66:	f0 91 cc 02 	lds	r31, 0x02CC
 a6a:	23 81       	ldd	r18, Z+3	; 0x03
 a6c:	21 ff       	sbrs	r18, 1
 a6e:	1b c0       	rjmp	.+54     	; 0xaa6 <puts+0x4c>
 a70:	ec 01       	movw	r28, r24
 a72:	00 e0       	ldi	r16, 0x00	; 0
 a74:	10 e0       	ldi	r17, 0x00	; 0
 a76:	89 91       	ld	r24, Y+
 a78:	60 91 cb 02 	lds	r22, 0x02CB
 a7c:	70 91 cc 02 	lds	r23, 0x02CC
 a80:	db 01       	movw	r26, r22
 a82:	18 96       	adiw	r26, 0x08	; 8
 a84:	ed 91       	ld	r30, X+
 a86:	fc 91       	ld	r31, X
 a88:	19 97       	sbiw	r26, 0x09	; 9
 a8a:	88 23       	and	r24, r24
 a8c:	31 f0       	breq	.+12     	; 0xa9a <puts+0x40>
 a8e:	09 95       	icall
 a90:	89 2b       	or	r24, r25
 a92:	89 f3       	breq	.-30     	; 0xa76 <puts+0x1c>
 a94:	0f ef       	ldi	r16, 0xFF	; 255
 a96:	1f ef       	ldi	r17, 0xFF	; 255
 a98:	ee cf       	rjmp	.-36     	; 0xa76 <puts+0x1c>
 a9a:	8a e0       	ldi	r24, 0x0A	; 10
 a9c:	09 95       	icall
 a9e:	89 2b       	or	r24, r25
 aa0:	11 f4       	brne	.+4      	; 0xaa6 <puts+0x4c>
 aa2:	c8 01       	movw	r24, r16
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <puts+0x50>
 aa6:	8f ef       	ldi	r24, 0xFF	; 255
 aa8:	9f ef       	ldi	r25, 0xFF	; 255
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	1f 91       	pop	r17
 ab0:	0f 91       	pop	r16
 ab2:	08 95       	ret

00000ab4 <vfprintf>:
 ab4:	2f 92       	push	r2
 ab6:	3f 92       	push	r3
 ab8:	4f 92       	push	r4
 aba:	5f 92       	push	r5
 abc:	6f 92       	push	r6
 abe:	7f 92       	push	r7
 ac0:	8f 92       	push	r8
 ac2:	9f 92       	push	r9
 ac4:	af 92       	push	r10
 ac6:	bf 92       	push	r11
 ac8:	cf 92       	push	r12
 aca:	df 92       	push	r13
 acc:	ef 92       	push	r14
 ace:	ff 92       	push	r15
 ad0:	0f 93       	push	r16
 ad2:	1f 93       	push	r17
 ad4:	cf 93       	push	r28
 ad6:	df 93       	push	r29
 ad8:	cd b7       	in	r28, 0x3d	; 61
 ada:	de b7       	in	r29, 0x3e	; 62
 adc:	2c 97       	sbiw	r28, 0x0c	; 12
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	f8 94       	cli
 ae2:	de bf       	out	0x3e, r29	; 62
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	cd bf       	out	0x3d, r28	; 61
 ae8:	7c 01       	movw	r14, r24
 aea:	6b 01       	movw	r12, r22
 aec:	8a 01       	movw	r16, r20
 aee:	fc 01       	movw	r30, r24
 af0:	17 82       	std	Z+7, r1	; 0x07
 af2:	16 82       	std	Z+6, r1	; 0x06
 af4:	83 81       	ldd	r24, Z+3	; 0x03
 af6:	81 ff       	sbrs	r24, 1
 af8:	b0 c1       	rjmp	.+864    	; 0xe5a <vfprintf+0x3a6>
 afa:	ce 01       	movw	r24, r28
 afc:	01 96       	adiw	r24, 0x01	; 1
 afe:	4c 01       	movw	r8, r24
 b00:	f7 01       	movw	r30, r14
 b02:	93 81       	ldd	r25, Z+3	; 0x03
 b04:	f6 01       	movw	r30, r12
 b06:	93 fd       	sbrc	r25, 3
 b08:	85 91       	lpm	r24, Z+
 b0a:	93 ff       	sbrs	r25, 3
 b0c:	81 91       	ld	r24, Z+
 b0e:	6f 01       	movw	r12, r30
 b10:	88 23       	and	r24, r24
 b12:	09 f4       	brne	.+2      	; 0xb16 <vfprintf+0x62>
 b14:	9e c1       	rjmp	.+828    	; 0xe52 <vfprintf+0x39e>
 b16:	85 32       	cpi	r24, 0x25	; 37
 b18:	39 f4       	brne	.+14     	; 0xb28 <vfprintf+0x74>
 b1a:	93 fd       	sbrc	r25, 3
 b1c:	85 91       	lpm	r24, Z+
 b1e:	93 ff       	sbrs	r25, 3
 b20:	81 91       	ld	r24, Z+
 b22:	6f 01       	movw	r12, r30
 b24:	85 32       	cpi	r24, 0x25	; 37
 b26:	21 f4       	brne	.+8      	; 0xb30 <vfprintf+0x7c>
 b28:	b7 01       	movw	r22, r14
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	4e df       	rcall	.-356    	; 0x9ca <fputc>
 b2e:	e8 cf       	rjmp	.-48     	; 0xb00 <vfprintf+0x4c>
 b30:	51 2c       	mov	r5, r1
 b32:	31 2c       	mov	r3, r1
 b34:	20 e0       	ldi	r18, 0x00	; 0
 b36:	20 32       	cpi	r18, 0x20	; 32
 b38:	a0 f4       	brcc	.+40     	; 0xb62 <vfprintf+0xae>
 b3a:	8b 32       	cpi	r24, 0x2B	; 43
 b3c:	69 f0       	breq	.+26     	; 0xb58 <vfprintf+0xa4>
 b3e:	30 f4       	brcc	.+12     	; 0xb4c <vfprintf+0x98>
 b40:	80 32       	cpi	r24, 0x20	; 32
 b42:	59 f0       	breq	.+22     	; 0xb5a <vfprintf+0xa6>
 b44:	83 32       	cpi	r24, 0x23	; 35
 b46:	69 f4       	brne	.+26     	; 0xb62 <vfprintf+0xae>
 b48:	20 61       	ori	r18, 0x10	; 16
 b4a:	2c c0       	rjmp	.+88     	; 0xba4 <vfprintf+0xf0>
 b4c:	8d 32       	cpi	r24, 0x2D	; 45
 b4e:	39 f0       	breq	.+14     	; 0xb5e <vfprintf+0xaa>
 b50:	80 33       	cpi	r24, 0x30	; 48
 b52:	39 f4       	brne	.+14     	; 0xb62 <vfprintf+0xae>
 b54:	21 60       	ori	r18, 0x01	; 1
 b56:	26 c0       	rjmp	.+76     	; 0xba4 <vfprintf+0xf0>
 b58:	22 60       	ori	r18, 0x02	; 2
 b5a:	24 60       	ori	r18, 0x04	; 4
 b5c:	23 c0       	rjmp	.+70     	; 0xba4 <vfprintf+0xf0>
 b5e:	28 60       	ori	r18, 0x08	; 8
 b60:	21 c0       	rjmp	.+66     	; 0xba4 <vfprintf+0xf0>
 b62:	27 fd       	sbrc	r18, 7
 b64:	27 c0       	rjmp	.+78     	; 0xbb4 <vfprintf+0x100>
 b66:	30 ed       	ldi	r19, 0xD0	; 208
 b68:	38 0f       	add	r19, r24
 b6a:	3a 30       	cpi	r19, 0x0A	; 10
 b6c:	78 f4       	brcc	.+30     	; 0xb8c <vfprintf+0xd8>
 b6e:	26 ff       	sbrs	r18, 6
 b70:	06 c0       	rjmp	.+12     	; 0xb7e <vfprintf+0xca>
 b72:	fa e0       	ldi	r31, 0x0A	; 10
 b74:	5f 9e       	mul	r5, r31
 b76:	30 0d       	add	r19, r0
 b78:	11 24       	eor	r1, r1
 b7a:	53 2e       	mov	r5, r19
 b7c:	13 c0       	rjmp	.+38     	; 0xba4 <vfprintf+0xf0>
 b7e:	8a e0       	ldi	r24, 0x0A	; 10
 b80:	38 9e       	mul	r3, r24
 b82:	30 0d       	add	r19, r0
 b84:	11 24       	eor	r1, r1
 b86:	33 2e       	mov	r3, r19
 b88:	20 62       	ori	r18, 0x20	; 32
 b8a:	0c c0       	rjmp	.+24     	; 0xba4 <vfprintf+0xf0>
 b8c:	8e 32       	cpi	r24, 0x2E	; 46
 b8e:	21 f4       	brne	.+8      	; 0xb98 <vfprintf+0xe4>
 b90:	26 fd       	sbrc	r18, 6
 b92:	5f c1       	rjmp	.+702    	; 0xe52 <vfprintf+0x39e>
 b94:	20 64       	ori	r18, 0x40	; 64
 b96:	06 c0       	rjmp	.+12     	; 0xba4 <vfprintf+0xf0>
 b98:	8c 36       	cpi	r24, 0x6C	; 108
 b9a:	11 f4       	brne	.+4      	; 0xba0 <vfprintf+0xec>
 b9c:	20 68       	ori	r18, 0x80	; 128
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <vfprintf+0xf0>
 ba0:	88 36       	cpi	r24, 0x68	; 104
 ba2:	41 f4       	brne	.+16     	; 0xbb4 <vfprintf+0x100>
 ba4:	f6 01       	movw	r30, r12
 ba6:	93 fd       	sbrc	r25, 3
 ba8:	85 91       	lpm	r24, Z+
 baa:	93 ff       	sbrs	r25, 3
 bac:	81 91       	ld	r24, Z+
 bae:	6f 01       	movw	r12, r30
 bb0:	81 11       	cpse	r24, r1
 bb2:	c1 cf       	rjmp	.-126    	; 0xb36 <vfprintf+0x82>
 bb4:	98 2f       	mov	r25, r24
 bb6:	9f 7d       	andi	r25, 0xDF	; 223
 bb8:	95 54       	subi	r25, 0x45	; 69
 bba:	93 30       	cpi	r25, 0x03	; 3
 bbc:	28 f4       	brcc	.+10     	; 0xbc8 <vfprintf+0x114>
 bbe:	0c 5f       	subi	r16, 0xFC	; 252
 bc0:	1f 4f       	sbci	r17, 0xFF	; 255
 bc2:	ff e3       	ldi	r31, 0x3F	; 63
 bc4:	f9 83       	std	Y+1, r31	; 0x01
 bc6:	0d c0       	rjmp	.+26     	; 0xbe2 <vfprintf+0x12e>
 bc8:	83 36       	cpi	r24, 0x63	; 99
 bca:	31 f0       	breq	.+12     	; 0xbd8 <vfprintf+0x124>
 bcc:	83 37       	cpi	r24, 0x73	; 115
 bce:	71 f0       	breq	.+28     	; 0xbec <vfprintf+0x138>
 bd0:	83 35       	cpi	r24, 0x53	; 83
 bd2:	09 f0       	breq	.+2      	; 0xbd6 <vfprintf+0x122>
 bd4:	57 c0       	rjmp	.+174    	; 0xc84 <vfprintf+0x1d0>
 bd6:	21 c0       	rjmp	.+66     	; 0xc1a <vfprintf+0x166>
 bd8:	f8 01       	movw	r30, r16
 bda:	80 81       	ld	r24, Z
 bdc:	89 83       	std	Y+1, r24	; 0x01
 bde:	0e 5f       	subi	r16, 0xFE	; 254
 be0:	1f 4f       	sbci	r17, 0xFF	; 255
 be2:	44 24       	eor	r4, r4
 be4:	43 94       	inc	r4
 be6:	51 2c       	mov	r5, r1
 be8:	54 01       	movw	r10, r8
 bea:	14 c0       	rjmp	.+40     	; 0xc14 <vfprintf+0x160>
 bec:	38 01       	movw	r6, r16
 bee:	f2 e0       	ldi	r31, 0x02	; 2
 bf0:	6f 0e       	add	r6, r31
 bf2:	71 1c       	adc	r7, r1
 bf4:	f8 01       	movw	r30, r16
 bf6:	a0 80       	ld	r10, Z
 bf8:	b1 80       	ldd	r11, Z+1	; 0x01
 bfa:	26 ff       	sbrs	r18, 6
 bfc:	03 c0       	rjmp	.+6      	; 0xc04 <vfprintf+0x150>
 bfe:	65 2d       	mov	r22, r5
 c00:	70 e0       	ldi	r23, 0x00	; 0
 c02:	02 c0       	rjmp	.+4      	; 0xc08 <vfprintf+0x154>
 c04:	6f ef       	ldi	r22, 0xFF	; 255
 c06:	7f ef       	ldi	r23, 0xFF	; 255
 c08:	c5 01       	movw	r24, r10
 c0a:	2c 87       	std	Y+12, r18	; 0x0c
 c0c:	4c d1       	rcall	.+664    	; 0xea6 <strnlen>
 c0e:	2c 01       	movw	r4, r24
 c10:	83 01       	movw	r16, r6
 c12:	2c 85       	ldd	r18, Y+12	; 0x0c
 c14:	2f 77       	andi	r18, 0x7F	; 127
 c16:	22 2e       	mov	r2, r18
 c18:	16 c0       	rjmp	.+44     	; 0xc46 <vfprintf+0x192>
 c1a:	38 01       	movw	r6, r16
 c1c:	f2 e0       	ldi	r31, 0x02	; 2
 c1e:	6f 0e       	add	r6, r31
 c20:	71 1c       	adc	r7, r1
 c22:	f8 01       	movw	r30, r16
 c24:	a0 80       	ld	r10, Z
 c26:	b1 80       	ldd	r11, Z+1	; 0x01
 c28:	26 ff       	sbrs	r18, 6
 c2a:	03 c0       	rjmp	.+6      	; 0xc32 <vfprintf+0x17e>
 c2c:	65 2d       	mov	r22, r5
 c2e:	70 e0       	ldi	r23, 0x00	; 0
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <vfprintf+0x182>
 c32:	6f ef       	ldi	r22, 0xFF	; 255
 c34:	7f ef       	ldi	r23, 0xFF	; 255
 c36:	c5 01       	movw	r24, r10
 c38:	2c 87       	std	Y+12, r18	; 0x0c
 c3a:	2a d1       	rcall	.+596    	; 0xe90 <strnlen_P>
 c3c:	2c 01       	movw	r4, r24
 c3e:	2c 85       	ldd	r18, Y+12	; 0x0c
 c40:	20 68       	ori	r18, 0x80	; 128
 c42:	22 2e       	mov	r2, r18
 c44:	83 01       	movw	r16, r6
 c46:	23 fc       	sbrc	r2, 3
 c48:	19 c0       	rjmp	.+50     	; 0xc7c <vfprintf+0x1c8>
 c4a:	83 2d       	mov	r24, r3
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	48 16       	cp	r4, r24
 c50:	59 06       	cpc	r5, r25
 c52:	a0 f4       	brcc	.+40     	; 0xc7c <vfprintf+0x1c8>
 c54:	b7 01       	movw	r22, r14
 c56:	80 e2       	ldi	r24, 0x20	; 32
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	b7 de       	rcall	.-658    	; 0x9ca <fputc>
 c5c:	3a 94       	dec	r3
 c5e:	f5 cf       	rjmp	.-22     	; 0xc4a <vfprintf+0x196>
 c60:	f5 01       	movw	r30, r10
 c62:	27 fc       	sbrc	r2, 7
 c64:	85 91       	lpm	r24, Z+
 c66:	27 fe       	sbrs	r2, 7
 c68:	81 91       	ld	r24, Z+
 c6a:	5f 01       	movw	r10, r30
 c6c:	b7 01       	movw	r22, r14
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	ac de       	rcall	.-680    	; 0x9ca <fputc>
 c72:	31 10       	cpse	r3, r1
 c74:	3a 94       	dec	r3
 c76:	f1 e0       	ldi	r31, 0x01	; 1
 c78:	4f 1a       	sub	r4, r31
 c7a:	51 08       	sbc	r5, r1
 c7c:	41 14       	cp	r4, r1
 c7e:	51 04       	cpc	r5, r1
 c80:	79 f7       	brne	.-34     	; 0xc60 <vfprintf+0x1ac>
 c82:	de c0       	rjmp	.+444    	; 0xe40 <vfprintf+0x38c>
 c84:	84 36       	cpi	r24, 0x64	; 100
 c86:	11 f0       	breq	.+4      	; 0xc8c <vfprintf+0x1d8>
 c88:	89 36       	cpi	r24, 0x69	; 105
 c8a:	31 f5       	brne	.+76     	; 0xcd8 <vfprintf+0x224>
 c8c:	f8 01       	movw	r30, r16
 c8e:	27 ff       	sbrs	r18, 7
 c90:	07 c0       	rjmp	.+14     	; 0xca0 <vfprintf+0x1ec>
 c92:	60 81       	ld	r22, Z
 c94:	71 81       	ldd	r23, Z+1	; 0x01
 c96:	82 81       	ldd	r24, Z+2	; 0x02
 c98:	93 81       	ldd	r25, Z+3	; 0x03
 c9a:	0c 5f       	subi	r16, 0xFC	; 252
 c9c:	1f 4f       	sbci	r17, 0xFF	; 255
 c9e:	08 c0       	rjmp	.+16     	; 0xcb0 <vfprintf+0x1fc>
 ca0:	60 81       	ld	r22, Z
 ca2:	71 81       	ldd	r23, Z+1	; 0x01
 ca4:	88 27       	eor	r24, r24
 ca6:	77 fd       	sbrc	r23, 7
 ca8:	80 95       	com	r24
 caa:	98 2f       	mov	r25, r24
 cac:	0e 5f       	subi	r16, 0xFE	; 254
 cae:	1f 4f       	sbci	r17, 0xFF	; 255
 cb0:	2f 76       	andi	r18, 0x6F	; 111
 cb2:	b2 2e       	mov	r11, r18
 cb4:	97 ff       	sbrs	r25, 7
 cb6:	09 c0       	rjmp	.+18     	; 0xcca <vfprintf+0x216>
 cb8:	90 95       	com	r25
 cba:	80 95       	com	r24
 cbc:	70 95       	com	r23
 cbe:	61 95       	neg	r22
 cc0:	7f 4f       	sbci	r23, 0xFF	; 255
 cc2:	8f 4f       	sbci	r24, 0xFF	; 255
 cc4:	9f 4f       	sbci	r25, 0xFF	; 255
 cc6:	20 68       	ori	r18, 0x80	; 128
 cc8:	b2 2e       	mov	r11, r18
 cca:	2a e0       	ldi	r18, 0x0A	; 10
 ccc:	30 e0       	ldi	r19, 0x00	; 0
 cce:	a4 01       	movw	r20, r8
 cd0:	f5 d0       	rcall	.+490    	; 0xebc <__ultoa_invert>
 cd2:	a8 2e       	mov	r10, r24
 cd4:	a8 18       	sub	r10, r8
 cd6:	43 c0       	rjmp	.+134    	; 0xd5e <vfprintf+0x2aa>
 cd8:	85 37       	cpi	r24, 0x75	; 117
 cda:	29 f4       	brne	.+10     	; 0xce6 <vfprintf+0x232>
 cdc:	2f 7e       	andi	r18, 0xEF	; 239
 cde:	b2 2e       	mov	r11, r18
 ce0:	2a e0       	ldi	r18, 0x0A	; 10
 ce2:	30 e0       	ldi	r19, 0x00	; 0
 ce4:	25 c0       	rjmp	.+74     	; 0xd30 <vfprintf+0x27c>
 ce6:	f2 2f       	mov	r31, r18
 ce8:	f9 7f       	andi	r31, 0xF9	; 249
 cea:	bf 2e       	mov	r11, r31
 cec:	8f 36       	cpi	r24, 0x6F	; 111
 cee:	c1 f0       	breq	.+48     	; 0xd20 <vfprintf+0x26c>
 cf0:	18 f4       	brcc	.+6      	; 0xcf8 <vfprintf+0x244>
 cf2:	88 35       	cpi	r24, 0x58	; 88
 cf4:	79 f0       	breq	.+30     	; 0xd14 <vfprintf+0x260>
 cf6:	ad c0       	rjmp	.+346    	; 0xe52 <vfprintf+0x39e>
 cf8:	80 37       	cpi	r24, 0x70	; 112
 cfa:	19 f0       	breq	.+6      	; 0xd02 <vfprintf+0x24e>
 cfc:	88 37       	cpi	r24, 0x78	; 120
 cfe:	21 f0       	breq	.+8      	; 0xd08 <vfprintf+0x254>
 d00:	a8 c0       	rjmp	.+336    	; 0xe52 <vfprintf+0x39e>
 d02:	2f 2f       	mov	r18, r31
 d04:	20 61       	ori	r18, 0x10	; 16
 d06:	b2 2e       	mov	r11, r18
 d08:	b4 fe       	sbrs	r11, 4
 d0a:	0d c0       	rjmp	.+26     	; 0xd26 <vfprintf+0x272>
 d0c:	8b 2d       	mov	r24, r11
 d0e:	84 60       	ori	r24, 0x04	; 4
 d10:	b8 2e       	mov	r11, r24
 d12:	09 c0       	rjmp	.+18     	; 0xd26 <vfprintf+0x272>
 d14:	24 ff       	sbrs	r18, 4
 d16:	0a c0       	rjmp	.+20     	; 0xd2c <vfprintf+0x278>
 d18:	9f 2f       	mov	r25, r31
 d1a:	96 60       	ori	r25, 0x06	; 6
 d1c:	b9 2e       	mov	r11, r25
 d1e:	06 c0       	rjmp	.+12     	; 0xd2c <vfprintf+0x278>
 d20:	28 e0       	ldi	r18, 0x08	; 8
 d22:	30 e0       	ldi	r19, 0x00	; 0
 d24:	05 c0       	rjmp	.+10     	; 0xd30 <vfprintf+0x27c>
 d26:	20 e1       	ldi	r18, 0x10	; 16
 d28:	30 e0       	ldi	r19, 0x00	; 0
 d2a:	02 c0       	rjmp	.+4      	; 0xd30 <vfprintf+0x27c>
 d2c:	20 e1       	ldi	r18, 0x10	; 16
 d2e:	32 e0       	ldi	r19, 0x02	; 2
 d30:	f8 01       	movw	r30, r16
 d32:	b7 fe       	sbrs	r11, 7
 d34:	07 c0       	rjmp	.+14     	; 0xd44 <vfprintf+0x290>
 d36:	60 81       	ld	r22, Z
 d38:	71 81       	ldd	r23, Z+1	; 0x01
 d3a:	82 81       	ldd	r24, Z+2	; 0x02
 d3c:	93 81       	ldd	r25, Z+3	; 0x03
 d3e:	0c 5f       	subi	r16, 0xFC	; 252
 d40:	1f 4f       	sbci	r17, 0xFF	; 255
 d42:	06 c0       	rjmp	.+12     	; 0xd50 <vfprintf+0x29c>
 d44:	60 81       	ld	r22, Z
 d46:	71 81       	ldd	r23, Z+1	; 0x01
 d48:	80 e0       	ldi	r24, 0x00	; 0
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	0e 5f       	subi	r16, 0xFE	; 254
 d4e:	1f 4f       	sbci	r17, 0xFF	; 255
 d50:	a4 01       	movw	r20, r8
 d52:	b4 d0       	rcall	.+360    	; 0xebc <__ultoa_invert>
 d54:	a8 2e       	mov	r10, r24
 d56:	a8 18       	sub	r10, r8
 d58:	fb 2d       	mov	r31, r11
 d5a:	ff 77       	andi	r31, 0x7F	; 127
 d5c:	bf 2e       	mov	r11, r31
 d5e:	b6 fe       	sbrs	r11, 6
 d60:	0b c0       	rjmp	.+22     	; 0xd78 <vfprintf+0x2c4>
 d62:	2b 2d       	mov	r18, r11
 d64:	2e 7f       	andi	r18, 0xFE	; 254
 d66:	a5 14       	cp	r10, r5
 d68:	50 f4       	brcc	.+20     	; 0xd7e <vfprintf+0x2ca>
 d6a:	b4 fe       	sbrs	r11, 4
 d6c:	0a c0       	rjmp	.+20     	; 0xd82 <vfprintf+0x2ce>
 d6e:	b2 fc       	sbrc	r11, 2
 d70:	08 c0       	rjmp	.+16     	; 0xd82 <vfprintf+0x2ce>
 d72:	2b 2d       	mov	r18, r11
 d74:	2e 7e       	andi	r18, 0xEE	; 238
 d76:	05 c0       	rjmp	.+10     	; 0xd82 <vfprintf+0x2ce>
 d78:	7a 2c       	mov	r7, r10
 d7a:	2b 2d       	mov	r18, r11
 d7c:	03 c0       	rjmp	.+6      	; 0xd84 <vfprintf+0x2d0>
 d7e:	7a 2c       	mov	r7, r10
 d80:	01 c0       	rjmp	.+2      	; 0xd84 <vfprintf+0x2d0>
 d82:	75 2c       	mov	r7, r5
 d84:	24 ff       	sbrs	r18, 4
 d86:	0d c0       	rjmp	.+26     	; 0xda2 <vfprintf+0x2ee>
 d88:	fe 01       	movw	r30, r28
 d8a:	ea 0d       	add	r30, r10
 d8c:	f1 1d       	adc	r31, r1
 d8e:	80 81       	ld	r24, Z
 d90:	80 33       	cpi	r24, 0x30	; 48
 d92:	11 f4       	brne	.+4      	; 0xd98 <vfprintf+0x2e4>
 d94:	29 7e       	andi	r18, 0xE9	; 233
 d96:	09 c0       	rjmp	.+18     	; 0xdaa <vfprintf+0x2f6>
 d98:	22 ff       	sbrs	r18, 2
 d9a:	06 c0       	rjmp	.+12     	; 0xda8 <vfprintf+0x2f4>
 d9c:	73 94       	inc	r7
 d9e:	73 94       	inc	r7
 da0:	04 c0       	rjmp	.+8      	; 0xdaa <vfprintf+0x2f6>
 da2:	82 2f       	mov	r24, r18
 da4:	86 78       	andi	r24, 0x86	; 134
 da6:	09 f0       	breq	.+2      	; 0xdaa <vfprintf+0x2f6>
 da8:	73 94       	inc	r7
 daa:	23 fd       	sbrc	r18, 3
 dac:	12 c0       	rjmp	.+36     	; 0xdd2 <vfprintf+0x31e>
 dae:	20 ff       	sbrs	r18, 0
 db0:	06 c0       	rjmp	.+12     	; 0xdbe <vfprintf+0x30a>
 db2:	5a 2c       	mov	r5, r10
 db4:	73 14       	cp	r7, r3
 db6:	18 f4       	brcc	.+6      	; 0xdbe <vfprintf+0x30a>
 db8:	53 0c       	add	r5, r3
 dba:	57 18       	sub	r5, r7
 dbc:	73 2c       	mov	r7, r3
 dbe:	73 14       	cp	r7, r3
 dc0:	60 f4       	brcc	.+24     	; 0xdda <vfprintf+0x326>
 dc2:	b7 01       	movw	r22, r14
 dc4:	80 e2       	ldi	r24, 0x20	; 32
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	2c 87       	std	Y+12, r18	; 0x0c
 dca:	ff dd       	rcall	.-1026   	; 0x9ca <fputc>
 dcc:	73 94       	inc	r7
 dce:	2c 85       	ldd	r18, Y+12	; 0x0c
 dd0:	f6 cf       	rjmp	.-20     	; 0xdbe <vfprintf+0x30a>
 dd2:	73 14       	cp	r7, r3
 dd4:	10 f4       	brcc	.+4      	; 0xdda <vfprintf+0x326>
 dd6:	37 18       	sub	r3, r7
 dd8:	01 c0       	rjmp	.+2      	; 0xddc <vfprintf+0x328>
 dda:	31 2c       	mov	r3, r1
 ddc:	24 ff       	sbrs	r18, 4
 dde:	11 c0       	rjmp	.+34     	; 0xe02 <vfprintf+0x34e>
 de0:	b7 01       	movw	r22, r14
 de2:	80 e3       	ldi	r24, 0x30	; 48
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	2c 87       	std	Y+12, r18	; 0x0c
 de8:	f0 dd       	rcall	.-1056   	; 0x9ca <fputc>
 dea:	2c 85       	ldd	r18, Y+12	; 0x0c
 dec:	22 ff       	sbrs	r18, 2
 dee:	16 c0       	rjmp	.+44     	; 0xe1c <vfprintf+0x368>
 df0:	21 ff       	sbrs	r18, 1
 df2:	03 c0       	rjmp	.+6      	; 0xdfa <vfprintf+0x346>
 df4:	88 e5       	ldi	r24, 0x58	; 88
 df6:	90 e0       	ldi	r25, 0x00	; 0
 df8:	02 c0       	rjmp	.+4      	; 0xdfe <vfprintf+0x34a>
 dfa:	88 e7       	ldi	r24, 0x78	; 120
 dfc:	90 e0       	ldi	r25, 0x00	; 0
 dfe:	b7 01       	movw	r22, r14
 e00:	0c c0       	rjmp	.+24     	; 0xe1a <vfprintf+0x366>
 e02:	82 2f       	mov	r24, r18
 e04:	86 78       	andi	r24, 0x86	; 134
 e06:	51 f0       	breq	.+20     	; 0xe1c <vfprintf+0x368>
 e08:	21 fd       	sbrc	r18, 1
 e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vfprintf+0x35c>
 e0c:	80 e2       	ldi	r24, 0x20	; 32
 e0e:	01 c0       	rjmp	.+2      	; 0xe12 <vfprintf+0x35e>
 e10:	8b e2       	ldi	r24, 0x2B	; 43
 e12:	27 fd       	sbrc	r18, 7
 e14:	8d e2       	ldi	r24, 0x2D	; 45
 e16:	b7 01       	movw	r22, r14
 e18:	90 e0       	ldi	r25, 0x00	; 0
 e1a:	d7 dd       	rcall	.-1106   	; 0x9ca <fputc>
 e1c:	a5 14       	cp	r10, r5
 e1e:	30 f4       	brcc	.+12     	; 0xe2c <vfprintf+0x378>
 e20:	b7 01       	movw	r22, r14
 e22:	80 e3       	ldi	r24, 0x30	; 48
 e24:	90 e0       	ldi	r25, 0x00	; 0
 e26:	d1 dd       	rcall	.-1118   	; 0x9ca <fputc>
 e28:	5a 94       	dec	r5
 e2a:	f8 cf       	rjmp	.-16     	; 0xe1c <vfprintf+0x368>
 e2c:	aa 94       	dec	r10
 e2e:	f4 01       	movw	r30, r8
 e30:	ea 0d       	add	r30, r10
 e32:	f1 1d       	adc	r31, r1
 e34:	80 81       	ld	r24, Z
 e36:	b7 01       	movw	r22, r14
 e38:	90 e0       	ldi	r25, 0x00	; 0
 e3a:	c7 dd       	rcall	.-1138   	; 0x9ca <fputc>
 e3c:	a1 10       	cpse	r10, r1
 e3e:	f6 cf       	rjmp	.-20     	; 0xe2c <vfprintf+0x378>
 e40:	33 20       	and	r3, r3
 e42:	09 f4       	brne	.+2      	; 0xe46 <vfprintf+0x392>
 e44:	5d ce       	rjmp	.-838    	; 0xb00 <vfprintf+0x4c>
 e46:	b7 01       	movw	r22, r14
 e48:	80 e2       	ldi	r24, 0x20	; 32
 e4a:	90 e0       	ldi	r25, 0x00	; 0
 e4c:	be dd       	rcall	.-1156   	; 0x9ca <fputc>
 e4e:	3a 94       	dec	r3
 e50:	f7 cf       	rjmp	.-18     	; 0xe40 <vfprintf+0x38c>
 e52:	f7 01       	movw	r30, r14
 e54:	86 81       	ldd	r24, Z+6	; 0x06
 e56:	97 81       	ldd	r25, Z+7	; 0x07
 e58:	02 c0       	rjmp	.+4      	; 0xe5e <vfprintf+0x3aa>
 e5a:	8f ef       	ldi	r24, 0xFF	; 255
 e5c:	9f ef       	ldi	r25, 0xFF	; 255
 e5e:	2c 96       	adiw	r28, 0x0c	; 12
 e60:	0f b6       	in	r0, 0x3f	; 63
 e62:	f8 94       	cli
 e64:	de bf       	out	0x3e, r29	; 62
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	cd bf       	out	0x3d, r28	; 61
 e6a:	df 91       	pop	r29
 e6c:	cf 91       	pop	r28
 e6e:	1f 91       	pop	r17
 e70:	0f 91       	pop	r16
 e72:	ff 90       	pop	r15
 e74:	ef 90       	pop	r14
 e76:	df 90       	pop	r13
 e78:	cf 90       	pop	r12
 e7a:	bf 90       	pop	r11
 e7c:	af 90       	pop	r10
 e7e:	9f 90       	pop	r9
 e80:	8f 90       	pop	r8
 e82:	7f 90       	pop	r7
 e84:	6f 90       	pop	r6
 e86:	5f 90       	pop	r5
 e88:	4f 90       	pop	r4
 e8a:	3f 90       	pop	r3
 e8c:	2f 90       	pop	r2
 e8e:	08 95       	ret

00000e90 <strnlen_P>:
 e90:	fc 01       	movw	r30, r24
 e92:	05 90       	lpm	r0, Z+
 e94:	61 50       	subi	r22, 0x01	; 1
 e96:	70 40       	sbci	r23, 0x00	; 0
 e98:	01 10       	cpse	r0, r1
 e9a:	d8 f7       	brcc	.-10     	; 0xe92 <strnlen_P+0x2>
 e9c:	80 95       	com	r24
 e9e:	90 95       	com	r25
 ea0:	8e 0f       	add	r24, r30
 ea2:	9f 1f       	adc	r25, r31
 ea4:	08 95       	ret

00000ea6 <strnlen>:
 ea6:	fc 01       	movw	r30, r24
 ea8:	61 50       	subi	r22, 0x01	; 1
 eaa:	70 40       	sbci	r23, 0x00	; 0
 eac:	01 90       	ld	r0, Z+
 eae:	01 10       	cpse	r0, r1
 eb0:	d8 f7       	brcc	.-10     	; 0xea8 <strnlen+0x2>
 eb2:	80 95       	com	r24
 eb4:	90 95       	com	r25
 eb6:	8e 0f       	add	r24, r30
 eb8:	9f 1f       	adc	r25, r31
 eba:	08 95       	ret

00000ebc <__ultoa_invert>:
 ebc:	fa 01       	movw	r30, r20
 ebe:	aa 27       	eor	r26, r26
 ec0:	28 30       	cpi	r18, 0x08	; 8
 ec2:	51 f1       	breq	.+84     	; 0xf18 <__ultoa_invert+0x5c>
 ec4:	20 31       	cpi	r18, 0x10	; 16
 ec6:	81 f1       	breq	.+96     	; 0xf28 <__ultoa_invert+0x6c>
 ec8:	e8 94       	clt
 eca:	6f 93       	push	r22
 ecc:	6e 7f       	andi	r22, 0xFE	; 254
 ece:	6e 5f       	subi	r22, 0xFE	; 254
 ed0:	7f 4f       	sbci	r23, 0xFF	; 255
 ed2:	8f 4f       	sbci	r24, 0xFF	; 255
 ed4:	9f 4f       	sbci	r25, 0xFF	; 255
 ed6:	af 4f       	sbci	r26, 0xFF	; 255
 ed8:	b1 e0       	ldi	r27, 0x01	; 1
 eda:	3e d0       	rcall	.+124    	; 0xf58 <__ultoa_invert+0x9c>
 edc:	b4 e0       	ldi	r27, 0x04	; 4
 ede:	3c d0       	rcall	.+120    	; 0xf58 <__ultoa_invert+0x9c>
 ee0:	67 0f       	add	r22, r23
 ee2:	78 1f       	adc	r23, r24
 ee4:	89 1f       	adc	r24, r25
 ee6:	9a 1f       	adc	r25, r26
 ee8:	a1 1d       	adc	r26, r1
 eea:	68 0f       	add	r22, r24
 eec:	79 1f       	adc	r23, r25
 eee:	8a 1f       	adc	r24, r26
 ef0:	91 1d       	adc	r25, r1
 ef2:	a1 1d       	adc	r26, r1
 ef4:	6a 0f       	add	r22, r26
 ef6:	71 1d       	adc	r23, r1
 ef8:	81 1d       	adc	r24, r1
 efa:	91 1d       	adc	r25, r1
 efc:	a1 1d       	adc	r26, r1
 efe:	20 d0       	rcall	.+64     	; 0xf40 <__ultoa_invert+0x84>
 f00:	09 f4       	brne	.+2      	; 0xf04 <__ultoa_invert+0x48>
 f02:	68 94       	set
 f04:	3f 91       	pop	r19
 f06:	2a e0       	ldi	r18, 0x0A	; 10
 f08:	26 9f       	mul	r18, r22
 f0a:	11 24       	eor	r1, r1
 f0c:	30 19       	sub	r19, r0
 f0e:	30 5d       	subi	r19, 0xD0	; 208
 f10:	31 93       	st	Z+, r19
 f12:	de f6       	brtc	.-74     	; 0xeca <__ultoa_invert+0xe>
 f14:	cf 01       	movw	r24, r30
 f16:	08 95       	ret
 f18:	46 2f       	mov	r20, r22
 f1a:	47 70       	andi	r20, 0x07	; 7
 f1c:	40 5d       	subi	r20, 0xD0	; 208
 f1e:	41 93       	st	Z+, r20
 f20:	b3 e0       	ldi	r27, 0x03	; 3
 f22:	0f d0       	rcall	.+30     	; 0xf42 <__ultoa_invert+0x86>
 f24:	c9 f7       	brne	.-14     	; 0xf18 <__ultoa_invert+0x5c>
 f26:	f6 cf       	rjmp	.-20     	; 0xf14 <__ultoa_invert+0x58>
 f28:	46 2f       	mov	r20, r22
 f2a:	4f 70       	andi	r20, 0x0F	; 15
 f2c:	40 5d       	subi	r20, 0xD0	; 208
 f2e:	4a 33       	cpi	r20, 0x3A	; 58
 f30:	18 f0       	brcs	.+6      	; 0xf38 <__ultoa_invert+0x7c>
 f32:	49 5d       	subi	r20, 0xD9	; 217
 f34:	31 fd       	sbrc	r19, 1
 f36:	40 52       	subi	r20, 0x20	; 32
 f38:	41 93       	st	Z+, r20
 f3a:	02 d0       	rcall	.+4      	; 0xf40 <__ultoa_invert+0x84>
 f3c:	a9 f7       	brne	.-22     	; 0xf28 <__ultoa_invert+0x6c>
 f3e:	ea cf       	rjmp	.-44     	; 0xf14 <__ultoa_invert+0x58>
 f40:	b4 e0       	ldi	r27, 0x04	; 4
 f42:	a6 95       	lsr	r26
 f44:	97 95       	ror	r25
 f46:	87 95       	ror	r24
 f48:	77 95       	ror	r23
 f4a:	67 95       	ror	r22
 f4c:	ba 95       	dec	r27
 f4e:	c9 f7       	brne	.-14     	; 0xf42 <__ultoa_invert+0x86>
 f50:	00 97       	sbiw	r24, 0x00	; 0
 f52:	61 05       	cpc	r22, r1
 f54:	71 05       	cpc	r23, r1
 f56:	08 95       	ret
 f58:	9b 01       	movw	r18, r22
 f5a:	ac 01       	movw	r20, r24
 f5c:	0a 2e       	mov	r0, r26
 f5e:	06 94       	lsr	r0
 f60:	57 95       	ror	r21
 f62:	47 95       	ror	r20
 f64:	37 95       	ror	r19
 f66:	27 95       	ror	r18
 f68:	ba 95       	dec	r27
 f6a:	c9 f7       	brne	.-14     	; 0xf5e <__ultoa_invert+0xa2>
 f6c:	62 0f       	add	r22, r18
 f6e:	73 1f       	adc	r23, r19
 f70:	84 1f       	adc	r24, r20
 f72:	95 1f       	adc	r25, r21
 f74:	a0 1d       	adc	r26, r0
 f76:	08 95       	ret

00000f78 <_exit>:
 f78:	f8 94       	cli

00000f7a <__stop_program>:
 f7a:	ff cf       	rjmp	.-2      	; 0xf7a <__stop_program>
