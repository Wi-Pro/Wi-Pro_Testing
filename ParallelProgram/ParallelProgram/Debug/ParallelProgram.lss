
ParallelProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000002ee  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f0  00800200  00800200  00000382  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000229a  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000969  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e20  00000000  00000000  00003219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000548  00000000  00000000  0000403c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005dd  00000000  00000000  00004584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000df0  00000000  00000000  00004b61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00005951  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "FPGA.h"

void SPI_FPGA_Init(void)
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1<<SS));
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	SPI_DDR &= ~(1<<MISO);
	// CS pin is not active
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
	// Enable SPI, Master Mode 0, set the clock rate fck/128
	SPCR = ((1<<SPE)|(1<<MSTR)|(1<<SPR1));
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	SPSR &= ~(1<<SPI2X);
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	SPI_FPGA_Write(0x00);
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	for(i=0; i<DATA_BEGIN; i++)
	{
		//Read the bytes from RAM and throw them into the buffer
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		hexRow[i] = buffer; 
		RAMOffset++; 
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

char* getHexRow()
{
	char buffer; 
	int i=0; 
	for(i=0; i<DATA_BEGIN; i++)
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		hexRow[i] = buffer; 
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
	{
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
		RAMOffset++; 
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		RAMOffset++; 
	}
	
	return hexRow; 
}
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	DATA_DDR = 0xFF;
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
	CONTROL_PORT &= ~(1<<XA0);
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
	DATA_PORT = 0x01;
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	WR_PORT |= (1<<FPGAWR);
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	CONTROL_PORT &= ~(1<<OE);
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
	_delay_us(500);
	DataValueIn = DATA_PIN;
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	HexToASCII(DataValueIn);
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	CONTROL_PORT |= 1<<OE;
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	WR_PORT &= ~(1<<FPGAWR);
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	DATA_DDR = 0xFF;
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
  ea:	d1 e2       	ldi	r29, 0x21	; 33
	CONTROL_PORT &= ~(1<<XA0);
  ec:	de bf       	out	0x3e, r29	; 62
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
	DATA_PORT = 0x02;
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ee ee       	ldi	r30, 0xEE	; 238
  f8:	f2 e0       	ldi	r31, 0x02	; 2
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
  fe:	0d 92       	st	X+, r0
 100:	a0 30       	cpi	r26, 0x00	; 0
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a0 3f       	cpi	r26, 0xF0	; 240
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
	WR_PORT |= (1<<FPGAWR);
 116:	0e 94 91 00 	call	0x122	; 0x122 <main>
 11a:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

0000011e <__bad_interrupt>:
	CONTROL_PORT &= ~(1<<OE);
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <main>:
 122:	0e 94 9a 00 	call	0x134	; 0x134 <SPI_Switching_Circuitry_Init>
 126:	0e 94 23 01 	call	0x246	; 0x246 <setAtTiny2313>
	_delay_us(500);
	DataValueIn = DATA_PIN;
 12a:	0e 94 af 00 	call	0x15e	; 0x15e <SwitchingCircuitryEnable>
	HexToASCII(DataValueIn);
 12e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <WriteShiftRegData>
	CONTROL_PORT |= 1<<OE;
	WR_PORT &= ~(1<<FPGAWR);
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x10>

00000134 <SPI_Switching_Circuitry_Init>:
 134:	9d 9a       	sbi	0x13, 5	; 19
 136:	e4 e0       	ldi	r30, 0x04	; 4
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	80 81       	ld	r24, Z
	DATA_DDR = 0xFF;
 13c:	88 63       	ori	r24, 0x38	; 56
 13e:	80 83       	st	Z, r24
 140:	e5 e0       	ldi	r30, 0x05	; 5
	DATA_PORT = 0x00;
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	80 81       	ld	r24, Z
 146:	88 61       	ori	r24, 0x18	; 24

void SPI_Switching_Circuitry_Init()
{
	LT_OE_DDR |= 1<<LTOE;
	SR_CNTRL_DDR |= ((1<<SR_RESET) | (1<<SRCS) | (1<<SROE));
	SR_CNTRL_PORT |= ((1<<SRCS) | (1<<SROE));
 148:	80 83       	st	Z, r24
	SR_CNTRL_PORT &= ~(1<<SR_RESET);
 14a:	80 81       	ld	r24, Z
 14c:	8f 7d       	andi	r24, 0xDF	; 223
 14e:	80 83       	st	Z, r24
	LT_OE_PORT |= 1<<LTOE;
 150:	a5 9a       	sbi	0x14, 5	; 20
 152:	08 95       	ret

00000154 <SPI_Switching_Circuitry_Write>:
}

void SPI_Switching_Circuitry_Write(unsigned char SPI_Data)
{
	// Start Write transmission
	SPDR = SPI_Data;
 154:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 156:	0d b4       	in	r0, 0x2d	; 45
 158:	07 fe       	sbrs	r0, 7
 15a:	fd cf       	rjmp	.-6      	; 0x156 <SPI_Switching_Circuitry_Write+0x2>
}
 15c:	08 95       	ret

0000015e <SwitchingCircuitryEnable>:

void SwitchingCircuitryEnable()
{
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
 15e:	e5 e0       	ldi	r30, 0x05	; 5
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	80 81       	ld	r24, Z
 164:	8f 7d       	andi	r24, 0xDF	; 223
 166:	80 83       	st	Z, r24
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	8a 95       	dec	r24
 16c:	f1 f7       	brne	.-4      	; 0x16a <SwitchingCircuitryEnable+0xc>
 16e:	00 00       	nop
	_delay_us(25);
	SR_CNTRL_PORT |= (1<<SR_RESET);
 170:	80 81       	ld	r24, Z
 172:	80 62       	ori	r24, 0x20	; 32
 174:	80 83       	st	Z, r24
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <SwitchingCircuitryEnable+0x1a>
 17c:	00 00       	nop
	_delay_us(25);
	SR_CNTRL_PORT &= ~(1<<SROE);
 17e:	80 81       	ld	r24, Z
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	80 83       	st	Z, r24
 184:	88 e0       	ldi	r24, 0x08	; 8
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <SwitchingCircuitryEnable+0x28>
 18a:	00 00       	nop
	_delay_us(25);
	SR_CNTRL_PORT &= ~(1<<SRCS); //Applying VCC and GND
 18c:	80 81       	ld	r24, Z
 18e:	8f 7e       	andi	r24, 0xEF	; 239
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <SetShiftRegData>:
	}
}


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/sizeof(char)])
{
 194:	28 e2       	ldi	r18, 0x28	; 40
 196:	82 9f       	mul	r24, r18
 198:	c0 01       	movw	r24, r0
 19a:	11 24       	eor	r1, r1
 19c:	fc 01       	movw	r30, r24
 19e:	e0 50       	subi	r30, 0x00	; 0
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/sizeof(data); i++)
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
	{
		ShiftRegData[pinType][i] = *(data + i); 
 1aa:	db 01       	movw	r26, r22
 1ac:	a4 0f       	add	r26, r20
 1ae:	b5 1f       	adc	r27, r21
 1b0:	8c 91       	ld	r24, X
 1b2:	81 93       	st	Z+, r24


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/sizeof(char)])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/sizeof(data); i++)
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	a9 01       	movw	r20, r18
 1ba:	24 31       	cpi	r18, 0x14	; 20
 1bc:	31 05       	cpc	r19, r1
 1be:	a9 f7       	brne	.-22     	; 0x1aa <SetShiftRegData+0x16>
	{
		ShiftRegData[pinType][i] = *(data + i); 
	}
}
 1c0:	08 95       	ret

000001c2 <WriteShiftRegData>:

void WriteShiftRegData()
{
 1c2:	af 92       	push	r10
 1c4:	bf 92       	push	r11
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
	SwitchingCircuitryEnable(); 
 1d6:	0e 94 af 00 	call	0x15e	; 0x15e <SwitchingCircuitryEnable>
 1da:	0f 2e       	mov	r0, r31
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ef 2e       	mov	r14, r31
 1e0:	f2 e0       	ldi	r31, 0x02	; 2
 1e2:	ff 2e       	mov	r15, r31
 1e4:	f0 2d       	mov	r31, r0
 1e6:	0f 2e       	mov	r0, r31
 1e8:	f0 ef       	ldi	r31, 0xF0	; 240
 1ea:	cf 2e       	mov	r12, r31
 1ec:	f2 e0       	ldi	r31, 0x02	; 2
 1ee:	df 2e       	mov	r13, r31
 1f0:	f0 2d       	mov	r31, r0
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
 1f2:	a1 2c       	mov	r10, r1
 1f4:	b1 2c       	mov	r11, r1
 1f6:	13 c0       	rjmp	.+38     	; 0x21e <WriteShiftRegData+0x5c>
	
	for(int i=0; i<PIN_TYPES; i++)
	{
		for(int j=0; j<SOCKET_SIZE/sizeof(char); j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
 1f8:	f8 01       	movw	r30, r16
 1fa:	81 91       	ld	r24, Z+
 1fc:	8f 01       	movw	r16, r30
 1fe:	0e 94 aa 00 	call	0x154	; 0x154 <SPI_Switching_Circuitry_Write>
 202:	f3 e0       	ldi	r31, 0x03	; 3
 204:	fa 95       	dec	r31
 206:	f1 f7       	brne	.-4      	; 0x204 <WriteShiftRegData+0x42>
 208:	00 00       	nop
{
	SwitchingCircuitryEnable(); 
	
	for(int i=0; i<PIN_TYPES; i++)
	{
		for(int j=0; j<SOCKET_SIZE/sizeof(char); j++)
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	c8 32       	cpi	r28, 0x28	; 40
 20e:	d1 05       	cpc	r29, r1
 210:	99 f7       	brne	.-26     	; 0x1f8 <WriteShiftRegData+0x36>
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	e8 0e       	add	r14, r24
 216:	f1 1c       	adc	r15, r1

void WriteShiftRegData()
{
	SwitchingCircuitryEnable(); 
	
	for(int i=0; i<PIN_TYPES; i++)
 218:	ec 14       	cp	r14, r12
 21a:	fd 04       	cpc	r15, r13
 21c:	21 f0       	breq	.+8      	; 0x226 <WriteShiftRegData+0x64>
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
 21e:	87 01       	movw	r16, r14
 220:	ca 2d       	mov	r28, r10
 222:	db 2d       	mov	r29, r11
 224:	e9 cf       	rjmp	.-46     	; 0x1f8 <WriteShiftRegData+0x36>
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
			_delay_us(10); 
		}
	}
	
	SR_CNTRL_PORT |= (1<<SRCS);
 226:	e5 e0       	ldi	r30, 0x05	; 5
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	80 81       	ld	r24, Z
 22c:	80 61       	ori	r24, 0x10	; 16
 22e:	80 83       	st	Z, r24
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	df 90       	pop	r13
 23e:	cf 90       	pop	r12
 240:	bf 90       	pop	r11
 242:	af 90       	pop	r10
 244:	08 95       	ret

00000246 <setAtTiny2313>:

void setAtTiny2313()
{
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	00 d0       	rcall	.+0      	; 0x250 <setAtTiny2313+0xa>
 250:	00 d0       	rcall	.+0      	; 0x252 <setAtTiny2313+0xc>
 252:	00 d0       	rcall	.+0      	; 0x254 <setAtTiny2313+0xe>
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
	
	char shiftTempBuff[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 258:	8e 01       	movw	r16, r28
 25a:	0f 5f       	subi	r16, 0xFF	; 255
 25c:	1f 4f       	sbci	r17, 0xFF	; 255
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	f8 01       	movw	r30, r16
 262:	11 92       	st	Z+, r1
 264:	8a 95       	dec	r24
 266:	e9 f7       	brne	.-6      	; 0x262 <setAtTiny2313+0x1c>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
 268:	b8 01       	movw	r22, r16
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 ca 00 	call	0x194	; 0x194 <SetShiftRegData>
	//Modify Values and shift again 
	shiftTempBuff[0] = 0x00;
 270:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
 272:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
 274:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
 276:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
 278:	1d 82       	std	Y+5, r1	; 0x05
	shiftTempBuff[5] = 0x00;
 27a:	1e 82       	std	Y+6, r1	; 0x06
	SetShiftRegData(GROUND, shiftTempBuff);
 27c:	b8 01       	movw	r22, r16
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 ca 00 	call	0x194	; 0x194 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
 284:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
 286:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
 288:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
 28a:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
 28c:	1d 82       	std	Y+5, r1	; 0x05
	shiftTempBuff[5] = 0x00;
 28e:	1e 82       	std	Y+6, r1	; 0x06
	SetShiftRegData(PULL_UP, shiftTempBuff);
 290:	b8 01       	movw	r22, r16
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	0e 94 ca 00 	call	0x194	; 0x194 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
 298:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
 29a:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
 29c:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
 29e:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
 2a0:	1d 82       	std	Y+5, r1	; 0x05
	shiftTempBuff[5] = 0x00;
 2a2:	1e 82       	std	Y+6, r1	; 0x06
	SetShiftRegData(VCC, shiftTempBuff);
 2a4:	b8 01       	movw	r22, r16
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	0e 94 ca 00 	call	0x194	; 0x194 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
 2ac:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
 2ae:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
 2b0:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
 2b2:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
 2b4:	1d 82       	std	Y+5, r1	; 0x05
	shiftTempBuff[5] = 0x00;
 2b6:	1e 82       	std	Y+6, r1	; 0x06
	SetShiftRegData(VPP, shiftTempBuff);
 2b8:	b8 01       	movw	r22, r16
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	0e 94 ca 00 	call	0x194	; 0x194 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
 2c0:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
 2c2:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
 2c4:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
 2c6:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
 2c8:	1d 82       	std	Y+5, r1	; 0x05
	shiftTempBuff[5] = 0x00;
 2ca:	1e 82       	std	Y+6, r1	; 0x06
	SetShiftRegData(LOGIC, shiftTempBuff);
 2cc:	b8 01       	movw	r22, r16
 2ce:	85 e0       	ldi	r24, 0x05	; 5
 2d0:	0e 94 ca 00 	call	0x194	; 0x194 <SetShiftRegData>
	
	//ShiftRegData[PULL_DOWN][0] = ; 
	//Add the other 5 here and then call writeShiftRegData 
}
 2d4:	26 96       	adiw	r28, 0x06	; 6
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
