
ParallelProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800200  0000141e  000014b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000141e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  0080032e  0080032e  000015e0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028c0  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b95  00000000  00000000  000041c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001015  00000000  00000000  00004d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d0  00000000  00000000  00005d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f1  00000000  00000000  00006440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001137  00000000  00000000  00006b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  00007c68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ee e1       	ldi	r30, 0x1E	; 30
      f8:	f4 e1       	ldi	r31, 0x14	; 20
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ae 32       	cpi	r26, 0x2E	; 46
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	23 e0       	ldi	r18, 0x03	; 3
     108:	ae e2       	ldi	r26, 0x2E	; 46
     10a:	b3 e0       	ldi	r27, 0x03	; 3
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a9 38       	cpi	r26, 0x89	; 137
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 43 04 	call	0x886	; 0x886 <main>
     11a:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <SPI_FPGA_Write>:
	SPI_FPGA_Write(FPGA_Disable);
}

void SPI_FPGA_Write(unsigned char SPI_Data)
{
	FPGA_CS_PORT &= ~(1<<FPGA_SPI_CS);
     122:	a4 98       	cbi	0x14, 4	; 20
	// Start Write transmission
	SPDR = SPI_Data;
     124:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     126:	0d b4       	in	r0, 0x2d	; 45
     128:	07 fe       	sbrs	r0, 7
     12a:	fd cf       	rjmp	.-6      	; 0x126 <SPI_FPGA_Write+0x4>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     12c:	a4 9a       	sbi	0x14, 4	; 20
     12e:	08 95       	ret

00000130 <SPI_FPGA_Init>:
#include <util/delay.h>
#include "FPGA.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
     130:	9c 9a       	sbi	0x13, 4	; 19
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     132:	a4 9a       	sbi	0x14, 4	; 20
	
	WR_DDR |= 1<<FPGAWR;
     134:	e4 e0       	ldi	r30, 0x04	; 4
     136:	f1 e0       	ldi	r31, 0x01	; 1
     138:	80 81       	ld	r24, Z
     13a:	84 60       	ori	r24, 0x04	; 4
     13c:	80 83       	st	Z, r24
	WR_PORT &= ~(1<<FPGAWR);
     13e:	e5 e0       	ldi	r30, 0x05	; 5
     140:	f1 e0       	ldi	r31, 0x01	; 1
     142:	80 81       	ld	r24, Z
     144:	8b 7f       	andi	r24, 0xFB	; 251
     146:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_Disable);
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	0e 94 91 00 	call	0x122	; 0x122 <SPI_FPGA_Write>
     14e:	08 95       	ret

00000150 <hexInit>:
				   ':', 0x10, 0x00, 0x10, 0x00, 0x12, 0xC0, 0x11, 0xC0, 0x10, 0xC0, 0x0F, 0xC0, 0x0E, 0xC0, 0x0D, 0xC0, 0x0C, 0xC0, 0x0B, 0xC0, 0x6C,
				   ':', 0x00, 0x00, 0x00, 0x01, 0xFF};

void hexInit()
{
	RAMOffset = 0; 
     150:	10 92 64 03 	sts	0x0364, r1
     154:	10 92 63 03 	sts	0x0363, r1
	memset(hexRow, 0x00, 50); 
     158:	82 e3       	ldi	r24, 0x32	; 50
     15a:	e1 e3       	ldi	r30, 0x31	; 49
     15c:	f3 e0       	ldi	r31, 0x03	; 3
     15e:	df 01       	movw	r26, r30
     160:	1d 92       	st	X+, r1
     162:	8a 95       	dec	r24
     164:	e9 f7       	brne	.-6      	; 0x160 <hexInit+0x10>
     166:	08 95       	ret

00000168 <getHexRow>:
} 

char* getHexRow()
{
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	c1 e3       	ldi	r28, 0x31	; 49
     172:	d3 e0       	ldi	r29, 0x03	; 3
     174:	06 e3       	ldi	r16, 0x36	; 54
     176:	13 e0       	ldi	r17, 0x03	; 3
	char buffer; 
	int i=0; 
	for(i=0; i<DATA_BEGIN; i++)
	{
		//Read the bytes from RAM and throw them into the buffer
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
     178:	60 91 63 03 	lds	r22, 0x0363
     17c:	70 91 64 03 	lds	r23, 0x0364
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <RAMReadByte>
		//printf("0x%02X ",buffer);
		hexRow[i] = buffer; 
     188:	89 93       	st	Y+, r24
		RAMOffset++; 
     18a:	80 91 63 03 	lds	r24, 0x0363
     18e:	90 91 64 03 	lds	r25, 0x0364
     192:	01 96       	adiw	r24, 0x01	; 1
     194:	90 93 64 03 	sts	0x0364, r25
     198:	80 93 63 03 	sts	0x0363, r24

char* getHexRow()
{
	char buffer; 
	int i=0; 
	for(i=0; i<DATA_BEGIN; i++)
     19c:	c0 17       	cp	r28, r16
     19e:	d1 07       	cpc	r29, r17
     1a0:	59 f7       	brne	.-42     	; 0x178 <getHexRow+0x10>
		//printf("0x%02X ",buffer);
		hexRow[i] = buffer; 
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
     1a2:	00 91 32 03 	lds	r16, 0x0332
     1a6:	c6 e3       	ldi	r28, 0x36	; 54
     1a8:	d3 e0       	ldi	r29, 0x03	; 3
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	09 5c       	subi	r16, 0xC9	; 201
     1ae:	1c 4f       	sbci	r17, 0xFC	; 252
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
	{
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
     1b0:	60 91 63 03 	lds	r22, 0x0363
     1b4:	70 91 64 03 	lds	r23, 0x0364
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <RAMReadByte>
		//printf("0x%02X ",buffer);
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
     1c0:	60 91 63 03 	lds	r22, 0x0363
     1c4:	70 91 64 03 	lds	r23, 0x0364
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <RAMReadByte>
     1d0:	89 93       	st	Y+, r24
		RAMOffset++; 
     1d2:	80 91 63 03 	lds	r24, 0x0363
     1d6:	90 91 64 03 	lds	r25, 0x0364
     1da:	01 96       	adiw	r24, 0x01	; 1
     1dc:	90 93 64 03 	sts	0x0364, r25
     1e0:	80 93 63 03 	sts	0x0363, r24
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
     1e4:	c0 17       	cp	r28, r16
     1e6:	d1 07       	cpc	r29, r17
     1e8:	19 f7       	brne	.-58     	; 0x1b0 <getHexRow+0x48>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		RAMOffset++; 
	}
	
	return hexRow; 
}
     1ea:	81 e3       	ldi	r24, 0x31	; 49
     1ec:	93 e0       	ldi	r25, 0x03	; 3
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	08 95       	ret

000001f8 <writeHexFileTest>:

void writeHexFileTest()
{	
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	c0 e0       	ldi	r28, 0x00	; 0
     206:	d2 e0       	ldi	r29, 0x02	; 2
     208:	0f 2e       	mov	r0, r31
     20a:	f2 e3       	ldi	r31, 0x32	; 50
     20c:	ef 2e       	mov	r14, r31
     20e:	f2 e0       	ldi	r31, 0x02	; 2
     210:	ff 2e       	mov	r15, r31
     212:	f0 2d       	mov	r31, r0
	for (int i = 0; i<50; i++)
	{
		printf("0x%02X ", *(buffer + i));
     214:	0f e4       	ldi	r16, 0x4F	; 79
     216:	12 e0       	ldi	r17, 0x02	; 2
     218:	89 91       	ld	r24, Y+
     21a:	1f 92       	push	r1
     21c:	8f 93       	push	r24
     21e:	1f 93       	push	r17
     220:	0f 93       	push	r16
     222:	0e 94 48 07 	call	0xe90	; 0xe90 <printf>
	return hexRow; 
}

void writeHexFileTest()
{	
	for (int i = 0; i<50; i++)
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	ce 15       	cp	r28, r14
     230:	df 05       	cpc	r29, r15
     232:	91 f7       	brne	.-28     	; 0x218 <writeHexFileTest+0x20>
	{
		printf("0x%02X ", *(buffer + i));
	}
	printf("\n");
     234:	8a e0       	ldi	r24, 0x0A	; 10
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <putchar>
				
	RAMWrite(buffer, HEX_FILE_ADDRESS, 50);
     23c:	42 e3       	ldi	r20, 0x32	; 50
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	0e 94 2f 05 	call	0xa5e	; 0xa5e <RAMWrite>
					
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	1f 91       	pop	r17
     252:	0f 91       	pop	r16
     254:	ff 90       	pop	r15
     256:	ef 90       	pop	r14
     258:	08 95       	ret

0000025a <ProgInit>:
#include "Print/PrintDriver.h"


void ProgInit(void)
{
	SPI_Switching_Circuitry_Init(); 
     25a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SPI_Switching_Circuitry_Init>
	SPI_FPGA_Init();
     25e:	0e 94 98 00 	call	0x130	; 0x130 <SPI_FPGA_Init>
	
	voltageControlInit();
     262:	0e 94 d6 06 	call	0xdac	; 0xdac <voltageControlInit>
	setVpp(VPP_12V);
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	0e 94 f6 06 	call	0xdec	; 0xdec <setVpp>
	setVcc(VCC_5V);
     26c:	84 e0       	ldi	r24, 0x04	; 4
     26e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <setVcc>
	setVLogic(VL_5V);
     272:	86 e0       	ldi	r24, 0x06	; 6
     274:	0e 94 08 07 	call	0xe10	; 0xe10 <setVLogic>
	enableVccRegulator();
     278:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <enableVccRegulator>
	enableVLogic();
     27c:	0e 94 04 07 	call	0xe08	; 0xe08 <enableVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     280:	2f ef       	ldi	r18, 0xFF	; 255
     282:	84 e3       	ldi	r24, 0x34	; 52
     284:	9c e0       	ldi	r25, 0x0C	; 12
     286:	21 50       	subi	r18, 0x01	; 1
     288:	80 40       	sbci	r24, 0x00	; 0
     28a:	90 40       	sbci	r25, 0x00	; 0
     28c:	e1 f7       	brne	.-8      	; 0x286 <ProgInit+0x2c>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <ProgInit+0x36>
     290:	00 00       	nop
	_delay_ms(500);
	//Setting up Control lines
	CONTROL_DDR |= ( (1<<XTAL1) | (1<<OE) | (1<<WR) | (1<<BS1_PAGEL) | (1<<XA0) | (1<<XA1_BS2) | (1<<PAGEL) | (1<<BS2));
     292:	8a b1       	in	r24, 0x0a	; 10
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	8a b9       	out	0x0a, r24	; 10
	RDY_BSY_DDR &= ~(1<<RDY_BSY);
     298:	38 98       	cbi	0x07, 0	; 7
	DATA_DDR = 0xFF;
     29a:	80 93 0a 01 	sts	0x010A, r24
	
	LED_PORT &= ~((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
     29e:	84 b3       	in	r24, 0x14	; 20
     2a0:	88 7f       	andi	r24, 0xF8	; 248
     2a2:	84 bb       	out	0x14, r24	; 20
     2a4:	08 95       	ret

000002a6 <LoadCommand>:
}

void LoadCommand(char command)
{
	//A: Load Command "Program Flash"
	CONTROL_PORT |= 1<<XA1_BS2;
     2a6:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     2a8:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     2aa:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = command;
     2ac:	80 93 0b 01 	sts	0x010B, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b0:	82 e4       	ldi	r24, 0x42	; 66
     2b2:	8a 95       	dec	r24
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LoadCommand+0xc>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LoadCommand+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     2b8:	58 9a       	sbi	0x0b, 0	; 11
     2ba:	82 e4       	ldi	r24, 0x42	; 66
     2bc:	8a 95       	dec	r24
     2be:	f1 f7       	brne	.-4      	; 0x2bc <LoadCommand+0x16>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LoadCommand+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     2c2:	58 98       	cbi	0x0b, 0	; 11
     2c4:	82 e4       	ldi	r24, 0x42	; 66
     2c6:	8a 95       	dec	r24
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LoadCommand+0x20>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LoadCommand+0x26>
     2cc:	08 95       	ret

000002ce <WriteWord>:
}

void WriteWord(uint16_t data)
{
	//C: Load Data Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     2ce:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
     2d0:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = data & 0x00FF; 
     2d2:	80 93 0b 01 	sts	0x010B, r24
     2d6:	82 e4       	ldi	r24, 0x42	; 66
     2d8:	8a 95       	dec	r24
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <WriteWord+0xa>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <WriteWord+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     2de:	58 9a       	sbi	0x0b, 0	; 11
     2e0:	82 e4       	ldi	r24, 0x42	; 66
     2e2:	8a 95       	dec	r24
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <WriteWord+0x14>
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <WriteWord+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     2e8:	58 98       	cbi	0x0b, 0	; 11
     2ea:	82 e4       	ldi	r24, 0x42	; 66
     2ec:	8a 95       	dec	r24
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <WriteWord+0x1e>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <WriteWord+0x24>
	_delay_us(25);
	
	//D: Load Data High Byte
	CONTROL_PORT |= 1<<BS1_PAGEL;
     2f2:	5b 9a       	sbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2);
     2f4:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
     2f6:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = ((data & 0xFF00) >> 8); 
     2f8:	90 93 0b 01 	sts	0x010B, r25
     2fc:	82 e4       	ldi	r24, 0x42	; 66
     2fe:	8a 95       	dec	r24
     300:	f1 f7       	brne	.-4      	; 0x2fe <WriteWord+0x30>
     302:	00 c0       	rjmp	.+0      	; 0x304 <WriteWord+0x36>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     304:	58 9a       	sbi	0x0b, 0	; 11
     306:	82 e4       	ldi	r24, 0x42	; 66
     308:	8a 95       	dec	r24
     30a:	f1 f7       	brne	.-4      	; 0x308 <WriteWord+0x3a>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <WriteWord+0x40>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     30e:	58 98       	cbi	0x0b, 0	; 11
     310:	82 e4       	ldi	r24, 0x42	; 66
     312:	8a 95       	dec	r24
     314:	f1 f7       	brne	.-4      	; 0x312 <WriteWord+0x44>
     316:	00 c0       	rjmp	.+0      	; 0x318 <WriteWord+0x4a>
     318:	08 95       	ret

0000031a <LoadLowAddress>:
}

void LoadLowAddress(uint16_t address)
{
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     31a:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     31c:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     31e:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = (address & 0x00FF);
     320:	80 93 0b 01 	sts	0x010B, r24
     324:	82 e4       	ldi	r24, 0x42	; 66
     326:	8a 95       	dec	r24
     328:	f1 f7       	brne	.-4      	; 0x326 <LoadLowAddress+0xc>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <LoadLowAddress+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     32c:	58 9a       	sbi	0x0b, 0	; 11
     32e:	82 e4       	ldi	r24, 0x42	; 66
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <LoadLowAddress+0x16>
     334:	00 c0       	rjmp	.+0      	; 0x336 <LoadLowAddress+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     336:	58 98       	cbi	0x0b, 0	; 11
     338:	82 e4       	ldi	r24, 0x42	; 66
     33a:	8a 95       	dec	r24
     33c:	f1 f7       	brne	.-4      	; 0x33a <LoadLowAddress+0x20>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <LoadLowAddress+0x26>
     340:	08 95       	ret

00000342 <LoadHighAddress>:
}

void LoadHighAddress(uint16_t address)
{
	//F: Load Address High Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     342:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     344:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT |= 1<<BS1_PAGEL;
     346:	5b 9a       	sbi	0x0b, 3	; 11
	DATA_PORT = ((address & 0xFF00) >> 8);
     348:	90 93 0b 01 	sts	0x010B, r25
     34c:	82 e4       	ldi	r24, 0x42	; 66
     34e:	8a 95       	dec	r24
     350:	f1 f7       	brne	.-4      	; 0x34e <LoadHighAddress+0xc>
     352:	00 c0       	rjmp	.+0      	; 0x354 <LoadHighAddress+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     354:	58 9a       	sbi	0x0b, 0	; 11
     356:	82 e4       	ldi	r24, 0x42	; 66
     358:	8a 95       	dec	r24
     35a:	f1 f7       	brne	.-4      	; 0x358 <LoadHighAddress+0x16>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <LoadHighAddress+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     35e:	58 98       	cbi	0x0b, 0	; 11
     360:	82 e4       	ldi	r24, 0x42	; 66
     362:	8a 95       	dec	r24
     364:	f1 f7       	brne	.-4      	; 0x362 <LoadHighAddress+0x20>
     366:	00 c0       	rjmp	.+0      	; 0x368 <LoadHighAddress+0x26>
     368:	08 95       	ret

0000036a <ProgramPage>:
}

void ProgramPage(void)
{
	//G: Program Page
	CONTROL_PORT &= ~(1<<WR);
     36a:	5a 98       	cbi	0x0b, 2	; 11
     36c:	22 e4       	ldi	r18, 0x42	; 66
     36e:	2a 95       	dec	r18
     370:	f1 f7       	brne	.-4      	; 0x36e <ProgramPage+0x4>
     372:	00 c0       	rjmp	.+0      	; 0x374 <ProgramPage+0xa>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
     374:	5a 9a       	sbi	0x0b, 2	; 11
     376:	82 e4       	ldi	r24, 0x42	; 66
     378:	8a 95       	dec	r24
     37a:	f1 f7       	brne	.-4      	; 0x378 <ProgramPage+0xe>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <ProgramPage+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37e:	9f ef       	ldi	r25, 0xFF	; 255
     380:	29 e6       	ldi	r18, 0x69	; 105
     382:	88 e1       	ldi	r24, 0x18	; 24
     384:	91 50       	subi	r25, 0x01	; 1
     386:	20 40       	sbci	r18, 0x00	; 0
     388:	80 40       	sbci	r24, 0x00	; 0
     38a:	e1 f7       	brne	.-8      	; 0x384 <ProgramPage+0x1a>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <ProgramPage+0x24>
     38e:	00 00       	nop
     390:	08 95       	ret

00000392 <EndPageProgramming>:
}

void EndPageProgramming(void)
{
	//I: End Page Programming
	CONTROL_PORT |= 1<<XA1_BS2;
     392:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     394:	5c 98       	cbi	0x0b, 4	; 11
	DATA_PORT = 0x00;
     396:	10 92 0b 01 	sts	0x010B, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     39a:	82 e4       	ldi	r24, 0x42	; 66
     39c:	8a 95       	dec	r24
     39e:	f1 f7       	brne	.-4      	; 0x39c <EndPageProgramming+0xa>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <EndPageProgramming+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     3a2:	58 9a       	sbi	0x0b, 0	; 11
     3a4:	82 e4       	ldi	r24, 0x42	; 66
     3a6:	8a 95       	dec	r24
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <EndPageProgramming+0x14>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <EndPageProgramming+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     3ac:	58 98       	cbi	0x0b, 0	; 11
     3ae:	82 e4       	ldi	r24, 0x42	; 66
     3b0:	8a 95       	dec	r24
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <EndPageProgramming+0x1e>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <EndPageProgramming+0x24>
     3b6:	08 95       	ret

000003b8 <EnableProgMode>:
	_delay_us(25);
}

void EnableProgMode(unsigned char TargetMicrocontroller)
{
     3b8:	cf 93       	push	r28
     3ba:	c8 2f       	mov	r28, r24
	CONTROL_PORT &= ~(1<<XTAL1);
     3bc:	58 98       	cbi	0x0b, 0	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2 | 1<<XA0 | 1<<BS1_PAGEL | 1<<WR);
     3be:	8b b1       	in	r24, 0x0b	; 11
     3c0:	83 7c       	andi	r24, 0xC3	; 195
     3c2:	8b b9       	out	0x0b, r24	; 11
	DATA_PORT = 0x00;
     3c4:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
     3c8:	1b b8       	out	0x0b, r1	; 11
	
	WR_PORT &= ~(1<<FPGAWR);
     3ca:	e5 e0       	ldi	r30, 0x05	; 5
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	80 81       	ld	r24, Z
     3d0:	8b 7f       	andi	r24, 0xFB	; 251
     3d2:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_ATtiny2313_Mapping);
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	0e 94 91 00 	call	0x122	; 0x122 <SPI_FPGA_Write>
	
	switch (TargetMicrocontroller)
     3da:	c1 30       	cpi	r28, 0x01	; 1
     3dc:	11 f4       	brne	.+4      	; 0x3e2 <EnableProgMode+0x2a>
	{
		case 1 :
			setAtTiny2313();
     3de:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <setAtTiny2313>
     3e2:	87 ec       	ldi	r24, 0xC7	; 199
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <EnableProgMode+0x2e>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <EnableProgMode+0x34>
     3ec:	00 00       	nop
		default:
			break;
	}
	
	_delay_us(100);
	enableVppRegulator();
     3ee:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <enableVppRegulator>
     3f2:	95 e8       	ldi	r25, 0x85	; 133
     3f4:	9a 95       	dec	r25
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <EnableProgMode+0x3c>
     3f8:	00 00       	nop
	_delay_us(50);
	CONTROL_PORT |= (1<<WR | 1<<OE);
     3fa:	8b b1       	in	r24, 0x0b	; 11
     3fc:	86 60       	ori	r24, 0x06	; 6
     3fe:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     400:	8f e0       	ldi	r24, 0x0F	; 15
     402:	97 e2       	ldi	r25, 0x27	; 39
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <EnableProgMode+0x4c>
     408:	00 c0       	rjmp	.+0      	; 0x40a <EnableProgMode+0x52>
     40a:	00 00       	nop
	_delay_ms(5);
}
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <ReadSignatureBytes>:
char* ReadSignatureBytes(void)
{
	static char SignatureBytes[3];
	
	//A: Load Command "Read Signature Bytes"
	LoadCommand(READ_SIG_BYTE);
     410:	88 e0       	ldi	r24, 0x08	; 8
     412:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LoadCommand>
	
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     416:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     418:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     41a:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x00;
     41c:	10 92 0b 01 	sts	0x010B, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     420:	82 e4       	ldi	r24, 0x42	; 66
     422:	8a 95       	dec	r24
     424:	f1 f7       	brne	.-4      	; 0x422 <ReadSignatureBytes+0x12>
     426:	00 c0       	rjmp	.+0      	; 0x428 <ReadSignatureBytes+0x18>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     428:	58 9a       	sbi	0x0b, 0	; 11
     42a:	92 e4       	ldi	r25, 0x42	; 66
     42c:	9a 95       	dec	r25
     42e:	f1 f7       	brne	.-4      	; 0x42c <ReadSignatureBytes+0x1c>
     430:	00 c0       	rjmp	.+0      	; 0x432 <ReadSignatureBytes+0x22>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     432:	58 98       	cbi	0x0b, 0	; 11
     434:	87 ec       	ldi	r24, 0xC7	; 199
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <ReadSignatureBytes+0x28>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <ReadSignatureBytes+0x2e>
     43e:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     440:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
     444:	e5 e0       	ldi	r30, 0x05	; 5
     446:	f1 e0       	ldi	r31, 0x01	; 1
     448:	80 81       	ld	r24, Z
     44a:	84 60       	ori	r24, 0x04	; 4
     44c:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
     44e:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     450:	5b 98       	cbi	0x0b, 3	; 11
     452:	87 ee       	ldi	r24, 0xE7	; 231
     454:	93 e0       	ldi	r25, 0x03	; 3
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <ReadSignatureBytes+0x46>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <ReadSignatureBytes+0x4c>
     45c:	00 00       	nop
	_delay_us(500);
	SignatureBytes[0] = DATA_PIN;
     45e:	80 91 09 01 	lds	r24, 0x0109
     462:	80 93 2e 03 	sts	0x032E, r24
	CONTROL_PORT |= 1<<OE;
     466:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
     468:	80 81       	ld	r24, Z
     46a:	8b 7f       	andi	r24, 0xFB	; 251
     46c:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	80 93 0a 01 	sts	0x010A, r24
     474:	87 ec       	ldi	r24, 0xC7	; 199
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <ReadSignatureBytes+0x68>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <ReadSignatureBytes+0x6e>
     47e:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     480:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     482:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     484:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x01;
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	80 93 0b 01 	sts	0x010B, r24
     48c:	92 e4       	ldi	r25, 0x42	; 66
     48e:	9a 95       	dec	r25
     490:	f1 f7       	brne	.-4      	; 0x48e <ReadSignatureBytes+0x7e>
     492:	00 c0       	rjmp	.+0      	; 0x494 <ReadSignatureBytes+0x84>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     494:	58 9a       	sbi	0x0b, 0	; 11
     496:	82 e4       	ldi	r24, 0x42	; 66
     498:	8a 95       	dec	r24
     49a:	f1 f7       	brne	.-4      	; 0x498 <ReadSignatureBytes+0x88>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <ReadSignatureBytes+0x8e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     49e:	58 98       	cbi	0x0b, 0	; 11
     4a0:	87 ec       	ldi	r24, 0xC7	; 199
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <ReadSignatureBytes+0x94>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <ReadSignatureBytes+0x9a>
     4aa:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     4ac:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
     4b0:	80 81       	ld	r24, Z
     4b2:	84 60       	ori	r24, 0x04	; 4
     4b4:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
     4b6:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     4b8:	5b 98       	cbi	0x0b, 3	; 11
     4ba:	87 ee       	ldi	r24, 0xE7	; 231
     4bc:	93 e0       	ldi	r25, 0x03	; 3
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <ReadSignatureBytes+0xae>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <ReadSignatureBytes+0xb4>
     4c4:	00 00       	nop
	_delay_us(500);
	SignatureBytes[1] = DATA_PIN;
     4c6:	80 91 09 01 	lds	r24, 0x0109
     4ca:	80 93 2f 03 	sts	0x032F, r24
	CONTROL_PORT |= 1<<OE;
     4ce:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
     4d0:	80 81       	ld	r24, Z
     4d2:	8b 7f       	andi	r24, 0xFB	; 251
     4d4:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	80 93 0a 01 	sts	0x010A, r24
     4dc:	87 ec       	ldi	r24, 0xC7	; 199
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <ReadSignatureBytes+0xd0>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <ReadSignatureBytes+0xd6>
     4e6:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     4e8:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     4ea:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     4ec:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x02;
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	80 93 0b 01 	sts	0x010B, r24
     4f4:	92 e4       	ldi	r25, 0x42	; 66
     4f6:	9a 95       	dec	r25
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <ReadSignatureBytes+0xe6>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <ReadSignatureBytes+0xec>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     4fc:	58 9a       	sbi	0x0b, 0	; 11
     4fe:	82 e4       	ldi	r24, 0x42	; 66
     500:	8a 95       	dec	r24
     502:	f1 f7       	brne	.-4      	; 0x500 <ReadSignatureBytes+0xf0>
     504:	00 c0       	rjmp	.+0      	; 0x506 <ReadSignatureBytes+0xf6>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     506:	58 98       	cbi	0x0b, 0	; 11
     508:	87 ec       	ldi	r24, 0xC7	; 199
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <ReadSignatureBytes+0xfc>
     510:	00 c0       	rjmp	.+0      	; 0x512 <ReadSignatureBytes+0x102>
     512:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     514:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
     518:	80 81       	ld	r24, Z
     51a:	84 60       	ori	r24, 0x04	; 4
     51c:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
     51e:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     520:	5b 98       	cbi	0x0b, 3	; 11
     522:	87 ee       	ldi	r24, 0xE7	; 231
     524:	93 e0       	ldi	r25, 0x03	; 3
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <ReadSignatureBytes+0x116>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <ReadSignatureBytes+0x11c>
     52c:	00 00       	nop
	_delay_us(500);
	SignatureBytes[2] = DATA_PIN;
     52e:	80 91 09 01 	lds	r24, 0x0109
     532:	80 93 30 03 	sts	0x0330, r24
	CONTROL_PORT |= 1<<OE;
     536:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
     538:	80 81       	ld	r24, Z
     53a:	8b 7f       	andi	r24, 0xFB	; 251
     53c:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	80 93 0a 01 	sts	0x010A, r24
	DATA_PORT = 0x00;
     544:	10 92 0b 01 	sts	0x010B, r1
	
	return SignatureBytes;
}
     548:	8e e2       	ldi	r24, 0x2E	; 46
     54a:	93 e0       	ldi	r25, 0x03	; 3
     54c:	08 95       	ret

0000054e <ReadFlash>:

void ReadFlash(void)
{
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
	char DataValueIn = 0;
	
	//A: Load Command "Read Flash"
	LoadCommand(READ_FLASH);
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LoadCommand>
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
     56a:	e1 2c       	mov	r14, r1
     56c:	f1 2c       	mov	r15, r1
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
		
		//Read data
		DATA_DDR = 0;
     56e:	0f 2e       	mov	r0, r31
     570:	fa e0       	ldi	r31, 0x0A	; 10
     572:	af 2e       	mov	r10, r31
     574:	bb 24       	eor	r11, r11
     576:	b3 94       	inc	r11
     578:	f0 2d       	mov	r31, r0
		WR_PORT |= (1<<FPGAWR);
     57a:	05 e0       	ldi	r16, 0x05	; 5
     57c:	11 e0       	ldi	r17, 0x01	; 1
		CONTROL_PORT &= ~(1<<OE);
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
		_delay_us(500);
		DataValueIn = DATA_PIN;
     57e:	0f 2e       	mov	r0, r31
     580:	f9 e0       	ldi	r31, 0x09	; 9
     582:	cf 2e       	mov	r12, r31
     584:	dd 24       	eor	r13, r13
     586:	d3 94       	inc	r13
     588:	f0 2d       	mov	r31, r0
		printf("0x%02X ", DataValueIn);
     58a:	cf e4       	ldi	r28, 0x4F	; 79
     58c:	d2 e0       	ldi	r29, 0x02	; 2
		_delay_us(500);
		DataValueIn = DATA_PIN;
		printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
     58e:	99 24       	eor	r9, r9
     590:	9a 94       	dec	r9
	LoadCommand(READ_FLASH);
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
	{
		//F: Load Address High Byte
		LoadHighAddress(0x00);
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 a1 01 	call	0x342	; 0x342 <LoadHighAddress>
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
     59a:	c7 01       	movw	r24, r14
     59c:	0e 94 8d 01 	call	0x31a	; 0x31a <LoadLowAddress>
		
		//Read data
		DATA_DDR = 0;
     5a0:	f5 01       	movw	r30, r10
     5a2:	10 82       	st	Z, r1
		WR_PORT |= (1<<FPGAWR);
     5a4:	f8 01       	movw	r30, r16
     5a6:	80 81       	ld	r24, Z
     5a8:	84 60       	ori	r24, 0x04	; 4
     5aa:	80 83       	st	Z, r24
		CONTROL_PORT &= ~(1<<OE);
     5ac:	59 98       	cbi	0x0b, 1	; 11
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
     5ae:	5b 98       	cbi	0x0b, 3	; 11
     5b0:	87 ee       	ldi	r24, 0xE7	; 231
     5b2:	93 e0       	ldi	r25, 0x03	; 3
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <ReadFlash+0x66>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <ReadFlash+0x6c>
     5ba:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
     5bc:	f6 01       	movw	r30, r12
     5be:	80 81       	ld	r24, Z
		printf("0x%02X ", DataValueIn);
     5c0:	1f 92       	push	r1
     5c2:	8f 93       	push	r24
     5c4:	df 93       	push	r29
     5c6:	cf 93       	push	r28
     5c8:	0e 94 48 07 	call	0xe90	; 0xe90 <printf>
		CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
     5cc:	5b 9a       	sbi	0x0b, 3	; 11
     5ce:	e7 ee       	ldi	r30, 0xE7	; 231
     5d0:	f3 e0       	ldi	r31, 0x03	; 3
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <ReadFlash+0x84>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <ReadFlash+0x8a>
     5d8:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
     5da:	f6 01       	movw	r30, r12
     5dc:	80 81       	ld	r24, Z
		printf("0x%02X ", DataValueIn);
     5de:	1f 92       	push	r1
     5e0:	8f 93       	push	r24
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	0e 94 48 07 	call	0xe90	; 0xe90 <printf>
		CONTROL_PORT |= 1<<OE;
     5ea:	59 9a       	sbi	0x0b, 1	; 11
		WR_PORT &= ~(1<<FPGAWR);
     5ec:	f8 01       	movw	r30, r16
     5ee:	80 81       	ld	r24, Z
     5f0:	8b 7f       	andi	r24, 0xFB	; 251
     5f2:	80 83       	st	Z, r24
		DATA_DDR = 0xFF;
     5f4:	f5 01       	movw	r30, r10
     5f6:	90 82       	st	Z, r9
     5f8:	f2 e4       	ldi	r31, 0x42	; 66
     5fa:	fa 95       	dec	r31
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <ReadFlash+0xac>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <ReadFlash+0xb2>
	char DataValueIn = 0;
	
	//A: Load Command "Read Flash"
	LoadCommand(READ_FLASH);
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	e8 1a       	sub	r14, r24
     604:	f8 0a       	sbc	r15, r24
     606:	ed b7       	in	r30, 0x3d	; 61
     608:	fe b7       	in	r31, 0x3e	; 62
     60a:	38 96       	adiw	r30, 0x08	; 8
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	fe bf       	out	0x3e, r31	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	ed bf       	out	0x3d, r30	; 61
     616:	f0 e1       	ldi	r31, 0x10	; 16
     618:	ef 16       	cp	r14, r31
     61a:	f1 04       	cpc	r15, r1
     61c:	09 f0       	breq	.+2      	; 0x620 <ReadFlash+0xd2>
     61e:	b9 cf       	rjmp	.-142    	; 0x592 <ReadFlash+0x44>
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
		_delay_us(25);
	}
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	ff 90       	pop	r15
     62a:	ef 90       	pop	r14
     62c:	df 90       	pop	r13
     62e:	cf 90       	pop	r12
     630:	bf 90       	pop	r11
     632:	af 90       	pop	r10
     634:	9f 90       	pop	r9
     636:	08 95       	ret

00000638 <ChipErase>:

void ChipErase(void)
{
	CONTROL_PORT |= 1<<XA1_BS2;
     638:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     63a:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     63c:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x80;
     63e:	80 e8       	ldi	r24, 0x80	; 128
     640:	80 93 0b 01 	sts	0x010B, r24
     644:	22 e4       	ldi	r18, 0x42	; 66
     646:	2a 95       	dec	r18
     648:	f1 f7       	brne	.-4      	; 0x646 <ChipErase+0xe>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <ChipErase+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     64c:	58 9a       	sbi	0x0b, 0	; 11
     64e:	82 e4       	ldi	r24, 0x42	; 66
     650:	8a 95       	dec	r24
     652:	f1 f7       	brne	.-4      	; 0x650 <ChipErase+0x18>
     654:	00 c0       	rjmp	.+0      	; 0x656 <ChipErase+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     656:	58 98       	cbi	0x0b, 0	; 11
     658:	92 e4       	ldi	r25, 0x42	; 66
     65a:	9a 95       	dec	r25
     65c:	f1 f7       	brne	.-4      	; 0x65a <ChipErase+0x22>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <ChipErase+0x28>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<WR);
     660:	5a 98       	cbi	0x0b, 2	; 11
     662:	22 e4       	ldi	r18, 0x42	; 66
     664:	2a 95       	dec	r18
     666:	f1 f7       	brne	.-4      	; 0x664 <ChipErase+0x2c>
     668:	00 c0       	rjmp	.+0      	; 0x66a <ChipErase+0x32>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
     66a:	5a 9a       	sbi	0x0b, 2	; 11
     66c:	82 e4       	ldi	r24, 0x42	; 66
     66e:	8a 95       	dec	r24
     670:	f1 f7       	brne	.-4      	; 0x66e <ChipErase+0x36>
     672:	00 c0       	rjmp	.+0      	; 0x674 <ChipErase+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     674:	9f ef       	ldi	r25, 0xFF	; 255
     676:	29 e6       	ldi	r18, 0x69	; 105
     678:	88 e1       	ldi	r24, 0x18	; 24
     67a:	91 50       	subi	r25, 0x01	; 1
     67c:	20 40       	sbci	r18, 0x00	; 0
     67e:	80 40       	sbci	r24, 0x00	; 0
     680:	e1 f7       	brne	.-8      	; 0x67a <ChipErase+0x42>
     682:	00 c0       	rjmp	.+0      	; 0x684 <ChipErase+0x4c>
     684:	00 00       	nop
     686:	08 95       	ret

00000688 <ProgramFlash>:
	//while(!(CONTROL_PIN & (1<<RDY_BSY)));
	_delay_ms(1000);
}

void ProgramFlash(char* hexData)
{
     688:	2f 92       	push	r2
     68a:	3f 92       	push	r3
     68c:	4f 92       	push	r4
     68e:	5f 92       	push	r5
     690:	6f 92       	push	r6
     692:	7f 92       	push	r7
     694:	8f 92       	push	r8
     696:	9f 92       	push	r9
     698:	af 92       	push	r10
     69a:	bf 92       	push	r11
     69c:	cf 92       	push	r12
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	00 d0       	rcall	.+0      	; 0x6ae <ProgramFlash+0x26>
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <ProgramFlash+0x28>
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
	uint16_t address;
	uint16_t data;
	uint32_t totalBytes = 0; 
	//Keep looping until the hexRow is the end of file or we hit the end of a page 
	
	LoadCommand(WRITE_FLASH);
     6b4:	80 e1       	ldi	r24, 0x10	; 16
     6b6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LoadCommand>
{
	char* hexRow;
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	uint32_t totalBytes = 0; 
     6ba:	81 2c       	mov	r8, r1
     6bc:	91 2c       	mov	r9, r1
     6be:	54 01       	movw	r10, r8
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
		{
			LoadLowAddress(address + j);
			printf("Address: 0x%04X\n",(address + j));
     6c0:	0f 2e       	mov	r0, r31
     6c2:	f7 e5       	ldi	r31, 0x57	; 87
     6c4:	2f 2e       	mov	r2, r31
     6c6:	f2 e0       	ldi	r31, 0x02	; 2
     6c8:	3f 2e       	mov	r3, r31
     6ca:	f0 2d       	mov	r31, r0
	
	LoadCommand(WRITE_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
     6cc:	0e 94 b4 00 	call	0x168	; 0x168 <getHexRow>
     6d0:	3c 01       	movw	r6, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
     6d2:	dc 01       	movw	r26, r24
     6d4:	14 96       	adiw	r26, 0x04	; 4
     6d6:	8c 91       	ld	r24, X
     6d8:	14 97       	sbiw	r26, 0x04	; 4
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <ProgramFlash+0x58>
     6de:	6c c0       	rjmp	.+216    	; 0x7b8 <ProgramFlash+0x130>
			break; 
			
		byteCount = (hexRow[BYTE_COUNT]);
     6e0:	11 96       	adiw	r26, 0x01	; 1
     6e2:	4c 90       	ld	r4, X
     6e4:	11 97       	sbiw	r26, 0x01	; 1
     6e6:	51 2c       	mov	r5, r1
		address = hexRow[ADDRESS_H];
     6e8:	12 96       	adiw	r26, 0x02	; 2
     6ea:	8c 91       	ld	r24, X
     6ec:	12 97       	sbiw	r26, 0x02	; 2
     6ee:	90 e0       	ldi	r25, 0x00	; 0
		address <<= 8;
     6f0:	98 2f       	mov	r25, r24
     6f2:	88 27       	eor	r24, r24
		address |= (hexRow[ADDRESS_L]/2);
     6f4:	13 96       	adiw	r26, 0x03	; 3
     6f6:	2c 91       	ld	r18, X
     6f8:	26 95       	lsr	r18
     6fa:	fc 01       	movw	r30, r24
     6fc:	e2 2b       	or	r30, r18
     6fe:	fa 83       	std	Y+2, r31	; 0x02
     700:	e9 83       	std	Y+1, r30	; 0x01
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
     702:	41 14       	cp	r4, r1
     704:	51 04       	cpc	r5, r1
     706:	09 f4       	brne	.+2      	; 0x70a <ProgramFlash+0x82>
     708:	45 c0       	rjmp	.+138    	; 0x794 <ProgramFlash+0x10c>
     70a:	63 01       	movw	r12, r6
     70c:	f5 e0       	ldi	r31, 0x05	; 5
     70e:	cf 0e       	add	r12, r31
     710:	d1 1c       	adc	r13, r1
     712:	09 81       	ldd	r16, Y+1	; 0x01
     714:	1a 81       	ldd	r17, Y+2	; 0x02
     716:	e1 2c       	mov	r14, r1
     718:	f1 2c       	mov	r15, r1
     71a:	1b 82       	std	Y+3, r1	; 0x03
     71c:	1c 82       	std	Y+4, r1	; 0x04
		{
			LoadLowAddress(address + j);
     71e:	c8 01       	movw	r24, r16
     720:	0e 94 8d 01 	call	0x31a	; 0x31a <LoadLowAddress>
			printf("Address: 0x%04X\n",(address + j));
     724:	1f 93       	push	r17
     726:	0f 93       	push	r16
     728:	3f 92       	push	r3
     72a:	2f 92       	push	r2
     72c:	0e 94 48 07 	call	0xe90	; 0xe90 <printf>
			data = hexRow[DATA_BEGIN + i + 1];
     730:	f3 01       	movw	r30, r6
     732:	ee 0d       	add	r30, r14
     734:	ff 1d       	adc	r31, r15
     736:	e6 80       	ldd	r14, Z+6	; 0x06
     738:	f1 2c       	mov	r15, r1
			data <<= 8;
     73a:	fe 2c       	mov	r15, r14
     73c:	ee 24       	eor	r14, r14
			data |= hexRow[DATA_BEGIN + i];
     73e:	d6 01       	movw	r26, r12
     740:	8c 91       	ld	r24, X
     742:	e8 2a       	or	r14, r24
			WriteWord(data);
     744:	c7 01       	movw	r24, r14
     746:	0e 94 67 01 	call	0x2ce	; 0x2ce <WriteWord>
			printf("Word: 0x%04X\n",(data));
     74a:	ff 92       	push	r15
     74c:	ef 92       	push	r14
     74e:	a8 e6       	ldi	r26, 0x68	; 104
     750:	b2 e0       	ldi	r27, 0x02	; 2
     752:	bf 93       	push	r27
     754:	af 93       	push	r26
     756:	0e 94 48 07 	call	0xe90	; 0xe90 <printf>
			totalBytes+=i; 
     75a:	2b 81       	ldd	r18, Y+3	; 0x03
     75c:	3c 81       	ldd	r19, Y+4	; 0x04
     75e:	c9 01       	movw	r24, r18
     760:	aa 27       	eor	r26, r26
     762:	97 fd       	sbrc	r25, 7
     764:	a0 95       	com	r26
     766:	ba 2f       	mov	r27, r26
     768:	88 0e       	add	r8, r24
     76a:	99 1e       	adc	r9, r25
     76c:	aa 1e       	adc	r10, r26
     76e:	bb 1e       	adc	r11, r27
		address = hexRow[ADDRESS_H];
		address <<= 8;
		address |= (hexRow[ADDRESS_L]/2);
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
     770:	2e 5f       	subi	r18, 0xFE	; 254
     772:	3f 4f       	sbci	r19, 0xFF	; 255
     774:	3c 83       	std	Y+4, r19	; 0x04
     776:	2b 83       	std	Y+3, r18	; 0x03
     778:	79 01       	movw	r14, r18
     77a:	0f 5f       	subi	r16, 0xFF	; 255
     77c:	1f 4f       	sbci	r17, 0xFF	; 255
     77e:	32 e0       	ldi	r19, 0x02	; 2
     780:	c3 0e       	add	r12, r19
     782:	d1 1c       	adc	r13, r1
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	e4 14       	cp	r14, r4
     790:	f5 04       	cpc	r15, r5
     792:	28 f2       	brcs	.-118    	; 0x71e <ProgramFlash+0x96>
			totalBytes+=i; 
			j++;
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%PAGE_SIZE_BYTES == 0)
     794:	d5 01       	movw	r26, r10
     796:	c4 01       	movw	r24, r8
     798:	8f 71       	andi	r24, 0x1F	; 31
     79a:	99 27       	eor	r25, r25
     79c:	aa 27       	eor	r26, r26
     79e:	bb 27       	eor	r27, r27
     7a0:	89 2b       	or	r24, r25
     7a2:	8a 2b       	or	r24, r26
     7a4:	8b 2b       	or	r24, r27
     7a6:	09 f0       	breq	.+2      	; 0x7aa <ProgramFlash+0x122>
     7a8:	91 cf       	rjmp	.-222    	; 0x6cc <ProgramFlash+0x44>
		{
			LoadHighAddress(address);
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	9a 81       	ldd	r25, Y+2	; 0x02
     7ae:	0e 94 a1 01 	call	0x342	; 0x342 <LoadHighAddress>
			ProgramPage();
     7b2:	0e 94 b5 01 	call	0x36a	; 0x36a <ProgramPage>
     7b6:	8a cf       	rjmp	.-236    	; 0x6cc <ProgramFlash+0x44>
		}
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%PAGE_SIZE_BYTES != 0)
     7b8:	5f e1       	ldi	r21, 0x1F	; 31
     7ba:	85 22       	and	r8, r21
     7bc:	99 24       	eor	r9, r9
     7be:	aa 24       	eor	r10, r10
     7c0:	bb 24       	eor	r11, r11
     7c2:	89 28       	or	r8, r9
     7c4:	8a 28       	or	r8, r10
     7c6:	8b 28       	or	r8, r11
     7c8:	31 f0       	breq	.+12     	; 0x7d6 <ProgramFlash+0x14e>
	{
		LoadHighAddress(address);
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	0e 94 a1 01 	call	0x342	; 0x342 <LoadHighAddress>
		ProgramPage();
     7d2:	0e 94 b5 01 	call	0x36a	; 0x36a <ProgramPage>
	} 
	
	EndPageProgramming();
     7d6:	0e 94 c9 01 	call	0x392	; 0x392 <EndPageProgramming>
}
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	df 90       	pop	r13
     7f0:	cf 90       	pop	r12
     7f2:	bf 90       	pop	r11
     7f4:	af 90       	pop	r10
     7f6:	9f 90       	pop	r9
     7f8:	8f 90       	pop	r8
     7fa:	7f 90       	pop	r7
     7fc:	6f 90       	pop	r6
     7fe:	5f 90       	pop	r5
     800:	4f 90       	pop	r4
     802:	3f 90       	pop	r3
     804:	2f 90       	pop	r2
     806:	08 95       	ret

00000808 <ExitParallelProgrammingMode>:
	EndPageProgramming();
}

void ExitParallelProgrammingMode(void)
{
	disableVppRegulator();
     808:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <disableVppRegulator>
	disableVccRegulator();
     80c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <disableVccRegulator>
	disableVLogic();
     810:	0e 94 06 07 	call	0xe0c	; 0xe0c <disableVLogic>
     814:	8f e0       	ldi	r24, 0x0F	; 15
     816:	97 e2       	ldi	r25, 0x27	; 39
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <ExitParallelProgrammingMode+0x10>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <ExitParallelProgrammingMode+0x16>
     81e:	00 00       	nop
	
	_delay_ms(5);
	DATA_PORT = 0x00;
     820:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
     824:	1b b8       	out	0x0b, r1	; 11
     826:	8f ec       	ldi	r24, 0xCF	; 207
     828:	97 e0       	ldi	r25, 0x07	; 7
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <ExitParallelProgrammingMode+0x22>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <ExitParallelProgrammingMode+0x28>
     830:	00 00       	nop
	_delay_ms(1);
	SPI_FPGA_Write(FPGA_Disable);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 91 00 	call	0x122	; 0x122 <SPI_FPGA_Write>
	
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
     838:	e5 e0       	ldi	r30, 0x05	; 5
     83a:	f1 e0       	ldi	r31, 0x01	; 1
     83c:	80 81       	ld	r24, Z
     83e:	8f 7d       	andi	r24, 0xDF	; 223
     840:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     842:	95 e3       	ldi	r25, 0x35	; 53
     844:	9a 95       	dec	r25
     846:	f1 f7       	brne	.-4      	; 0x844 <ExitParallelProgrammingMode+0x3c>
     848:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SR_RESET);
     84a:	80 81       	ld	r24, Z
     84c:	80 62       	ori	r24, 0x20	; 32
     84e:	80 83       	st	Z, r24
     850:	2d e0       	ldi	r18, 0x0D	; 13
     852:	2a 95       	dec	r18
     854:	f1 f7       	brne	.-4      	; 0x852 <ExitParallelProgrammingMode+0x4a>
     856:	00 00       	nop
	_delay_us(5);
	SRCS_PORT |= (1<<SRCS);
     858:	2f 9a       	sbi	0x05, 7	; 5
     85a:	85 e3       	ldi	r24, 0x35	; 53
     85c:	8a 95       	dec	r24
     85e:	f1 f7       	brne	.-4      	; 0x85c <ExitParallelProgrammingMode+0x54>
     860:	00 00       	nop
	_delay_us(20);
	SRCS_PORT &= ~(1<<SRCS);
     862:	2f 98       	cbi	0x05, 7	; 5
	
	SR_CNTRL_PORT |= (1<<SROE);
     864:	80 81       	ld	r24, Z
     866:	88 60       	ori	r24, 0x08	; 8
     868:	80 83       	st	Z, r24
	
	LED_PORT |= (1<<LED_Green);
     86a:	a0 9a       	sbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86c:	9f ef       	ldi	r25, 0xFF	; 255
     86e:	29 e6       	ldi	r18, 0x69	; 105
     870:	88 e1       	ldi	r24, 0x18	; 24
     872:	91 50       	subi	r25, 0x01	; 1
     874:	20 40       	sbci	r18, 0x00	; 0
     876:	80 40       	sbci	r24, 0x00	; 0
     878:	e1 f7       	brne	.-8      	; 0x872 <ExitParallelProgrammingMode+0x6a>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <ExitParallelProgrammingMode+0x74>
     87c:	00 00       	nop
	_delay_ms(1000);
	LED_PORT &= ~((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
     87e:	84 b3       	in	r24, 0x14	; 20
     880:	88 7f       	andi	r24, 0xF8	; 248
     882:	84 bb       	out	0x14, r24	; 20
     884:	08 95       	ret

00000886 <main>:
#define ATmega48P 4

int main(void)
{
	char* SignatureBytes;
	uart2_init();
     886:	0e 94 c8 04 	call	0x990	; 0x990 <uart2_init>
	hexInit();
     88a:	0e 94 a8 00 	call	0x150	; 0x150 <hexInit>

	SPI_Init();
     88e:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_Init>
	printf("\n\n");
     892:	80 ef       	ldi	r24, 0xF0	; 240
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	0e 94 63 07 	call	0xec6	; 0xec6 <puts>
	writeHexFileTest();
     89a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeHexFileTest>
	RAMPrint(HEX_FILE_ADDRESS, 50);
     89e:	42 e3       	ldi	r20, 0x32	; 50
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	cb 01       	movw	r24, r22
     8a8:	0e 94 74 05 	call	0xae8	; 0xae8 <RAMPrint>
	//Write test file to external RAM 
	//Test switching circuitry code

	ProgInit();
     8ac:	0e 94 2d 01 	call	0x25a	; 0x25a <ProgInit>
	EnableProgMode(ATtiny2313);
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <EnableProgMode>
	SignatureBytes = ReadSignatureBytes();
     8b6:	0e 94 08 02 	call	0x410	; 0x410 <ReadSignatureBytes>
     8ba:	ec 01       	movw	r28, r24
	
	printf("\nSignature Bytes: 0x%02X 0x%02X 0x%02X\n", *SignatureBytes, *(SignatureBytes + 1), *(SignatureBytes + 2));
     8bc:	8a 81       	ldd	r24, Y+2	; 0x02
     8be:	1f 92       	push	r1
     8c0:	8f 93       	push	r24
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	1f 92       	push	r1
     8c6:	8f 93       	push	r24
     8c8:	88 81       	ld	r24, Y
     8ca:	1f 92       	push	r1
     8cc:	8f 93       	push	r24
     8ce:	86 e7       	ldi	r24, 0x76	; 118
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	9f 93       	push	r25
     8d4:	8f 93       	push	r24
     8d6:	0e 94 48 07 	call	0xe90	; 0xe90 <printf>
	if ( (*SignatureBytes == 0x1E) && (*(SignatureBytes + 1) == 0x91) && (*(SignatureBytes + 2) == 0x0A) )
     8da:	8d b7       	in	r24, 0x3d	; 61
     8dc:	9e b7       	in	r25, 0x3e	; 62
     8de:	08 96       	adiw	r24, 0x08	; 8
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	9e bf       	out	0x3e, r25	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	8d bf       	out	0x3d, r24	; 61
     8ea:	88 81       	ld	r24, Y
     8ec:	8e 31       	cpi	r24, 0x1E	; 30
     8ee:	39 f5       	brne	.+78     	; 0x93e <main+0xb8>
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	81 39       	cpi	r24, 0x91	; 145
     8f4:	21 f5       	brne	.+72     	; 0x93e <main+0xb8>
     8f6:	8a 81       	ldd	r24, Y+2	; 0x02
     8f8:	8a 30       	cpi	r24, 0x0A	; 10
     8fa:	09 f5       	brne	.+66     	; 0x93e <main+0xb8>
	{
		printf("Starting Programming!\n");
     8fc:	8e e9       	ldi	r24, 0x9E	; 158
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	0e 94 63 07 	call	0xec6	; 0xec6 <puts>
		printf("Erasing...\n");
     904:	84 eb       	ldi	r24, 0xB4	; 180
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0e 94 63 07 	call	0xec6	; 0xec6 <puts>
		ChipErase();
     90c:	0e 94 1c 03 	call	0x638	; 0x638 <ChipErase>
		ReadFlash();
     910:	0e 94 a7 02 	call	0x54e	; 0x54e <ReadFlash>
		printf("\nDone Erasing!\n");
     914:	8f eb       	ldi	r24, 0xBF	; 191
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	0e 94 63 07 	call	0xec6	; 0xec6 <puts>
		printf("Programming...\n");
     91c:	8e ec       	ldi	r24, 0xCE	; 206
     91e:	92 e0       	ldi	r25, 0x02	; 2
     920:	0e 94 63 07 	call	0xec6	; 0xec6 <puts>
		ProgramFlash();
     924:	0e 94 44 03 	call	0x688	; 0x688 <ProgramFlash>
		printf("Verifying...\n");
     928:	8d ed       	ldi	r24, 0xDD	; 221
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	0e 94 63 07 	call	0xec6	; 0xec6 <puts>
		ReadFlash();
     930:	0e 94 a7 02 	call	0x54e	; 0x54e <ReadFlash>
		printf("\nDone!\n\n");
     934:	8a ee       	ldi	r24, 0xEA	; 234
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	0e 94 63 07 	call	0xec6	; 0xec6 <puts>
     93c:	04 c0       	rjmp	.+8      	; 0x946 <main+0xc0>
	}
	else
	{
		printf("ERROR: Signature Bytes Mismatch\n");
     93e:	82 ef       	ldi	r24, 0xF2	; 242
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	0e 94 63 07 	call	0xec6	; 0xec6 <puts>
	}
	ExitParallelProgrammingMode();
     946:	0e 94 04 04 	call	0x808	; 0x808 <ExitParallelProgrammingMode>
     94a:	ff cf       	rjmp	.-2      	; 0x94a <main+0xc4>

0000094c <uart_sendStream>:
	putchar('m');
}


int uart_sendStream(char ch,FILE *stream)
{
     94c:	cf 93       	push	r28
     94e:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     950:	8a 30       	cpi	r24, 0x0A	; 10
     952:	19 f4       	brne	.+6      	; 0x95a <uart_sendStream+0xe>
	uart_sendStream('\r', stream);
     954:	8d e0       	ldi	r24, 0x0D	; 13
     956:	0e 94 a6 04 	call	0x94c	; 0x94c <uart_sendStream>
	while (!(UCSR2A & (1<<UDRE2)));
     95a:	e0 ed       	ldi	r30, 0xD0	; 208
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	90 81       	ld	r25, Z
     960:	95 ff       	sbrs	r25, 5
     962:	fd cf       	rjmp	.-6      	; 0x95e <uart_sendStream+0x12>
	UDR2=ch;
     964:	c0 93 d6 00 	sts	0x00D6, r28
	return 0;
}
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <uart_receiveStream>:

int uart_receiveStream(FILE *stream)
{
     970:	cf 93       	push	r28
     972:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR2A & (1<<RXC2)));
     974:	e0 ed       	ldi	r30, 0xD0	; 208
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	88 23       	and	r24, r24
     97c:	ec f7       	brge	.-6      	; 0x978 <uart_receiveStream+0x8>
	ch=UDR2;
     97e:	c0 91 d6 00 	lds	r28, 0x00D6

	/* Echo the Output Back to terminal */
	uart_sendStream(ch,stream);
     982:	8c 2f       	mov	r24, r28
     984:	0e 94 a6 04 	call	0x94c	; 0x94c <uart_sendStream>

	return ch;
}
     988:	8c 2f       	mov	r24, r28
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     990:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     994:	83 e3       	ldi	r24, 0x33	; 51
     996:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     99a:	88 e1       	ldi	r24, 0x18	; 24
     99c:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     9a0:	86 e0       	ldi	r24, 0x06	; 6
     9a2:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     9a6:	8c e3       	ldi	r24, 0x3C	; 60
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	90 93 84 03 	sts	0x0384, r25
     9ae:	80 93 83 03 	sts	0x0383, r24
     9b2:	90 93 86 03 	sts	0x0386, r25
     9b6:	80 93 85 03 	sts	0x0385, r24
     9ba:	08 95       	ret

000009bc <getRAMStatus>:
}

int getRAMStatus()
{
	//Enable RAM CS
	RAM_PORT &= ~(1<<RAM_CS);
     9bc:	a3 98       	cbi	0x14, 3	; 20
	SPDR = RDSR;
     9be:	85 e0       	ldi	r24, 0x05	; 5
     9c0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9c2:	0d b4       	in	r0, 0x2d	; 45
     9c4:	07 fe       	sbrs	r0, 7
     9c6:	fd cf       	rjmp	.-6      	; 0x9c2 <getRAMStatus+0x6>
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     9c8:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9ca:	0d b4       	in	r0, 0x2d	; 45
     9cc:	07 fe       	sbrs	r0, 7
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <getRAMStatus+0xe>
	//Disable RAM CS
	RAM_PORT |= (1<<RAM_CS);
     9d0:	a3 9a       	sbi	0x14, 3	; 20
	return(SPDR);
     9d2:	8e b5       	in	r24, 0x2e	; 46
}
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	08 95       	ret

000009d8 <setRAMStatus>:

void setRAMStatus(char mode)
{
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     9d8:	a3 98       	cbi	0x14, 3	; 20
	SPDR = WRSR;
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9de:	0d b4       	in	r0, 0x2d	; 45
     9e0:	07 fe       	sbrs	r0, 7
     9e2:	fd cf       	rjmp	.-6      	; 0x9de <setRAMStatus+0x6>
	// Start Data transmission
	SPDR = mode;
     9e4:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9e6:	0d b4       	in	r0, 0x2d	; 45
     9e8:	07 fe       	sbrs	r0, 7
     9ea:	fd cf       	rjmp	.-6      	; 0x9e6 <setRAMStatus+0xe>
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
     9ec:	a3 9a       	sbi	0x14, 3	; 20
     9ee:	08 95       	ret

000009f0 <SPI_WriteAddress>:
}

void SPI_WriteAddress(uint32_t address)
{
     9f0:	26 2f       	mov	r18, r22
     9f2:	97 2f       	mov	r25, r23
     9f4:	48 2f       	mov	r20, r24
	SPDR = WRITE;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9fa:	0d b4       	in	r0, 0x2d	; 45
     9fc:	07 fe       	sbrs	r0, 7
     9fe:	fd cf       	rjmp	.-6      	; 0x9fa <SPI_WriteAddress+0xa>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (address & 0xFF0000) >> 16;
     a00:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a02:	0d b4       	in	r0, 0x2d	; 45
     a04:	07 fe       	sbrs	r0, 7
     a06:	fd cf       	rjmp	.-6      	; 0xa02 <SPI_WriteAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     a08:	89 2f       	mov	r24, r25
     a0a:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a0c:	0d b4       	in	r0, 0x2d	; 45
     a0e:	07 fe       	sbrs	r0, 7
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <SPI_WriteAddress+0x1c>
	SPDR = (address & 0x0000FF);
     a12:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a14:	0d b4       	in	r0, 0x2d	; 45
     a16:	07 fe       	sbrs	r0, 7
     a18:	fd cf       	rjmp	.-6      	; 0xa14 <SPI_WriteAddress+0x24>
}
     a1a:	08 95       	ret

00000a1c <SPI_WriteData>:

void SPI_WriteData(char data)
{
	// Start Data transmission
	SPDR = data;
     a1c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a1e:	0d b4       	in	r0, 0x2d	; 45
     a20:	07 fe       	sbrs	r0, 7
     a22:	fd cf       	rjmp	.-6      	; 0xa1e <SPI_WriteData+0x2>
}
     a24:	08 95       	ret

00000a26 <SPI_ReadAddress>:

void SPI_ReadAddress(uint32_t address)
{
     a26:	26 2f       	mov	r18, r22
     a28:	97 2f       	mov	r25, r23
     a2a:	48 2f       	mov	r20, r24
	SPDR = READ;
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a30:	0d b4       	in	r0, 0x2d	; 45
     a32:	07 fe       	sbrs	r0, 7
     a34:	fd cf       	rjmp	.-6      	; 0xa30 <SPI_ReadAddress+0xa>
	SPDR = (address & 0xFF0000) >> 16;
     a36:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a38:	0d b4       	in	r0, 0x2d	; 45
     a3a:	07 fe       	sbrs	r0, 7
     a3c:	fd cf       	rjmp	.-6      	; 0xa38 <SPI_ReadAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     a3e:	89 2f       	mov	r24, r25
     a40:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a42:	0d b4       	in	r0, 0x2d	; 45
     a44:	07 fe       	sbrs	r0, 7
     a46:	fd cf       	rjmp	.-6      	; 0xa42 <SPI_ReadAddress+0x1c>
	SPDR = (address & 0x0000FF);
     a48:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a4a:	0d b4       	in	r0, 0x2d	; 45
     a4c:	07 fe       	sbrs	r0, 7
     a4e:	fd cf       	rjmp	.-6      	; 0xa4a <SPI_ReadAddress+0x24>
}
     a50:	08 95       	ret

00000a52 <SPI_ReadData>:

char SPI_ReadData()
{
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     a52:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a54:	0d b4       	in	r0, 0x2d	; 45
     a56:	07 fe       	sbrs	r0, 7
     a58:	fd cf       	rjmp	.-6      	; 0xa54 <SPI_ReadData+0x2>
	return(SPDR);
     a5a:	8e b5       	in	r24, 0x2e	; 46
}
     a5c:	08 95       	ret

00000a5e <RAMWrite>:

uint16_t RAMWrite(char* data, uint16_t startAddress, uint16_t length)
{
     a5e:	af 92       	push	r10
     a60:	bf 92       	push	r11
     a62:	cf 92       	push	r12
     a64:	df 92       	push	r13
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ec 01       	movw	r28, r24
     a74:	8b 01       	movw	r16, r22
     a76:	5a 01       	movw	r10, r20
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     a78:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     a7a:	6b 01       	movw	r12, r22
     a7c:	e1 2c       	mov	r14, r1
     a7e:	f1 2c       	mov	r15, r1
     a80:	c7 01       	movw	r24, r14
     a82:	b6 01       	movw	r22, r12
     a84:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <SPI_WriteAddress>
	SPI_WriteData(0x00);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     a8e:	a3 9a       	sbi	0x14, 3	; 20
	setRAMStatus(SEQ);
     a90:	80 e4       	ldi	r24, 0x40	; 64
     a92:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <setRAMStatus>
	getRAMStatus();
     a96:	0e 94 de 04 	call	0x9bc	; 0x9bc <getRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     a9a:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     a9c:	c7 01       	movw	r24, r14
     a9e:	b6 01       	movw	r22, r12
     aa0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <SPI_WriteAddress>
	for(int i = 0; i < length; i++)
     aa4:	a1 14       	cp	r10, r1
     aa6:	b1 04       	cpc	r11, r1
     aa8:	91 f0       	breq	.+36     	; 0xace <RAMWrite+0x70>
     aaa:	65 01       	movw	r12, r10
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	e1 2c       	mov	r14, r1
     ab2:	f1 2c       	mov	r15, r1
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
     ab4:	fe 01       	movw	r30, r28
     ab6:	e8 0f       	add	r30, r24
     ab8:	f9 1f       	adc	r31, r25
     aba:	80 81       	ld	r24, Z
     abc:	0e 94 0e 05 	call	0xa1c	; 0xa1c <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
	setRAMStatus(SEQ);
	getRAMStatus();
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_WriteAddress(startAddress);
	for(int i = 0; i < length; i++)
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	e8 1a       	sub	r14, r24
     ac4:	f8 0a       	sbc	r15, r24
     ac6:	c7 01       	movw	r24, r14
     ac8:	ec 14       	cp	r14, r12
     aca:	fd 04       	cpc	r15, r13
     acc:	99 f7       	brne	.-26     	; 0xab4 <RAMWrite+0x56>
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
	}
	RAM_PORT |= (1<<RAM_CS);
     ace:	a3 9a       	sbi	0x14, 3	; 20
		

	return startAddress; 
}
     ad0:	c8 01       	movw	r24, r16
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	bf 90       	pop	r11
     ae4:	af 90       	pop	r10
     ae6:	08 95       	ret

00000ae8 <RAMPrint>:
	//printf("%d\n", buffer);
	return buffer; 
}

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	c6 2f       	mov	r28, r22
     af6:	d7 2f       	mov	r29, r23
     af8:	18 2f       	mov	r17, r24
     afa:	09 2f       	mov	r16, r25
     afc:	7a 01       	movw	r14, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     afe:	80 e4       	ldi	r24, 0x40	; 64
     b00:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     b04:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     b06:	6c 2f       	mov	r22, r28
     b08:	7d 2f       	mov	r23, r29
     b0a:	81 2f       	mov	r24, r17
     b0c:	90 2f       	mov	r25, r16
     b0e:	0e 94 13 05 	call	0xa26	; 0xa26 <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	df 93       	push	r29
     b18:	cf 93       	push	r28
     b1a:	82 e1       	ldi	r24, 0x12	; 18
     b1c:	93 e0       	ldi	r25, 0x03	; 3
     b1e:	9f 93       	push	r25
     b20:	8f 93       	push	r24
     b22:	0e 94 48 07 	call	0xe90	; 0xe90 <printf>
	int i; 
	for(i=0; i<length; i++)
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	e1 14       	cp	r14, r1
     b34:	f1 04       	cpc	r15, r1
     b36:	a9 f0       	breq	.+42     	; 0xb62 <RAMPrint+0x7a>
     b38:	c0 e0       	ldi	r28, 0x00	; 0
     b3a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("0x%02X ", SPI_ReadData());
     b3c:	0f e4       	ldi	r16, 0x4F	; 79
     b3e:	12 e0       	ldi	r17, 0x02	; 2
     b40:	0e 94 29 05 	call	0xa52	; 0xa52 <SPI_ReadData>
     b44:	1f 92       	push	r1
     b46:	8f 93       	push	r24
     b48:	1f 93       	push	r17
     b4a:	0f 93       	push	r16
     b4c:	0e 94 48 07 	call	0xe90	; 0xe90 <printf>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     b50:	21 96       	adiw	r28, 0x01	; 1
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	ce 15       	cp	r28, r14
     b5c:	df 05       	cpc	r29, r15
     b5e:	81 f7       	brne	.-32     	; 0xb40 <RAMPrint+0x58>
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <RAMPrint+0x7e>
     b62:	e1 2c       	mov	r14, r1
     b64:	f1 2c       	mov	r15, r1
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     b66:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     b68:	ff 92       	push	r15
     b6a:	ef 92       	push	r14
     b6c:	83 e2       	ldi	r24, 0x23	; 35
     b6e:	93 e0       	ldi	r25, 0x03	; 3
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	0e 94 48 07 	call	0xe90	; 0xe90 <printf>
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
     b8e:	cf 93       	push	r28
     b90:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     b92:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     b94:	cb 01       	movw	r24, r22
     b96:	ba 01       	movw	r22, r20
     b98:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <SPI_WriteAddress>
	SPI_WriteData(data);
     b9c:	8c 2f       	mov	r24, r28
     b9e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     ba2:	a3 9a       	sbi	0x14, 3	; 20
}
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     bac:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     bae:	a3 9a       	sbi	0x14, 3	; 20
	
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     bb0:	81 e5       	ldi	r24, 0x51	; 81
     bb2:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	ba 01       	movw	r22, r20
     bba:	82 e3       	ldi	r24, 0x32	; 50
     bbc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <RAMWriteByte>
     bc0:	08 95       	ret

00000bc2 <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint32_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     bc2:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     bc4:	0e 94 13 05 	call	0xa26	; 0xa26 <SPI_ReadAddress>
	char data = SPI_ReadData();
     bc8:	0e 94 29 05 	call	0xa52	; 0xa52 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     bcc:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     bce:	08 95       	ret

00000bd0 <SPI_Switching_Circuitry_Init>:


void SPI_Switching_Circuitry_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1<<SS));
     bd0:	84 b1       	in	r24, 0x04	; 4
     bd2:	87 60       	ori	r24, 0x07	; 7
     bd4:	84 b9       	out	0x04, r24	; 4
	
	// Enable SPI, Master Mode 0, set the clock rate fck/64
	SPCR = ((1<<SPE)|(1<<MSTR)|(1<<SPR1));
     bd6:	82 e5       	ldi	r24, 0x52	; 82
     bd8:	8c bd       	out	0x2c, r24	; 44
	
	SR_CNTRL_DDR |= ((1<<SR_RESET) | (1<<MAXCS) | (1<<SROE));
     bda:	e4 e0       	ldi	r30, 0x04	; 4
     bdc:	f1 e0       	ldi	r31, 0x01	; 1
     bde:	80 81       	ld	r24, Z
     be0:	88 63       	ori	r24, 0x38	; 56
     be2:	80 83       	st	Z, r24
	SRCS_DDR |= (1<<SRCS);
     be4:	27 9a       	sbi	0x04, 7	; 4
	SRCS_PORT &= ~(1<<SRCS);
     be6:	2f 98       	cbi	0x05, 7	; 5
	SR_CNTRL_PORT |= ((1<<MAXCS) | (1<<SROE) | (1<<SR_RESET));
     be8:	e5 e0       	ldi	r30, 0x05	; 5
     bea:	f1 e0       	ldi	r31, 0x01	; 1
     bec:	80 81       	ld	r24, Z
     bee:	88 63       	ori	r24, 0x38	; 56
     bf0:	80 83       	st	Z, r24
     bf2:	08 95       	ret

00000bf4 <SPI_Switching_Circuitry_Write>:
}

void SPI_Switching_Circuitry_Write(unsigned char SPI_Data)
{
	// Start Write transmission
	SPDR = SPI_Data;
     bf4:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     bf6:	0d b4       	in	r0, 0x2d	; 45
     bf8:	07 fe       	sbrs	r0, 7
     bfa:	fd cf       	rjmp	.-6      	; 0xbf6 <SPI_Switching_Circuitry_Write+0x2>
}
     bfc:	08 95       	ret

00000bfe <SwitchingCircuitryEnable>:

void SwitchingCircuitryEnable()
{
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
     bfe:	e5 e0       	ldi	r30, 0x05	; 5
     c00:	f1 e0       	ldi	r31, 0x01	; 1
     c02:	80 81       	ld	r24, Z
     c04:	8f 7d       	andi	r24, 0xDF	; 223
     c06:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c08:	82 e4       	ldi	r24, 0x42	; 66
     c0a:	8a 95       	dec	r24
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <SwitchingCircuitryEnable+0xc>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <SwitchingCircuitryEnable+0x12>
	_delay_us(25);
	SR_CNTRL_PORT |= (1<<SR_RESET);
     c10:	80 81       	ld	r24, Z
     c12:	80 62       	ori	r24, 0x20	; 32
     c14:	80 83       	st	Z, r24
	
	SRCS_PORT |= (1<<SRCS);
     c16:	2f 9a       	sbi	0x05, 7	; 5
     c18:	85 e3       	ldi	r24, 0x35	; 53
     c1a:	8a 95       	dec	r24
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <SwitchingCircuitryEnable+0x1c>
     c1e:	00 00       	nop
	_delay_us(20);
	SRCS_PORT &= ~(1<<SRCS);
     c20:	2f 98       	cbi	0x05, 7	; 5
	
	SR_CNTRL_PORT &= ~(1<<SROE);
     c22:	80 81       	ld	r24, Z
     c24:	87 7f       	andi	r24, 0xF7	; 247
     c26:	80 83       	st	Z, r24
     c28:	08 95       	ret

00000c2a <SetShiftRegData>:
	}
}


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
     c2a:	db 01       	movw	r26, r22
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
	{
		ShiftRegData[pinType][i] = *(data + i); 
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	fc 01       	movw	r30, r24
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	e8 0f       	add	r30, r24
     c3a:	f9 1f       	adc	r31, r25
     c3c:	eb 59       	subi	r30, 0x9B	; 155
     c3e:	fc 4f       	sbci	r31, 0xFC	; 252


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
	{
		ShiftRegData[pinType][i] = *(data + i); 
     c44:	2d 91       	ld	r18, X+
     c46:	21 93       	st	Z+, r18


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	85 30       	cpi	r24, 0x05	; 5
     c4c:	91 05       	cpc	r25, r1
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <SetShiftRegData+0x1a>
	{
		ShiftRegData[pinType][i] = *(data + i); 
	}
}
     c50:	08 95       	ret

00000c52 <WriteShiftRegData>:

void WriteShiftRegData()
{
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
	SwitchingCircuitryEnable(); 
     c66:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SwitchingCircuitryEnable>
	
	SR_CNTRL_PORT &= ~(1<<MAXCS);
     c6a:	e5 e0       	ldi	r30, 0x05	; 5
     c6c:	f1 e0       	ldi	r31, 0x01	; 1
     c6e:	80 81       	ld	r24, Z
     c70:	8f 7e       	andi	r24, 0xEF	; 239
     c72:	80 83       	st	Z, r24
     c74:	c5 e6       	ldi	r28, 0x65	; 101
     c76:	d3 e0       	ldi	r29, 0x03	; 3
     c78:	0a e6       	ldi	r16, 0x6A	; 106
     c7a:	13 e0       	ldi	r17, 0x03	; 3
	int i = 0; 
	for(int j=0; j<SOCKET_SIZE/8; j++)
	{
		SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
     c7c:	89 91       	ld	r24, Y+
     c7e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SPI_Switching_Circuitry_Write>
{
	SwitchingCircuitryEnable(); 
	
	SR_CNTRL_PORT &= ~(1<<MAXCS);
	int i = 0; 
	for(int j=0; j<SOCKET_SIZE/8; j++)
     c82:	c0 17       	cp	r28, r16
     c84:	d1 07       	cpc	r29, r17
     c86:	d1 f7       	brne	.-12     	; 0xc7c <WriteShiftRegData+0x2a>
	{
		SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
	}
	SR_CNTRL_PORT |= (1<<MAXCS);
     c88:	e5 e0       	ldi	r30, 0x05	; 5
     c8a:	f1 e0       	ldi	r31, 0x01	; 1
     c8c:	80 81       	ld	r24, Z
     c8e:	80 61       	ori	r24, 0x10	; 16
     c90:	80 83       	st	Z, r24
     c92:	0f 2e       	mov	r0, r31
     c94:	fa e6       	ldi	r31, 0x6A	; 106
     c96:	ef 2e       	mov	r14, r31
     c98:	f3 e0       	ldi	r31, 0x03	; 3
     c9a:	ff 2e       	mov	r15, r31
     c9c:	f0 2d       	mov	r31, r0
     c9e:	0f 2e       	mov	r0, r31
     ca0:	f3 e8       	ldi	r31, 0x83	; 131
     ca2:	cf 2e       	mov	r12, r31
     ca4:	f3 e0       	ldi	r31, 0x03	; 3
     ca6:	df 2e       	mov	r13, r31
     ca8:	f0 2d       	mov	r31, r0
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     caa:	a1 2c       	mov	r10, r1
     cac:	b1 2c       	mov	r11, r1
     cae:	0f c0       	rjmp	.+30     	; 0xcce <WriteShiftRegData+0x7c>
	
	for(i=1; i<PIN_TYPES; i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
     cb0:	f8 01       	movw	r30, r16
     cb2:	81 91       	ld	r24, Z+
     cb4:	8f 01       	movw	r16, r30
     cb6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SPI_Switching_Circuitry_Write>
	}
	SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(i=1; i<PIN_TYPES; i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
     cba:	21 96       	adiw	r28, 0x01	; 1
     cbc:	c5 30       	cpi	r28, 0x05	; 5
     cbe:	d1 05       	cpc	r29, r1
     cc0:	b9 f7       	brne	.-18     	; 0xcb0 <WriteShiftRegData+0x5e>
     cc2:	f5 e0       	ldi	r31, 0x05	; 5
     cc4:	ef 0e       	add	r14, r31
     cc6:	f1 1c       	adc	r15, r1
	{
		SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
	}
	SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(i=1; i<PIN_TYPES; i++)
     cc8:	ec 14       	cp	r14, r12
     cca:	fd 04       	cpc	r15, r13
     ccc:	21 f0       	breq	.+8      	; 0xcd6 <WriteShiftRegData+0x84>
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     cce:	87 01       	movw	r16, r14
     cd0:	ca 2d       	mov	r28, r10
     cd2:	db 2d       	mov	r29, r11
     cd4:	ed cf       	rjmp	.-38     	; 0xcb0 <WriteShiftRegData+0x5e>
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
		}
	}
	SRCS_PORT |= (1<<SRCS);
     cd6:	2f 9a       	sbi	0x05, 7	; 5
     cd8:	f5 e3       	ldi	r31, 0x35	; 53
     cda:	fa 95       	dec	r31
     cdc:	f1 f7       	brne	.-4      	; 0xcda <WriteShiftRegData+0x88>
     cde:	00 00       	nop
	_delay_us(20);
	SRCS_PORT &= ~(1<<SRCS);
     ce0:	2f 98       	cbi	0x05, 7	; 5
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	bf 90       	pop	r11
     cf4:	af 90       	pop	r10
     cf6:	08 95       	ret

00000cf8 <setAtTiny2313>:

void setAtTiny2313()
{
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <setAtTiny2313+0x6>
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <setAtTiny2313+0x8>
     d00:	1f 92       	push	r1
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	char shiftTempBuff[5] = {0x00, 0x1F, 0xF7, 0xD0, 0x00};
     d06:	85 e0       	ldi	r24, 0x05	; 5
     d08:	ea e4       	ldi	r30, 0x4A	; 74
     d0a:	f2 e0       	ldi	r31, 0x02	; 2
     d0c:	de 01       	movw	r26, r28
     d0e:	11 96       	adiw	r26, 0x01	; 1
     d10:	01 90       	ld	r0, Z+
     d12:	0d 92       	st	X+, r0
     d14:	8a 95       	dec	r24
     d16:	e1 f7       	brne	.-8      	; 0xd10 <setAtTiny2313+0x18>
	SetShiftRegData(LOGIC, shiftTempBuff);
     d18:	be 01       	movw	r22, r28
     d1a:	6f 5f       	subi	r22, 0xFF	; 255
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0e 94 15 06 	call	0xc2a	; 0xc2a <SetShiftRegData>
	//Modify Values and shift again 
	shiftTempBuff[0] = 0x00;
     d24:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     d26:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00; //setting GND to ZIF19
     d28:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     d2a:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     d2c:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     d2e:	be 01       	movw	r22, r28
     d30:	6f 5f       	subi	r22, 0xFF	; 255
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	0e 94 15 06 	call	0xc2a	; 0xc2a <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     d3a:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     d3c:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	8b 83       	std	Y+3, r24	; 0x03
	shiftTempBuff[3] = 0x00;
     d42:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     d44:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
     d46:	be 01       	movw	r22, r28
     d48:	6f 5f       	subi	r22, 0xFF	; 255
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	0e 94 15 06 	call	0xc2a	; 0xc2a <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     d52:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     d54:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     d56:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     d58:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     d5a:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
     d5c:	be 01       	movw	r22, r28
     d5e:	6f 5f       	subi	r22, 0xFF	; 255
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	0e 94 15 06 	call	0xc2a	; 0xc2a <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     d68:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
     d6a:	80 e2       	ldi	r24, 0x20	; 32
     d6c:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
     d6e:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     d70:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     d72:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
     d74:	be 01       	movw	r22, r28
     d76:	6f 5f       	subi	r22, 0xFF	; 255
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	0e 94 15 06 	call	0xc2a	; 0xc2a <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     d80:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     d82:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     d84:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     d8a:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
     d8c:	be 01       	movw	r22, r28
     d8e:	6f 5f       	subi	r22, 0xFF	; 255
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	85 e0       	ldi	r24, 0x05	; 5
     d94:	0e 94 15 06 	call	0xc2a	; 0xc2a <SetShiftRegData>
	
	WriteShiftRegData();
     d98:	0e 94 29 06 	call	0xc52	; 0xc52 <WriteShiftRegData>
}
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <voltageControlInit>:
	VCNTRL_PORT &= ~((1<<VPP_9V) | (1<<VPP_12V) | (1<VPP_13V));
}

void voltageControlInit()
{
	VCNTRL_DDR = 0xFF;
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	80 bb       	out	0x10, r24	; 16
	VCNTRL_PORT = 0x00;
     db0:	11 ba       	out	0x11, r1	; 17
	
	VEN_DDR |= ((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
     db2:	84 b1       	in	r24, 0x04	; 4
     db4:	80 67       	ori	r24, 0x70	; 112
     db6:	84 b9       	out	0x04, r24	; 4
	VEN_PORT &= ~((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
     db8:	85 b1       	in	r24, 0x05	; 5
     dba:	8f 78       	andi	r24, 0x8F	; 143
     dbc:	85 b9       	out	0x05, r24	; 5
     dbe:	08 95       	ret

00000dc0 <enableVppRegulator>:
}

void enableVppRegulator()
{
	VEN_PORT |= (1<<VPPENABLE); 
     dc0:	2c 9a       	sbi	0x05, 4	; 5
     dc2:	08 95       	ret

00000dc4 <disableVppRegulator>:
}

void disableVppRegulator()
{
	VEN_PORT &= ~((1<<VPPENABLE));
     dc4:	2c 98       	cbi	0x05, 4	; 5
     dc6:	08 95       	ret

00000dc8 <enableVccRegulator>:
	VCNTRL_PORT &= ~((1<<VCC_3_3V) | (1<<VCC_5V) | (1<<VCC_6_5V));
}

void enableVccRegulator() 
{
	VEN_PORT |= (1<<VCCENABLE);
     dc8:	2d 9a       	sbi	0x05, 5	; 5
     dca:	08 95       	ret

00000dcc <disableVccRegulator>:
}

void disableVccRegulator()
{
	VEN_PORT &= ~(1<<VCCENABLE);
     dcc:	2d 98       	cbi	0x05, 5	; 5
     dce:	08 95       	ret

00000dd0 <setVcc>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VCC_3_3V || VCC_5V || VCC_6_5V))
	//	return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     dd0:	41 b3       	in	r20, 0x11	; 17
     dd2:	21 e0       	ldi	r18, 0x01	; 1
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	b9 01       	movw	r22, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <setVcc+0xe>
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	8a 95       	dec	r24
     de0:	e2 f7       	brpl	.-8      	; 0xdda <setVcc+0xa>
     de2:	cb 01       	movw	r24, r22
     de4:	84 2b       	or	r24, r20
     de6:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	08 95       	ret

00000dec <setVpp>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VPP_9V || VPP_12V || VPP_13V))
		//return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     dec:	41 b3       	in	r20, 0x11	; 17
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	b9 01       	movw	r22, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <setVpp+0xe>
     df6:	66 0f       	add	r22, r22
     df8:	77 1f       	adc	r23, r23
     dfa:	8a 95       	dec	r24
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <setVpp+0xa>
     dfe:	cb 01       	movw	r24, r22
     e00:	84 2b       	or	r24, r20
     e02:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	08 95       	ret

00000e08 <enableVLogic>:
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
}

void enableVLogic()
{
	VEN_PORT |= (1<<VLENABLE);
     e08:	2e 9a       	sbi	0x05, 6	; 5
     e0a:	08 95       	ret

00000e0c <disableVLogic>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
     e0c:	2e 98       	cbi	0x05, 6	; 5
     e0e:	08 95       	ret

00000e10 <setVLogic>:
	//prevents accidental triggering of the wrong regulator
	//if(voltageLevel != (VL_3_3V || VL_5V))
	//	return 0;
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     e10:	41 b3       	in	r20, 0x11	; 17
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	b9 01       	movw	r22, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <setVLogic+0xe>
     e1a:	66 0f       	add	r22, r22
     e1c:	77 1f       	adc	r23, r23
     e1e:	8a 95       	dec	r24
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <setVLogic+0xa>
     e22:	cb 01       	movw	r24, r22
     e24:	84 2b       	or	r24, r20
     e26:	81 bb       	out	0x11, r24	; 17
		return 1;
	//}
}
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	08 95       	ret

00000e2c <fputc>:
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	18 2f       	mov	r17, r24
     e36:	09 2f       	mov	r16, r25
     e38:	eb 01       	movw	r28, r22
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	81 fd       	sbrc	r24, 1
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <fputc+0x1a>
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	20 c0       	rjmp	.+64     	; 0xe86 <fputc+0x5a>
     e46:	82 ff       	sbrs	r24, 2
     e48:	10 c0       	rjmp	.+32     	; 0xe6a <fputc+0x3e>
     e4a:	4e 81       	ldd	r20, Y+6	; 0x06
     e4c:	5f 81       	ldd	r21, Y+7	; 0x07
     e4e:	2c 81       	ldd	r18, Y+4	; 0x04
     e50:	3d 81       	ldd	r19, Y+5	; 0x05
     e52:	42 17       	cp	r20, r18
     e54:	53 07       	cpc	r21, r19
     e56:	7c f4       	brge	.+30     	; 0xe76 <fputc+0x4a>
     e58:	e8 81       	ld	r30, Y
     e5a:	f9 81       	ldd	r31, Y+1	; 0x01
     e5c:	9f 01       	movw	r18, r30
     e5e:	2f 5f       	subi	r18, 0xFF	; 255
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
     e62:	39 83       	std	Y+1, r19	; 0x01
     e64:	28 83       	st	Y, r18
     e66:	10 83       	st	Z, r17
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <fputc+0x4a>
     e6a:	e8 85       	ldd	r30, Y+8	; 0x08
     e6c:	f9 85       	ldd	r31, Y+9	; 0x09
     e6e:	81 2f       	mov	r24, r17
     e70:	09 95       	icall
     e72:	89 2b       	or	r24, r25
     e74:	29 f7       	brne	.-54     	; 0xe40 <fputc+0x14>
     e76:	2e 81       	ldd	r18, Y+6	; 0x06
     e78:	3f 81       	ldd	r19, Y+7	; 0x07
     e7a:	2f 5f       	subi	r18, 0xFF	; 255
     e7c:	3f 4f       	sbci	r19, 0xFF	; 255
     e7e:	3f 83       	std	Y+7, r19	; 0x07
     e80:	2e 83       	std	Y+6, r18	; 0x06
     e82:	81 2f       	mov	r24, r17
     e84:	90 2f       	mov	r25, r16
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret

00000e90 <printf>:
     e90:	a0 e0       	ldi	r26, 0x00	; 0
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ee e4       	ldi	r30, 0x4E	; 78
     e96:	f7 e0       	ldi	r31, 0x07	; 7
     e98:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__prologue_saves__+0x20>
     e9c:	fe 01       	movw	r30, r28
     e9e:	35 96       	adiw	r30, 0x05	; 5
     ea0:	61 91       	ld	r22, Z+
     ea2:	71 91       	ld	r23, Z+
     ea4:	af 01       	movw	r20, r30
     ea6:	80 91 85 03 	lds	r24, 0x0385
     eaa:	90 91 86 03 	lds	r25, 0x0386
     eae:	0e 94 90 07 	call	0xf20	; 0xf20 <vfprintf>
     eb2:	e2 e0       	ldi	r30, 0x02	; 2
     eb4:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__epilogue_restores__+0x20>

00000eb8 <putchar>:
     eb8:	60 91 85 03 	lds	r22, 0x0385
     ebc:	70 91 86 03 	lds	r23, 0x0386
     ec0:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
     ec4:	08 95       	ret

00000ec6 <puts>:
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	e0 91 85 03 	lds	r30, 0x0385
     ed2:	f0 91 86 03 	lds	r31, 0x0386
     ed6:	23 81       	ldd	r18, Z+3	; 0x03
     ed8:	21 ff       	sbrs	r18, 1
     eda:	1b c0       	rjmp	.+54     	; 0xf12 <puts+0x4c>
     edc:	ec 01       	movw	r28, r24
     ede:	00 e0       	ldi	r16, 0x00	; 0
     ee0:	10 e0       	ldi	r17, 0x00	; 0
     ee2:	89 91       	ld	r24, Y+
     ee4:	60 91 85 03 	lds	r22, 0x0385
     ee8:	70 91 86 03 	lds	r23, 0x0386
     eec:	db 01       	movw	r26, r22
     eee:	18 96       	adiw	r26, 0x08	; 8
     ef0:	ed 91       	ld	r30, X+
     ef2:	fc 91       	ld	r31, X
     ef4:	19 97       	sbiw	r26, 0x09	; 9
     ef6:	88 23       	and	r24, r24
     ef8:	31 f0       	breq	.+12     	; 0xf06 <puts+0x40>
     efa:	09 95       	icall
     efc:	89 2b       	or	r24, r25
     efe:	89 f3       	breq	.-30     	; 0xee2 <puts+0x1c>
     f00:	0f ef       	ldi	r16, 0xFF	; 255
     f02:	1f ef       	ldi	r17, 0xFF	; 255
     f04:	ee cf       	rjmp	.-36     	; 0xee2 <puts+0x1c>
     f06:	8a e0       	ldi	r24, 0x0A	; 10
     f08:	09 95       	icall
     f0a:	89 2b       	or	r24, r25
     f0c:	11 f4       	brne	.+4      	; 0xf12 <puts+0x4c>
     f0e:	c8 01       	movw	r24, r16
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <puts+0x50>
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	9f ef       	ldi	r25, 0xFF	; 255
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret

00000f20 <vfprintf>:
     f20:	ac e0       	ldi	r26, 0x0C	; 12
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e6 e9       	ldi	r30, 0x96	; 150
     f26:	f7 e0       	ldi	r31, 0x07	; 7
     f28:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__prologue_saves__>
     f2c:	7c 01       	movw	r14, r24
     f2e:	6b 01       	movw	r12, r22
     f30:	8a 01       	movw	r16, r20
     f32:	fc 01       	movw	r30, r24
     f34:	17 82       	std	Z+7, r1	; 0x07
     f36:	16 82       	std	Z+6, r1	; 0x06
     f38:	83 81       	ldd	r24, Z+3	; 0x03
     f3a:	81 ff       	sbrs	r24, 1
     f3c:	bd c1       	rjmp	.+890    	; 0x12b8 <vfprintf+0x398>
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	4c 01       	movw	r8, r24
     f44:	f7 01       	movw	r30, r14
     f46:	93 81       	ldd	r25, Z+3	; 0x03
     f48:	f6 01       	movw	r30, r12
     f4a:	93 fd       	sbrc	r25, 3
     f4c:	85 91       	lpm	r24, Z+
     f4e:	93 ff       	sbrs	r25, 3
     f50:	81 91       	ld	r24, Z+
     f52:	6f 01       	movw	r12, r30
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <vfprintf+0x3a>
     f58:	ab c1       	rjmp	.+854    	; 0x12b0 <vfprintf+0x390>
     f5a:	85 32       	cpi	r24, 0x25	; 37
     f5c:	39 f4       	brne	.+14     	; 0xf6c <vfprintf+0x4c>
     f5e:	93 fd       	sbrc	r25, 3
     f60:	85 91       	lpm	r24, Z+
     f62:	93 ff       	sbrs	r25, 3
     f64:	81 91       	ld	r24, Z+
     f66:	6f 01       	movw	r12, r30
     f68:	85 32       	cpi	r24, 0x25	; 37
     f6a:	29 f4       	brne	.+10     	; 0xf76 <vfprintf+0x56>
     f6c:	b7 01       	movw	r22, r14
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
     f74:	e7 cf       	rjmp	.-50     	; 0xf44 <vfprintf+0x24>
     f76:	51 2c       	mov	r5, r1
     f78:	31 2c       	mov	r3, r1
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	20 32       	cpi	r18, 0x20	; 32
     f7e:	a0 f4       	brcc	.+40     	; 0xfa8 <vfprintf+0x88>
     f80:	8b 32       	cpi	r24, 0x2B	; 43
     f82:	69 f0       	breq	.+26     	; 0xf9e <vfprintf+0x7e>
     f84:	30 f4       	brcc	.+12     	; 0xf92 <vfprintf+0x72>
     f86:	80 32       	cpi	r24, 0x20	; 32
     f88:	59 f0       	breq	.+22     	; 0xfa0 <vfprintf+0x80>
     f8a:	83 32       	cpi	r24, 0x23	; 35
     f8c:	69 f4       	brne	.+26     	; 0xfa8 <vfprintf+0x88>
     f8e:	20 61       	ori	r18, 0x10	; 16
     f90:	2c c0       	rjmp	.+88     	; 0xfea <vfprintf+0xca>
     f92:	8d 32       	cpi	r24, 0x2D	; 45
     f94:	39 f0       	breq	.+14     	; 0xfa4 <vfprintf+0x84>
     f96:	80 33       	cpi	r24, 0x30	; 48
     f98:	39 f4       	brne	.+14     	; 0xfa8 <vfprintf+0x88>
     f9a:	21 60       	ori	r18, 0x01	; 1
     f9c:	26 c0       	rjmp	.+76     	; 0xfea <vfprintf+0xca>
     f9e:	22 60       	ori	r18, 0x02	; 2
     fa0:	24 60       	ori	r18, 0x04	; 4
     fa2:	23 c0       	rjmp	.+70     	; 0xfea <vfprintf+0xca>
     fa4:	28 60       	ori	r18, 0x08	; 8
     fa6:	21 c0       	rjmp	.+66     	; 0xfea <vfprintf+0xca>
     fa8:	27 fd       	sbrc	r18, 7
     faa:	27 c0       	rjmp	.+78     	; 0xffa <vfprintf+0xda>
     fac:	30 ed       	ldi	r19, 0xD0	; 208
     fae:	38 0f       	add	r19, r24
     fb0:	3a 30       	cpi	r19, 0x0A	; 10
     fb2:	78 f4       	brcc	.+30     	; 0xfd2 <vfprintf+0xb2>
     fb4:	26 ff       	sbrs	r18, 6
     fb6:	06 c0       	rjmp	.+12     	; 0xfc4 <vfprintf+0xa4>
     fb8:	fa e0       	ldi	r31, 0x0A	; 10
     fba:	5f 9e       	mul	r5, r31
     fbc:	30 0d       	add	r19, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	53 2e       	mov	r5, r19
     fc2:	13 c0       	rjmp	.+38     	; 0xfea <vfprintf+0xca>
     fc4:	8a e0       	ldi	r24, 0x0A	; 10
     fc6:	38 9e       	mul	r3, r24
     fc8:	30 0d       	add	r19, r0
     fca:	11 24       	eor	r1, r1
     fcc:	33 2e       	mov	r3, r19
     fce:	20 62       	ori	r18, 0x20	; 32
     fd0:	0c c0       	rjmp	.+24     	; 0xfea <vfprintf+0xca>
     fd2:	8e 32       	cpi	r24, 0x2E	; 46
     fd4:	21 f4       	brne	.+8      	; 0xfde <vfprintf+0xbe>
     fd6:	26 fd       	sbrc	r18, 6
     fd8:	6b c1       	rjmp	.+726    	; 0x12b0 <vfprintf+0x390>
     fda:	20 64       	ori	r18, 0x40	; 64
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <vfprintf+0xca>
     fde:	8c 36       	cpi	r24, 0x6C	; 108
     fe0:	11 f4       	brne	.+4      	; 0xfe6 <vfprintf+0xc6>
     fe2:	20 68       	ori	r18, 0x80	; 128
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0xca>
     fe6:	88 36       	cpi	r24, 0x68	; 104
     fe8:	41 f4       	brne	.+16     	; 0xffa <vfprintf+0xda>
     fea:	f6 01       	movw	r30, r12
     fec:	93 fd       	sbrc	r25, 3
     fee:	85 91       	lpm	r24, Z+
     ff0:	93 ff       	sbrs	r25, 3
     ff2:	81 91       	ld	r24, Z+
     ff4:	6f 01       	movw	r12, r30
     ff6:	81 11       	cpse	r24, r1
     ff8:	c1 cf       	rjmp	.-126    	; 0xf7c <vfprintf+0x5c>
     ffa:	98 2f       	mov	r25, r24
     ffc:	9f 7d       	andi	r25, 0xDF	; 223
     ffe:	95 54       	subi	r25, 0x45	; 69
    1000:	93 30       	cpi	r25, 0x03	; 3
    1002:	28 f4       	brcc	.+10     	; 0x100e <vfprintf+0xee>
    1004:	0c 5f       	subi	r16, 0xFC	; 252
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	ff e3       	ldi	r31, 0x3F	; 63
    100a:	f9 83       	std	Y+1, r31	; 0x01
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <vfprintf+0x108>
    100e:	83 36       	cpi	r24, 0x63	; 99
    1010:	31 f0       	breq	.+12     	; 0x101e <vfprintf+0xfe>
    1012:	83 37       	cpi	r24, 0x73	; 115
    1014:	71 f0       	breq	.+28     	; 0x1032 <vfprintf+0x112>
    1016:	83 35       	cpi	r24, 0x53	; 83
    1018:	09 f0       	breq	.+2      	; 0x101c <vfprintf+0xfc>
    101a:	5b c0       	rjmp	.+182    	; 0x10d2 <vfprintf+0x1b2>
    101c:	22 c0       	rjmp	.+68     	; 0x1062 <vfprintf+0x142>
    101e:	f8 01       	movw	r30, r16
    1020:	80 81       	ld	r24, Z
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	0e 5f       	subi	r16, 0xFE	; 254
    1026:	1f 4f       	sbci	r17, 0xFF	; 255
    1028:	44 24       	eor	r4, r4
    102a:	43 94       	inc	r4
    102c:	51 2c       	mov	r5, r1
    102e:	54 01       	movw	r10, r8
    1030:	15 c0       	rjmp	.+42     	; 0x105c <vfprintf+0x13c>
    1032:	38 01       	movw	r6, r16
    1034:	f2 e0       	ldi	r31, 0x02	; 2
    1036:	6f 0e       	add	r6, r31
    1038:	71 1c       	adc	r7, r1
    103a:	f8 01       	movw	r30, r16
    103c:	a0 80       	ld	r10, Z
    103e:	b1 80       	ldd	r11, Z+1	; 0x01
    1040:	26 ff       	sbrs	r18, 6
    1042:	03 c0       	rjmp	.+6      	; 0x104a <vfprintf+0x12a>
    1044:	65 2d       	mov	r22, r5
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <vfprintf+0x12e>
    104a:	6f ef       	ldi	r22, 0xFF	; 255
    104c:	7f ef       	ldi	r23, 0xFF	; 255
    104e:	c5 01       	movw	r24, r10
    1050:	2c 87       	std	Y+12, r18	; 0x0c
    1052:	0e 94 6d 09 	call	0x12da	; 0x12da <strnlen>
    1056:	2c 01       	movw	r4, r24
    1058:	83 01       	movw	r16, r6
    105a:	2c 85       	ldd	r18, Y+12	; 0x0c
    105c:	2f 77       	andi	r18, 0x7F	; 127
    105e:	22 2e       	mov	r2, r18
    1060:	17 c0       	rjmp	.+46     	; 0x1090 <vfprintf+0x170>
    1062:	38 01       	movw	r6, r16
    1064:	f2 e0       	ldi	r31, 0x02	; 2
    1066:	6f 0e       	add	r6, r31
    1068:	71 1c       	adc	r7, r1
    106a:	f8 01       	movw	r30, r16
    106c:	a0 80       	ld	r10, Z
    106e:	b1 80       	ldd	r11, Z+1	; 0x01
    1070:	26 ff       	sbrs	r18, 6
    1072:	03 c0       	rjmp	.+6      	; 0x107a <vfprintf+0x15a>
    1074:	65 2d       	mov	r22, r5
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	02 c0       	rjmp	.+4      	; 0x107e <vfprintf+0x15e>
    107a:	6f ef       	ldi	r22, 0xFF	; 255
    107c:	7f ef       	ldi	r23, 0xFF	; 255
    107e:	c5 01       	movw	r24, r10
    1080:	2c 87       	std	Y+12, r18	; 0x0c
    1082:	0e 94 62 09 	call	0x12c4	; 0x12c4 <strnlen_P>
    1086:	2c 01       	movw	r4, r24
    1088:	2c 85       	ldd	r18, Y+12	; 0x0c
    108a:	20 68       	ori	r18, 0x80	; 128
    108c:	22 2e       	mov	r2, r18
    108e:	83 01       	movw	r16, r6
    1090:	23 fc       	sbrc	r2, 3
    1092:	1b c0       	rjmp	.+54     	; 0x10ca <vfprintf+0x1aa>
    1094:	83 2d       	mov	r24, r3
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	48 16       	cp	r4, r24
    109a:	59 06       	cpc	r5, r25
    109c:	b0 f4       	brcc	.+44     	; 0x10ca <vfprintf+0x1aa>
    109e:	b7 01       	movw	r22, r14
    10a0:	80 e2       	ldi	r24, 0x20	; 32
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
    10a8:	3a 94       	dec	r3
    10aa:	f4 cf       	rjmp	.-24     	; 0x1094 <vfprintf+0x174>
    10ac:	f5 01       	movw	r30, r10
    10ae:	27 fc       	sbrc	r2, 7
    10b0:	85 91       	lpm	r24, Z+
    10b2:	27 fe       	sbrs	r2, 7
    10b4:	81 91       	ld	r24, Z+
    10b6:	5f 01       	movw	r10, r30
    10b8:	b7 01       	movw	r22, r14
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
    10c0:	31 10       	cpse	r3, r1
    10c2:	3a 94       	dec	r3
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	4f 1a       	sub	r4, r31
    10c8:	51 08       	sbc	r5, r1
    10ca:	41 14       	cp	r4, r1
    10cc:	51 04       	cpc	r5, r1
    10ce:	71 f7       	brne	.-36     	; 0x10ac <vfprintf+0x18c>
    10d0:	e5 c0       	rjmp	.+458    	; 0x129c <vfprintf+0x37c>
    10d2:	84 36       	cpi	r24, 0x64	; 100
    10d4:	11 f0       	breq	.+4      	; 0x10da <vfprintf+0x1ba>
    10d6:	89 36       	cpi	r24, 0x69	; 105
    10d8:	39 f5       	brne	.+78     	; 0x1128 <vfprintf+0x208>
    10da:	f8 01       	movw	r30, r16
    10dc:	27 ff       	sbrs	r18, 7
    10de:	07 c0       	rjmp	.+14     	; 0x10ee <vfprintf+0x1ce>
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	82 81       	ldd	r24, Z+2	; 0x02
    10e6:	93 81       	ldd	r25, Z+3	; 0x03
    10e8:	0c 5f       	subi	r16, 0xFC	; 252
    10ea:	1f 4f       	sbci	r17, 0xFF	; 255
    10ec:	08 c0       	rjmp	.+16     	; 0x10fe <vfprintf+0x1de>
    10ee:	60 81       	ld	r22, Z
    10f0:	71 81       	ldd	r23, Z+1	; 0x01
    10f2:	88 27       	eor	r24, r24
    10f4:	77 fd       	sbrc	r23, 7
    10f6:	80 95       	com	r24
    10f8:	98 2f       	mov	r25, r24
    10fa:	0e 5f       	subi	r16, 0xFE	; 254
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	2f 76       	andi	r18, 0x6F	; 111
    1100:	b2 2e       	mov	r11, r18
    1102:	97 ff       	sbrs	r25, 7
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <vfprintf+0x1f8>
    1106:	90 95       	com	r25
    1108:	80 95       	com	r24
    110a:	70 95       	com	r23
    110c:	61 95       	neg	r22
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	8f 4f       	sbci	r24, 0xFF	; 255
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	20 68       	ori	r18, 0x80	; 128
    1116:	b2 2e       	mov	r11, r18
    1118:	2a e0       	ldi	r18, 0x0A	; 10
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	a4 01       	movw	r20, r8
    111e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__ultoa_invert>
    1122:	a8 2e       	mov	r10, r24
    1124:	a8 18       	sub	r10, r8
    1126:	44 c0       	rjmp	.+136    	; 0x11b0 <vfprintf+0x290>
    1128:	85 37       	cpi	r24, 0x75	; 117
    112a:	29 f4       	brne	.+10     	; 0x1136 <vfprintf+0x216>
    112c:	2f 7e       	andi	r18, 0xEF	; 239
    112e:	b2 2e       	mov	r11, r18
    1130:	2a e0       	ldi	r18, 0x0A	; 10
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	25 c0       	rjmp	.+74     	; 0x1180 <vfprintf+0x260>
    1136:	f2 2f       	mov	r31, r18
    1138:	f9 7f       	andi	r31, 0xF9	; 249
    113a:	bf 2e       	mov	r11, r31
    113c:	8f 36       	cpi	r24, 0x6F	; 111
    113e:	c1 f0       	breq	.+48     	; 0x1170 <vfprintf+0x250>
    1140:	18 f4       	brcc	.+6      	; 0x1148 <vfprintf+0x228>
    1142:	88 35       	cpi	r24, 0x58	; 88
    1144:	79 f0       	breq	.+30     	; 0x1164 <vfprintf+0x244>
    1146:	b4 c0       	rjmp	.+360    	; 0x12b0 <vfprintf+0x390>
    1148:	80 37       	cpi	r24, 0x70	; 112
    114a:	19 f0       	breq	.+6      	; 0x1152 <vfprintf+0x232>
    114c:	88 37       	cpi	r24, 0x78	; 120
    114e:	21 f0       	breq	.+8      	; 0x1158 <vfprintf+0x238>
    1150:	af c0       	rjmp	.+350    	; 0x12b0 <vfprintf+0x390>
    1152:	2f 2f       	mov	r18, r31
    1154:	20 61       	ori	r18, 0x10	; 16
    1156:	b2 2e       	mov	r11, r18
    1158:	b4 fe       	sbrs	r11, 4
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <vfprintf+0x256>
    115c:	8b 2d       	mov	r24, r11
    115e:	84 60       	ori	r24, 0x04	; 4
    1160:	b8 2e       	mov	r11, r24
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <vfprintf+0x256>
    1164:	24 ff       	sbrs	r18, 4
    1166:	0a c0       	rjmp	.+20     	; 0x117c <vfprintf+0x25c>
    1168:	9f 2f       	mov	r25, r31
    116a:	96 60       	ori	r25, 0x06	; 6
    116c:	b9 2e       	mov	r11, r25
    116e:	06 c0       	rjmp	.+12     	; 0x117c <vfprintf+0x25c>
    1170:	28 e0       	ldi	r18, 0x08	; 8
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <vfprintf+0x260>
    1176:	20 e1       	ldi	r18, 0x10	; 16
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <vfprintf+0x260>
    117c:	20 e1       	ldi	r18, 0x10	; 16
    117e:	32 e0       	ldi	r19, 0x02	; 2
    1180:	f8 01       	movw	r30, r16
    1182:	b7 fe       	sbrs	r11, 7
    1184:	07 c0       	rjmp	.+14     	; 0x1194 <vfprintf+0x274>
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	0c 5f       	subi	r16, 0xFC	; 252
    1190:	1f 4f       	sbci	r17, 0xFF	; 255
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <vfprintf+0x280>
    1194:	60 81       	ld	r22, Z
    1196:	71 81       	ldd	r23, Z+1	; 0x01
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 5f       	subi	r16, 0xFE	; 254
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	a4 01       	movw	r20, r8
    11a2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__ultoa_invert>
    11a6:	a8 2e       	mov	r10, r24
    11a8:	a8 18       	sub	r10, r8
    11aa:	fb 2d       	mov	r31, r11
    11ac:	ff 77       	andi	r31, 0x7F	; 127
    11ae:	bf 2e       	mov	r11, r31
    11b0:	b6 fe       	sbrs	r11, 6
    11b2:	0b c0       	rjmp	.+22     	; 0x11ca <vfprintf+0x2aa>
    11b4:	2b 2d       	mov	r18, r11
    11b6:	2e 7f       	andi	r18, 0xFE	; 254
    11b8:	a5 14       	cp	r10, r5
    11ba:	50 f4       	brcc	.+20     	; 0x11d0 <vfprintf+0x2b0>
    11bc:	b4 fe       	sbrs	r11, 4
    11be:	0a c0       	rjmp	.+20     	; 0x11d4 <vfprintf+0x2b4>
    11c0:	b2 fc       	sbrc	r11, 2
    11c2:	08 c0       	rjmp	.+16     	; 0x11d4 <vfprintf+0x2b4>
    11c4:	2b 2d       	mov	r18, r11
    11c6:	2e 7e       	andi	r18, 0xEE	; 238
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <vfprintf+0x2b4>
    11ca:	7a 2c       	mov	r7, r10
    11cc:	2b 2d       	mov	r18, r11
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <vfprintf+0x2b6>
    11d0:	7a 2c       	mov	r7, r10
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <vfprintf+0x2b6>
    11d4:	75 2c       	mov	r7, r5
    11d6:	24 ff       	sbrs	r18, 4
    11d8:	0d c0       	rjmp	.+26     	; 0x11f4 <vfprintf+0x2d4>
    11da:	fe 01       	movw	r30, r28
    11dc:	ea 0d       	add	r30, r10
    11de:	f1 1d       	adc	r31, r1
    11e0:	80 81       	ld	r24, Z
    11e2:	80 33       	cpi	r24, 0x30	; 48
    11e4:	11 f4       	brne	.+4      	; 0x11ea <vfprintf+0x2ca>
    11e6:	29 7e       	andi	r18, 0xE9	; 233
    11e8:	09 c0       	rjmp	.+18     	; 0x11fc <vfprintf+0x2dc>
    11ea:	22 ff       	sbrs	r18, 2
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <vfprintf+0x2da>
    11ee:	73 94       	inc	r7
    11f0:	73 94       	inc	r7
    11f2:	04 c0       	rjmp	.+8      	; 0x11fc <vfprintf+0x2dc>
    11f4:	82 2f       	mov	r24, r18
    11f6:	86 78       	andi	r24, 0x86	; 134
    11f8:	09 f0       	breq	.+2      	; 0x11fc <vfprintf+0x2dc>
    11fa:	73 94       	inc	r7
    11fc:	23 fd       	sbrc	r18, 3
    11fe:	13 c0       	rjmp	.+38     	; 0x1226 <vfprintf+0x306>
    1200:	20 ff       	sbrs	r18, 0
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <vfprintf+0x2f0>
    1204:	5a 2c       	mov	r5, r10
    1206:	73 14       	cp	r7, r3
    1208:	18 f4       	brcc	.+6      	; 0x1210 <vfprintf+0x2f0>
    120a:	53 0c       	add	r5, r3
    120c:	57 18       	sub	r5, r7
    120e:	73 2c       	mov	r7, r3
    1210:	73 14       	cp	r7, r3
    1212:	68 f4       	brcc	.+26     	; 0x122e <vfprintf+0x30e>
    1214:	b7 01       	movw	r22, r14
    1216:	80 e2       	ldi	r24, 0x20	; 32
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	2c 87       	std	Y+12, r18	; 0x0c
    121c:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
    1220:	73 94       	inc	r7
    1222:	2c 85       	ldd	r18, Y+12	; 0x0c
    1224:	f5 cf       	rjmp	.-22     	; 0x1210 <vfprintf+0x2f0>
    1226:	73 14       	cp	r7, r3
    1228:	10 f4       	brcc	.+4      	; 0x122e <vfprintf+0x30e>
    122a:	37 18       	sub	r3, r7
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <vfprintf+0x310>
    122e:	31 2c       	mov	r3, r1
    1230:	24 ff       	sbrs	r18, 4
    1232:	12 c0       	rjmp	.+36     	; 0x1258 <vfprintf+0x338>
    1234:	b7 01       	movw	r22, r14
    1236:	80 e3       	ldi	r24, 0x30	; 48
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	2c 87       	std	Y+12, r18	; 0x0c
    123c:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
    1240:	2c 85       	ldd	r18, Y+12	; 0x0c
    1242:	22 ff       	sbrs	r18, 2
    1244:	17 c0       	rjmp	.+46     	; 0x1274 <vfprintf+0x354>
    1246:	21 ff       	sbrs	r18, 1
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <vfprintf+0x330>
    124a:	88 e5       	ldi	r24, 0x58	; 88
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <vfprintf+0x334>
    1250:	88 e7       	ldi	r24, 0x78	; 120
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	b7 01       	movw	r22, r14
    1256:	0c c0       	rjmp	.+24     	; 0x1270 <vfprintf+0x350>
    1258:	82 2f       	mov	r24, r18
    125a:	86 78       	andi	r24, 0x86	; 134
    125c:	59 f0       	breq	.+22     	; 0x1274 <vfprintf+0x354>
    125e:	21 fd       	sbrc	r18, 1
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <vfprintf+0x346>
    1262:	80 e2       	ldi	r24, 0x20	; 32
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <vfprintf+0x348>
    1266:	8b e2       	ldi	r24, 0x2B	; 43
    1268:	27 fd       	sbrc	r18, 7
    126a:	8d e2       	ldi	r24, 0x2D	; 45
    126c:	b7 01       	movw	r22, r14
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
    1274:	a5 14       	cp	r10, r5
    1276:	38 f4       	brcc	.+14     	; 0x1286 <vfprintf+0x366>
    1278:	b7 01       	movw	r22, r14
    127a:	80 e3       	ldi	r24, 0x30	; 48
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
    1282:	5a 94       	dec	r5
    1284:	f7 cf       	rjmp	.-18     	; 0x1274 <vfprintf+0x354>
    1286:	aa 94       	dec	r10
    1288:	f4 01       	movw	r30, r8
    128a:	ea 0d       	add	r30, r10
    128c:	f1 1d       	adc	r31, r1
    128e:	80 81       	ld	r24, Z
    1290:	b7 01       	movw	r22, r14
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
    1298:	a1 10       	cpse	r10, r1
    129a:	f5 cf       	rjmp	.-22     	; 0x1286 <vfprintf+0x366>
    129c:	33 20       	and	r3, r3
    129e:	09 f4       	brne	.+2      	; 0x12a2 <vfprintf+0x382>
    12a0:	51 ce       	rjmp	.-862    	; 0xf44 <vfprintf+0x24>
    12a2:	b7 01       	movw	r22, r14
    12a4:	80 e2       	ldi	r24, 0x20	; 32
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
    12ac:	3a 94       	dec	r3
    12ae:	f6 cf       	rjmp	.-20     	; 0x129c <vfprintf+0x37c>
    12b0:	f7 01       	movw	r30, r14
    12b2:	86 81       	ldd	r24, Z+6	; 0x06
    12b4:	97 81       	ldd	r25, Z+7	; 0x07
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <vfprintf+0x39c>
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	9f ef       	ldi	r25, 0xFF	; 255
    12bc:	2c 96       	adiw	r28, 0x0c	; 12
    12be:	e2 e1       	ldi	r30, 0x12	; 18
    12c0:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__epilogue_restores__>

000012c4 <strnlen_P>:
    12c4:	fc 01       	movw	r30, r24
    12c6:	05 90       	lpm	r0, Z+
    12c8:	61 50       	subi	r22, 0x01	; 1
    12ca:	70 40       	sbci	r23, 0x00	; 0
    12cc:	01 10       	cpse	r0, r1
    12ce:	d8 f7       	brcc	.-10     	; 0x12c6 <strnlen_P+0x2>
    12d0:	80 95       	com	r24
    12d2:	90 95       	com	r25
    12d4:	8e 0f       	add	r24, r30
    12d6:	9f 1f       	adc	r25, r31
    12d8:	08 95       	ret

000012da <strnlen>:
    12da:	fc 01       	movw	r30, r24
    12dc:	61 50       	subi	r22, 0x01	; 1
    12de:	70 40       	sbci	r23, 0x00	; 0
    12e0:	01 90       	ld	r0, Z+
    12e2:	01 10       	cpse	r0, r1
    12e4:	d8 f7       	brcc	.-10     	; 0x12dc <strnlen+0x2>
    12e6:	80 95       	com	r24
    12e8:	90 95       	com	r25
    12ea:	8e 0f       	add	r24, r30
    12ec:	9f 1f       	adc	r25, r31
    12ee:	08 95       	ret

000012f0 <__ultoa_invert>:
    12f0:	fa 01       	movw	r30, r20
    12f2:	aa 27       	eor	r26, r26
    12f4:	28 30       	cpi	r18, 0x08	; 8
    12f6:	51 f1       	breq	.+84     	; 0x134c <__ultoa_invert+0x5c>
    12f8:	20 31       	cpi	r18, 0x10	; 16
    12fa:	81 f1       	breq	.+96     	; 0x135c <__ultoa_invert+0x6c>
    12fc:	e8 94       	clt
    12fe:	6f 93       	push	r22
    1300:	6e 7f       	andi	r22, 0xFE	; 254
    1302:	6e 5f       	subi	r22, 0xFE	; 254
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	8f 4f       	sbci	r24, 0xFF	; 255
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	af 4f       	sbci	r26, 0xFF	; 255
    130c:	b1 e0       	ldi	r27, 0x01	; 1
    130e:	3e d0       	rcall	.+124    	; 0x138c <__ultoa_invert+0x9c>
    1310:	b4 e0       	ldi	r27, 0x04	; 4
    1312:	3c d0       	rcall	.+120    	; 0x138c <__ultoa_invert+0x9c>
    1314:	67 0f       	add	r22, r23
    1316:	78 1f       	adc	r23, r24
    1318:	89 1f       	adc	r24, r25
    131a:	9a 1f       	adc	r25, r26
    131c:	a1 1d       	adc	r26, r1
    131e:	68 0f       	add	r22, r24
    1320:	79 1f       	adc	r23, r25
    1322:	8a 1f       	adc	r24, r26
    1324:	91 1d       	adc	r25, r1
    1326:	a1 1d       	adc	r26, r1
    1328:	6a 0f       	add	r22, r26
    132a:	71 1d       	adc	r23, r1
    132c:	81 1d       	adc	r24, r1
    132e:	91 1d       	adc	r25, r1
    1330:	a1 1d       	adc	r26, r1
    1332:	20 d0       	rcall	.+64     	; 0x1374 <__ultoa_invert+0x84>
    1334:	09 f4       	brne	.+2      	; 0x1338 <__ultoa_invert+0x48>
    1336:	68 94       	set
    1338:	3f 91       	pop	r19
    133a:	2a e0       	ldi	r18, 0x0A	; 10
    133c:	26 9f       	mul	r18, r22
    133e:	11 24       	eor	r1, r1
    1340:	30 19       	sub	r19, r0
    1342:	30 5d       	subi	r19, 0xD0	; 208
    1344:	31 93       	st	Z+, r19
    1346:	de f6       	brtc	.-74     	; 0x12fe <__ultoa_invert+0xe>
    1348:	cf 01       	movw	r24, r30
    134a:	08 95       	ret
    134c:	46 2f       	mov	r20, r22
    134e:	47 70       	andi	r20, 0x07	; 7
    1350:	40 5d       	subi	r20, 0xD0	; 208
    1352:	41 93       	st	Z+, r20
    1354:	b3 e0       	ldi	r27, 0x03	; 3
    1356:	0f d0       	rcall	.+30     	; 0x1376 <__ultoa_invert+0x86>
    1358:	c9 f7       	brne	.-14     	; 0x134c <__ultoa_invert+0x5c>
    135a:	f6 cf       	rjmp	.-20     	; 0x1348 <__ultoa_invert+0x58>
    135c:	46 2f       	mov	r20, r22
    135e:	4f 70       	andi	r20, 0x0F	; 15
    1360:	40 5d       	subi	r20, 0xD0	; 208
    1362:	4a 33       	cpi	r20, 0x3A	; 58
    1364:	18 f0       	brcs	.+6      	; 0x136c <__ultoa_invert+0x7c>
    1366:	49 5d       	subi	r20, 0xD9	; 217
    1368:	31 fd       	sbrc	r19, 1
    136a:	40 52       	subi	r20, 0x20	; 32
    136c:	41 93       	st	Z+, r20
    136e:	02 d0       	rcall	.+4      	; 0x1374 <__ultoa_invert+0x84>
    1370:	a9 f7       	brne	.-22     	; 0x135c <__ultoa_invert+0x6c>
    1372:	ea cf       	rjmp	.-44     	; 0x1348 <__ultoa_invert+0x58>
    1374:	b4 e0       	ldi	r27, 0x04	; 4
    1376:	a6 95       	lsr	r26
    1378:	97 95       	ror	r25
    137a:	87 95       	ror	r24
    137c:	77 95       	ror	r23
    137e:	67 95       	ror	r22
    1380:	ba 95       	dec	r27
    1382:	c9 f7       	brne	.-14     	; 0x1376 <__ultoa_invert+0x86>
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	61 05       	cpc	r22, r1
    1388:	71 05       	cpc	r23, r1
    138a:	08 95       	ret
    138c:	9b 01       	movw	r18, r22
    138e:	ac 01       	movw	r20, r24
    1390:	0a 2e       	mov	r0, r26
    1392:	06 94       	lsr	r0
    1394:	57 95       	ror	r21
    1396:	47 95       	ror	r20
    1398:	37 95       	ror	r19
    139a:	27 95       	ror	r18
    139c:	ba 95       	dec	r27
    139e:	c9 f7       	brne	.-14     	; 0x1392 <__ultoa_invert+0xa2>
    13a0:	62 0f       	add	r22, r18
    13a2:	73 1f       	adc	r23, r19
    13a4:	84 1f       	adc	r24, r20
    13a6:	95 1f       	adc	r25, r21
    13a8:	a0 1d       	adc	r26, r0
    13aa:	08 95       	ret

000013ac <__prologue_saves__>:
    13ac:	2f 92       	push	r2
    13ae:	3f 92       	push	r3
    13b0:	4f 92       	push	r4
    13b2:	5f 92       	push	r5
    13b4:	6f 92       	push	r6
    13b6:	7f 92       	push	r7
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	ca 1b       	sub	r28, r26
    13d6:	db 0b       	sbc	r29, r27
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	09 94       	ijmp

000013e4 <__epilogue_restores__>:
    13e4:	2a 88       	ldd	r2, Y+18	; 0x12
    13e6:	39 88       	ldd	r3, Y+17	; 0x11
    13e8:	48 88       	ldd	r4, Y+16	; 0x10
    13ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    13ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    13f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    13f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    13f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    13f6:	b9 84       	ldd	r11, Y+9	; 0x09
    13f8:	c8 84       	ldd	r12, Y+8	; 0x08
    13fa:	df 80       	ldd	r13, Y+7	; 0x07
    13fc:	ee 80       	ldd	r14, Y+6	; 0x06
    13fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1400:	0c 81       	ldd	r16, Y+4	; 0x04
    1402:	1b 81       	ldd	r17, Y+3	; 0x03
    1404:	aa 81       	ldd	r26, Y+2	; 0x02
    1406:	b9 81       	ldd	r27, Y+1	; 0x01
    1408:	ce 0f       	add	r28, r30
    140a:	d1 1d       	adc	r29, r1
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	ed 01       	movw	r28, r26
    1418:	08 95       	ret

0000141a <_exit>:
    141a:	f8 94       	cli

0000141c <__stop_program>:
    141c:	ff cf       	rjmp	.-2      	; 0x141c <__stop_program>
