
ParallelProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800200  0000146e  00001502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000146e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008002dc  008002dc  000015de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  0000163a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028ae  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b70  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000102b  00000000  00000000  00004d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006f8  00000000  00000000  00005d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f1  00000000  00000000  00006444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011f5  00000000  00000000  00006b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  00007d2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ee e6       	ldi	r30, 0x6E	; 110
      f8:	f4 e1       	ldi	r31, 0x14	; 20
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ac 3d       	cpi	r26, 0xDC	; 220
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	23 e0       	ldi	r18, 0x03	; 3
     108:	ac ed       	ldi	r26, 0xDC	; 220
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a7 33       	cpi	r26, 0x37	; 55
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 71 04 	call	0x8e2	; 0x8e2 <main>
     11a:	0c 94 35 0a 	jmp	0x146a	; 0x146a <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <SPI_FPGA_Write>:
	SPI_FPGA_Write(FPGA_Disable);
}

void SPI_FPGA_Write(unsigned char SPI_Data)
{
	FPGA_CS_PORT &= ~(1<<FPGA_SPI_CS);
     122:	a4 98       	cbi	0x14, 4	; 20
	// Start Write transmission
	SPDR = SPI_Data;
     124:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     126:	0d b4       	in	r0, 0x2d	; 45
     128:	07 fe       	sbrs	r0, 7
     12a:	fd cf       	rjmp	.-6      	; 0x126 <SPI_FPGA_Write+0x4>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     12c:	a4 9a       	sbi	0x14, 4	; 20
     12e:	08 95       	ret

00000130 <SPI_FPGA_Init>:
#include <util/delay.h>
#include "FPGA.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
     130:	9c 9a       	sbi	0x13, 4	; 19
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     132:	a4 9a       	sbi	0x14, 4	; 20
	
	WR_DDR |= 1<<FPGAWR;
     134:	e4 e0       	ldi	r30, 0x04	; 4
     136:	f1 e0       	ldi	r31, 0x01	; 1
     138:	80 81       	ld	r24, Z
     13a:	84 60       	ori	r24, 0x04	; 4
     13c:	80 83       	st	Z, r24
	WR_PORT &= ~(1<<FPGAWR);
     13e:	e5 e0       	ldi	r30, 0x05	; 5
     140:	f1 e0       	ldi	r31, 0x01	; 1
     142:	80 81       	ld	r24, Z
     144:	8b 7f       	andi	r24, 0xFB	; 251
     146:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_Disable);
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	0e 94 91 00 	call	0x122	; 0x122 <SPI_FPGA_Write>
     14e:	08 95       	ret

00000150 <hexInit>:
				   ':', 0x10, 0x00, 0x10, 0x00, 0x12, 0xC0, 0x11, 0xC0, 0x10, 0xC0, 0x0F, 0xC0, 0x0E, 0xC0, 0x0D, 0xC0, 0x0C, 0xC0, 0x0B, 0xC0, 0x6C,
				   ':', 0x00, 0x00, 0x00, 0x01, 0xFF};

void hexInit()
{
	RAMOffset = 0; 
     150:	10 92 12 03 	sts	0x0312, r1
     154:	10 92 11 03 	sts	0x0311, r1
	memset(hexRow, 0x00, 50); 
     158:	82 e3       	ldi	r24, 0x32	; 50
     15a:	ef ed       	ldi	r30, 0xDF	; 223
     15c:	f2 e0       	ldi	r31, 0x02	; 2
     15e:	df 01       	movw	r26, r30
     160:	1d 92       	st	X+, r1
     162:	8a 95       	dec	r24
     164:	e9 f7       	brne	.-6      	; 0x160 <hexInit+0x10>
     166:	08 95       	ret

00000168 <getHexRow>:
} 

char* getHexRow()
{
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	cf ed       	ldi	r28, 0xDF	; 223
     172:	d2 e0       	ldi	r29, 0x02	; 2
     174:	04 ee       	ldi	r16, 0xE4	; 228
     176:	12 e0       	ldi	r17, 0x02	; 2
	char buffer; 
	int i=0; 
	for(i=0; i<DATA_BEGIN; i++)
	{
		//Read the bytes from RAM and throw them into the buffer
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
     178:	60 91 11 03 	lds	r22, 0x0311
     17c:	70 91 12 03 	lds	r23, 0x0312
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 06 06 	call	0xc0c	; 0xc0c <RAMReadByte>
		//printf("0x%02X ",buffer);
		hexRow[i] = buffer; 
     188:	89 93       	st	Y+, r24
		RAMOffset++; 
     18a:	80 91 11 03 	lds	r24, 0x0311
     18e:	90 91 12 03 	lds	r25, 0x0312
     192:	01 96       	adiw	r24, 0x01	; 1
     194:	90 93 12 03 	sts	0x0312, r25
     198:	80 93 11 03 	sts	0x0311, r24

char* getHexRow()
{
	char buffer; 
	int i=0; 
	for(i=0; i<DATA_BEGIN; i++)
     19c:	c0 17       	cp	r28, r16
     19e:	d1 07       	cpc	r29, r17
     1a0:	59 f7       	brne	.-42     	; 0x178 <getHexRow+0x10>
		//printf("0x%02X ",buffer);
		hexRow[i] = buffer; 
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
     1a2:	00 91 e0 02 	lds	r16, 0x02E0
     1a6:	c4 ee       	ldi	r28, 0xE4	; 228
     1a8:	d2 e0       	ldi	r29, 0x02	; 2
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	0b 51       	subi	r16, 0x1B	; 27
     1ae:	1d 4f       	sbci	r17, 0xFD	; 253
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
	{
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
     1b0:	60 91 11 03 	lds	r22, 0x0311
     1b4:	70 91 12 03 	lds	r23, 0x0312
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 06 06 	call	0xc0c	; 0xc0c <RAMReadByte>
		//printf("0x%02X ",buffer);
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
     1c0:	60 91 11 03 	lds	r22, 0x0311
     1c4:	70 91 12 03 	lds	r23, 0x0312
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 06 06 	call	0xc0c	; 0xc0c <RAMReadByte>
     1d0:	89 93       	st	Y+, r24
		RAMOffset++; 
     1d2:	80 91 11 03 	lds	r24, 0x0311
     1d6:	90 91 12 03 	lds	r25, 0x0312
     1da:	01 96       	adiw	r24, 0x01	; 1
     1dc:	90 93 12 03 	sts	0x0312, r25
     1e0:	80 93 11 03 	sts	0x0311, r24
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
     1e4:	c0 17       	cp	r28, r16
     1e6:	d1 07       	cpc	r29, r17
     1e8:	19 f7       	brne	.-58     	; 0x1b0 <getHexRow+0x48>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		RAMOffset++; 
	}
	
	return hexRow; 
}
     1ea:	8f ed       	ldi	r24, 0xDF	; 223
     1ec:	92 e0       	ldi	r25, 0x02	; 2
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	08 95       	ret

000001f8 <writeHexFileTest>:

void writeHexFileTest()
{	
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	c0 e0       	ldi	r28, 0x00	; 0
     206:	d2 e0       	ldi	r29, 0x02	; 2
     208:	0f 2e       	mov	r0, r31
     20a:	f2 e3       	ldi	r31, 0x32	; 50
     20c:	ef 2e       	mov	r14, r31
     20e:	f2 e0       	ldi	r31, 0x02	; 2
     210:	ff 2e       	mov	r15, r31
     212:	f0 2d       	mov	r31, r0
	for (int i = 0; i<50; i++)
	{
		printf("0x%02X ", *(buffer + i));
     214:	0f e4       	ldi	r16, 0x4F	; 79
     216:	12 e0       	ldi	r17, 0x02	; 2
     218:	89 91       	ld	r24, Y+
     21a:	1f 92       	push	r1
     21c:	8f 93       	push	r24
     21e:	1f 93       	push	r17
     220:	0f 93       	push	r16
     222:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
	return hexRow; 
}

void writeHexFileTest()
{	
	for (int i = 0; i<50; i++)
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	ce 15       	cp	r28, r14
     230:	df 05       	cpc	r29, r15
     232:	91 f7       	brne	.-28     	; 0x218 <writeHexFileTest+0x20>
	{
		printf("0x%02X ", *(buffer + i));
	}
				
	RAMWrite(buffer, HEX_FILE_ADDRESS, 50);
     234:	42 e3       	ldi	r20, 0x32	; 50
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	0e 94 54 05 	call	0xaa8	; 0xaa8 <RAMWrite>
					
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	ff 90       	pop	r15
     24e:	ef 90       	pop	r14
     250:	08 95       	ret

00000252 <ProgInit>:
#include "Print/PrintDriver.h"


void ProgInit(void)
{
	SPI_Switching_Circuitry_Init(); 
     252:	0e 94 0d 06 	call	0xc1a	; 0xc1a <SPI_Switching_Circuitry_Init>
	SPI_FPGA_Init();
     256:	0e 94 98 00 	call	0x130	; 0x130 <SPI_FPGA_Init>
	
	voltageControlInit();
     25a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <voltageControlInit>
	setVpp(VPP_12V);
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 1e 07 	call	0xe3c	; 0xe3c <setVpp>
	setVcc(VCC_5V);
     264:	84 e0       	ldi	r24, 0x04	; 4
     266:	0e 94 10 07 	call	0xe20	; 0xe20 <setVcc>
	setVLogic(VL_5V);
     26a:	86 e0       	ldi	r24, 0x06	; 6
     26c:	0e 94 30 07 	call	0xe60	; 0xe60 <setVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     270:	8f e0       	ldi	r24, 0x0F	; 15
     272:	97 e2       	ldi	r25, 0x27	; 39
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <ProgInit+0x22>
     278:	00 c0       	rjmp	.+0      	; 0x27a <ProgInit+0x28>
     27a:	00 00       	nop
	_delay_ms(5);
	enableVccRegulator();
     27c:	0e 94 0c 07 	call	0xe18	; 0xe18 <enableVccRegulator>
	enableVLogic();
     280:	0e 94 2c 07 	call	0xe58	; 0xe58 <enableVLogic>
     284:	9f ef       	ldi	r25, 0xFF	; 255
     286:	24 e3       	ldi	r18, 0x34	; 52
     288:	8c e0       	ldi	r24, 0x0C	; 12
     28a:	91 50       	subi	r25, 0x01	; 1
     28c:	20 40       	sbci	r18, 0x00	; 0
     28e:	80 40       	sbci	r24, 0x00	; 0
     290:	e1 f7       	brne	.-8      	; 0x28a <ProgInit+0x38>
     292:	00 c0       	rjmp	.+0      	; 0x294 <ProgInit+0x42>
     294:	00 00       	nop
	_delay_ms(500);
	//Setting up Control lines
	CONTROL_DDR |= ( (1<<XTAL1) | (1<<OE) | (1<<WR) | (1<<BS1_PAGEL) | (1<<XA0) | (1<<XA1_BS2) | (1<<PAGEL) | (1<<BS2));
     296:	8a b1       	in	r24, 0x0a	; 10
     298:	8f ef       	ldi	r24, 0xFF	; 255
     29a:	8a b9       	out	0x0a, r24	; 10
	RDY_BSY_DDR &= ~(1<<RDY_BSY);
     29c:	38 98       	cbi	0x07, 0	; 7
	DATA_DDR = 0xFF;
     29e:	80 93 0a 01 	sts	0x010A, r24
	
	LED_PORT &= ~((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
     2a2:	84 b3       	in	r24, 0x14	; 20
     2a4:	88 7f       	andi	r24, 0xF8	; 248
     2a6:	84 bb       	out	0x14, r24	; 20
     2a8:	08 95       	ret

000002aa <LoadCommand>:
}

void LoadCommand(char command)
{
	//A: Load Command "Program Flash"
	CONTROL_PORT |= 1<<XA1_BS2;
     2aa:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     2ac:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     2ae:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = command;
     2b0:	80 93 0b 01 	sts	0x010B, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b4:	82 e4       	ldi	r24, 0x42	; 66
     2b6:	8a 95       	dec	r24
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LoadCommand+0xc>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LoadCommand+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     2bc:	58 9a       	sbi	0x0b, 0	; 11
     2be:	82 e4       	ldi	r24, 0x42	; 66
     2c0:	8a 95       	dec	r24
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LoadCommand+0x16>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LoadCommand+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     2c6:	58 98       	cbi	0x0b, 0	; 11
     2c8:	82 e4       	ldi	r24, 0x42	; 66
     2ca:	8a 95       	dec	r24
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <LoadCommand+0x20>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LoadCommand+0x26>
     2d0:	08 95       	ret

000002d2 <WriteWord>:
}

void WriteWord(uint16_t data)
{
	//C: Load Data Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     2d2:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
     2d4:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = data & 0x00FF; 
     2d6:	80 93 0b 01 	sts	0x010B, r24
     2da:	82 e4       	ldi	r24, 0x42	; 66
     2dc:	8a 95       	dec	r24
     2de:	f1 f7       	brne	.-4      	; 0x2dc <WriteWord+0xa>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <WriteWord+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     2e2:	58 9a       	sbi	0x0b, 0	; 11
     2e4:	82 e4       	ldi	r24, 0x42	; 66
     2e6:	8a 95       	dec	r24
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <WriteWord+0x14>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <WriteWord+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     2ec:	58 98       	cbi	0x0b, 0	; 11
     2ee:	82 e4       	ldi	r24, 0x42	; 66
     2f0:	8a 95       	dec	r24
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <WriteWord+0x1e>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <WriteWord+0x24>
	_delay_us(25);
	
	//D: Load Data High Byte
	CONTROL_PORT |= 1<<BS1_PAGEL;
     2f6:	5b 9a       	sbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2);
     2f8:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
     2fa:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = ((data & 0xFF00) >> 8); 
     2fc:	90 93 0b 01 	sts	0x010B, r25
     300:	82 e4       	ldi	r24, 0x42	; 66
     302:	8a 95       	dec	r24
     304:	f1 f7       	brne	.-4      	; 0x302 <WriteWord+0x30>
     306:	00 c0       	rjmp	.+0      	; 0x308 <WriteWord+0x36>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     308:	58 9a       	sbi	0x0b, 0	; 11
     30a:	82 e4       	ldi	r24, 0x42	; 66
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <WriteWord+0x3a>
     310:	00 c0       	rjmp	.+0      	; 0x312 <WriteWord+0x40>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     312:	58 98       	cbi	0x0b, 0	; 11
     314:	82 e4       	ldi	r24, 0x42	; 66
     316:	8a 95       	dec	r24
     318:	f1 f7       	brne	.-4      	; 0x316 <WriteWord+0x44>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <WriteWord+0x4a>
     31c:	08 95       	ret

0000031e <LoadLowAddress>:
}

void LoadLowAddress(uint16_t address)
{
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     31e:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     320:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     322:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = (address & 0x00FF);
     324:	80 93 0b 01 	sts	0x010B, r24
     328:	82 e4       	ldi	r24, 0x42	; 66
     32a:	8a 95       	dec	r24
     32c:	f1 f7       	brne	.-4      	; 0x32a <LoadLowAddress+0xc>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LoadLowAddress+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     330:	58 9a       	sbi	0x0b, 0	; 11
     332:	82 e4       	ldi	r24, 0x42	; 66
     334:	8a 95       	dec	r24
     336:	f1 f7       	brne	.-4      	; 0x334 <LoadLowAddress+0x16>
     338:	00 c0       	rjmp	.+0      	; 0x33a <LoadLowAddress+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     33a:	58 98       	cbi	0x0b, 0	; 11
     33c:	82 e4       	ldi	r24, 0x42	; 66
     33e:	8a 95       	dec	r24
     340:	f1 f7       	brne	.-4      	; 0x33e <LoadLowAddress+0x20>
     342:	00 c0       	rjmp	.+0      	; 0x344 <LoadLowAddress+0x26>
     344:	08 95       	ret

00000346 <LoadHighAddress>:
}

void LoadHighAddress(uint16_t address)
{
	//F: Load Address High Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     346:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     348:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT |= 1<<BS1_PAGEL;
     34a:	5b 9a       	sbi	0x0b, 3	; 11
	DATA_PORT = ((address & 0xFF00) >> 8);
     34c:	90 93 0b 01 	sts	0x010B, r25
     350:	82 e4       	ldi	r24, 0x42	; 66
     352:	8a 95       	dec	r24
     354:	f1 f7       	brne	.-4      	; 0x352 <LoadHighAddress+0xc>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LoadHighAddress+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     358:	58 9a       	sbi	0x0b, 0	; 11
     35a:	82 e4       	ldi	r24, 0x42	; 66
     35c:	8a 95       	dec	r24
     35e:	f1 f7       	brne	.-4      	; 0x35c <LoadHighAddress+0x16>
     360:	00 c0       	rjmp	.+0      	; 0x362 <LoadHighAddress+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     362:	58 98       	cbi	0x0b, 0	; 11
     364:	82 e4       	ldi	r24, 0x42	; 66
     366:	8a 95       	dec	r24
     368:	f1 f7       	brne	.-4      	; 0x366 <LoadHighAddress+0x20>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <LoadHighAddress+0x26>
     36c:	08 95       	ret

0000036e <ProgramPage>:
}

void ProgramPage(void)
{
	//G: Program Page
	CONTROL_PORT &= ~(1<<WR);
     36e:	5a 98       	cbi	0x0b, 2	; 11
     370:	22 e4       	ldi	r18, 0x42	; 66
     372:	2a 95       	dec	r18
     374:	f1 f7       	brne	.-4      	; 0x372 <ProgramPage+0x4>
     376:	00 c0       	rjmp	.+0      	; 0x378 <ProgramPage+0xa>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
     378:	5a 9a       	sbi	0x0b, 2	; 11
     37a:	82 e4       	ldi	r24, 0x42	; 66
     37c:	8a 95       	dec	r24
     37e:	f1 f7       	brne	.-4      	; 0x37c <ProgramPage+0xe>
     380:	00 c0       	rjmp	.+0      	; 0x382 <ProgramPage+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     382:	9f ef       	ldi	r25, 0xFF	; 255
     384:	29 e6       	ldi	r18, 0x69	; 105
     386:	88 e1       	ldi	r24, 0x18	; 24
     388:	91 50       	subi	r25, 0x01	; 1
     38a:	20 40       	sbci	r18, 0x00	; 0
     38c:	80 40       	sbci	r24, 0x00	; 0
     38e:	e1 f7       	brne	.-8      	; 0x388 <ProgramPage+0x1a>
     390:	00 c0       	rjmp	.+0      	; 0x392 <ProgramPage+0x24>
     392:	00 00       	nop
     394:	08 95       	ret

00000396 <EndPageProgramming>:
}

void EndPageProgramming(void)
{
	//I: End Page Programming
	CONTROL_PORT |= 1<<XA1_BS2;
     396:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     398:	5c 98       	cbi	0x0b, 4	; 11
	DATA_PORT = 0x00;
     39a:	10 92 0b 01 	sts	0x010B, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     39e:	82 e4       	ldi	r24, 0x42	; 66
     3a0:	8a 95       	dec	r24
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <EndPageProgramming+0xa>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <EndPageProgramming+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     3a6:	58 9a       	sbi	0x0b, 0	; 11
     3a8:	82 e4       	ldi	r24, 0x42	; 66
     3aa:	8a 95       	dec	r24
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <EndPageProgramming+0x14>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <EndPageProgramming+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     3b0:	58 98       	cbi	0x0b, 0	; 11
     3b2:	82 e4       	ldi	r24, 0x42	; 66
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <EndPageProgramming+0x1e>
     3b8:	00 c0       	rjmp	.+0      	; 0x3ba <EndPageProgramming+0x24>
     3ba:	08 95       	ret

000003bc <EnableProgMode>:
	_delay_us(25);
}

void EnableProgMode(unsigned char TargetMicrocontroller)
{
     3bc:	cf 93       	push	r28
     3be:	c8 2f       	mov	r28, r24
	CONTROL_PORT &= ~(1<<XTAL1);
     3c0:	58 98       	cbi	0x0b, 0	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2 | 1<<XA0 | 1<<BS1_PAGEL | 1<<WR);
     3c2:	8b b1       	in	r24, 0x0b	; 11
     3c4:	83 7c       	andi	r24, 0xC3	; 195
     3c6:	8b b9       	out	0x0b, r24	; 11
	DATA_PORT = 0x00;
     3c8:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
     3cc:	1b b8       	out	0x0b, r1	; 11
	
	WR_PORT &= ~(1<<FPGAWR);
     3ce:	e5 e0       	ldi	r30, 0x05	; 5
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	80 81       	ld	r24, Z
     3d4:	8b 7f       	andi	r24, 0xFB	; 251
     3d6:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_ATtiny2313_Mapping);
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	0e 94 91 00 	call	0x122	; 0x122 <SPI_FPGA_Write>
	
	switch (TargetMicrocontroller)
     3de:	c1 30       	cpi	r28, 0x01	; 1
     3e0:	11 f4       	brne	.+4      	; 0x3e6 <EnableProgMode+0x2a>
	{
		case 1 :
			setAtTiny2313();
     3e2:	0e 94 a4 06 	call	0xd48	; 0xd48 <setAtTiny2313>
     3e6:	87 ec       	ldi	r24, 0xC7	; 199
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <EnableProgMode+0x2e>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <EnableProgMode+0x34>
     3f0:	00 00       	nop
		default:
			break;
	}
	
	_delay_us(100);
	enableVppRegulator();
     3f2:	0e 94 08 07 	call	0xe10	; 0xe10 <enableVppRegulator>
     3f6:	95 e8       	ldi	r25, 0x85	; 133
     3f8:	9a 95       	dec	r25
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <EnableProgMode+0x3c>
     3fc:	00 00       	nop
	_delay_us(50);
	CONTROL_PORT |= (1<<WR | 1<<OE);
     3fe:	8b b1       	in	r24, 0x0b	; 11
     400:	86 60       	ori	r24, 0x06	; 6
     402:	8b b9       	out	0x0b, r24	; 11
     404:	87 ee       	ldi	r24, 0xE7	; 231
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <EnableProgMode+0x4c>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <EnableProgMode+0x52>
     40e:	00 00       	nop
	_delay_us(500);
}
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <ReadSignatureBytes>:
char* ReadSignatureBytes(void)
{
	static char SignatureBytes[3];
	
	//A: Load Command "Read Signature Bytes"
	LoadCommand(READ_SIG_BYTE);
     414:	88 e0       	ldi	r24, 0x08	; 8
     416:	0e 94 55 01 	call	0x2aa	; 0x2aa <LoadCommand>
	
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     41a:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     41c:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     41e:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x00;
     420:	10 92 0b 01 	sts	0x010B, r1
     424:	87 ec       	ldi	r24, 0xC7	; 199
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <ReadSignatureBytes+0x14>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <ReadSignatureBytes+0x1a>
     42e:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
     430:	58 9a       	sbi	0x0b, 0	; 11
     432:	92 e4       	ldi	r25, 0x42	; 66
     434:	9a 95       	dec	r25
     436:	f1 f7       	brne	.-4      	; 0x434 <ReadSignatureBytes+0x20>
     438:	00 c0       	rjmp	.+0      	; 0x43a <ReadSignatureBytes+0x26>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     43a:	58 98       	cbi	0x0b, 0	; 11
     43c:	87 ec       	ldi	r24, 0xC7	; 199
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <ReadSignatureBytes+0x2c>
     444:	00 c0       	rjmp	.+0      	; 0x446 <ReadSignatureBytes+0x32>
     446:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     448:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
     44c:	e5 e0       	ldi	r30, 0x05	; 5
     44e:	f1 e0       	ldi	r31, 0x01	; 1
     450:	80 81       	ld	r24, Z
     452:	84 60       	ori	r24, 0x04	; 4
     454:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
     456:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     458:	5b 98       	cbi	0x0b, 3	; 11
     45a:	87 ee       	ldi	r24, 0xE7	; 231
     45c:	93 e0       	ldi	r25, 0x03	; 3
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <ReadSignatureBytes+0x4a>
     462:	00 c0       	rjmp	.+0      	; 0x464 <ReadSignatureBytes+0x50>
     464:	00 00       	nop
	_delay_us(500);
	SignatureBytes[0] = DATA_PIN;
     466:	80 91 09 01 	lds	r24, 0x0109
     46a:	80 93 dc 02 	sts	0x02DC, r24
	printf("0x%02X ", SignatureBytes[0]);
     46e:	1f 92       	push	r1
     470:	8f 93       	push	r24
     472:	8f e4       	ldi	r24, 0x4F	; 79
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
	CONTROL_PORT |= 1<<OE;
     47e:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
     480:	e5 e0       	ldi	r30, 0x05	; 5
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	80 81       	ld	r24, Z
     486:	8b 7f       	andi	r24, 0xFB	; 251
     488:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
     48a:	8f ef       	ldi	r24, 0xFF	; 255
     48c:	80 93 0a 01 	sts	0x010A, r24
     490:	87 ec       	ldi	r24, 0xC7	; 199
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <ReadSignatureBytes+0x80>
     498:	00 c0       	rjmp	.+0      	; 0x49a <ReadSignatureBytes+0x86>
     49a:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     49c:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     49e:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     4a0:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x01;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 0b 01 	sts	0x010B, r24
     4a8:	87 ec       	ldi	r24, 0xC7	; 199
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <ReadSignatureBytes+0x98>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <ReadSignatureBytes+0x9e>
     4b2:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
     4b4:	58 9a       	sbi	0x0b, 0	; 11
     4b6:	92 e4       	ldi	r25, 0x42	; 66
     4b8:	9a 95       	dec	r25
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <ReadSignatureBytes+0xa4>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <ReadSignatureBytes+0xaa>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     4be:	58 98       	cbi	0x0b, 0	; 11
     4c0:	87 ec       	ldi	r24, 0xC7	; 199
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <ReadSignatureBytes+0xb0>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <ReadSignatureBytes+0xb6>
     4ca:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     4cc:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
     4d0:	80 81       	ld	r24, Z
     4d2:	84 60       	ori	r24, 0x04	; 4
     4d4:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
     4d6:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     4d8:	5b 98       	cbi	0x0b, 3	; 11
     4da:	87 ee       	ldi	r24, 0xE7	; 231
     4dc:	93 e0       	ldi	r25, 0x03	; 3
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <ReadSignatureBytes+0xca>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <ReadSignatureBytes+0xd0>
     4e4:	00 00       	nop
	_delay_us(500);
	SignatureBytes[1] = DATA_PIN;
     4e6:	80 91 09 01 	lds	r24, 0x0109
     4ea:	80 93 dd 02 	sts	0x02DD, r24
	printf("0x%02X ", SignatureBytes[1]);
     4ee:	1f 92       	push	r1
     4f0:	8f 93       	push	r24
     4f2:	8f e4       	ldi	r24, 0x4F	; 79
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
	CONTROL_PORT |= 1<<OE;
     4fe:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
     500:	e5 e0       	ldi	r30, 0x05	; 5
     502:	f1 e0       	ldi	r31, 0x01	; 1
     504:	80 81       	ld	r24, Z
     506:	8b 7f       	andi	r24, 0xFB	; 251
     508:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	80 93 0a 01 	sts	0x010A, r24
     510:	87 ec       	ldi	r24, 0xC7	; 199
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <ReadSignatureBytes+0x100>
     518:	00 c0       	rjmp	.+0      	; 0x51a <ReadSignatureBytes+0x106>
     51a:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     51c:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     51e:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     520:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x02;
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	80 93 0b 01 	sts	0x010B, r24
     528:	87 ec       	ldi	r24, 0xC7	; 199
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <ReadSignatureBytes+0x118>
     530:	00 c0       	rjmp	.+0      	; 0x532 <ReadSignatureBytes+0x11e>
     532:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
     534:	58 9a       	sbi	0x0b, 0	; 11
     536:	92 e4       	ldi	r25, 0x42	; 66
     538:	9a 95       	dec	r25
     53a:	f1 f7       	brne	.-4      	; 0x538 <ReadSignatureBytes+0x124>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <ReadSignatureBytes+0x12a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     53e:	58 98       	cbi	0x0b, 0	; 11
     540:	87 ec       	ldi	r24, 0xC7	; 199
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <ReadSignatureBytes+0x130>
     548:	00 c0       	rjmp	.+0      	; 0x54a <ReadSignatureBytes+0x136>
     54a:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     54c:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
     550:	80 81       	ld	r24, Z
     552:	84 60       	ori	r24, 0x04	; 4
     554:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
     556:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     558:	5b 98       	cbi	0x0b, 3	; 11
     55a:	87 ee       	ldi	r24, 0xE7	; 231
     55c:	93 e0       	ldi	r25, 0x03	; 3
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <ReadSignatureBytes+0x14a>
     562:	00 c0       	rjmp	.+0      	; 0x564 <ReadSignatureBytes+0x150>
     564:	00 00       	nop
	_delay_us(500);
	SignatureBytes[2] = DATA_PIN;
     566:	80 91 09 01 	lds	r24, 0x0109
     56a:	80 93 de 02 	sts	0x02DE, r24
	printf("0x%02X ", SignatureBytes[2]);
     56e:	1f 92       	push	r1
     570:	8f 93       	push	r24
     572:	8f e4       	ldi	r24, 0x4F	; 79
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
	CONTROL_PORT |= 1<<OE;
     57e:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
     580:	e5 e0       	ldi	r30, 0x05	; 5
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	80 81       	ld	r24, Z
     586:	8b 7f       	andi	r24, 0xFB	; 251
     588:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	80 93 0a 01 	sts	0x010A, r24
	DATA_PORT = 0x00;
     590:	10 92 0b 01 	sts	0x010B, r1
	
	return SignatureBytes;
     594:	8d b7       	in	r24, 0x3d	; 61
     596:	9e b7       	in	r25, 0x3e	; 62
     598:	0c 96       	adiw	r24, 0x0c	; 12
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	9e bf       	out	0x3e, r25	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	8d bf       	out	0x3d, r24	; 61
}
     5a4:	8c ed       	ldi	r24, 0xDC	; 220
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	08 95       	ret

000005aa <ReadFlash>:

void ReadFlash(void)
{
     5aa:	9f 92       	push	r9
     5ac:	af 92       	push	r10
     5ae:	bf 92       	push	r11
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
	char DataValueIn = 0;
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
     5c0:	e1 2c       	mov	r14, r1
     5c2:	f1 2c       	mov	r15, r1
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
		
		//Read data
		DATA_DDR = 0;
     5c4:	0f 2e       	mov	r0, r31
     5c6:	fa e0       	ldi	r31, 0x0A	; 10
     5c8:	af 2e       	mov	r10, r31
     5ca:	bb 24       	eor	r11, r11
     5cc:	b3 94       	inc	r11
     5ce:	f0 2d       	mov	r31, r0
		WR_PORT |= (1<<FPGAWR);
     5d0:	05 e0       	ldi	r16, 0x05	; 5
     5d2:	11 e0       	ldi	r17, 0x01	; 1
		CONTROL_PORT &= ~(1<<OE);
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
		_delay_us(500);
		DataValueIn = DATA_PIN;
     5d4:	0f 2e       	mov	r0, r31
     5d6:	f9 e0       	ldi	r31, 0x09	; 9
     5d8:	cf 2e       	mov	r12, r31
     5da:	dd 24       	eor	r13, r13
     5dc:	d3 94       	inc	r13
     5de:	f0 2d       	mov	r31, r0
		printf("0x%02X ", DataValueIn);
     5e0:	cf e4       	ldi	r28, 0x4F	; 79
     5e2:	d2 e0       	ldi	r29, 0x02	; 2
		_delay_us(500);
		DataValueIn = DATA_PIN;
		printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
     5e4:	99 24       	eor	r9, r9
     5e6:	9a 94       	dec	r9
	char DataValueIn = 0;
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
	{
		//A: Load Command "Read Flash"
		LoadCommand(READ_FLASH);
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 55 01 	call	0x2aa	; 0x2aa <LoadCommand>
		
		//F: Load Address High Byte
		LoadHighAddress(0x00);
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 a3 01 	call	0x346	; 0x346 <LoadHighAddress>
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
     5f6:	c7 01       	movw	r24, r14
     5f8:	0e 94 8f 01 	call	0x31e	; 0x31e <LoadLowAddress>
		
		//Read data
		DATA_DDR = 0;
     5fc:	f5 01       	movw	r30, r10
     5fe:	10 82       	st	Z, r1
		WR_PORT |= (1<<FPGAWR);
     600:	f8 01       	movw	r30, r16
     602:	80 81       	ld	r24, Z
     604:	84 60       	ori	r24, 0x04	; 4
     606:	80 83       	st	Z, r24
		CONTROL_PORT &= ~(1<<OE);
     608:	59 98       	cbi	0x0b, 1	; 11
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
     60a:	5b 98       	cbi	0x0b, 3	; 11
     60c:	87 ee       	ldi	r24, 0xE7	; 231
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <ReadFlash+0x66>
     614:	00 c0       	rjmp	.+0      	; 0x616 <ReadFlash+0x6c>
     616:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
     618:	f6 01       	movw	r30, r12
     61a:	80 81       	ld	r24, Z
		printf("0x%02X ", DataValueIn);
     61c:	1f 92       	push	r1
     61e:	8f 93       	push	r24
     620:	df 93       	push	r29
     622:	cf 93       	push	r28
     624:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
		CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
     628:	5b 9a       	sbi	0x0b, 3	; 11
     62a:	e7 ee       	ldi	r30, 0xE7	; 231
     62c:	f3 e0       	ldi	r31, 0x03	; 3
     62e:	31 97       	sbiw	r30, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <ReadFlash+0x84>
     632:	00 c0       	rjmp	.+0      	; 0x634 <ReadFlash+0x8a>
     634:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
     636:	f6 01       	movw	r30, r12
     638:	80 81       	ld	r24, Z
		printf("0x%02X ", DataValueIn);
     63a:	1f 92       	push	r1
     63c:	8f 93       	push	r24
     63e:	df 93       	push	r29
     640:	cf 93       	push	r28
     642:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
		CONTROL_PORT |= 1<<OE;
     646:	59 9a       	sbi	0x0b, 1	; 11
		WR_PORT &= ~(1<<FPGAWR);
     648:	f8 01       	movw	r30, r16
     64a:	80 81       	ld	r24, Z
     64c:	8b 7f       	andi	r24, 0xFB	; 251
     64e:	80 83       	st	Z, r24
		DATA_DDR = 0xFF;
     650:	f5 01       	movw	r30, r10
     652:	90 82       	st	Z, r9
     654:	f2 e4       	ldi	r31, 0x42	; 66
     656:	fa 95       	dec	r31
     658:	f1 f7       	brne	.-4      	; 0x656 <ReadFlash+0xac>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <ReadFlash+0xb2>

void ReadFlash(void)
{
	char DataValueIn = 0;
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	e8 1a       	sub	r14, r24
     660:	f8 0a       	sbc	r15, r24
     662:	ed b7       	in	r30, 0x3d	; 61
     664:	fe b7       	in	r31, 0x3e	; 62
     666:	38 96       	adiw	r30, 0x08	; 8
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	fe bf       	out	0x3e, r31	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	ed bf       	out	0x3d, r30	; 61
     672:	f0 e1       	ldi	r31, 0x10	; 16
     674:	ef 16       	cp	r14, r31
     676:	f1 04       	cpc	r15, r1
     678:	09 f0       	breq	.+2      	; 0x67c <ReadFlash+0xd2>
     67a:	b6 cf       	rjmp	.-148    	; 0x5e8 <ReadFlash+0x3e>
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
		_delay_us(25);
	}
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	08 95       	ret

00000694 <ChipErase>:

void ChipErase(void)
{
	CONTROL_PORT |= 1<<XA1_BS2;
     694:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
     696:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     698:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x80;
     69a:	80 e8       	ldi	r24, 0x80	; 128
     69c:	80 93 0b 01 	sts	0x010B, r24
     6a0:	22 e4       	ldi	r18, 0x42	; 66
     6a2:	2a 95       	dec	r18
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <ChipErase+0xe>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <ChipErase+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
     6a8:	58 9a       	sbi	0x0b, 0	; 11
     6aa:	82 e4       	ldi	r24, 0x42	; 66
     6ac:	8a 95       	dec	r24
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <ChipErase+0x18>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <ChipErase+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     6b2:	58 98       	cbi	0x0b, 0	; 11
     6b4:	92 e4       	ldi	r25, 0x42	; 66
     6b6:	9a 95       	dec	r25
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <ChipErase+0x22>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <ChipErase+0x28>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<WR);
     6bc:	5a 98       	cbi	0x0b, 2	; 11
     6be:	22 e4       	ldi	r18, 0x42	; 66
     6c0:	2a 95       	dec	r18
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <ChipErase+0x2c>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <ChipErase+0x32>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
     6c6:	5a 9a       	sbi	0x0b, 2	; 11
     6c8:	82 e4       	ldi	r24, 0x42	; 66
     6ca:	8a 95       	dec	r24
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <ChipErase+0x36>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <ChipErase+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d0:	9f ef       	ldi	r25, 0xFF	; 255
     6d2:	29 e6       	ldi	r18, 0x69	; 105
     6d4:	88 e1       	ldi	r24, 0x18	; 24
     6d6:	91 50       	subi	r25, 0x01	; 1
     6d8:	20 40       	sbci	r18, 0x00	; 0
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <ChipErase+0x42>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <ChipErase+0x4c>
     6e0:	00 00       	nop
     6e2:	08 95       	ret

000006e4 <ProgramFlash>:
	//while(!(CONTROL_PIN & (1<<RDY_BSY)));
	_delay_ms(1000);
}

void ProgramFlash(char* hexData)
{
     6e4:	2f 92       	push	r2
     6e6:	3f 92       	push	r3
     6e8:	4f 92       	push	r4
     6ea:	5f 92       	push	r5
     6ec:	6f 92       	push	r6
     6ee:	7f 92       	push	r7
     6f0:	8f 92       	push	r8
     6f2:	9f 92       	push	r9
     6f4:	af 92       	push	r10
     6f6:	bf 92       	push	r11
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	00 d0       	rcall	.+0      	; 0x70a <ProgramFlash+0x26>
     70a:	00 d0       	rcall	.+0      	; 0x70c <ProgramFlash+0x28>
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
	uint16_t address;
	uint16_t data;
	uint32_t totalBytes = 0; 
	//Keep looping until the hexRow is the end of file or we hit the end of a page 
	
	LoadCommand(WRITE_FLASH);
     710:	80 e1       	ldi	r24, 0x10	; 16
     712:	0e 94 55 01 	call	0x2aa	; 0x2aa <LoadCommand>
{
	char* hexRow;
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	uint32_t totalBytes = 0; 
     716:	81 2c       	mov	r8, r1
     718:	91 2c       	mov	r9, r1
     71a:	54 01       	movw	r10, r8
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
		{
			LoadLowAddress(address + j);
			printf("Address: 0x%04X\n",(address + j));
     71c:	0f 2e       	mov	r0, r31
     71e:	f7 e5       	ldi	r31, 0x57	; 87
     720:	2f 2e       	mov	r2, r31
     722:	f2 e0       	ldi	r31, 0x02	; 2
     724:	3f 2e       	mov	r3, r31
     726:	f0 2d       	mov	r31, r0
	
	LoadCommand(WRITE_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
     728:	0e 94 b4 00 	call	0x168	; 0x168 <getHexRow>
     72c:	3c 01       	movw	r6, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
     72e:	dc 01       	movw	r26, r24
     730:	14 96       	adiw	r26, 0x04	; 4
     732:	8c 91       	ld	r24, X
     734:	14 97       	sbiw	r26, 0x04	; 4
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	09 f4       	brne	.+2      	; 0x73c <ProgramFlash+0x58>
     73a:	6c c0       	rjmp	.+216    	; 0x814 <ProgramFlash+0x130>
			break; 
			
		byteCount = (hexRow[BYTE_COUNT]);
     73c:	11 96       	adiw	r26, 0x01	; 1
     73e:	4c 90       	ld	r4, X
     740:	11 97       	sbiw	r26, 0x01	; 1
     742:	51 2c       	mov	r5, r1
		address = hexRow[ADDRESS_H];
     744:	12 96       	adiw	r26, 0x02	; 2
     746:	8c 91       	ld	r24, X
     748:	12 97       	sbiw	r26, 0x02	; 2
     74a:	90 e0       	ldi	r25, 0x00	; 0
		address <<= 8;
     74c:	98 2f       	mov	r25, r24
     74e:	88 27       	eor	r24, r24
		address |= (hexRow[ADDRESS_L]/2);
     750:	13 96       	adiw	r26, 0x03	; 3
     752:	2c 91       	ld	r18, X
     754:	26 95       	lsr	r18
     756:	fc 01       	movw	r30, r24
     758:	e2 2b       	or	r30, r18
     75a:	fa 83       	std	Y+2, r31	; 0x02
     75c:	e9 83       	std	Y+1, r30	; 0x01
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
     75e:	41 14       	cp	r4, r1
     760:	51 04       	cpc	r5, r1
     762:	09 f4       	brne	.+2      	; 0x766 <ProgramFlash+0x82>
     764:	45 c0       	rjmp	.+138    	; 0x7f0 <ProgramFlash+0x10c>
     766:	63 01       	movw	r12, r6
     768:	f5 e0       	ldi	r31, 0x05	; 5
     76a:	cf 0e       	add	r12, r31
     76c:	d1 1c       	adc	r13, r1
     76e:	09 81       	ldd	r16, Y+1	; 0x01
     770:	1a 81       	ldd	r17, Y+2	; 0x02
     772:	e1 2c       	mov	r14, r1
     774:	f1 2c       	mov	r15, r1
     776:	1b 82       	std	Y+3, r1	; 0x03
     778:	1c 82       	std	Y+4, r1	; 0x04
		{
			LoadLowAddress(address + j);
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 8f 01 	call	0x31e	; 0x31e <LoadLowAddress>
			printf("Address: 0x%04X\n",(address + j));
     780:	1f 93       	push	r17
     782:	0f 93       	push	r16
     784:	3f 92       	push	r3
     786:	2f 92       	push	r2
     788:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
			data = hexRow[DATA_BEGIN + i + 1];
     78c:	f3 01       	movw	r30, r6
     78e:	ee 0d       	add	r30, r14
     790:	ff 1d       	adc	r31, r15
     792:	e6 80       	ldd	r14, Z+6	; 0x06
     794:	f1 2c       	mov	r15, r1
			data <<= 8;
     796:	fe 2c       	mov	r15, r14
     798:	ee 24       	eor	r14, r14
			data |= hexRow[DATA_BEGIN + i];
     79a:	d6 01       	movw	r26, r12
     79c:	8c 91       	ld	r24, X
     79e:	e8 2a       	or	r14, r24
			WriteWord(data);
     7a0:	c7 01       	movw	r24, r14
     7a2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <WriteWord>
			printf("Word: 0x%04X\n",(data));
     7a6:	ff 92       	push	r15
     7a8:	ef 92       	push	r14
     7aa:	a8 e6       	ldi	r26, 0x68	; 104
     7ac:	b2 e0       	ldi	r27, 0x02	; 2
     7ae:	bf 93       	push	r27
     7b0:	af 93       	push	r26
     7b2:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
			totalBytes+=i; 
     7b6:	2b 81       	ldd	r18, Y+3	; 0x03
     7b8:	3c 81       	ldd	r19, Y+4	; 0x04
     7ba:	c9 01       	movw	r24, r18
     7bc:	aa 27       	eor	r26, r26
     7be:	97 fd       	sbrc	r25, 7
     7c0:	a0 95       	com	r26
     7c2:	ba 2f       	mov	r27, r26
     7c4:	88 0e       	add	r8, r24
     7c6:	99 1e       	adc	r9, r25
     7c8:	aa 1e       	adc	r10, r26
     7ca:	bb 1e       	adc	r11, r27
		address = hexRow[ADDRESS_H];
		address <<= 8;
		address |= (hexRow[ADDRESS_L]/2);
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
     7cc:	2e 5f       	subi	r18, 0xFE	; 254
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	3c 83       	std	Y+4, r19	; 0x04
     7d2:	2b 83       	std	Y+3, r18	; 0x03
     7d4:	79 01       	movw	r14, r18
     7d6:	0f 5f       	subi	r16, 0xFF	; 255
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
     7da:	32 e0       	ldi	r19, 0x02	; 2
     7dc:	c3 0e       	add	r12, r19
     7de:	d1 1c       	adc	r13, r1
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	e4 14       	cp	r14, r4
     7ec:	f5 04       	cpc	r15, r5
     7ee:	28 f2       	brcs	.-118    	; 0x77a <ProgramFlash+0x96>
			totalBytes+=i; 
			j++;
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%PAGE_SIZE_BYTES == 0)
     7f0:	d5 01       	movw	r26, r10
     7f2:	c4 01       	movw	r24, r8
     7f4:	8f 71       	andi	r24, 0x1F	; 31
     7f6:	99 27       	eor	r25, r25
     7f8:	aa 27       	eor	r26, r26
     7fa:	bb 27       	eor	r27, r27
     7fc:	89 2b       	or	r24, r25
     7fe:	8a 2b       	or	r24, r26
     800:	8b 2b       	or	r24, r27
     802:	09 f0       	breq	.+2      	; 0x806 <ProgramFlash+0x122>
     804:	91 cf       	rjmp	.-222    	; 0x728 <ProgramFlash+0x44>
		{
			LoadHighAddress(address);
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	0e 94 a3 01 	call	0x346	; 0x346 <LoadHighAddress>
			ProgramPage();
     80e:	0e 94 b7 01 	call	0x36e	; 0x36e <ProgramPage>
     812:	8a cf       	rjmp	.-236    	; 0x728 <ProgramFlash+0x44>
		}
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%PAGE_SIZE_BYTES != 0)
     814:	5f e1       	ldi	r21, 0x1F	; 31
     816:	85 22       	and	r8, r21
     818:	99 24       	eor	r9, r9
     81a:	aa 24       	eor	r10, r10
     81c:	bb 24       	eor	r11, r11
     81e:	89 28       	or	r8, r9
     820:	8a 28       	or	r8, r10
     822:	8b 28       	or	r8, r11
     824:	31 f0       	breq	.+12     	; 0x832 <ProgramFlash+0x14e>
	{
		LoadHighAddress(address);
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	9a 81       	ldd	r25, Y+2	; 0x02
     82a:	0e 94 a3 01 	call	0x346	; 0x346 <LoadHighAddress>
		ProgramPage();
     82e:	0e 94 b7 01 	call	0x36e	; 0x36e <ProgramPage>
	} 
	
	EndPageProgramming();
     832:	0e 94 cb 01 	call	0x396	; 0x396 <EndPageProgramming>
}
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	cf 90       	pop	r12
     84e:	bf 90       	pop	r11
     850:	af 90       	pop	r10
     852:	9f 90       	pop	r9
     854:	8f 90       	pop	r8
     856:	7f 90       	pop	r7
     858:	6f 90       	pop	r6
     85a:	5f 90       	pop	r5
     85c:	4f 90       	pop	r4
     85e:	3f 90       	pop	r3
     860:	2f 90       	pop	r2
     862:	08 95       	ret

00000864 <ExitParallelProgrammingMode>:
	EndPageProgramming();
}

void ExitParallelProgrammingMode(void)
{
	disableVppRegulator();
     864:	0e 94 0a 07 	call	0xe14	; 0xe14 <disableVppRegulator>
	disableVccRegulator();
     868:	0e 94 0e 07 	call	0xe1c	; 0xe1c <disableVccRegulator>
	disableVLogic();
     86c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <disableVLogic>
     870:	8f e0       	ldi	r24, 0x0F	; 15
     872:	97 e2       	ldi	r25, 0x27	; 39
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <ExitParallelProgrammingMode+0x10>
     878:	00 c0       	rjmp	.+0      	; 0x87a <ExitParallelProgrammingMode+0x16>
     87a:	00 00       	nop
	
	_delay_ms(5);
	DATA_PORT = 0x00;
     87c:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
     880:	1b b8       	out	0x0b, r1	; 11
     882:	8f ec       	ldi	r24, 0xCF	; 207
     884:	97 e0       	ldi	r25, 0x07	; 7
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <ExitParallelProgrammingMode+0x22>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <ExitParallelProgrammingMode+0x28>
     88c:	00 00       	nop
	_delay_ms(1);
	SPI_FPGA_Write(FPGA_Disable);
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	0e 94 91 00 	call	0x122	; 0x122 <SPI_FPGA_Write>
	
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
     894:	e5 e0       	ldi	r30, 0x05	; 5
     896:	f1 e0       	ldi	r31, 0x01	; 1
     898:	80 81       	ld	r24, Z
     89a:	8f 7d       	andi	r24, 0xDF	; 223
     89c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     89e:	95 e3       	ldi	r25, 0x35	; 53
     8a0:	9a 95       	dec	r25
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <ExitParallelProgrammingMode+0x3c>
     8a4:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SR_RESET);
     8a6:	80 81       	ld	r24, Z
     8a8:	80 62       	ori	r24, 0x20	; 32
     8aa:	80 83       	st	Z, r24
     8ac:	2d e0       	ldi	r18, 0x0D	; 13
     8ae:	2a 95       	dec	r18
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <ExitParallelProgrammingMode+0x4a>
     8b2:	00 00       	nop
	_delay_us(5);
	SRCS_PORT |= (1<<SRCS);
     8b4:	2f 9a       	sbi	0x05, 7	; 5
     8b6:	85 e3       	ldi	r24, 0x35	; 53
     8b8:	8a 95       	dec	r24
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <ExitParallelProgrammingMode+0x54>
     8bc:	00 00       	nop
	_delay_us(20);
	SRCS_PORT &= ~(1<<SRCS);
     8be:	2f 98       	cbi	0x05, 7	; 5
	
	SR_CNTRL_PORT |= (1<<SROE);
     8c0:	80 81       	ld	r24, Z
     8c2:	88 60       	ori	r24, 0x08	; 8
     8c4:	80 83       	st	Z, r24
	
	LED_PORT |= (1<<LED_Green);
     8c6:	a0 9a       	sbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c8:	9f ef       	ldi	r25, 0xFF	; 255
     8ca:	29 e6       	ldi	r18, 0x69	; 105
     8cc:	88 e1       	ldi	r24, 0x18	; 24
     8ce:	91 50       	subi	r25, 0x01	; 1
     8d0:	20 40       	sbci	r18, 0x00	; 0
     8d2:	80 40       	sbci	r24, 0x00	; 0
     8d4:	e1 f7       	brne	.-8      	; 0x8ce <ExitParallelProgrammingMode+0x6a>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <ExitParallelProgrammingMode+0x74>
     8d8:	00 00       	nop
	_delay_ms(1000);
	LED_PORT &= ~((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
     8da:	84 b3       	in	r24, 0x14	; 20
     8dc:	88 7f       	andi	r24, 0xF8	; 248
     8de:	84 bb       	out	0x14, r24	; 20
     8e0:	08 95       	ret

000008e2 <main>:
#define ATmega48P 4

int main(void)
{
	char* SignatureBytes;
	uart2_init();
     8e2:	0e 94 ed 04 	call	0x9da	; 0x9da <uart2_init>
	hexInit();
     8e6:	0e 94 a8 00 	call	0x150	; 0x150 <hexInit>
	
	SPI_Init();
     8ea:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <SPI_Init>
	printf("\n\n");
     8ee:	8e eb       	ldi	r24, 0xBE	; 190
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	0e 94 8b 07 	call	0xf16	; 0xf16 <puts>
	writeHexFileTest();
     8f6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeHexFileTest>
	RAMPrint(HEX_FILE_ADDRESS, 50);
     8fa:	42 e3       	ldi	r20, 0x32	; 50
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	cb 01       	movw	r24, r22
     904:	0e 94 99 05 	call	0xb32	; 0xb32 <RAMPrint>
	//Write test file to external RAM 
	//Test switching circuitry code
	ProgInit();
     908:	0e 94 29 01 	call	0x252	; 0x252 <ProgInit>
	EnableProgMode(ATtiny2313);
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	0e 94 de 01 	call	0x3bc	; 0x3bc <EnableProgMode>
	SignatureBytes = ReadSignatureBytes();
     912:	0e 94 0a 02 	call	0x414	; 0x414 <ReadSignatureBytes>
     916:	ec 01       	movw	r28, r24
	
	printf("\nSignature Bytes: %02X %02X %02X\n", *SignatureBytes, *(SignatureBytes + 1), *(SignatureBytes + 2));
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	1f 92       	push	r1
     91c:	8f 93       	push	r24
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	1f 92       	push	r1
     922:	8f 93       	push	r24
     924:	88 81       	ld	r24, Y
     926:	1f 92       	push	r1
     928:	8f 93       	push	r24
     92a:	86 e7       	ldi	r24, 0x76	; 118
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
	if ( (*SignatureBytes == 0x1E) && (*(SignatureBytes + 1) == 0x91) && (*(SignatureBytes + 2) == 0x0A) )
     936:	8d b7       	in	r24, 0x3d	; 61
     938:	9e b7       	in	r25, 0x3e	; 62
     93a:	08 96       	adiw	r24, 0x08	; 8
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	9e bf       	out	0x3e, r25	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	8d bf       	out	0x3d, r24	; 61
     946:	88 81       	ld	r24, Y
     948:	8e 31       	cpi	r24, 0x1E	; 30
     94a:	11 f5       	brne	.+68     	; 0x990 <main+0xae>
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	81 39       	cpi	r24, 0x91	; 145
     950:	f9 f4       	brne	.+62     	; 0x990 <main+0xae>
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	8a 30       	cpi	r24, 0x0A	; 10
     956:	e1 f4       	brne	.+56     	; 0x990 <main+0xae>
	{
		printf("Programming!\n");
     958:	8b ea       	ldi	r24, 0xAB	; 171
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	0e 94 8b 07 	call	0xf16	; 0xf16 <puts>
		ChipErase();
     960:	0e 94 4a 03 	call	0x694	; 0x694 <ChipErase>
		printf("Done Erasing!\n");
     964:	88 e9       	ldi	r24, 0x98	; 152
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	0e 94 8b 07 	call	0xf16	; 0xf16 <puts>
		ReadFlash();
     96c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <ReadFlash>
		printf("\n");
     970:	8a e0       	ldi	r24, 0x0A	; 10
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 84 07 	call	0xf08	; 0xf08 <putchar>
		ProgramFlash();
     978:	0e 94 72 03 	call	0x6e4	; 0x6e4 <ProgramFlash>
		printf("Done Programming!\n");
     97c:	86 ea       	ldi	r24, 0xA6	; 166
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	0e 94 8b 07 	call	0xf16	; 0xf16 <puts>
		ReadFlash();
     984:	0e 94 d5 02 	call	0x5aa	; 0x5aa <ReadFlash>
		printf("\nDone!\n\n");
     988:	88 eb       	ldi	r24, 0xB8	; 184
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	0e 94 8b 07 	call	0xf16	; 0xf16 <puts>
	}
	ExitParallelProgrammingMode();
     990:	0e 94 32 04 	call	0x864	; 0x864 <ExitParallelProgrammingMode>
     994:	ff cf       	rjmp	.-2      	; 0x994 <main+0xb2>

00000996 <uart_sendStream>:
	putchar('m');
}


int uart_sendStream(char ch,FILE *stream)
{
     996:	cf 93       	push	r28
     998:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     99a:	8a 30       	cpi	r24, 0x0A	; 10
     99c:	19 f4       	brne	.+6      	; 0x9a4 <uart_sendStream+0xe>
	uart_sendStream('\r', stream);
     99e:	8d e0       	ldi	r24, 0x0D	; 13
     9a0:	0e 94 cb 04 	call	0x996	; 0x996 <uart_sendStream>
	while (!(UCSR2A & (1<<UDRE2)));
     9a4:	e0 ed       	ldi	r30, 0xD0	; 208
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	90 81       	ld	r25, Z
     9aa:	95 ff       	sbrs	r25, 5
     9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <uart_sendStream+0x12>
	UDR2=ch;
     9ae:	c0 93 d6 00 	sts	0x00D6, r28
	return 0;
}
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <uart_receiveStream>:

int uart_receiveStream(FILE *stream)
{
     9ba:	cf 93       	push	r28
     9bc:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR2A & (1<<RXC2)));
     9be:	e0 ed       	ldi	r30, 0xD0	; 208
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	88 23       	and	r24, r24
     9c6:	ec f7       	brge	.-6      	; 0x9c2 <uart_receiveStream+0x8>
	ch=UDR2;
     9c8:	c0 91 d6 00 	lds	r28, 0x00D6

	/* Echo the Output Back to terminal */
	uart_sendStream(ch,stream);
     9cc:	8c 2f       	mov	r24, r28
     9ce:	0e 94 cb 04 	call	0x996	; 0x996 <uart_sendStream>

	return ch;
}
     9d2:	8c 2f       	mov	r24, r28
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     9da:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     9de:	83 e3       	ldi	r24, 0x33	; 51
     9e0:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     9e4:	88 e1       	ldi	r24, 0x18	; 24
     9e6:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     9ea:	86 e0       	ldi	r24, 0x06	; 6
     9ec:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     9f0:	8c e3       	ldi	r24, 0x3C	; 60
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	90 93 32 03 	sts	0x0332, r25
     9f8:	80 93 31 03 	sts	0x0331, r24
     9fc:	90 93 34 03 	sts	0x0334, r25
     a00:	80 93 33 03 	sts	0x0333, r24
     a04:	08 95       	ret

00000a06 <getRAMStatus>:
}

int getRAMStatus()
{
	//Enable RAM CS
	RAM_PORT &= ~(1<<RAM_CS);
     a06:	a3 98       	cbi	0x14, 3	; 20
	SPDR = RDSR;
     a08:	85 e0       	ldi	r24, 0x05	; 5
     a0a:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a0c:	0d b4       	in	r0, 0x2d	; 45
     a0e:	07 fe       	sbrs	r0, 7
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <getRAMStatus+0x6>
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     a12:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a14:	0d b4       	in	r0, 0x2d	; 45
     a16:	07 fe       	sbrs	r0, 7
     a18:	fd cf       	rjmp	.-6      	; 0xa14 <getRAMStatus+0xe>
	//Disable RAM CS
	RAM_PORT |= (1<<RAM_CS);
     a1a:	a3 9a       	sbi	0x14, 3	; 20
	return(SPDR);
     a1c:	8e b5       	in	r24, 0x2e	; 46
}
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	08 95       	ret

00000a22 <setRAMStatus>:

void setRAMStatus(char mode)
{
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     a22:	a3 98       	cbi	0x14, 3	; 20
	SPDR = WRSR;
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a28:	0d b4       	in	r0, 0x2d	; 45
     a2a:	07 fe       	sbrs	r0, 7
     a2c:	fd cf       	rjmp	.-6      	; 0xa28 <setRAMStatus+0x6>
	// Start Data transmission
	SPDR = mode;
     a2e:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a30:	0d b4       	in	r0, 0x2d	; 45
     a32:	07 fe       	sbrs	r0, 7
     a34:	fd cf       	rjmp	.-6      	; 0xa30 <setRAMStatus+0xe>
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
     a36:	a3 9a       	sbi	0x14, 3	; 20
     a38:	08 95       	ret

00000a3a <SPI_WriteAddress>:
}

void SPI_WriteAddress(uint32_t address)
{
     a3a:	26 2f       	mov	r18, r22
     a3c:	97 2f       	mov	r25, r23
     a3e:	48 2f       	mov	r20, r24
	SPDR = WRITE;
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a44:	0d b4       	in	r0, 0x2d	; 45
     a46:	07 fe       	sbrs	r0, 7
     a48:	fd cf       	rjmp	.-6      	; 0xa44 <SPI_WriteAddress+0xa>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (address & 0xFF0000) >> 16;
     a4a:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a4c:	0d b4       	in	r0, 0x2d	; 45
     a4e:	07 fe       	sbrs	r0, 7
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <SPI_WriteAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     a52:	89 2f       	mov	r24, r25
     a54:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a56:	0d b4       	in	r0, 0x2d	; 45
     a58:	07 fe       	sbrs	r0, 7
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <SPI_WriteAddress+0x1c>
	SPDR = (address & 0x0000FF);
     a5c:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a5e:	0d b4       	in	r0, 0x2d	; 45
     a60:	07 fe       	sbrs	r0, 7
     a62:	fd cf       	rjmp	.-6      	; 0xa5e <SPI_WriteAddress+0x24>
}
     a64:	08 95       	ret

00000a66 <SPI_WriteData>:

void SPI_WriteData(char data)
{
	// Start Data transmission
	SPDR = data;
     a66:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a68:	0d b4       	in	r0, 0x2d	; 45
     a6a:	07 fe       	sbrs	r0, 7
     a6c:	fd cf       	rjmp	.-6      	; 0xa68 <SPI_WriteData+0x2>
}
     a6e:	08 95       	ret

00000a70 <SPI_ReadAddress>:

void SPI_ReadAddress(uint32_t address)
{
     a70:	26 2f       	mov	r18, r22
     a72:	97 2f       	mov	r25, r23
     a74:	48 2f       	mov	r20, r24
	SPDR = READ;
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a7a:	0d b4       	in	r0, 0x2d	; 45
     a7c:	07 fe       	sbrs	r0, 7
     a7e:	fd cf       	rjmp	.-6      	; 0xa7a <SPI_ReadAddress+0xa>
	SPDR = (address & 0xFF0000) >> 16;
     a80:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a82:	0d b4       	in	r0, 0x2d	; 45
     a84:	07 fe       	sbrs	r0, 7
     a86:	fd cf       	rjmp	.-6      	; 0xa82 <SPI_ReadAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     a88:	89 2f       	mov	r24, r25
     a8a:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a8c:	0d b4       	in	r0, 0x2d	; 45
     a8e:	07 fe       	sbrs	r0, 7
     a90:	fd cf       	rjmp	.-6      	; 0xa8c <SPI_ReadAddress+0x1c>
	SPDR = (address & 0x0000FF);
     a92:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a94:	0d b4       	in	r0, 0x2d	; 45
     a96:	07 fe       	sbrs	r0, 7
     a98:	fd cf       	rjmp	.-6      	; 0xa94 <SPI_ReadAddress+0x24>
}
     a9a:	08 95       	ret

00000a9c <SPI_ReadData>:

char SPI_ReadData()
{
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     a9c:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <SPI_ReadData+0x2>
	return(SPDR);
     aa4:	8e b5       	in	r24, 0x2e	; 46
}
     aa6:	08 95       	ret

00000aa8 <RAMWrite>:

uint16_t RAMWrite(char* data, uint16_t startAddress, uint16_t length)
{
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
     abe:	8b 01       	movw	r16, r22
     ac0:	5a 01       	movw	r10, r20
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     ac2:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     ac4:	6b 01       	movw	r12, r22
     ac6:	e1 2c       	mov	r14, r1
     ac8:	f1 2c       	mov	r15, r1
     aca:	c7 01       	movw	r24, r14
     acc:	b6 01       	movw	r22, r12
     ace:	0e 94 1d 05 	call	0xa3a	; 0xa3a <SPI_WriteAddress>
	SPI_WriteData(0x00);
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 33 05 	call	0xa66	; 0xa66 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     ad8:	a3 9a       	sbi	0x14, 3	; 20
	setRAMStatus(SEQ);
     ada:	80 e4       	ldi	r24, 0x40	; 64
     adc:	0e 94 11 05 	call	0xa22	; 0xa22 <setRAMStatus>
	getRAMStatus();
     ae0:	0e 94 03 05 	call	0xa06	; 0xa06 <getRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     ae4:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     ae6:	c7 01       	movw	r24, r14
     ae8:	b6 01       	movw	r22, r12
     aea:	0e 94 1d 05 	call	0xa3a	; 0xa3a <SPI_WriteAddress>
	for(int i = 0; i < length; i++)
     aee:	a1 14       	cp	r10, r1
     af0:	b1 04       	cpc	r11, r1
     af2:	91 f0       	breq	.+36     	; 0xb18 <RAMWrite+0x70>
     af4:	65 01       	movw	r12, r10
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	e1 2c       	mov	r14, r1
     afc:	f1 2c       	mov	r15, r1
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
     afe:	fe 01       	movw	r30, r28
     b00:	e8 0f       	add	r30, r24
     b02:	f9 1f       	adc	r31, r25
     b04:	80 81       	ld	r24, Z
     b06:	0e 94 33 05 	call	0xa66	; 0xa66 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
	setRAMStatus(SEQ);
	getRAMStatus();
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_WriteAddress(startAddress);
	for(int i = 0; i < length; i++)
     b0a:	8f ef       	ldi	r24, 0xFF	; 255
     b0c:	e8 1a       	sub	r14, r24
     b0e:	f8 0a       	sbc	r15, r24
     b10:	c7 01       	movw	r24, r14
     b12:	ec 14       	cp	r14, r12
     b14:	fd 04       	cpc	r15, r13
     b16:	99 f7       	brne	.-26     	; 0xafe <RAMWrite+0x56>
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
	}
	RAM_PORT |= (1<<RAM_CS);
     b18:	a3 9a       	sbi	0x14, 3	; 20
		

	return startAddress; 
}
     b1a:	c8 01       	movw	r24, r16
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	df 90       	pop	r13
     b2a:	cf 90       	pop	r12
     b2c:	bf 90       	pop	r11
     b2e:	af 90       	pop	r10
     b30:	08 95       	ret

00000b32 <RAMPrint>:
	//printf("%d\n", buffer);
	return buffer; 
}

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	c6 2f       	mov	r28, r22
     b40:	d7 2f       	mov	r29, r23
     b42:	18 2f       	mov	r17, r24
     b44:	09 2f       	mov	r16, r25
     b46:	7a 01       	movw	r14, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     b48:	80 e4       	ldi	r24, 0x40	; 64
     b4a:	0e 94 11 05 	call	0xa22	; 0xa22 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     b4e:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     b50:	6c 2f       	mov	r22, r28
     b52:	7d 2f       	mov	r23, r29
     b54:	81 2f       	mov	r24, r17
     b56:	90 2f       	mov	r25, r16
     b58:	0e 94 38 05 	call	0xa70	; 0xa70 <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	80 ec       	ldi	r24, 0xC0	; 192
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
	int i; 
	for(i=0; i<length; i++)
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	e1 14       	cp	r14, r1
     b7e:	f1 04       	cpc	r15, r1
     b80:	a9 f0       	breq	.+42     	; 0xbac <RAMPrint+0x7a>
     b82:	c0 e0       	ldi	r28, 0x00	; 0
     b84:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("0x%02X ", SPI_ReadData());
     b86:	0f e4       	ldi	r16, 0x4F	; 79
     b88:	12 e0       	ldi	r17, 0x02	; 2
     b8a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <SPI_ReadData>
     b8e:	1f 92       	push	r1
     b90:	8f 93       	push	r24
     b92:	1f 93       	push	r17
     b94:	0f 93       	push	r16
     b96:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     b9a:	21 96       	adiw	r28, 0x01	; 1
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	ce 15       	cp	r28, r14
     ba6:	df 05       	cpc	r29, r15
     ba8:	81 f7       	brne	.-32     	; 0xb8a <RAMPrint+0x58>
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <RAMPrint+0x7e>
     bac:	e1 2c       	mov	r14, r1
     bae:	f1 2c       	mov	r15, r1
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     bb0:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     bb2:	ff 92       	push	r15
     bb4:	ef 92       	push	r14
     bb6:	81 ed       	ldi	r24, 0xD1	; 209
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	9f 93       	push	r25
     bbc:	8f 93       	push	r24
     bbe:	0e 94 70 07 	call	0xee0	; 0xee0 <printf>
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	08 95       	ret

00000bd8 <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
     bd8:	cf 93       	push	r28
     bda:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     bdc:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     bde:	cb 01       	movw	r24, r22
     be0:	ba 01       	movw	r22, r20
     be2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <SPI_WriteAddress>
	SPI_WriteData(data);
     be6:	8c 2f       	mov	r24, r28
     be8:	0e 94 33 05 	call	0xa66	; 0xa66 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     bec:	a3 9a       	sbi	0x14, 3	; 20
}
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
     bf2:	87 e0       	ldi	r24, 0x07	; 7
     bf4:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     bf6:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     bf8:	a3 9a       	sbi	0x14, 3	; 20
	
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     bfa:	81 e5       	ldi	r24, 0x51	; 81
     bfc:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	ba 01       	movw	r22, r20
     c04:	82 e3       	ldi	r24, 0x32	; 50
     c06:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <RAMWriteByte>
     c0a:	08 95       	ret

00000c0c <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint32_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     c0c:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     c0e:	0e 94 38 05 	call	0xa70	; 0xa70 <SPI_ReadAddress>
	char data = SPI_ReadData();
     c12:	0e 94 4e 05 	call	0xa9c	; 0xa9c <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     c16:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     c18:	08 95       	ret

00000c1a <SPI_Switching_Circuitry_Init>:


void SPI_Switching_Circuitry_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1<<SS));
     c1a:	84 b1       	in	r24, 0x04	; 4
     c1c:	87 60       	ori	r24, 0x07	; 7
     c1e:	84 b9       	out	0x04, r24	; 4
	
	// Enable SPI, Master Mode 0, set the clock rate fck/64
	SPCR = ((1<<SPE)|(1<<MSTR)|(1<<SPR1));
     c20:	82 e5       	ldi	r24, 0x52	; 82
     c22:	8c bd       	out	0x2c, r24	; 44
	
	SR_CNTRL_DDR |= ((1<<SR_RESET) | (1<<MAXCS) | (1<<SROE));
     c24:	e4 e0       	ldi	r30, 0x04	; 4
     c26:	f1 e0       	ldi	r31, 0x01	; 1
     c28:	80 81       	ld	r24, Z
     c2a:	88 63       	ori	r24, 0x38	; 56
     c2c:	80 83       	st	Z, r24
	SRCS_DDR |= (1<<SRCS);
     c2e:	27 9a       	sbi	0x04, 7	; 4
	SRCS_PORT &= ~(1<<SRCS);
     c30:	2f 98       	cbi	0x05, 7	; 5
	SR_CNTRL_PORT |= ((1<<MAXCS) | (1<<SROE));
     c32:	e5 e0       	ldi	r30, 0x05	; 5
     c34:	f1 e0       	ldi	r31, 0x01	; 1
     c36:	80 81       	ld	r24, Z
     c38:	88 61       	ori	r24, 0x18	; 24
     c3a:	80 83       	st	Z, r24
	SR_CNTRL_PORT &= ~(1<<SR_RESET);
     c3c:	80 81       	ld	r24, Z
     c3e:	8f 7d       	andi	r24, 0xDF	; 223
     c40:	80 83       	st	Z, r24
     c42:	08 95       	ret

00000c44 <SPI_Switching_Circuitry_Write>:
}

void SPI_Switching_Circuitry_Write(unsigned char SPI_Data)
{
	// Start Write transmission
	SPDR = SPI_Data;
     c44:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     c46:	0d b4       	in	r0, 0x2d	; 45
     c48:	07 fe       	sbrs	r0, 7
     c4a:	fd cf       	rjmp	.-6      	; 0xc46 <SPI_Switching_Circuitry_Write+0x2>
}
     c4c:	08 95       	ret

00000c4e <SwitchingCircuitryEnable>:

void SwitchingCircuitryEnable()
{
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
     c4e:	e5 e0       	ldi	r30, 0x05	; 5
     c50:	f1 e0       	ldi	r31, 0x01	; 1
     c52:	80 81       	ld	r24, Z
     c54:	8f 7d       	andi	r24, 0xDF	; 223
     c56:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c58:	82 e4       	ldi	r24, 0x42	; 66
     c5a:	8a 95       	dec	r24
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <SwitchingCircuitryEnable+0xc>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <SwitchingCircuitryEnable+0x12>
	_delay_us(25);
	SR_CNTRL_PORT |= (1<<SR_RESET);
     c60:	80 81       	ld	r24, Z
     c62:	80 62       	ori	r24, 0x20	; 32
     c64:	80 83       	st	Z, r24
	
	SRCS_PORT |= (1<<SRCS);
     c66:	2f 9a       	sbi	0x05, 7	; 5
     c68:	85 e3       	ldi	r24, 0x35	; 53
     c6a:	8a 95       	dec	r24
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <SwitchingCircuitryEnable+0x1c>
     c6e:	00 00       	nop
	_delay_us(20);
	SRCS_PORT &= ~(1<<SRCS);
     c70:	2f 98       	cbi	0x05, 7	; 5
	
	SR_CNTRL_PORT &= ~(1<<SROE);
     c72:	80 81       	ld	r24, Z
     c74:	87 7f       	andi	r24, 0xF7	; 247
     c76:	80 83       	st	Z, r24
     c78:	08 95       	ret

00000c7a <SetShiftRegData>:
	}
}


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
     c7a:	db 01       	movw	r26, r22
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
	{
		ShiftRegData[pinType][i] = *(data + i); 
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	fc 01       	movw	r30, r24
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	e8 0f       	add	r30, r24
     c8a:	f9 1f       	adc	r31, r25
     c8c:	ed 5e       	subi	r30, 0xED	; 237
     c8e:	fc 4f       	sbci	r31, 0xFC	; 252


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
	{
		ShiftRegData[pinType][i] = *(data + i); 
     c94:	2d 91       	ld	r18, X+
     c96:	21 93       	st	Z+, r18


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	85 30       	cpi	r24, 0x05	; 5
     c9c:	91 05       	cpc	r25, r1
     c9e:	d1 f7       	brne	.-12     	; 0xc94 <SetShiftRegData+0x1a>
	{
		ShiftRegData[pinType][i] = *(data + i); 
	}
}
     ca0:	08 95       	ret

00000ca2 <WriteShiftRegData>:

void WriteShiftRegData()
{
     ca2:	af 92       	push	r10
     ca4:	bf 92       	push	r11
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
	SwitchingCircuitryEnable(); 
     cb6:	0e 94 27 06 	call	0xc4e	; 0xc4e <SwitchingCircuitryEnable>
	
	SR_CNTRL_PORT &= ~(1<<MAXCS);
     cba:	e5 e0       	ldi	r30, 0x05	; 5
     cbc:	f1 e0       	ldi	r31, 0x01	; 1
     cbe:	80 81       	ld	r24, Z
     cc0:	8f 7e       	andi	r24, 0xEF	; 239
     cc2:	80 83       	st	Z, r24
     cc4:	c3 e1       	ldi	r28, 0x13	; 19
     cc6:	d3 e0       	ldi	r29, 0x03	; 3
     cc8:	08 e1       	ldi	r16, 0x18	; 24
     cca:	13 e0       	ldi	r17, 0x03	; 3
	int i = 0; 
	for(int j=0; j<SOCKET_SIZE/8; j++)
	{
		SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
     ccc:	89 91       	ld	r24, Y+
     cce:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_Switching_Circuitry_Write>
{
	SwitchingCircuitryEnable(); 
	
	SR_CNTRL_PORT &= ~(1<<MAXCS);
	int i = 0; 
	for(int j=0; j<SOCKET_SIZE/8; j++)
     cd2:	c0 17       	cp	r28, r16
     cd4:	d1 07       	cpc	r29, r17
     cd6:	d1 f7       	brne	.-12     	; 0xccc <WriteShiftRegData+0x2a>
	{
		SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
	}
	SR_CNTRL_PORT |= (1<<MAXCS);
     cd8:	e5 e0       	ldi	r30, 0x05	; 5
     cda:	f1 e0       	ldi	r31, 0x01	; 1
     cdc:	80 81       	ld	r24, Z
     cde:	80 61       	ori	r24, 0x10	; 16
     ce0:	80 83       	st	Z, r24
     ce2:	0f 2e       	mov	r0, r31
     ce4:	f8 e1       	ldi	r31, 0x18	; 24
     ce6:	ef 2e       	mov	r14, r31
     ce8:	f3 e0       	ldi	r31, 0x03	; 3
     cea:	ff 2e       	mov	r15, r31
     cec:	f0 2d       	mov	r31, r0
     cee:	0f 2e       	mov	r0, r31
     cf0:	f1 e3       	ldi	r31, 0x31	; 49
     cf2:	cf 2e       	mov	r12, r31
     cf4:	f3 e0       	ldi	r31, 0x03	; 3
     cf6:	df 2e       	mov	r13, r31
     cf8:	f0 2d       	mov	r31, r0
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     cfa:	a1 2c       	mov	r10, r1
     cfc:	b1 2c       	mov	r11, r1
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <WriteShiftRegData+0x7c>
	
	for(i=1; i<PIN_TYPES; i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
     d00:	f8 01       	movw	r30, r16
     d02:	81 91       	ld	r24, Z+
     d04:	8f 01       	movw	r16, r30
     d06:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_Switching_Circuitry_Write>
	SR_CNTRL_PORT |= (1<<MAXCS);
	
	
	for(i=1; i<PIN_TYPES; i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
     d0a:	21 96       	adiw	r28, 0x01	; 1
     d0c:	c5 30       	cpi	r28, 0x05	; 5
     d0e:	d1 05       	cpc	r29, r1
     d10:	b9 f7       	brne	.-18     	; 0xd00 <WriteShiftRegData+0x5e>
     d12:	f5 e0       	ldi	r31, 0x05	; 5
     d14:	ef 0e       	add	r14, r31
     d16:	f1 1c       	adc	r15, r1
		SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
	}
	SR_CNTRL_PORT |= (1<<MAXCS);
	
	
	for(i=1; i<PIN_TYPES; i++)
     d18:	ec 14       	cp	r14, r12
     d1a:	fd 04       	cpc	r15, r13
     d1c:	21 f0       	breq	.+8      	; 0xd26 <WriteShiftRegData+0x84>
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     d1e:	87 01       	movw	r16, r14
     d20:	ca 2d       	mov	r28, r10
     d22:	db 2d       	mov	r29, r11
     d24:	ed cf       	rjmp	.-38     	; 0xd00 <WriteShiftRegData+0x5e>
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
		}
	}
	SRCS_PORT |= (1<<SRCS);
     d26:	2f 9a       	sbi	0x05, 7	; 5
     d28:	f5 e3       	ldi	r31, 0x35	; 53
     d2a:	fa 95       	dec	r31
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <WriteShiftRegData+0x88>
     d2e:	00 00       	nop
	_delay_us(20);
	SRCS_PORT &= ~(1<<SRCS);
     d30:	2f 98       	cbi	0x05, 7	; 5
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	08 95       	ret

00000d48 <setAtTiny2313>:

void setAtTiny2313()
{
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <setAtTiny2313+0x6>
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <setAtTiny2313+0x8>
     d50:	1f 92       	push	r1
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	char shiftTempBuff[5] = {0x00, 0x1F, 0xF7, 0xD0, 0x00};
     d56:	85 e0       	ldi	r24, 0x05	; 5
     d58:	ea e4       	ldi	r30, 0x4A	; 74
     d5a:	f2 e0       	ldi	r31, 0x02	; 2
     d5c:	de 01       	movw	r26, r28
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	01 90       	ld	r0, Z+
     d62:	0d 92       	st	X+, r0
     d64:	8a 95       	dec	r24
     d66:	e1 f7       	brne	.-8      	; 0xd60 <setAtTiny2313+0x18>
	SetShiftRegData(LOGIC, shiftTempBuff);
     d68:	be 01       	movw	r22, r28
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0e 94 3d 06 	call	0xc7a	; 0xc7a <SetShiftRegData>
	//Modify Values and shift again 
	shiftTempBuff[0] = 0x00;
     d74:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     d76:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00; //setting GND to ZIF19
     d78:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     d7a:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     d7c:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     d7e:	be 01       	movw	r22, r28
     d80:	6f 5f       	subi	r22, 0xFF	; 255
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	0e 94 3d 06 	call	0xc7a	; 0xc7a <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     d8a:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     d8c:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
     d8e:	88 e0       	ldi	r24, 0x08	; 8
     d90:	8b 83       	std	Y+3, r24	; 0x03
	shiftTempBuff[3] = 0x00;
     d92:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     d94:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     da2:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     da4:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     da6:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     da8:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     daa:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
     dac:	be 01       	movw	r22, r28
     dae:	6f 5f       	subi	r22, 0xFF	; 255
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	83 e0       	ldi	r24, 0x03	; 3
     db4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     db8:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
     dba:	80 e2       	ldi	r24, 0x20	; 32
     dbc:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
     dbe:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     dc0:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     dc2:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
     dc4:	be 01       	movw	r22, r28
     dc6:	6f 5f       	subi	r22, 0xFF	; 255
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	84 e0       	ldi	r24, 0x04	; 4
     dcc:	0e 94 3d 06 	call	0xc7a	; 0xc7a <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     dd0:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     dd2:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     dd4:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
     dd6:	84 e0       	ldi	r24, 0x04	; 4
     dd8:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     dda:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
     ddc:	be 01       	movw	r22, r28
     dde:	6f 5f       	subi	r22, 0xFF	; 255
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	85 e0       	ldi	r24, 0x05	; 5
     de4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <SetShiftRegData>
	
	WriteShiftRegData();
     de8:	0e 94 51 06 	call	0xca2	; 0xca2 <WriteShiftRegData>
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <voltageControlInit>:
	VCNTRL_PORT &= ~((1<<VPP_9V) | (1<<VPP_12V) | (1<VPP_13V));
}

void voltageControlInit()
{
	VCNTRL_DDR = 0xFF;
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	80 bb       	out	0x10, r24	; 16
	VCNTRL_PORT = 0x00;
     e00:	11 ba       	out	0x11, r1	; 17
	
	VEN_DDR |= ((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
     e02:	84 b1       	in	r24, 0x04	; 4
     e04:	80 67       	ori	r24, 0x70	; 112
     e06:	84 b9       	out	0x04, r24	; 4
	VEN_PORT &= ~((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
     e08:	85 b1       	in	r24, 0x05	; 5
     e0a:	8f 78       	andi	r24, 0x8F	; 143
     e0c:	85 b9       	out	0x05, r24	; 5
     e0e:	08 95       	ret

00000e10 <enableVppRegulator>:
}

void enableVppRegulator()
{
	VEN_PORT |= (1<<VPPENABLE); 
     e10:	2c 9a       	sbi	0x05, 4	; 5
     e12:	08 95       	ret

00000e14 <disableVppRegulator>:
}

void disableVppRegulator()
{
	VEN_PORT &= ~((1<<VPPENABLE));
     e14:	2c 98       	cbi	0x05, 4	; 5
     e16:	08 95       	ret

00000e18 <enableVccRegulator>:
	VCNTRL_PORT &= ~((1<<VCC_3_3V) | (1<<VCC_5V) | (1<<VCC_6_5V));
}

void enableVccRegulator() 
{
	VEN_PORT |= (1<<VCCENABLE);
     e18:	2d 9a       	sbi	0x05, 5	; 5
     e1a:	08 95       	ret

00000e1c <disableVccRegulator>:
}

void disableVccRegulator()
{
	VEN_PORT &= ~(1<<VCCENABLE);
     e1c:	2d 98       	cbi	0x05, 5	; 5
     e1e:	08 95       	ret

00000e20 <setVcc>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VCC_3_3V || VCC_5V || VCC_6_5V))
	//	return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     e20:	41 b3       	in	r20, 0x11	; 17
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	b9 01       	movw	r22, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <setVcc+0xe>
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	8a 95       	dec	r24
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <setVcc+0xa>
     e32:	cb 01       	movw	r24, r22
     e34:	84 2b       	or	r24, r20
     e36:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	08 95       	ret

00000e3c <setVpp>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VPP_9V || VPP_12V || VPP_13V))
		//return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     e3c:	41 b3       	in	r20, 0x11	; 17
     e3e:	21 e0       	ldi	r18, 0x01	; 1
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	b9 01       	movw	r22, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <setVpp+0xe>
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	8a 95       	dec	r24
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <setVpp+0xa>
     e4e:	cb 01       	movw	r24, r22
     e50:	84 2b       	or	r24, r20
     e52:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	08 95       	ret

00000e58 <enableVLogic>:
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
}

void enableVLogic()
{
	VEN_PORT |= (1<<VLENABLE);
     e58:	2e 9a       	sbi	0x05, 6	; 5
     e5a:	08 95       	ret

00000e5c <disableVLogic>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
     e5c:	2e 98       	cbi	0x05, 6	; 5
     e5e:	08 95       	ret

00000e60 <setVLogic>:
	//prevents accidental triggering of the wrong regulator
	//if(voltageLevel != (VL_3_3V || VL_5V))
	//	return 0;
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     e60:	41 b3       	in	r20, 0x11	; 17
     e62:	21 e0       	ldi	r18, 0x01	; 1
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	b9 01       	movw	r22, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <setVLogic+0xe>
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	8a 95       	dec	r24
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <setVLogic+0xa>
     e72:	cb 01       	movw	r24, r22
     e74:	84 2b       	or	r24, r20
     e76:	81 bb       	out	0x11, r24	; 17
		return 1;
	//}
}
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	08 95       	ret

00000e7c <fputc>:
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	18 2f       	mov	r17, r24
     e86:	09 2f       	mov	r16, r25
     e88:	eb 01       	movw	r28, r22
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	81 fd       	sbrc	r24, 1
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <fputc+0x1a>
     e90:	8f ef       	ldi	r24, 0xFF	; 255
     e92:	9f ef       	ldi	r25, 0xFF	; 255
     e94:	20 c0       	rjmp	.+64     	; 0xed6 <fputc+0x5a>
     e96:	82 ff       	sbrs	r24, 2
     e98:	10 c0       	rjmp	.+32     	; 0xeba <fputc+0x3e>
     e9a:	4e 81       	ldd	r20, Y+6	; 0x06
     e9c:	5f 81       	ldd	r21, Y+7	; 0x07
     e9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ea0:	3d 81       	ldd	r19, Y+5	; 0x05
     ea2:	42 17       	cp	r20, r18
     ea4:	53 07       	cpc	r21, r19
     ea6:	7c f4       	brge	.+30     	; 0xec6 <fputc+0x4a>
     ea8:	e8 81       	ld	r30, Y
     eaa:	f9 81       	ldd	r31, Y+1	; 0x01
     eac:	9f 01       	movw	r18, r30
     eae:	2f 5f       	subi	r18, 0xFF	; 255
     eb0:	3f 4f       	sbci	r19, 0xFF	; 255
     eb2:	39 83       	std	Y+1, r19	; 0x01
     eb4:	28 83       	st	Y, r18
     eb6:	10 83       	st	Z, r17
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <fputc+0x4a>
     eba:	e8 85       	ldd	r30, Y+8	; 0x08
     ebc:	f9 85       	ldd	r31, Y+9	; 0x09
     ebe:	81 2f       	mov	r24, r17
     ec0:	09 95       	icall
     ec2:	89 2b       	or	r24, r25
     ec4:	29 f7       	brne	.-54     	; 0xe90 <fputc+0x14>
     ec6:	2e 81       	ldd	r18, Y+6	; 0x06
     ec8:	3f 81       	ldd	r19, Y+7	; 0x07
     eca:	2f 5f       	subi	r18, 0xFF	; 255
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
     ece:	3f 83       	std	Y+7, r19	; 0x07
     ed0:	2e 83       	std	Y+6, r18	; 0x06
     ed2:	81 2f       	mov	r24, r17
     ed4:	90 2f       	mov	r25, r16
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	08 95       	ret

00000ee0 <printf>:
     ee0:	a0 e0       	ldi	r26, 0x00	; 0
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e6 e7       	ldi	r30, 0x76	; 118
     ee6:	f7 e0       	ldi	r31, 0x07	; 7
     ee8:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__prologue_saves__+0x20>
     eec:	fe 01       	movw	r30, r28
     eee:	35 96       	adiw	r30, 0x05	; 5
     ef0:	61 91       	ld	r22, Z+
     ef2:	71 91       	ld	r23, Z+
     ef4:	af 01       	movw	r20, r30
     ef6:	80 91 33 03 	lds	r24, 0x0333
     efa:	90 91 34 03 	lds	r25, 0x0334
     efe:	0e 94 b8 07 	call	0xf70	; 0xf70 <vfprintf>
     f02:	e2 e0       	ldi	r30, 0x02	; 2
     f04:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__epilogue_restores__+0x20>

00000f08 <putchar>:
     f08:	60 91 33 03 	lds	r22, 0x0333
     f0c:	70 91 34 03 	lds	r23, 0x0334
     f10:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     f14:	08 95       	ret

00000f16 <puts>:
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	e0 91 33 03 	lds	r30, 0x0333
     f22:	f0 91 34 03 	lds	r31, 0x0334
     f26:	23 81       	ldd	r18, Z+3	; 0x03
     f28:	21 ff       	sbrs	r18, 1
     f2a:	1b c0       	rjmp	.+54     	; 0xf62 <puts+0x4c>
     f2c:	ec 01       	movw	r28, r24
     f2e:	00 e0       	ldi	r16, 0x00	; 0
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	89 91       	ld	r24, Y+
     f34:	60 91 33 03 	lds	r22, 0x0333
     f38:	70 91 34 03 	lds	r23, 0x0334
     f3c:	db 01       	movw	r26, r22
     f3e:	18 96       	adiw	r26, 0x08	; 8
     f40:	ed 91       	ld	r30, X+
     f42:	fc 91       	ld	r31, X
     f44:	19 97       	sbiw	r26, 0x09	; 9
     f46:	88 23       	and	r24, r24
     f48:	31 f0       	breq	.+12     	; 0xf56 <puts+0x40>
     f4a:	09 95       	icall
     f4c:	89 2b       	or	r24, r25
     f4e:	89 f3       	breq	.-30     	; 0xf32 <puts+0x1c>
     f50:	0f ef       	ldi	r16, 0xFF	; 255
     f52:	1f ef       	ldi	r17, 0xFF	; 255
     f54:	ee cf       	rjmp	.-36     	; 0xf32 <puts+0x1c>
     f56:	8a e0       	ldi	r24, 0x0A	; 10
     f58:	09 95       	icall
     f5a:	89 2b       	or	r24, r25
     f5c:	11 f4       	brne	.+4      	; 0xf62 <puts+0x4c>
     f5e:	c8 01       	movw	r24, r16
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <puts+0x50>
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	9f ef       	ldi	r25, 0xFF	; 255
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	08 95       	ret

00000f70 <vfprintf>:
     f70:	ac e0       	ldi	r26, 0x0C	; 12
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ee eb       	ldi	r30, 0xBE	; 190
     f76:	f7 e0       	ldi	r31, 0x07	; 7
     f78:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__prologue_saves__>
     f7c:	7c 01       	movw	r14, r24
     f7e:	6b 01       	movw	r12, r22
     f80:	8a 01       	movw	r16, r20
     f82:	fc 01       	movw	r30, r24
     f84:	17 82       	std	Z+7, r1	; 0x07
     f86:	16 82       	std	Z+6, r1	; 0x06
     f88:	83 81       	ldd	r24, Z+3	; 0x03
     f8a:	81 ff       	sbrs	r24, 1
     f8c:	bd c1       	rjmp	.+890    	; 0x1308 <vfprintf+0x398>
     f8e:	ce 01       	movw	r24, r28
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	4c 01       	movw	r8, r24
     f94:	f7 01       	movw	r30, r14
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	f6 01       	movw	r30, r12
     f9a:	93 fd       	sbrc	r25, 3
     f9c:	85 91       	lpm	r24, Z+
     f9e:	93 ff       	sbrs	r25, 3
     fa0:	81 91       	ld	r24, Z+
     fa2:	6f 01       	movw	r12, r30
     fa4:	88 23       	and	r24, r24
     fa6:	09 f4       	brne	.+2      	; 0xfaa <vfprintf+0x3a>
     fa8:	ab c1       	rjmp	.+854    	; 0x1300 <vfprintf+0x390>
     faa:	85 32       	cpi	r24, 0x25	; 37
     fac:	39 f4       	brne	.+14     	; 0xfbc <vfprintf+0x4c>
     fae:	93 fd       	sbrc	r25, 3
     fb0:	85 91       	lpm	r24, Z+
     fb2:	93 ff       	sbrs	r25, 3
     fb4:	81 91       	ld	r24, Z+
     fb6:	6f 01       	movw	r12, r30
     fb8:	85 32       	cpi	r24, 0x25	; 37
     fba:	29 f4       	brne	.+10     	; 0xfc6 <vfprintf+0x56>
     fbc:	b7 01       	movw	r22, r14
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     fc4:	e7 cf       	rjmp	.-50     	; 0xf94 <vfprintf+0x24>
     fc6:	51 2c       	mov	r5, r1
     fc8:	31 2c       	mov	r3, r1
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	20 32       	cpi	r18, 0x20	; 32
     fce:	a0 f4       	brcc	.+40     	; 0xff8 <vfprintf+0x88>
     fd0:	8b 32       	cpi	r24, 0x2B	; 43
     fd2:	69 f0       	breq	.+26     	; 0xfee <vfprintf+0x7e>
     fd4:	30 f4       	brcc	.+12     	; 0xfe2 <vfprintf+0x72>
     fd6:	80 32       	cpi	r24, 0x20	; 32
     fd8:	59 f0       	breq	.+22     	; 0xff0 <vfprintf+0x80>
     fda:	83 32       	cpi	r24, 0x23	; 35
     fdc:	69 f4       	brne	.+26     	; 0xff8 <vfprintf+0x88>
     fde:	20 61       	ori	r18, 0x10	; 16
     fe0:	2c c0       	rjmp	.+88     	; 0x103a <vfprintf+0xca>
     fe2:	8d 32       	cpi	r24, 0x2D	; 45
     fe4:	39 f0       	breq	.+14     	; 0xff4 <vfprintf+0x84>
     fe6:	80 33       	cpi	r24, 0x30	; 48
     fe8:	39 f4       	brne	.+14     	; 0xff8 <vfprintf+0x88>
     fea:	21 60       	ori	r18, 0x01	; 1
     fec:	26 c0       	rjmp	.+76     	; 0x103a <vfprintf+0xca>
     fee:	22 60       	ori	r18, 0x02	; 2
     ff0:	24 60       	ori	r18, 0x04	; 4
     ff2:	23 c0       	rjmp	.+70     	; 0x103a <vfprintf+0xca>
     ff4:	28 60       	ori	r18, 0x08	; 8
     ff6:	21 c0       	rjmp	.+66     	; 0x103a <vfprintf+0xca>
     ff8:	27 fd       	sbrc	r18, 7
     ffa:	27 c0       	rjmp	.+78     	; 0x104a <vfprintf+0xda>
     ffc:	30 ed       	ldi	r19, 0xD0	; 208
     ffe:	38 0f       	add	r19, r24
    1000:	3a 30       	cpi	r19, 0x0A	; 10
    1002:	78 f4       	brcc	.+30     	; 0x1022 <vfprintf+0xb2>
    1004:	26 ff       	sbrs	r18, 6
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <vfprintf+0xa4>
    1008:	fa e0       	ldi	r31, 0x0A	; 10
    100a:	5f 9e       	mul	r5, r31
    100c:	30 0d       	add	r19, r0
    100e:	11 24       	eor	r1, r1
    1010:	53 2e       	mov	r5, r19
    1012:	13 c0       	rjmp	.+38     	; 0x103a <vfprintf+0xca>
    1014:	8a e0       	ldi	r24, 0x0A	; 10
    1016:	38 9e       	mul	r3, r24
    1018:	30 0d       	add	r19, r0
    101a:	11 24       	eor	r1, r1
    101c:	33 2e       	mov	r3, r19
    101e:	20 62       	ori	r18, 0x20	; 32
    1020:	0c c0       	rjmp	.+24     	; 0x103a <vfprintf+0xca>
    1022:	8e 32       	cpi	r24, 0x2E	; 46
    1024:	21 f4       	brne	.+8      	; 0x102e <vfprintf+0xbe>
    1026:	26 fd       	sbrc	r18, 6
    1028:	6b c1       	rjmp	.+726    	; 0x1300 <vfprintf+0x390>
    102a:	20 64       	ori	r18, 0x40	; 64
    102c:	06 c0       	rjmp	.+12     	; 0x103a <vfprintf+0xca>
    102e:	8c 36       	cpi	r24, 0x6C	; 108
    1030:	11 f4       	brne	.+4      	; 0x1036 <vfprintf+0xc6>
    1032:	20 68       	ori	r18, 0x80	; 128
    1034:	02 c0       	rjmp	.+4      	; 0x103a <vfprintf+0xca>
    1036:	88 36       	cpi	r24, 0x68	; 104
    1038:	41 f4       	brne	.+16     	; 0x104a <vfprintf+0xda>
    103a:	f6 01       	movw	r30, r12
    103c:	93 fd       	sbrc	r25, 3
    103e:	85 91       	lpm	r24, Z+
    1040:	93 ff       	sbrs	r25, 3
    1042:	81 91       	ld	r24, Z+
    1044:	6f 01       	movw	r12, r30
    1046:	81 11       	cpse	r24, r1
    1048:	c1 cf       	rjmp	.-126    	; 0xfcc <vfprintf+0x5c>
    104a:	98 2f       	mov	r25, r24
    104c:	9f 7d       	andi	r25, 0xDF	; 223
    104e:	95 54       	subi	r25, 0x45	; 69
    1050:	93 30       	cpi	r25, 0x03	; 3
    1052:	28 f4       	brcc	.+10     	; 0x105e <vfprintf+0xee>
    1054:	0c 5f       	subi	r16, 0xFC	; 252
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	ff e3       	ldi	r31, 0x3F	; 63
    105a:	f9 83       	std	Y+1, r31	; 0x01
    105c:	0d c0       	rjmp	.+26     	; 0x1078 <vfprintf+0x108>
    105e:	83 36       	cpi	r24, 0x63	; 99
    1060:	31 f0       	breq	.+12     	; 0x106e <vfprintf+0xfe>
    1062:	83 37       	cpi	r24, 0x73	; 115
    1064:	71 f0       	breq	.+28     	; 0x1082 <vfprintf+0x112>
    1066:	83 35       	cpi	r24, 0x53	; 83
    1068:	09 f0       	breq	.+2      	; 0x106c <vfprintf+0xfc>
    106a:	5b c0       	rjmp	.+182    	; 0x1122 <vfprintf+0x1b2>
    106c:	22 c0       	rjmp	.+68     	; 0x10b2 <vfprintf+0x142>
    106e:	f8 01       	movw	r30, r16
    1070:	80 81       	ld	r24, Z
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	0e 5f       	subi	r16, 0xFE	; 254
    1076:	1f 4f       	sbci	r17, 0xFF	; 255
    1078:	44 24       	eor	r4, r4
    107a:	43 94       	inc	r4
    107c:	51 2c       	mov	r5, r1
    107e:	54 01       	movw	r10, r8
    1080:	15 c0       	rjmp	.+42     	; 0x10ac <vfprintf+0x13c>
    1082:	38 01       	movw	r6, r16
    1084:	f2 e0       	ldi	r31, 0x02	; 2
    1086:	6f 0e       	add	r6, r31
    1088:	71 1c       	adc	r7, r1
    108a:	f8 01       	movw	r30, r16
    108c:	a0 80       	ld	r10, Z
    108e:	b1 80       	ldd	r11, Z+1	; 0x01
    1090:	26 ff       	sbrs	r18, 6
    1092:	03 c0       	rjmp	.+6      	; 0x109a <vfprintf+0x12a>
    1094:	65 2d       	mov	r22, r5
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	02 c0       	rjmp	.+4      	; 0x109e <vfprintf+0x12e>
    109a:	6f ef       	ldi	r22, 0xFF	; 255
    109c:	7f ef       	ldi	r23, 0xFF	; 255
    109e:	c5 01       	movw	r24, r10
    10a0:	2c 87       	std	Y+12, r18	; 0x0c
    10a2:	0e 94 95 09 	call	0x132a	; 0x132a <strnlen>
    10a6:	2c 01       	movw	r4, r24
    10a8:	83 01       	movw	r16, r6
    10aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ac:	2f 77       	andi	r18, 0x7F	; 127
    10ae:	22 2e       	mov	r2, r18
    10b0:	17 c0       	rjmp	.+46     	; 0x10e0 <vfprintf+0x170>
    10b2:	38 01       	movw	r6, r16
    10b4:	f2 e0       	ldi	r31, 0x02	; 2
    10b6:	6f 0e       	add	r6, r31
    10b8:	71 1c       	adc	r7, r1
    10ba:	f8 01       	movw	r30, r16
    10bc:	a0 80       	ld	r10, Z
    10be:	b1 80       	ldd	r11, Z+1	; 0x01
    10c0:	26 ff       	sbrs	r18, 6
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <vfprintf+0x15a>
    10c4:	65 2d       	mov	r22, r5
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <vfprintf+0x15e>
    10ca:	6f ef       	ldi	r22, 0xFF	; 255
    10cc:	7f ef       	ldi	r23, 0xFF	; 255
    10ce:	c5 01       	movw	r24, r10
    10d0:	2c 87       	std	Y+12, r18	; 0x0c
    10d2:	0e 94 8a 09 	call	0x1314	; 0x1314 <strnlen_P>
    10d6:	2c 01       	movw	r4, r24
    10d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10da:	20 68       	ori	r18, 0x80	; 128
    10dc:	22 2e       	mov	r2, r18
    10de:	83 01       	movw	r16, r6
    10e0:	23 fc       	sbrc	r2, 3
    10e2:	1b c0       	rjmp	.+54     	; 0x111a <vfprintf+0x1aa>
    10e4:	83 2d       	mov	r24, r3
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	48 16       	cp	r4, r24
    10ea:	59 06       	cpc	r5, r25
    10ec:	b0 f4       	brcc	.+44     	; 0x111a <vfprintf+0x1aa>
    10ee:	b7 01       	movw	r22, r14
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
    10f8:	3a 94       	dec	r3
    10fa:	f4 cf       	rjmp	.-24     	; 0x10e4 <vfprintf+0x174>
    10fc:	f5 01       	movw	r30, r10
    10fe:	27 fc       	sbrc	r2, 7
    1100:	85 91       	lpm	r24, Z+
    1102:	27 fe       	sbrs	r2, 7
    1104:	81 91       	ld	r24, Z+
    1106:	5f 01       	movw	r10, r30
    1108:	b7 01       	movw	r22, r14
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
    1110:	31 10       	cpse	r3, r1
    1112:	3a 94       	dec	r3
    1114:	f1 e0       	ldi	r31, 0x01	; 1
    1116:	4f 1a       	sub	r4, r31
    1118:	51 08       	sbc	r5, r1
    111a:	41 14       	cp	r4, r1
    111c:	51 04       	cpc	r5, r1
    111e:	71 f7       	brne	.-36     	; 0x10fc <vfprintf+0x18c>
    1120:	e5 c0       	rjmp	.+458    	; 0x12ec <vfprintf+0x37c>
    1122:	84 36       	cpi	r24, 0x64	; 100
    1124:	11 f0       	breq	.+4      	; 0x112a <vfprintf+0x1ba>
    1126:	89 36       	cpi	r24, 0x69	; 105
    1128:	39 f5       	brne	.+78     	; 0x1178 <vfprintf+0x208>
    112a:	f8 01       	movw	r30, r16
    112c:	27 ff       	sbrs	r18, 7
    112e:	07 c0       	rjmp	.+14     	; 0x113e <vfprintf+0x1ce>
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	0c 5f       	subi	r16, 0xFC	; 252
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	08 c0       	rjmp	.+16     	; 0x114e <vfprintf+0x1de>
    113e:	60 81       	ld	r22, Z
    1140:	71 81       	ldd	r23, Z+1	; 0x01
    1142:	88 27       	eor	r24, r24
    1144:	77 fd       	sbrc	r23, 7
    1146:	80 95       	com	r24
    1148:	98 2f       	mov	r25, r24
    114a:	0e 5f       	subi	r16, 0xFE	; 254
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	2f 76       	andi	r18, 0x6F	; 111
    1150:	b2 2e       	mov	r11, r18
    1152:	97 ff       	sbrs	r25, 7
    1154:	09 c0       	rjmp	.+18     	; 0x1168 <vfprintf+0x1f8>
    1156:	90 95       	com	r25
    1158:	80 95       	com	r24
    115a:	70 95       	com	r23
    115c:	61 95       	neg	r22
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	8f 4f       	sbci	r24, 0xFF	; 255
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	20 68       	ori	r18, 0x80	; 128
    1166:	b2 2e       	mov	r11, r18
    1168:	2a e0       	ldi	r18, 0x0A	; 10
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	a4 01       	movw	r20, r8
    116e:	0e 94 a0 09 	call	0x1340	; 0x1340 <__ultoa_invert>
    1172:	a8 2e       	mov	r10, r24
    1174:	a8 18       	sub	r10, r8
    1176:	44 c0       	rjmp	.+136    	; 0x1200 <vfprintf+0x290>
    1178:	85 37       	cpi	r24, 0x75	; 117
    117a:	29 f4       	brne	.+10     	; 0x1186 <vfprintf+0x216>
    117c:	2f 7e       	andi	r18, 0xEF	; 239
    117e:	b2 2e       	mov	r11, r18
    1180:	2a e0       	ldi	r18, 0x0A	; 10
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	25 c0       	rjmp	.+74     	; 0x11d0 <vfprintf+0x260>
    1186:	f2 2f       	mov	r31, r18
    1188:	f9 7f       	andi	r31, 0xF9	; 249
    118a:	bf 2e       	mov	r11, r31
    118c:	8f 36       	cpi	r24, 0x6F	; 111
    118e:	c1 f0       	breq	.+48     	; 0x11c0 <vfprintf+0x250>
    1190:	18 f4       	brcc	.+6      	; 0x1198 <vfprintf+0x228>
    1192:	88 35       	cpi	r24, 0x58	; 88
    1194:	79 f0       	breq	.+30     	; 0x11b4 <vfprintf+0x244>
    1196:	b4 c0       	rjmp	.+360    	; 0x1300 <vfprintf+0x390>
    1198:	80 37       	cpi	r24, 0x70	; 112
    119a:	19 f0       	breq	.+6      	; 0x11a2 <vfprintf+0x232>
    119c:	88 37       	cpi	r24, 0x78	; 120
    119e:	21 f0       	breq	.+8      	; 0x11a8 <vfprintf+0x238>
    11a0:	af c0       	rjmp	.+350    	; 0x1300 <vfprintf+0x390>
    11a2:	2f 2f       	mov	r18, r31
    11a4:	20 61       	ori	r18, 0x10	; 16
    11a6:	b2 2e       	mov	r11, r18
    11a8:	b4 fe       	sbrs	r11, 4
    11aa:	0d c0       	rjmp	.+26     	; 0x11c6 <vfprintf+0x256>
    11ac:	8b 2d       	mov	r24, r11
    11ae:	84 60       	ori	r24, 0x04	; 4
    11b0:	b8 2e       	mov	r11, r24
    11b2:	09 c0       	rjmp	.+18     	; 0x11c6 <vfprintf+0x256>
    11b4:	24 ff       	sbrs	r18, 4
    11b6:	0a c0       	rjmp	.+20     	; 0x11cc <vfprintf+0x25c>
    11b8:	9f 2f       	mov	r25, r31
    11ba:	96 60       	ori	r25, 0x06	; 6
    11bc:	b9 2e       	mov	r11, r25
    11be:	06 c0       	rjmp	.+12     	; 0x11cc <vfprintf+0x25c>
    11c0:	28 e0       	ldi	r18, 0x08	; 8
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <vfprintf+0x260>
    11c6:	20 e1       	ldi	r18, 0x10	; 16
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <vfprintf+0x260>
    11cc:	20 e1       	ldi	r18, 0x10	; 16
    11ce:	32 e0       	ldi	r19, 0x02	; 2
    11d0:	f8 01       	movw	r30, r16
    11d2:	b7 fe       	sbrs	r11, 7
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <vfprintf+0x274>
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	0c 5f       	subi	r16, 0xFC	; 252
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <vfprintf+0x280>
    11e4:	60 81       	ld	r22, Z
    11e6:	71 81       	ldd	r23, Z+1	; 0x01
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 5f       	subi	r16, 0xFE	; 254
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	a4 01       	movw	r20, r8
    11f2:	0e 94 a0 09 	call	0x1340	; 0x1340 <__ultoa_invert>
    11f6:	a8 2e       	mov	r10, r24
    11f8:	a8 18       	sub	r10, r8
    11fa:	fb 2d       	mov	r31, r11
    11fc:	ff 77       	andi	r31, 0x7F	; 127
    11fe:	bf 2e       	mov	r11, r31
    1200:	b6 fe       	sbrs	r11, 6
    1202:	0b c0       	rjmp	.+22     	; 0x121a <vfprintf+0x2aa>
    1204:	2b 2d       	mov	r18, r11
    1206:	2e 7f       	andi	r18, 0xFE	; 254
    1208:	a5 14       	cp	r10, r5
    120a:	50 f4       	brcc	.+20     	; 0x1220 <vfprintf+0x2b0>
    120c:	b4 fe       	sbrs	r11, 4
    120e:	0a c0       	rjmp	.+20     	; 0x1224 <vfprintf+0x2b4>
    1210:	b2 fc       	sbrc	r11, 2
    1212:	08 c0       	rjmp	.+16     	; 0x1224 <vfprintf+0x2b4>
    1214:	2b 2d       	mov	r18, r11
    1216:	2e 7e       	andi	r18, 0xEE	; 238
    1218:	05 c0       	rjmp	.+10     	; 0x1224 <vfprintf+0x2b4>
    121a:	7a 2c       	mov	r7, r10
    121c:	2b 2d       	mov	r18, r11
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <vfprintf+0x2b6>
    1220:	7a 2c       	mov	r7, r10
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <vfprintf+0x2b6>
    1224:	75 2c       	mov	r7, r5
    1226:	24 ff       	sbrs	r18, 4
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <vfprintf+0x2d4>
    122a:	fe 01       	movw	r30, r28
    122c:	ea 0d       	add	r30, r10
    122e:	f1 1d       	adc	r31, r1
    1230:	80 81       	ld	r24, Z
    1232:	80 33       	cpi	r24, 0x30	; 48
    1234:	11 f4       	brne	.+4      	; 0x123a <vfprintf+0x2ca>
    1236:	29 7e       	andi	r18, 0xE9	; 233
    1238:	09 c0       	rjmp	.+18     	; 0x124c <vfprintf+0x2dc>
    123a:	22 ff       	sbrs	r18, 2
    123c:	06 c0       	rjmp	.+12     	; 0x124a <vfprintf+0x2da>
    123e:	73 94       	inc	r7
    1240:	73 94       	inc	r7
    1242:	04 c0       	rjmp	.+8      	; 0x124c <vfprintf+0x2dc>
    1244:	82 2f       	mov	r24, r18
    1246:	86 78       	andi	r24, 0x86	; 134
    1248:	09 f0       	breq	.+2      	; 0x124c <vfprintf+0x2dc>
    124a:	73 94       	inc	r7
    124c:	23 fd       	sbrc	r18, 3
    124e:	13 c0       	rjmp	.+38     	; 0x1276 <vfprintf+0x306>
    1250:	20 ff       	sbrs	r18, 0
    1252:	06 c0       	rjmp	.+12     	; 0x1260 <vfprintf+0x2f0>
    1254:	5a 2c       	mov	r5, r10
    1256:	73 14       	cp	r7, r3
    1258:	18 f4       	brcc	.+6      	; 0x1260 <vfprintf+0x2f0>
    125a:	53 0c       	add	r5, r3
    125c:	57 18       	sub	r5, r7
    125e:	73 2c       	mov	r7, r3
    1260:	73 14       	cp	r7, r3
    1262:	68 f4       	brcc	.+26     	; 0x127e <vfprintf+0x30e>
    1264:	b7 01       	movw	r22, r14
    1266:	80 e2       	ldi	r24, 0x20	; 32
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	2c 87       	std	Y+12, r18	; 0x0c
    126c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
    1270:	73 94       	inc	r7
    1272:	2c 85       	ldd	r18, Y+12	; 0x0c
    1274:	f5 cf       	rjmp	.-22     	; 0x1260 <vfprintf+0x2f0>
    1276:	73 14       	cp	r7, r3
    1278:	10 f4       	brcc	.+4      	; 0x127e <vfprintf+0x30e>
    127a:	37 18       	sub	r3, r7
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <vfprintf+0x310>
    127e:	31 2c       	mov	r3, r1
    1280:	24 ff       	sbrs	r18, 4
    1282:	12 c0       	rjmp	.+36     	; 0x12a8 <vfprintf+0x338>
    1284:	b7 01       	movw	r22, r14
    1286:	80 e3       	ldi	r24, 0x30	; 48
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	2c 87       	std	Y+12, r18	; 0x0c
    128c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
    1290:	2c 85       	ldd	r18, Y+12	; 0x0c
    1292:	22 ff       	sbrs	r18, 2
    1294:	17 c0       	rjmp	.+46     	; 0x12c4 <vfprintf+0x354>
    1296:	21 ff       	sbrs	r18, 1
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <vfprintf+0x330>
    129a:	88 e5       	ldi	r24, 0x58	; 88
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x334>
    12a0:	88 e7       	ldi	r24, 0x78	; 120
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	b7 01       	movw	r22, r14
    12a6:	0c c0       	rjmp	.+24     	; 0x12c0 <vfprintf+0x350>
    12a8:	82 2f       	mov	r24, r18
    12aa:	86 78       	andi	r24, 0x86	; 134
    12ac:	59 f0       	breq	.+22     	; 0x12c4 <vfprintf+0x354>
    12ae:	21 fd       	sbrc	r18, 1
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <vfprintf+0x346>
    12b2:	80 e2       	ldi	r24, 0x20	; 32
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <vfprintf+0x348>
    12b6:	8b e2       	ldi	r24, 0x2B	; 43
    12b8:	27 fd       	sbrc	r18, 7
    12ba:	8d e2       	ldi	r24, 0x2D	; 45
    12bc:	b7 01       	movw	r22, r14
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
    12c4:	a5 14       	cp	r10, r5
    12c6:	38 f4       	brcc	.+14     	; 0x12d6 <vfprintf+0x366>
    12c8:	b7 01       	movw	r22, r14
    12ca:	80 e3       	ldi	r24, 0x30	; 48
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
    12d2:	5a 94       	dec	r5
    12d4:	f7 cf       	rjmp	.-18     	; 0x12c4 <vfprintf+0x354>
    12d6:	aa 94       	dec	r10
    12d8:	f4 01       	movw	r30, r8
    12da:	ea 0d       	add	r30, r10
    12dc:	f1 1d       	adc	r31, r1
    12de:	80 81       	ld	r24, Z
    12e0:	b7 01       	movw	r22, r14
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
    12e8:	a1 10       	cpse	r10, r1
    12ea:	f5 cf       	rjmp	.-22     	; 0x12d6 <vfprintf+0x366>
    12ec:	33 20       	and	r3, r3
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <vfprintf+0x382>
    12f0:	51 ce       	rjmp	.-862    	; 0xf94 <vfprintf+0x24>
    12f2:	b7 01       	movw	r22, r14
    12f4:	80 e2       	ldi	r24, 0x20	; 32
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
    12fc:	3a 94       	dec	r3
    12fe:	f6 cf       	rjmp	.-20     	; 0x12ec <vfprintf+0x37c>
    1300:	f7 01       	movw	r30, r14
    1302:	86 81       	ldd	r24, Z+6	; 0x06
    1304:	97 81       	ldd	r25, Z+7	; 0x07
    1306:	02 c0       	rjmp	.+4      	; 0x130c <vfprintf+0x39c>
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	9f ef       	ldi	r25, 0xFF	; 255
    130c:	2c 96       	adiw	r28, 0x0c	; 12
    130e:	e2 e1       	ldi	r30, 0x12	; 18
    1310:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__epilogue_restores__>

00001314 <strnlen_P>:
    1314:	fc 01       	movw	r30, r24
    1316:	05 90       	lpm	r0, Z+
    1318:	61 50       	subi	r22, 0x01	; 1
    131a:	70 40       	sbci	r23, 0x00	; 0
    131c:	01 10       	cpse	r0, r1
    131e:	d8 f7       	brcc	.-10     	; 0x1316 <strnlen_P+0x2>
    1320:	80 95       	com	r24
    1322:	90 95       	com	r25
    1324:	8e 0f       	add	r24, r30
    1326:	9f 1f       	adc	r25, r31
    1328:	08 95       	ret

0000132a <strnlen>:
    132a:	fc 01       	movw	r30, r24
    132c:	61 50       	subi	r22, 0x01	; 1
    132e:	70 40       	sbci	r23, 0x00	; 0
    1330:	01 90       	ld	r0, Z+
    1332:	01 10       	cpse	r0, r1
    1334:	d8 f7       	brcc	.-10     	; 0x132c <strnlen+0x2>
    1336:	80 95       	com	r24
    1338:	90 95       	com	r25
    133a:	8e 0f       	add	r24, r30
    133c:	9f 1f       	adc	r25, r31
    133e:	08 95       	ret

00001340 <__ultoa_invert>:
    1340:	fa 01       	movw	r30, r20
    1342:	aa 27       	eor	r26, r26
    1344:	28 30       	cpi	r18, 0x08	; 8
    1346:	51 f1       	breq	.+84     	; 0x139c <__ultoa_invert+0x5c>
    1348:	20 31       	cpi	r18, 0x10	; 16
    134a:	81 f1       	breq	.+96     	; 0x13ac <__ultoa_invert+0x6c>
    134c:	e8 94       	clt
    134e:	6f 93       	push	r22
    1350:	6e 7f       	andi	r22, 0xFE	; 254
    1352:	6e 5f       	subi	r22, 0xFE	; 254
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	8f 4f       	sbci	r24, 0xFF	; 255
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	af 4f       	sbci	r26, 0xFF	; 255
    135c:	b1 e0       	ldi	r27, 0x01	; 1
    135e:	3e d0       	rcall	.+124    	; 0x13dc <__ultoa_invert+0x9c>
    1360:	b4 e0       	ldi	r27, 0x04	; 4
    1362:	3c d0       	rcall	.+120    	; 0x13dc <__ultoa_invert+0x9c>
    1364:	67 0f       	add	r22, r23
    1366:	78 1f       	adc	r23, r24
    1368:	89 1f       	adc	r24, r25
    136a:	9a 1f       	adc	r25, r26
    136c:	a1 1d       	adc	r26, r1
    136e:	68 0f       	add	r22, r24
    1370:	79 1f       	adc	r23, r25
    1372:	8a 1f       	adc	r24, r26
    1374:	91 1d       	adc	r25, r1
    1376:	a1 1d       	adc	r26, r1
    1378:	6a 0f       	add	r22, r26
    137a:	71 1d       	adc	r23, r1
    137c:	81 1d       	adc	r24, r1
    137e:	91 1d       	adc	r25, r1
    1380:	a1 1d       	adc	r26, r1
    1382:	20 d0       	rcall	.+64     	; 0x13c4 <__ultoa_invert+0x84>
    1384:	09 f4       	brne	.+2      	; 0x1388 <__ultoa_invert+0x48>
    1386:	68 94       	set
    1388:	3f 91       	pop	r19
    138a:	2a e0       	ldi	r18, 0x0A	; 10
    138c:	26 9f       	mul	r18, r22
    138e:	11 24       	eor	r1, r1
    1390:	30 19       	sub	r19, r0
    1392:	30 5d       	subi	r19, 0xD0	; 208
    1394:	31 93       	st	Z+, r19
    1396:	de f6       	brtc	.-74     	; 0x134e <__ultoa_invert+0xe>
    1398:	cf 01       	movw	r24, r30
    139a:	08 95       	ret
    139c:	46 2f       	mov	r20, r22
    139e:	47 70       	andi	r20, 0x07	; 7
    13a0:	40 5d       	subi	r20, 0xD0	; 208
    13a2:	41 93       	st	Z+, r20
    13a4:	b3 e0       	ldi	r27, 0x03	; 3
    13a6:	0f d0       	rcall	.+30     	; 0x13c6 <__ultoa_invert+0x86>
    13a8:	c9 f7       	brne	.-14     	; 0x139c <__ultoa_invert+0x5c>
    13aa:	f6 cf       	rjmp	.-20     	; 0x1398 <__ultoa_invert+0x58>
    13ac:	46 2f       	mov	r20, r22
    13ae:	4f 70       	andi	r20, 0x0F	; 15
    13b0:	40 5d       	subi	r20, 0xD0	; 208
    13b2:	4a 33       	cpi	r20, 0x3A	; 58
    13b4:	18 f0       	brcs	.+6      	; 0x13bc <__ultoa_invert+0x7c>
    13b6:	49 5d       	subi	r20, 0xD9	; 217
    13b8:	31 fd       	sbrc	r19, 1
    13ba:	40 52       	subi	r20, 0x20	; 32
    13bc:	41 93       	st	Z+, r20
    13be:	02 d0       	rcall	.+4      	; 0x13c4 <__ultoa_invert+0x84>
    13c0:	a9 f7       	brne	.-22     	; 0x13ac <__ultoa_invert+0x6c>
    13c2:	ea cf       	rjmp	.-44     	; 0x1398 <__ultoa_invert+0x58>
    13c4:	b4 e0       	ldi	r27, 0x04	; 4
    13c6:	a6 95       	lsr	r26
    13c8:	97 95       	ror	r25
    13ca:	87 95       	ror	r24
    13cc:	77 95       	ror	r23
    13ce:	67 95       	ror	r22
    13d0:	ba 95       	dec	r27
    13d2:	c9 f7       	brne	.-14     	; 0x13c6 <__ultoa_invert+0x86>
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	61 05       	cpc	r22, r1
    13d8:	71 05       	cpc	r23, r1
    13da:	08 95       	ret
    13dc:	9b 01       	movw	r18, r22
    13de:	ac 01       	movw	r20, r24
    13e0:	0a 2e       	mov	r0, r26
    13e2:	06 94       	lsr	r0
    13e4:	57 95       	ror	r21
    13e6:	47 95       	ror	r20
    13e8:	37 95       	ror	r19
    13ea:	27 95       	ror	r18
    13ec:	ba 95       	dec	r27
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__ultoa_invert+0xa2>
    13f0:	62 0f       	add	r22, r18
    13f2:	73 1f       	adc	r23, r19
    13f4:	84 1f       	adc	r24, r20
    13f6:	95 1f       	adc	r25, r21
    13f8:	a0 1d       	adc	r26, r0
    13fa:	08 95       	ret

000013fc <__prologue_saves__>:
    13fc:	2f 92       	push	r2
    13fe:	3f 92       	push	r3
    1400:	4f 92       	push	r4
    1402:	5f 92       	push	r5
    1404:	6f 92       	push	r6
    1406:	7f 92       	push	r7
    1408:	8f 92       	push	r8
    140a:	9f 92       	push	r9
    140c:	af 92       	push	r10
    140e:	bf 92       	push	r11
    1410:	cf 92       	push	r12
    1412:	df 92       	push	r13
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	ca 1b       	sub	r28, r26
    1426:	db 0b       	sbc	r29, r27
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	09 94       	ijmp

00001434 <__epilogue_restores__>:
    1434:	2a 88       	ldd	r2, Y+18	; 0x12
    1436:	39 88       	ldd	r3, Y+17	; 0x11
    1438:	48 88       	ldd	r4, Y+16	; 0x10
    143a:	5f 84       	ldd	r5, Y+15	; 0x0f
    143c:	6e 84       	ldd	r6, Y+14	; 0x0e
    143e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1440:	8c 84       	ldd	r8, Y+12	; 0x0c
    1442:	9b 84       	ldd	r9, Y+11	; 0x0b
    1444:	aa 84       	ldd	r10, Y+10	; 0x0a
    1446:	b9 84       	ldd	r11, Y+9	; 0x09
    1448:	c8 84       	ldd	r12, Y+8	; 0x08
    144a:	df 80       	ldd	r13, Y+7	; 0x07
    144c:	ee 80       	ldd	r14, Y+6	; 0x06
    144e:	fd 80       	ldd	r15, Y+5	; 0x05
    1450:	0c 81       	ldd	r16, Y+4	; 0x04
    1452:	1b 81       	ldd	r17, Y+3	; 0x03
    1454:	aa 81       	ldd	r26, Y+2	; 0x02
    1456:	b9 81       	ldd	r27, Y+1	; 0x01
    1458:	ce 0f       	add	r28, r30
    145a:	d1 1d       	adc	r29, r1
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	ed 01       	movw	r28, r26
    1468:	08 95       	ret

0000146a <_exit>:
    146a:	f8 94       	cli

0000146c <__stop_program>:
    146c:	ff cf       	rjmp	.-2      	; 0x146c <__stop_program>
