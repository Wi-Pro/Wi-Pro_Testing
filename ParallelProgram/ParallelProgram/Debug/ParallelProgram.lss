
ParallelProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800200  000013ee  00001482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  0080032e  0080032e  000015b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d8  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b7e  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bb1  00000000  00000000  00004462  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001afc  00000000  00000000  00005013  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000700  00000000  00000000  00006b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000718  00000000  00000000  00007210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001125  00000000  00000000  00007928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  00008a4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8d c0       	rjmp	.+282    	; 0x120 <__bad_interrupt>
       6:	00 00       	nop
       8:	8b c0       	rjmp	.+278    	; 0x120 <__bad_interrupt>
       a:	00 00       	nop
       c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c0       	rjmp	.+250    	; 0x120 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c0       	rjmp	.+246    	; 0x120 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c0       	rjmp	.+242    	; 0x120 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c0       	rjmp	.+238    	; 0x120 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c0       	rjmp	.+234    	; 0x120 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c0       	rjmp	.+230    	; 0x120 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c0       	rjmp	.+226    	; 0x120 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c0       	rjmp	.+222    	; 0x120 <__bad_interrupt>
      42:	00 00       	nop
      44:	6d c0       	rjmp	.+218    	; 0x120 <__bad_interrupt>
      46:	00 00       	nop
      48:	6b c0       	rjmp	.+214    	; 0x120 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c0       	rjmp	.+210    	; 0x120 <__bad_interrupt>
      4e:	00 00       	nop
      50:	67 c0       	rjmp	.+206    	; 0x120 <__bad_interrupt>
      52:	00 00       	nop
      54:	65 c0       	rjmp	.+202    	; 0x120 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c0       	rjmp	.+198    	; 0x120 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c0       	rjmp	.+194    	; 0x120 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c0       	rjmp	.+190    	; 0x120 <__bad_interrupt>
      62:	00 00       	nop
      64:	5d c0       	rjmp	.+186    	; 0x120 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c0       	rjmp	.+182    	; 0x120 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	59 c0       	rjmp	.+178    	; 0x120 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c0       	rjmp	.+174    	; 0x120 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c0       	rjmp	.+170    	; 0x120 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c0       	rjmp	.+162    	; 0x120 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c0       	rjmp	.+158    	; 0x120 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c0       	rjmp	.+154    	; 0x120 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c0       	rjmp	.+150    	; 0x120 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	49 c0       	rjmp	.+146    	; 0x120 <__bad_interrupt>
      8e:	00 00       	nop
      90:	47 c0       	rjmp	.+142    	; 0x120 <__bad_interrupt>
      92:	00 00       	nop
      94:	45 c0       	rjmp	.+138    	; 0x120 <__bad_interrupt>
      96:	00 00       	nop
      98:	43 c0       	rjmp	.+134    	; 0x120 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	41 c0       	rjmp	.+130    	; 0x120 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3f c0       	rjmp	.+126    	; 0x120 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3d c0       	rjmp	.+122    	; 0x120 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3b c0       	rjmp	.+118    	; 0x120 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	39 c0       	rjmp	.+114    	; 0x120 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	37 c0       	rjmp	.+110    	; 0x120 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	35 c0       	rjmp	.+106    	; 0x120 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	33 c0       	rjmp	.+102    	; 0x120 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	31 c0       	rjmp	.+98     	; 0x120 <__bad_interrupt>
      be:	00 00       	nop
      c0:	2f c0       	rjmp	.+94     	; 0x120 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2d c0       	rjmp	.+90     	; 0x120 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2b c0       	rjmp	.+86     	; 0x120 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	29 c0       	rjmp	.+82     	; 0x120 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	27 c0       	rjmp	.+78     	; 0x120 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	25 c0       	rjmp	.+74     	; 0x120 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	23 c0       	rjmp	.+70     	; 0x120 <__bad_interrupt>
      da:	00 00       	nop
      dc:	21 c0       	rjmp	.+66     	; 0x120 <__bad_interrupt>
      de:	00 00       	nop
      e0:	1f c0       	rjmp	.+62     	; 0x120 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ee ee       	ldi	r30, 0xEE	; 238
      f8:	f3 e1       	ldi	r31, 0x13	; 19
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	ae 32       	cpi	r26, 0x2E	; 46
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	23 e0       	ldi	r18, 0x03	; 3
     10c:	ae e2       	ldi	r26, 0x2E	; 46
     10e:	b3 e0       	ldi	r27, 0x03	; 3
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a9 38       	cpi	r26, 0x89	; 137
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	cd d3       	rcall	.+1946   	; 0x8b6 <main>
     11c:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <_exit>

00000120 <__bad_interrupt>:
     120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <SPI_FPGA_Write>:
	SPI_FPGA_Write(FPGA_Disable);
}

void SPI_FPGA_Write(unsigned char SPI_Data)
{
	FPGA_CS_PORT &= ~(1<<FPGA_SPI_CS);
     122:	a4 98       	cbi	0x14, 4	; 20
	// Start Write transmission
	SPDR = SPI_Data;
     124:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     126:	0d b4       	in	r0, 0x2d	; 45
     128:	07 fe       	sbrs	r0, 7
     12a:	fd cf       	rjmp	.-6      	; 0x126 <SPI_FPGA_Write+0x4>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     12c:	a4 9a       	sbi	0x14, 4	; 20
     12e:	08 95       	ret

00000130 <SPI_FPGA_Init>:
#include <util/delay.h>
#include "FPGA.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
     130:	9c 9a       	sbi	0x13, 4	; 19
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     132:	a4 9a       	sbi	0x14, 4	; 20
	
	WR_DDR |= 1<<FPGAWR;
     134:	e4 e0       	ldi	r30, 0x04	; 4
     136:	f1 e0       	ldi	r31, 0x01	; 1
     138:	80 81       	ld	r24, Z
     13a:	84 60       	ori	r24, 0x04	; 4
     13c:	80 83       	st	Z, r24
	WR_PORT &= ~(1<<FPGAWR);
     13e:	e5 e0       	ldi	r30, 0x05	; 5
     140:	f1 e0       	ldi	r31, 0x01	; 1
     142:	80 81       	ld	r24, Z
     144:	8b 7f       	andi	r24, 0xFB	; 251
     146:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_Disable);
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	eb cf       	rjmp	.-42     	; 0x122 <SPI_FPGA_Write>
     14c:	08 95       	ret

0000014e <hexInit>:
				   ':', 0x10, 0x00, 0x10, 0x00, 0x12, 0xC0, 0x11, 0xC0, 0x10, 0xC0, 0x0F, 0xC0, 0x0E, 0xC0, 0x0D, 0xC0, 0x0C, 0xC0, 0x0B, 0xC0, 0x6C,
				   ':', 0x00, 0x00, 0x00, 0x01, 0xFF};

void hexInit()
{
	RAMOffset = 0; 
     14e:	10 92 64 03 	sts	0x0364, r1
     152:	10 92 63 03 	sts	0x0363, r1
	memset(hexRow, 0x00, 50); 
     156:	82 e3       	ldi	r24, 0x32	; 50
     158:	e1 e3       	ldi	r30, 0x31	; 49
     15a:	f3 e0       	ldi	r31, 0x03	; 3
     15c:	df 01       	movw	r26, r30
     15e:	1d 92       	st	X+, r1
     160:	8a 95       	dec	r24
     162:	e9 f7       	brne	.-6      	; 0x15e <hexInit+0x10>
     164:	08 95       	ret

00000166 <getHexRow>:
} 

char* getHexRow()
{
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	c1 e3       	ldi	r28, 0x31	; 49
     170:	d3 e0       	ldi	r29, 0x03	; 3
     172:	06 e3       	ldi	r16, 0x36	; 54
     174:	13 e0       	ldi	r17, 0x03	; 3
	char buffer; 
	int i=0; 
	for(i=0; i<DATA_BEGIN; i++)
	{
		//Read the bytes from RAM and throw them into the buffer
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
     176:	60 91 63 03 	lds	r22, 0x0363
     17a:	70 91 64 03 	lds	r23, 0x0364
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	13 d5       	rcall	.+2598   	; 0xbaa <RAMReadByte>
		//printf("0x%02X ",buffer);
		hexRow[i] = buffer; 
     184:	89 93       	st	Y+, r24
		RAMOffset++; 
     186:	80 91 63 03 	lds	r24, 0x0363
     18a:	90 91 64 03 	lds	r25, 0x0364
     18e:	01 96       	adiw	r24, 0x01	; 1
     190:	90 93 64 03 	sts	0x0364, r25
     194:	80 93 63 03 	sts	0x0363, r24

char* getHexRow()
{
	char buffer; 
	int i=0; 
	for(i=0; i<DATA_BEGIN; i++)
     198:	c0 17       	cp	r28, r16
     19a:	d1 07       	cpc	r29, r17
     19c:	61 f7       	brne	.-40     	; 0x176 <getHexRow+0x10>
		//printf("0x%02X ",buffer);
		hexRow[i] = buffer; 
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
     19e:	00 91 32 03 	lds	r16, 0x0332
     1a2:	c6 e3       	ldi	r28, 0x36	; 54
     1a4:	d3 e0       	ldi	r29, 0x03	; 3
     1a6:	10 e0       	ldi	r17, 0x00	; 0
     1a8:	09 5c       	subi	r16, 0xC9	; 201
     1aa:	1c 4f       	sbci	r17, 0xFC	; 252
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
	{
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
     1ac:	60 91 63 03 	lds	r22, 0x0363
     1b0:	70 91 64 03 	lds	r23, 0x0364
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	f8 d4       	rcall	.+2544   	; 0xbaa <RAMReadByte>
		//printf("0x%02X ",buffer);
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
     1ba:	60 91 63 03 	lds	r22, 0x0363
     1be:	70 91 64 03 	lds	r23, 0x0364
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	f1 d4       	rcall	.+2530   	; 0xbaa <RAMReadByte>
     1c8:	89 93       	st	Y+, r24
		RAMOffset++; 
     1ca:	80 91 63 03 	lds	r24, 0x0363
     1ce:	90 91 64 03 	lds	r25, 0x0364
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	90 93 64 03 	sts	0x0364, r25
     1d8:	80 93 63 03 	sts	0x0363, r24
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
     1dc:	c0 17       	cp	r28, r16
     1de:	d1 07       	cpc	r29, r17
     1e0:	29 f7       	brne	.-54     	; 0x1ac <getHexRow+0x46>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		RAMOffset++; 
	}
	
	return hexRow; 
}
     1e2:	81 e3       	ldi	r24, 0x31	; 49
     1e4:	93 e0       	ldi	r25, 0x03	; 3
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	08 95       	ret

000001f0 <writeHexFileTest>:

void writeHexFileTest()
{	
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	c0 e0       	ldi	r28, 0x00	; 0
     1fe:	d2 e0       	ldi	r29, 0x02	; 2
     200:	0f 2e       	mov	r0, r31
     202:	f2 e3       	ldi	r31, 0x32	; 50
     204:	ef 2e       	mov	r14, r31
     206:	f2 e0       	ldi	r31, 0x02	; 2
     208:	ff 2e       	mov	r15, r31
     20a:	f0 2d       	mov	r31, r0
	for (int i = 0; i<50; i++)
	{
		printf("0x%02X ", *(buffer + i));
     20c:	0f e4       	ldi	r16, 0x4F	; 79
     20e:	12 e0       	ldi	r17, 0x02	; 2
     210:	89 91       	ld	r24, Y+
     212:	1f 92       	push	r1
     214:	8f 93       	push	r24
     216:	1f 93       	push	r17
     218:	0f 93       	push	r16
     21a:	42 d6       	rcall	.+3204   	; 0xea0 <printf>
	return hexRow; 
}

void writeHexFileTest()
{	
	for (int i = 0; i<50; i++)
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	0f 90       	pop	r0
     224:	ce 15       	cp	r28, r14
     226:	df 05       	cpc	r29, r15
     228:	99 f7       	brne	.-26     	; 0x210 <writeHexFileTest+0x20>
	{
		printf("0x%02X ", *(buffer + i));
	}
	printf("\n");
     22a:	8a e0       	ldi	r24, 0x0A	; 10
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	49 d6       	rcall	.+3218   	; 0xec2 <putchar>
				
	RAMWrite(buffer, HEX_FILE_ADDRESS, 50);
     230:	42 e3       	ldi	r20, 0x32	; 50
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	92 e0       	ldi	r25, 0x02	; 2
     23c:	11 d4       	rcall	.+2082   	; 0xa60 <RAMWrite>
					
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	08 95       	ret

0000024c <ProgInit>:
	
	//G: Program Page
	ProgramPage();
	
	//I: End Page Programming
	EndPageProgramming();
     24c:	71 df       	rcall	.-286    	; 0x130 <SPI_FPGA_Init>
     24e:	b6 d5       	rcall	.+2924   	; 0xdbc <voltageControlInit>
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	d4 d5       	rcall	.+2984   	; 0xdfc <setVpp>
     254:	84 e0       	ldi	r24, 0x04	; 4
     256:	c4 d5       	rcall	.+2952   	; 0xde0 <setVcc>
     258:	86 e0       	ldi	r24, 0x06	; 6
     25a:	e2 d5       	rcall	.+3012   	; 0xe20 <setVLogic>
     25c:	8a e1       	ldi	r24, 0x1A	; 26
     25e:	8a 95       	dec	r24
     260:	f1 f7       	brne	.-4      	; 0x25e <ProgInit+0x12>
     262:	00 c0       	rjmp	.+0      	; 0x264 <ProgInit+0x18>
     264:	b9 d5       	rcall	.+2930   	; 0xdd8 <enableVccRegulator>
     266:	d8 d5       	rcall	.+2992   	; 0xe18 <enableVLogic>
     268:	8f e4       	ldi	r24, 0x4F	; 79
     26a:	93 ec       	ldi	r25, 0xC3	; 195
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <ProgInit+0x20>
     270:	00 c0       	rjmp	.+0      	; 0x272 <ProgInit+0x26>
     272:	00 00       	nop
     274:	8a b1       	in	r24, 0x0a	; 10
     276:	8f ef       	ldi	r24, 0xFF	; 255
     278:	8a b9       	out	0x0a, r24	; 10
     27a:	38 98       	cbi	0x07, 0	; 7
     27c:	80 93 0a 01 	sts	0x010A, r24
     280:	83 b3       	in	r24, 0x13	; 19
     282:	87 60       	ori	r24, 0x07	; 7
     284:	83 bb       	out	0x13, r24	; 19
     286:	a0 9a       	sbi	0x14, 0	; 20
     288:	08 95       	ret

0000028a <ApplyPullDowns>:
     28a:	94 d4       	rcall	.+2344   	; 0xbb4 <SPI_Switching_Circuitry_Init>
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	a5 d4       	rcall	.+2378   	; 0xbda <SPI_Switching_Circuitry_Write>
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	a3 d4       	rcall	.+2374   	; 0xbda <SPI_Switching_Circuitry_Write>
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	a1 d4       	rcall	.+2370   	; 0xbda <SPI_Switching_Circuitry_Write>
     298:	8f ef       	ldi	r24, 0xFF	; 255
     29a:	9f d4       	rcall	.+2366   	; 0xbda <SPI_Switching_Circuitry_Write>
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	9d d4       	rcall	.+2362   	; 0xbda <SPI_Switching_Circuitry_Write>
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	9b d4       	rcall	.+2358   	; 0xbda <SPI_Switching_Circuitry_Write>
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	99 d4       	rcall	.+2354   	; 0xbda <SPI_Switching_Circuitry_Write>
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	97 d4       	rcall	.+2350   	; 0xbda <SPI_Switching_Circuitry_Write>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	95 d4       	rcall	.+2346   	; 0xbda <SPI_Switching_Circuitry_Write>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	93 d4       	rcall	.+2342   	; 0xbda <SPI_Switching_Circuitry_Write>
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	91 d4       	rcall	.+2338   	; 0xbda <SPI_Switching_Circuitry_Write>
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	8f d4       	rcall	.+2334   	; 0xbda <SPI_Switching_Circuitry_Write>
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	8d d4       	rcall	.+2330   	; 0xbda <SPI_Switching_Circuitry_Write>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	8b d4       	rcall	.+2326   	; 0xbda <SPI_Switching_Circuitry_Write>
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	89 d4       	rcall	.+2322   	; 0xbda <SPI_Switching_Circuitry_Write>
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	87 d4       	rcall	.+2318   	; 0xbda <SPI_Switching_Circuitry_Write>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	85 d4       	rcall	.+2314   	; 0xbda <SPI_Switching_Circuitry_Write>
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	83 d4       	rcall	.+2310   	; 0xbda <SPI_Switching_Circuitry_Write>
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	81 d4       	rcall	.+2306   	; 0xbda <SPI_Switching_Circuitry_Write>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	7f d4       	rcall	.+2302   	; 0xbda <SPI_Switching_Circuitry_Write>
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	7d d4       	rcall	.+2298   	; 0xbda <SPI_Switching_Circuitry_Write>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	7b d4       	rcall	.+2294   	; 0xbda <SPI_Switching_Circuitry_Write>
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	79 d4       	rcall	.+2290   	; 0xbda <SPI_Switching_Circuitry_Write>
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	77 d4       	rcall	.+2286   	; 0xbda <SPI_Switching_Circuitry_Write>
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	75 d4       	rcall	.+2282   	; 0xbda <SPI_Switching_Circuitry_Write>
     2f0:	e5 e0       	ldi	r30, 0x05	; 5
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	80 81       	ld	r24, Z
     2f6:	80 61       	ori	r24, 0x10	; 16
     2f8:	80 83       	st	Z, r24
     2fa:	85 e3       	ldi	r24, 0x35	; 53
     2fc:	8a 95       	dec	r24
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <ApplyPullDowns+0x72>
     300:	00 00       	nop
     302:	80 81       	ld	r24, Z
     304:	8f 7e       	andi	r24, 0xEF	; 239
     306:	80 83       	st	Z, r24
     308:	08 95       	ret

0000030a <LoadCommand>:
     30a:	5d 9a       	sbi	0x0b, 5	; 11
     30c:	5c 98       	cbi	0x0b, 4	; 11
     30e:	5b 98       	cbi	0x0b, 3	; 11
     310:	80 93 0b 01 	sts	0x010B, r24
     314:	82 e4       	ldi	r24, 0x42	; 66
     316:	8a 95       	dec	r24
     318:	f1 f7       	brne	.-4      	; 0x316 <LoadCommand+0xc>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <LoadCommand+0x12>
     31c:	58 9a       	sbi	0x0b, 0	; 11
     31e:	82 e4       	ldi	r24, 0x42	; 66
     320:	8a 95       	dec	r24
     322:	f1 f7       	brne	.-4      	; 0x320 <LoadCommand+0x16>
     324:	00 c0       	rjmp	.+0      	; 0x326 <LoadCommand+0x1c>
     326:	58 98       	cbi	0x0b, 0	; 11
     328:	82 e4       	ldi	r24, 0x42	; 66
     32a:	8a 95       	dec	r24
     32c:	f1 f7       	brne	.-4      	; 0x32a <LoadCommand+0x20>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LoadCommand+0x26>
     330:	08 95       	ret

00000332 <WriteWord>:
     332:	5d 98       	cbi	0x0b, 5	; 11
     334:	5c 9a       	sbi	0x0b, 4	; 11
     336:	80 93 0b 01 	sts	0x010B, r24
     33a:	82 e4       	ldi	r24, 0x42	; 66
     33c:	8a 95       	dec	r24
     33e:	f1 f7       	brne	.-4      	; 0x33c <WriteWord+0xa>
     340:	00 c0       	rjmp	.+0      	; 0x342 <WriteWord+0x10>
     342:	58 9a       	sbi	0x0b, 0	; 11
     344:	82 e4       	ldi	r24, 0x42	; 66
     346:	8a 95       	dec	r24
     348:	f1 f7       	brne	.-4      	; 0x346 <WriteWord+0x14>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <WriteWord+0x1a>
     34c:	58 98       	cbi	0x0b, 0	; 11
     34e:	82 e4       	ldi	r24, 0x42	; 66
     350:	8a 95       	dec	r24
     352:	f1 f7       	brne	.-4      	; 0x350 <WriteWord+0x1e>
     354:	00 c0       	rjmp	.+0      	; 0x356 <WriteWord+0x24>
     356:	5b 9a       	sbi	0x0b, 3	; 11
     358:	5d 98       	cbi	0x0b, 5	; 11
     35a:	5c 9a       	sbi	0x0b, 4	; 11
     35c:	90 93 0b 01 	sts	0x010B, r25
     360:	82 e4       	ldi	r24, 0x42	; 66
     362:	8a 95       	dec	r24
     364:	f1 f7       	brne	.-4      	; 0x362 <WriteWord+0x30>
     366:	00 c0       	rjmp	.+0      	; 0x368 <WriteWord+0x36>
     368:	58 9a       	sbi	0x0b, 0	; 11
     36a:	82 e4       	ldi	r24, 0x42	; 66
     36c:	8a 95       	dec	r24
     36e:	f1 f7       	brne	.-4      	; 0x36c <WriteWord+0x3a>
     370:	00 c0       	rjmp	.+0      	; 0x372 <WriteWord+0x40>
     372:	58 98       	cbi	0x0b, 0	; 11
     374:	82 e4       	ldi	r24, 0x42	; 66
     376:	8a 95       	dec	r24
     378:	f1 f7       	brne	.-4      	; 0x376 <WriteWord+0x44>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <WriteWord+0x4a>
     37c:	08 95       	ret

0000037e <LoadLowAddress>:
     37e:	5d 98       	cbi	0x0b, 5	; 11
     380:	5c 98       	cbi	0x0b, 4	; 11
     382:	5b 98       	cbi	0x0b, 3	; 11
     384:	80 93 0b 01 	sts	0x010B, r24
     388:	82 e4       	ldi	r24, 0x42	; 66
     38a:	8a 95       	dec	r24
     38c:	f1 f7       	brne	.-4      	; 0x38a <LoadLowAddress+0xc>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <LoadLowAddress+0x12>
     390:	58 9a       	sbi	0x0b, 0	; 11
     392:	82 e4       	ldi	r24, 0x42	; 66
     394:	8a 95       	dec	r24
     396:	f1 f7       	brne	.-4      	; 0x394 <LoadLowAddress+0x16>
     398:	00 c0       	rjmp	.+0      	; 0x39a <LoadLowAddress+0x1c>
     39a:	58 98       	cbi	0x0b, 0	; 11
     39c:	82 e4       	ldi	r24, 0x42	; 66
     39e:	8a 95       	dec	r24
     3a0:	f1 f7       	brne	.-4      	; 0x39e <LoadLowAddress+0x20>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LoadLowAddress+0x26>
     3a4:	08 95       	ret

000003a6 <LoadHighAddress>:
     3a6:	5d 98       	cbi	0x0b, 5	; 11
     3a8:	5c 98       	cbi	0x0b, 4	; 11
     3aa:	5b 9a       	sbi	0x0b, 3	; 11
     3ac:	90 93 0b 01 	sts	0x010B, r25
     3b0:	82 e4       	ldi	r24, 0x42	; 66
     3b2:	8a 95       	dec	r24
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LoadHighAddress+0xc>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LoadHighAddress+0x12>
     3b8:	58 9a       	sbi	0x0b, 0	; 11
     3ba:	82 e4       	ldi	r24, 0x42	; 66
     3bc:	8a 95       	dec	r24
     3be:	f1 f7       	brne	.-4      	; 0x3bc <LoadHighAddress+0x16>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LoadHighAddress+0x1c>
     3c2:	58 98       	cbi	0x0b, 0	; 11
     3c4:	82 e4       	ldi	r24, 0x42	; 66
     3c6:	8a 95       	dec	r24
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LoadHighAddress+0x20>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LoadHighAddress+0x26>
     3cc:	08 95       	ret

000003ce <ProgramPage>:
     3ce:	5a 98       	cbi	0x0b, 2	; 11
     3d0:	82 e4       	ldi	r24, 0x42	; 66
     3d2:	8a 95       	dec	r24
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <ProgramPage+0x4>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <ProgramPage+0xa>
     3d8:	5a 9a       	sbi	0x0b, 2	; 11
     3da:	82 e4       	ldi	r24, 0x42	; 66
     3dc:	8a 95       	dec	r24
     3de:	f1 f7       	brne	.-4      	; 0x3dc <ProgramPage+0xe>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <ProgramPage+0x14>
     3e2:	30 9b       	sbis	0x06, 0	; 6
     3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <ProgramPage+0x14>
     3e6:	08 95       	ret

000003e8 <EndPageProgramming>:
     3e8:	5d 9a       	sbi	0x0b, 5	; 11
     3ea:	5c 98       	cbi	0x0b, 4	; 11
     3ec:	10 92 0b 01 	sts	0x010B, r1
     3f0:	82 e4       	ldi	r24, 0x42	; 66
     3f2:	8a 95       	dec	r24
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <EndPageProgramming+0xa>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <EndPageProgramming+0x10>
     3f8:	58 9a       	sbi	0x0b, 0	; 11
     3fa:	82 e4       	ldi	r24, 0x42	; 66
     3fc:	8a 95       	dec	r24
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <EndPageProgramming+0x14>
     400:	00 c0       	rjmp	.+0      	; 0x402 <EndPageProgramming+0x1a>
     402:	58 98       	cbi	0x0b, 0	; 11
     404:	82 e4       	ldi	r24, 0x42	; 66
     406:	8a 95       	dec	r24
     408:	f1 f7       	brne	.-4      	; 0x406 <EndPageProgramming+0x1e>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <EndPageProgramming+0x24>
     40c:	08 95       	ret

0000040e <EnableProgMode>:
     40e:	cf 93       	push	r28
     410:	c8 2f       	mov	r28, r24
     412:	58 98       	cbi	0x0b, 0	; 11
     414:	8b b1       	in	r24, 0x0b	; 11
     416:	83 7c       	andi	r24, 0xC3	; 195
     418:	8b b9       	out	0x0b, r24	; 11
     41a:	10 92 0b 01 	sts	0x010B, r1
     41e:	1b b8       	out	0x0b, r1	; 11
     420:	e5 e0       	ldi	r30, 0x05	; 5
     422:	f1 e0       	ldi	r31, 0x01	; 1
     424:	80 81       	ld	r24, Z
     426:	8b 7f       	andi	r24, 0xFB	; 251
     428:	80 83       	st	Z, r24
     42a:	8c 2f       	mov	r24, r28
     42c:	7a de       	rcall	.-780    	; 0x122 <SPI_FPGA_Write>
     42e:	c1 30       	cpi	r28, 0x01	; 1
     430:	19 f0       	breq	.+6      	; 0x438 <EnableProgMode+0x2a>
     432:	c2 30       	cpi	r28, 0x02	; 2
     434:	19 f0       	breq	.+6      	; 0x43c <EnableProgMode+0x2e>
     436:	03 c0       	rjmp	.+6      	; 0x43e <EnableProgMode+0x30>
     438:	2d d4       	rcall	.+2138   	; 0xc94 <setAtTiny2313>
     43a:	01 c0       	rjmp	.+2      	; 0x43e <EnableProgMode+0x30>
     43c:	74 d4       	rcall	.+2280   	; 0xd26 <setAtMega324PA>
     43e:	87 ec       	ldi	r24, 0xC7	; 199
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <EnableProgMode+0x34>
     446:	00 c0       	rjmp	.+0      	; 0x448 <EnableProgMode+0x3a>
     448:	00 00       	nop
     44a:	c2 d4       	rcall	.+2436   	; 0xdd0 <enableVppRegulator>
     44c:	95 e8       	ldi	r25, 0x85	; 133
     44e:	9a 95       	dec	r25
     450:	f1 f7       	brne	.-4      	; 0x44e <EnableProgMode+0x40>
     452:	00 00       	nop
     454:	8b b1       	in	r24, 0x0b	; 11
     456:	86 60       	ori	r24, 0x06	; 6
     458:	8b b9       	out	0x0b, r24	; 11
     45a:	87 ee       	ldi	r24, 0xE7	; 231
     45c:	93 e0       	ldi	r25, 0x03	; 3
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <EnableProgMode+0x50>
     462:	00 c0       	rjmp	.+0      	; 0x464 <EnableProgMode+0x56>
     464:	00 00       	nop
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <ReadSignatureBytes>:
     46a:	88 e0       	ldi	r24, 0x08	; 8
     46c:	4e df       	rcall	.-356    	; 0x30a <LoadCommand>
     46e:	5d 98       	cbi	0x0b, 5	; 11
     470:	5c 98       	cbi	0x0b, 4	; 11
     472:	5b 98       	cbi	0x0b, 3	; 11
     474:	10 92 0b 01 	sts	0x010B, r1
     478:	82 e4       	ldi	r24, 0x42	; 66
     47a:	8a 95       	dec	r24
     47c:	f1 f7       	brne	.-4      	; 0x47a <ReadSignatureBytes+0x10>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <ReadSignatureBytes+0x16>
     480:	58 9a       	sbi	0x0b, 0	; 11
     482:	92 e4       	ldi	r25, 0x42	; 66
     484:	9a 95       	dec	r25
     486:	f1 f7       	brne	.-4      	; 0x484 <ReadSignatureBytes+0x1a>
     488:	00 c0       	rjmp	.+0      	; 0x48a <ReadSignatureBytes+0x20>
     48a:	58 98       	cbi	0x0b, 0	; 11
     48c:	87 ec       	ldi	r24, 0xC7	; 199
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <ReadSignatureBytes+0x26>
     494:	00 c0       	rjmp	.+0      	; 0x496 <ReadSignatureBytes+0x2c>
     496:	00 00       	nop
     498:	10 92 0a 01 	sts	0x010A, r1
     49c:	e5 e0       	ldi	r30, 0x05	; 5
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	80 81       	ld	r24, Z
     4a2:	84 60       	ori	r24, 0x04	; 4
     4a4:	80 83       	st	Z, r24
     4a6:	59 98       	cbi	0x0b, 1	; 11
     4a8:	5b 98       	cbi	0x0b, 3	; 11
     4aa:	87 ee       	ldi	r24, 0xE7	; 231
     4ac:	93 e0       	ldi	r25, 0x03	; 3
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <ReadSignatureBytes+0x44>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <ReadSignatureBytes+0x4a>
     4b4:	00 00       	nop
     4b6:	80 91 09 01 	lds	r24, 0x0109
     4ba:	80 93 2e 03 	sts	0x032E, r24
     4be:	59 9a       	sbi	0x0b, 1	; 11
     4c0:	80 81       	ld	r24, Z
     4c2:	8b 7f       	andi	r24, 0xFB	; 251
     4c4:	80 83       	st	Z, r24
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	80 93 0a 01 	sts	0x010A, r24
     4cc:	87 ec       	ldi	r24, 0xC7	; 199
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <ReadSignatureBytes+0x66>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <ReadSignatureBytes+0x6c>
     4d6:	00 00       	nop
     4d8:	5d 98       	cbi	0x0b, 5	; 11
     4da:	5c 98       	cbi	0x0b, 4	; 11
     4dc:	5b 98       	cbi	0x0b, 3	; 11
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 0b 01 	sts	0x010B, r24
     4e4:	92 e4       	ldi	r25, 0x42	; 66
     4e6:	9a 95       	dec	r25
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <ReadSignatureBytes+0x7c>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <ReadSignatureBytes+0x82>
     4ec:	58 9a       	sbi	0x0b, 0	; 11
     4ee:	82 e4       	ldi	r24, 0x42	; 66
     4f0:	8a 95       	dec	r24
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <ReadSignatureBytes+0x86>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <ReadSignatureBytes+0x8c>
     4f6:	58 98       	cbi	0x0b, 0	; 11
     4f8:	87 ec       	ldi	r24, 0xC7	; 199
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <ReadSignatureBytes+0x92>
     500:	00 c0       	rjmp	.+0      	; 0x502 <ReadSignatureBytes+0x98>
     502:	00 00       	nop
     504:	10 92 0a 01 	sts	0x010A, r1
     508:	80 81       	ld	r24, Z
     50a:	84 60       	ori	r24, 0x04	; 4
     50c:	80 83       	st	Z, r24
     50e:	59 98       	cbi	0x0b, 1	; 11
     510:	5b 98       	cbi	0x0b, 3	; 11
     512:	87 ee       	ldi	r24, 0xE7	; 231
     514:	93 e0       	ldi	r25, 0x03	; 3
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <ReadSignatureBytes+0xac>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <ReadSignatureBytes+0xb2>
     51c:	00 00       	nop
     51e:	80 91 09 01 	lds	r24, 0x0109
     522:	80 93 2f 03 	sts	0x032F, r24
     526:	59 9a       	sbi	0x0b, 1	; 11
     528:	80 81       	ld	r24, Z
     52a:	8b 7f       	andi	r24, 0xFB	; 251
     52c:	80 83       	st	Z, r24
     52e:	8f ef       	ldi	r24, 0xFF	; 255
     530:	80 93 0a 01 	sts	0x010A, r24
     534:	87 ec       	ldi	r24, 0xC7	; 199
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <ReadSignatureBytes+0xce>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <ReadSignatureBytes+0xd4>
     53e:	00 00       	nop
     540:	5d 98       	cbi	0x0b, 5	; 11
     542:	5c 98       	cbi	0x0b, 4	; 11
     544:	5b 98       	cbi	0x0b, 3	; 11
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	80 93 0b 01 	sts	0x010B, r24
     54c:	92 e4       	ldi	r25, 0x42	; 66
     54e:	9a 95       	dec	r25
     550:	f1 f7       	brne	.-4      	; 0x54e <ReadSignatureBytes+0xe4>
     552:	00 c0       	rjmp	.+0      	; 0x554 <ReadSignatureBytes+0xea>
     554:	58 9a       	sbi	0x0b, 0	; 11
     556:	82 e4       	ldi	r24, 0x42	; 66
     558:	8a 95       	dec	r24
     55a:	f1 f7       	brne	.-4      	; 0x558 <ReadSignatureBytes+0xee>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <ReadSignatureBytes+0xf4>
     55e:	58 98       	cbi	0x0b, 0	; 11
     560:	87 ec       	ldi	r24, 0xC7	; 199
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <ReadSignatureBytes+0xfa>
     568:	00 c0       	rjmp	.+0      	; 0x56a <ReadSignatureBytes+0x100>
     56a:	00 00       	nop
     56c:	10 92 0a 01 	sts	0x010A, r1
     570:	80 81       	ld	r24, Z
     572:	84 60       	ori	r24, 0x04	; 4
     574:	80 83       	st	Z, r24
     576:	59 98       	cbi	0x0b, 1	; 11
     578:	5b 98       	cbi	0x0b, 3	; 11
     57a:	87 ee       	ldi	r24, 0xE7	; 231
     57c:	93 e0       	ldi	r25, 0x03	; 3
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	f1 f7       	brne	.-4      	; 0x57e <ReadSignatureBytes+0x114>
     582:	00 c0       	rjmp	.+0      	; 0x584 <ReadSignatureBytes+0x11a>
     584:	00 00       	nop
     586:	80 91 09 01 	lds	r24, 0x0109
     58a:	80 93 30 03 	sts	0x0330, r24
     58e:	59 9a       	sbi	0x0b, 1	; 11
     590:	80 81       	ld	r24, Z
     592:	8b 7f       	andi	r24, 0xFB	; 251
     594:	80 83       	st	Z, r24
     596:	8f ef       	ldi	r24, 0xFF	; 255
     598:	80 93 0a 01 	sts	0x010A, r24
     59c:	10 92 0b 01 	sts	0x010B, r1
     5a0:	8e e2       	ldi	r24, 0x2E	; 46
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	08 95       	ret

000005a6 <ReadFlash>:
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	a5 de       	rcall	.-694    	; 0x30a <LoadCommand>
     5c0:	e1 2c       	mov	r14, r1
     5c2:	f1 2c       	mov	r15, r1
     5c4:	0f 2e       	mov	r0, r31
     5c6:	fa e0       	ldi	r31, 0x0A	; 10
     5c8:	af 2e       	mov	r10, r31
     5ca:	bb 24       	eor	r11, r11
     5cc:	b3 94       	inc	r11
     5ce:	f0 2d       	mov	r31, r0
     5d0:	05 e0       	ldi	r16, 0x05	; 5
     5d2:	11 e0       	ldi	r17, 0x01	; 1
     5d4:	0f 2e       	mov	r0, r31
     5d6:	f9 e0       	ldi	r31, 0x09	; 9
     5d8:	cf 2e       	mov	r12, r31
     5da:	dd 24       	eor	r13, r13
     5dc:	d3 94       	inc	r13
     5de:	f0 2d       	mov	r31, r0
     5e0:	cf e4       	ldi	r28, 0x4F	; 79
     5e2:	d2 e0       	ldi	r29, 0x02	; 2
     5e4:	99 24       	eor	r9, r9
     5e6:	9a 94       	dec	r9
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	dc de       	rcall	.-584    	; 0x3a6 <LoadHighAddress>
     5ee:	c7 01       	movw	r24, r14
     5f0:	c6 de       	rcall	.-628    	; 0x37e <LoadLowAddress>
     5f2:	f5 01       	movw	r30, r10
     5f4:	10 82       	st	Z, r1
     5f6:	f8 01       	movw	r30, r16
     5f8:	80 81       	ld	r24, Z
     5fa:	84 60       	ori	r24, 0x04	; 4
     5fc:	80 83       	st	Z, r24
     5fe:	59 98       	cbi	0x0b, 1	; 11
     600:	5b 98       	cbi	0x0b, 3	; 11
     602:	87 ee       	ldi	r24, 0xE7	; 231
     604:	93 e0       	ldi	r25, 0x03	; 3
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	f1 f7       	brne	.-4      	; 0x606 <ReadFlash+0x60>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <ReadFlash+0x66>
     60c:	00 00       	nop
     60e:	f6 01       	movw	r30, r12
     610:	80 81       	ld	r24, Z
     612:	1f 92       	push	r1
     614:	8f 93       	push	r24
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	42 d4       	rcall	.+2180   	; 0xea0 <printf>
     61c:	5b 9a       	sbi	0x0b, 3	; 11
     61e:	e7 ee       	ldi	r30, 0xE7	; 231
     620:	f3 e0       	ldi	r31, 0x03	; 3
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <ReadFlash+0x7c>
     626:	00 c0       	rjmp	.+0      	; 0x628 <ReadFlash+0x82>
     628:	00 00       	nop
     62a:	f6 01       	movw	r30, r12
     62c:	80 81       	ld	r24, Z
     62e:	1f 92       	push	r1
     630:	8f 93       	push	r24
     632:	df 93       	push	r29
     634:	cf 93       	push	r28
     636:	34 d4       	rcall	.+2152   	; 0xea0 <printf>
     638:	59 9a       	sbi	0x0b, 1	; 11
     63a:	f8 01       	movw	r30, r16
     63c:	80 81       	ld	r24, Z
     63e:	8b 7f       	andi	r24, 0xFB	; 251
     640:	80 83       	st	Z, r24
     642:	f5 01       	movw	r30, r10
     644:	90 82       	st	Z, r9
     646:	f2 e4       	ldi	r31, 0x42	; 66
     648:	fa 95       	dec	r31
     64a:	f1 f7       	brne	.-4      	; 0x648 <ReadFlash+0xa2>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <ReadFlash+0xa8>
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	e8 1a       	sub	r14, r24
     652:	f8 0a       	sbc	r15, r24
     654:	ed b7       	in	r30, 0x3d	; 61
     656:	fe b7       	in	r31, 0x3e	; 62
     658:	38 96       	adiw	r30, 0x08	; 8
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	fe bf       	out	0x3e, r31	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	ed bf       	out	0x3d, r30	; 61
     664:	f0 e1       	ldi	r31, 0x10	; 16
     666:	ef 16       	cp	r14, r31
     668:	f1 04       	cpc	r15, r1
     66a:	09 f0       	breq	.+2      	; 0x66e <ReadFlash+0xc8>
     66c:	bd cf       	rjmp	.-134    	; 0x5e8 <ReadFlash+0x42>
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	bf 90       	pop	r11
     680:	af 90       	pop	r10
     682:	9f 90       	pop	r9
     684:	08 95       	ret

00000686 <ChipErase>:
     686:	5d 9a       	sbi	0x0b, 5	; 11
     688:	5c 98       	cbi	0x0b, 4	; 11
     68a:	5b 98       	cbi	0x0b, 3	; 11
     68c:	80 e8       	ldi	r24, 0x80	; 128
     68e:	80 93 0b 01 	sts	0x010B, r24
     692:	82 e4       	ldi	r24, 0x42	; 66
     694:	8a 95       	dec	r24
     696:	f1 f7       	brne	.-4      	; 0x694 <ChipErase+0xe>
     698:	00 c0       	rjmp	.+0      	; 0x69a <ChipErase+0x14>
     69a:	58 9a       	sbi	0x0b, 0	; 11
     69c:	82 e4       	ldi	r24, 0x42	; 66
     69e:	8a 95       	dec	r24
     6a0:	f1 f7       	brne	.-4      	; 0x69e <ChipErase+0x18>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <ChipErase+0x1e>
     6a4:	58 98       	cbi	0x0b, 0	; 11
     6a6:	82 e4       	ldi	r24, 0x42	; 66
     6a8:	8a 95       	dec	r24
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <ChipErase+0x22>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <ChipErase+0x28>
     6ae:	5a 98       	cbi	0x0b, 2	; 11
     6b0:	82 e4       	ldi	r24, 0x42	; 66
     6b2:	8a 95       	dec	r24
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <ChipErase+0x2c>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <ChipErase+0x32>
     6b8:	5a 9a       	sbi	0x0b, 2	; 11
     6ba:	82 e4       	ldi	r24, 0x42	; 66
     6bc:	8a 95       	dec	r24
     6be:	f1 f7       	brne	.-4      	; 0x6bc <ChipErase+0x36>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <ChipErase+0x3c>
     6c2:	30 9b       	sbis	0x06, 0	; 6
     6c4:	fe cf       	rjmp	.-4      	; 0x6c2 <ChipErase+0x3c>
     6c6:	08 95       	ret

000006c8 <ProgramFlash>:
     6c8:	2f 92       	push	r2
     6ca:	3f 92       	push	r3
     6cc:	4f 92       	push	r4
     6ce:	5f 92       	push	r5
     6d0:	6f 92       	push	r6
     6d2:	7f 92       	push	r7
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <ProgramFlash+0x26>
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <ProgramFlash+0x28>
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	80 e1       	ldi	r24, 0x10	; 16
     6f6:	09 de       	rcall	.-1006   	; 0x30a <LoadCommand>
     6f8:	81 2c       	mov	r8, r1
     6fa:	91 2c       	mov	r9, r1
     6fc:	54 01       	movw	r10, r8
     6fe:	0f 2e       	mov	r0, r31
     700:	f7 e5       	ldi	r31, 0x57	; 87
     702:	2f 2e       	mov	r2, r31
     704:	f2 e0       	ldi	r31, 0x02	; 2
     706:	3f 2e       	mov	r3, r31
     708:	f0 2d       	mov	r31, r0
     70a:	2d dd       	rcall	.-1446   	; 0x166 <getHexRow>
     70c:	3c 01       	movw	r6, r24
     70e:	dc 01       	movw	r26, r24
     710:	14 96       	adiw	r26, 0x04	; 4
     712:	8c 91       	ld	r24, X
     714:	14 97       	sbiw	r26, 0x04	; 4
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	09 f4       	brne	.+2      	; 0x71c <ProgramFlash+0x54>
     71a:	66 c0       	rjmp	.+204    	; 0x7e8 <ProgramFlash+0x120>
     71c:	11 96       	adiw	r26, 0x01	; 1
     71e:	4c 90       	ld	r4, X
     720:	11 97       	sbiw	r26, 0x01	; 1
     722:	51 2c       	mov	r5, r1
     724:	12 96       	adiw	r26, 0x02	; 2
     726:	8c 91       	ld	r24, X
     728:	12 97       	sbiw	r26, 0x02	; 2
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	98 2f       	mov	r25, r24
     72e:	88 27       	eor	r24, r24
     730:	13 96       	adiw	r26, 0x03	; 3
     732:	2c 91       	ld	r18, X
     734:	26 95       	lsr	r18
     736:	fc 01       	movw	r30, r24
     738:	e2 2b       	or	r30, r18
     73a:	fa 83       	std	Y+2, r31	; 0x02
     73c:	e9 83       	std	Y+1, r30	; 0x01
     73e:	41 14       	cp	r4, r1
     740:	51 04       	cpc	r5, r1
     742:	09 f4       	brne	.+2      	; 0x746 <ProgramFlash+0x7e>
     744:	41 c0       	rjmp	.+130    	; 0x7c8 <ProgramFlash+0x100>
     746:	63 01       	movw	r12, r6
     748:	f5 e0       	ldi	r31, 0x05	; 5
     74a:	cf 0e       	add	r12, r31
     74c:	d1 1c       	adc	r13, r1
     74e:	09 81       	ldd	r16, Y+1	; 0x01
     750:	1a 81       	ldd	r17, Y+2	; 0x02
     752:	e1 2c       	mov	r14, r1
     754:	f1 2c       	mov	r15, r1
     756:	1b 82       	std	Y+3, r1	; 0x03
     758:	1c 82       	std	Y+4, r1	; 0x04
     75a:	c8 01       	movw	r24, r16
     75c:	10 de       	rcall	.-992    	; 0x37e <LoadLowAddress>
     75e:	1f 93       	push	r17
     760:	0f 93       	push	r16
     762:	3f 92       	push	r3
     764:	2f 92       	push	r2
     766:	9c d3       	rcall	.+1848   	; 0xea0 <printf>
     768:	f3 01       	movw	r30, r6
     76a:	ee 0d       	add	r30, r14
     76c:	ff 1d       	adc	r31, r15
     76e:	e6 80       	ldd	r14, Z+6	; 0x06
     770:	f1 2c       	mov	r15, r1
     772:	fe 2c       	mov	r15, r14
     774:	ee 24       	eor	r14, r14
     776:	d6 01       	movw	r26, r12
     778:	8c 91       	ld	r24, X
     77a:	e8 2a       	or	r14, r24
     77c:	c7 01       	movw	r24, r14
     77e:	d9 dd       	rcall	.-1102   	; 0x332 <WriteWord>
     780:	ff 92       	push	r15
     782:	ef 92       	push	r14
     784:	a8 e6       	ldi	r26, 0x68	; 104
     786:	b2 e0       	ldi	r27, 0x02	; 2
     788:	bf 93       	push	r27
     78a:	af 93       	push	r26
     78c:	89 d3       	rcall	.+1810   	; 0xea0 <printf>
     78e:	2b 81       	ldd	r18, Y+3	; 0x03
     790:	3c 81       	ldd	r19, Y+4	; 0x04
     792:	c9 01       	movw	r24, r18
     794:	aa 27       	eor	r26, r26
     796:	97 fd       	sbrc	r25, 7
     798:	a0 95       	com	r26
     79a:	ba 2f       	mov	r27, r26
     79c:	88 0e       	add	r8, r24
     79e:	99 1e       	adc	r9, r25
     7a0:	aa 1e       	adc	r10, r26
     7a2:	bb 1e       	adc	r11, r27
     7a4:	2e 5f       	subi	r18, 0xFE	; 254
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	3c 83       	std	Y+4, r19	; 0x04
     7aa:	2b 83       	std	Y+3, r18	; 0x03
     7ac:	79 01       	movw	r14, r18
     7ae:	0f 5f       	subi	r16, 0xFF	; 255
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
     7b2:	32 e0       	ldi	r19, 0x02	; 2
     7b4:	c3 0e       	add	r12, r19
     7b6:	d1 1c       	adc	r13, r1
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	e4 14       	cp	r14, r4
     7c4:	f5 04       	cpc	r15, r5
     7c6:	48 f2       	brcs	.-110    	; 0x75a <ProgramFlash+0x92>
     7c8:	d5 01       	movw	r26, r10
     7ca:	c4 01       	movw	r24, r8
     7cc:	8f 71       	andi	r24, 0x1F	; 31
     7ce:	99 27       	eor	r25, r25
     7d0:	aa 27       	eor	r26, r26
     7d2:	bb 27       	eor	r27, r27
     7d4:	89 2b       	or	r24, r25
     7d6:	8a 2b       	or	r24, r26
     7d8:	8b 2b       	or	r24, r27
     7da:	09 f0       	breq	.+2      	; 0x7de <ProgramFlash+0x116>
     7dc:	96 cf       	rjmp	.-212    	; 0x70a <ProgramFlash+0x42>
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	e1 dd       	rcall	.-1086   	; 0x3a6 <LoadHighAddress>
     7e4:	f4 dd       	rcall	.-1048   	; 0x3ce <ProgramPage>
     7e6:	91 cf       	rjmp	.-222    	; 0x70a <ProgramFlash+0x42>
     7e8:	5f e1       	ldi	r21, 0x1F	; 31
     7ea:	85 22       	and	r8, r21
     7ec:	99 24       	eor	r9, r9
     7ee:	aa 24       	eor	r10, r10
     7f0:	bb 24       	eor	r11, r11
     7f2:	89 28       	or	r8, r9
     7f4:	8a 28       	or	r8, r10
     7f6:	8b 28       	or	r8, r11
     7f8:	21 f0       	breq	.+8      	; 0x802 <ProgramFlash+0x13a>
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	d3 dd       	rcall	.-1114   	; 0x3a6 <LoadHighAddress>
     800:	e6 dd       	rcall	.-1076   	; 0x3ce <ProgramPage>
     802:	f2 dd       	rcall	.-1052   	; 0x3e8 <EndPageProgramming>
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	bf 90       	pop	r11
     81e:	af 90       	pop	r10
     820:	9f 90       	pop	r9
     822:	8f 90       	pop	r8
     824:	7f 90       	pop	r7
     826:	6f 90       	pop	r6
     828:	5f 90       	pop	r5
     82a:	4f 90       	pop	r4
     82c:	3f 90       	pop	r3
     82e:	2f 90       	pop	r2
     830:	08 95       	ret

00000832 <ExitParallelProgrammingMode>:
}

void ExitParallelProgrammingMode(void)
{
	disableVppRegulator();
     832:	d0 d2       	rcall	.+1440   	; 0xdd4 <disableVppRegulator>
	disableVccRegulator();
     834:	d3 d2       	rcall	.+1446   	; 0xddc <disableVccRegulator>
	disableVLogic();
     836:	f2 d2       	rcall	.+1508   	; 0xe1c <disableVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     838:	8f e0       	ldi	r24, 0x0F	; 15
     83a:	97 e2       	ldi	r25, 0x27	; 39
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <ExitParallelProgrammingMode+0xa>
     840:	00 c0       	rjmp	.+0      	; 0x842 <ExitParallelProgrammingMode+0x10>
     842:	00 00       	nop
	
	_delay_ms(5);
	DATA_PORT = 0x00;
     844:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
     848:	1b b8       	out	0x0b, r1	; 11
     84a:	8f ec       	ldi	r24, 0xCF	; 207
     84c:	97 e0       	ldi	r25, 0x07	; 7
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <ExitParallelProgrammingMode+0x1c>
     852:	00 c0       	rjmp	.+0      	; 0x854 <ExitParallelProgrammingMode+0x22>
     854:	00 00       	nop
	_delay_ms(1);
	SPI_FPGA_Write(FPGA_Disable);
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	64 dc       	rcall	.-1848   	; 0x122 <SPI_FPGA_Write>
	
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Shift Registers
     85a:	e5 e0       	ldi	r30, 0x05	; 5
     85c:	f1 e0       	ldi	r31, 0x01	; 1
     85e:	80 81       	ld	r24, Z
     860:	8f 7d       	andi	r24, 0xDF	; 223
     862:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     864:	95 e3       	ldi	r25, 0x35	; 53
     866:	9a 95       	dec	r25
     868:	f1 f7       	brne	.-4      	; 0x866 <ExitParallelProgrammingMode+0x34>
     86a:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SR_RESET);
     86c:	80 81       	ld	r24, Z
     86e:	80 62       	ori	r24, 0x20	; 32
     870:	80 83       	st	Z, r24
     872:	2d e0       	ldi	r18, 0x0D	; 13
     874:	2a 95       	dec	r18
     876:	f1 f7       	brne	.-4      	; 0x874 <ExitParallelProgrammingMode+0x42>
     878:	00 00       	nop
	_delay_us(5);
	SR_CNTRL_PORT |= (1<<SRCS);
     87a:	80 81       	ld	r24, Z
     87c:	80 61       	ori	r24, 0x10	; 16
     87e:	80 83       	st	Z, r24
     880:	85 e3       	ldi	r24, 0x35	; 53
     882:	8a 95       	dec	r24
     884:	f1 f7       	brne	.-4      	; 0x882 <ExitParallelProgrammingMode+0x50>
     886:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
     888:	80 81       	ld	r24, Z
     88a:	8f 7e       	andi	r24, 0xEF	; 239
     88c:	80 83       	st	Z, r24
	
	SR_CNTRL_PORT |= (1<<SROE);
     88e:	80 81       	ld	r24, Z
     890:	88 60       	ori	r24, 0x08	; 8
     892:	80 83       	st	Z, r24
	
	LED_PORT |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
     894:	84 b3       	in	r24, 0x14	; 20
     896:	87 60       	ori	r24, 0x07	; 7
     898:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     89a:	9f ef       	ldi	r25, 0xFF	; 255
     89c:	29 e6       	ldi	r18, 0x69	; 105
     89e:	88 e1       	ldi	r24, 0x18	; 24
     8a0:	91 50       	subi	r25, 0x01	; 1
     8a2:	20 40       	sbci	r18, 0x00	; 0
     8a4:	80 40       	sbci	r24, 0x00	; 0
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <ExitParallelProgrammingMode+0x6e>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <ExitParallelProgrammingMode+0x78>
     8aa:	00 00       	nop
	_delay_ms(1000);
	LED_PORT |= (1<<LED_Green);
     8ac:	a0 9a       	sbi	0x14, 0	; 20
	LED_PORT &= ~((1<<LED_Yellow) | (1<<LED_Red));
     8ae:	84 b3       	in	r24, 0x14	; 20
     8b0:	89 7f       	andi	r24, 0xF9	; 249
     8b2:	84 bb       	out	0x14, r24	; 20
     8b4:	08 95       	ret

000008b6 <main>:
#define ATmega48P 4

int main(void)
{
	char* SignatureBytes;
	uart2_init();
     8b6:	6d d0       	rcall	.+218    	; 0x992 <uart2_init>
	hexInit();
     8b8:	4a dc       	rcall	.-1900   	; 0x14e <hexInit>
//
	SPI_Init();
     8ba:	69 d1       	rcall	.+722    	; 0xb8e <SPI_Init>
	printf("\n\n");
     8bc:	80 ef       	ldi	r24, 0xF0	; 240
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	05 d3       	rcall	.+1546   	; 0xecc <puts>
	writeHexFileTest();
     8c2:	96 dc       	rcall	.-1748   	; 0x1f0 <writeHexFileTest>
	RAMPrint(HEX_FILE_ADDRESS, 50);
     8c4:	42 e3       	ldi	r20, 0x32	; 50
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	cb 01       	movw	r24, r22
     8ce:	07 d1       	rcall	.+526    	; 0xade <RAMPrint>
	//Write test file to external RAM 
	//Test switching circuitry code
	
	ApplyPullDowns();
     8d0:	dc dc       	rcall	.-1608   	; 0x28a <ApplyPullDowns>
	ProgInit();
     8d2:	bc dc       	rcall	.-1672   	; 0x24c <ProgInit>
	EnableProgMode(ATtiny2313);
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	9b dd       	rcall	.-1226   	; 0x40e <EnableProgMode>
	//EnableProgMode(ATmega324PA);
	SignatureBytes = ReadSignatureBytes();
     8d8:	c8 dd       	rcall	.-1136   	; 0x46a <ReadSignatureBytes>
     8da:	ec 01       	movw	r28, r24
	
	printf("\nSignature Bytes: 0x%02X 0x%02X 0x%02X\n", *SignatureBytes, *(SignatureBytes + 1), *(SignatureBytes + 2));
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	1f 92       	push	r1
     8e0:	8f 93       	push	r24
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	1f 92       	push	r1
     8e6:	8f 93       	push	r24
     8e8:	88 81       	ld	r24, Y
     8ea:	1f 92       	push	r1
     8ec:	8f 93       	push	r24
     8ee:	86 e7       	ldi	r24, 0x76	; 118
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	d4 d2       	rcall	.+1448   	; 0xea0 <printf>
	if ( (*SignatureBytes == 0x1E) && (*(SignatureBytes + 1) == 0x91) && (*(SignatureBytes + 2) == 0x0A) )
     8f8:	8d b7       	in	r24, 0x3d	; 61
     8fa:	9e b7       	in	r25, 0x3e	; 62
     8fc:	08 96       	adiw	r24, 0x08	; 8
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	9e bf       	out	0x3e, r25	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	8d bf       	out	0x3d, r24	; 61
     908:	88 81       	ld	r24, Y
     90a:	8e 31       	cpi	r24, 0x1E	; 30
     90c:	e9 f4       	brne	.+58     	; 0x948 <main+0x92>
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	81 39       	cpi	r24, 0x91	; 145
     912:	d1 f4       	brne	.+52     	; 0x948 <main+0x92>
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	8a 30       	cpi	r24, 0x0A	; 10
     918:	b9 f4       	brne	.+46     	; 0x948 <main+0x92>
	{
		printf("Starting Programming!\n");
     91a:	8e e9       	ldi	r24, 0x9E	; 158
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	d6 d2       	rcall	.+1452   	; 0xecc <puts>
		printf("Erasing...\n");
     920:	84 eb       	ldi	r24, 0xB4	; 180
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	d3 d2       	rcall	.+1446   	; 0xecc <puts>
		ChipErase();
     926:	af de       	rcall	.-674    	; 0x686 <ChipErase>
		ReadFlash();
     928:	3e de       	rcall	.-900    	; 0x5a6 <ReadFlash>
		printf("\nDone Erasing!\n");
     92a:	8f eb       	ldi	r24, 0xBF	; 191
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	ce d2       	rcall	.+1436   	; 0xecc <puts>
		printf("Programming...\n");
     930:	8e ec       	ldi	r24, 0xCE	; 206
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	cb d2       	rcall	.+1430   	; 0xecc <puts>
		ProgramFlash();
     936:	c8 de       	rcall	.-624    	; 0x6c8 <ProgramFlash>
		printf("Verifying...\n");
     938:	8d ed       	ldi	r24, 0xDD	; 221
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	c7 d2       	rcall	.+1422   	; 0xecc <puts>
		ReadFlash();
     93e:	33 de       	rcall	.-922    	; 0x5a6 <ReadFlash>
		printf("\nDone!\n\n");
     940:	8a ee       	ldi	r24, 0xEA	; 234
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	c3 d2       	rcall	.+1414   	; 0xecc <puts>
     946:	03 c0       	rjmp	.+6      	; 0x94e <main+0x98>
	}
	else
	{
		printf("ERROR: Signature Bytes Mismatch\n");
     948:	82 ef       	ldi	r24, 0xF2	; 242
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	bf d2       	rcall	.+1406   	; 0xecc <puts>
	//else
	//{
	//printf("ERROR: Signature Bytes Mismatch\n");
	//}
	
	ExitParallelProgrammingMode();
     94e:	71 df       	rcall	.-286    	; 0x832 <ExitParallelProgrammingMode>
     950:	ff cf       	rjmp	.-2      	; 0x950 <main+0x9a>

00000952 <uart_sendStream>:
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
	putchar('[');
	putchar('0');
	putchar('m');
}
     952:	cf 93       	push	r28
     954:	c8 2f       	mov	r28, r24
     956:	8a 30       	cpi	r24, 0x0A	; 10
     958:	11 f4       	brne	.+4      	; 0x95e <uart_sendStream+0xc>
     95a:	8d e0       	ldi	r24, 0x0D	; 13
     95c:	fa df       	rcall	.-12     	; 0x952 <uart_sendStream>
     95e:	e0 ed       	ldi	r30, 0xD0	; 208
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	90 81       	ld	r25, Z
     964:	95 ff       	sbrs	r25, 5
     966:	fd cf       	rjmp	.-6      	; 0x962 <uart_sendStream+0x10>
     968:	c0 93 d6 00 	sts	0x00D6, r28
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <uart_receiveStream>:
     974:	cf 93       	push	r28
     976:	bc 01       	movw	r22, r24
     978:	e0 ed       	ldi	r30, 0xD0	; 208
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	88 23       	and	r24, r24
     980:	ec f7       	brge	.-6      	; 0x97c <uart_receiveStream+0x8>
     982:	c0 91 d6 00 	lds	r28, 0x00D6
     986:	8c 2f       	mov	r24, r28
     988:	e4 df       	rcall	.-56     	; 0x952 <uart_sendStream>
     98a:	8c 2f       	mov	r24, r28
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     992:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     996:	83 e3       	ldi	r24, 0x33	; 51
     998:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     99c:	88 e1       	ldi	r24, 0x18	; 24
     99e:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     9a2:	86 e0       	ldi	r24, 0x06	; 6
     9a4:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     9a8:	8c e3       	ldi	r24, 0x3C	; 60
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	90 93 84 03 	sts	0x0384, r25
     9b0:	80 93 83 03 	sts	0x0383, r24
     9b4:	90 93 86 03 	sts	0x0386, r25
     9b8:	80 93 85 03 	sts	0x0385, r24
     9bc:	08 95       	ret

000009be <getRAMStatus>:
		*(buffer + i) = SPI_ReadData();
	}
	RAM_PORT |= (1<<RAM_CS); 
	//printf("%d\n", buffer);
	return buffer; 
}
     9be:	a3 98       	cbi	0x14, 3	; 20
     9c0:	85 e0       	ldi	r24, 0x05	; 5
     9c2:	8e bd       	out	0x2e, r24	; 46
     9c4:	0d b4       	in	r0, 0x2d	; 45
     9c6:	07 fe       	sbrs	r0, 7
     9c8:	fd cf       	rjmp	.-6      	; 0x9c4 <getRAMStatus+0x6>
     9ca:	1e bc       	out	0x2e, r1	; 46
     9cc:	0d b4       	in	r0, 0x2d	; 45
     9ce:	07 fe       	sbrs	r0, 7
     9d0:	fd cf       	rjmp	.-6      	; 0x9cc <getRAMStatus+0xe>
     9d2:	a3 9a       	sbi	0x14, 3	; 20
     9d4:	8e b5       	in	r24, 0x2e	; 46
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	08 95       	ret

000009da <setRAMStatus>:
     9da:	a3 98       	cbi	0x14, 3	; 20
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	9e bd       	out	0x2e, r25	; 46
     9e0:	0d b4       	in	r0, 0x2d	; 45
     9e2:	07 fe       	sbrs	r0, 7
     9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <setRAMStatus+0x6>
     9e6:	8e bd       	out	0x2e, r24	; 46
     9e8:	0d b4       	in	r0, 0x2d	; 45
     9ea:	07 fe       	sbrs	r0, 7
     9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <setRAMStatus+0xe>
     9ee:	a3 9a       	sbi	0x14, 3	; 20
     9f0:	08 95       	ret

000009f2 <SPI_WriteAddress>:
     9f2:	26 2f       	mov	r18, r22
     9f4:	97 2f       	mov	r25, r23
     9f6:	48 2f       	mov	r20, r24
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	8e bd       	out	0x2e, r24	; 46
     9fc:	0d b4       	in	r0, 0x2d	; 45
     9fe:	07 fe       	sbrs	r0, 7
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <SPI_WriteAddress+0xa>
     a02:	4e bd       	out	0x2e, r20	; 46
     a04:	0d b4       	in	r0, 0x2d	; 45
     a06:	07 fe       	sbrs	r0, 7
     a08:	fd cf       	rjmp	.-6      	; 0xa04 <SPI_WriteAddress+0x12>
     a0a:	89 2f       	mov	r24, r25
     a0c:	8e bd       	out	0x2e, r24	; 46
     a0e:	0d b4       	in	r0, 0x2d	; 45
     a10:	07 fe       	sbrs	r0, 7
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <SPI_WriteAddress+0x1c>
     a14:	2e bd       	out	0x2e, r18	; 46
     a16:	0d b4       	in	r0, 0x2d	; 45
     a18:	07 fe       	sbrs	r0, 7
     a1a:	fd cf       	rjmp	.-6      	; 0xa16 <SPI_WriteAddress+0x24>
     a1c:	08 95       	ret

00000a1e <SPI_WriteData>:
     a1e:	8e bd       	out	0x2e, r24	; 46
     a20:	0d b4       	in	r0, 0x2d	; 45
     a22:	07 fe       	sbrs	r0, 7
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <SPI_WriteData+0x2>
     a26:	08 95       	ret

00000a28 <SPI_ReadAddress>:
     a28:	26 2f       	mov	r18, r22
     a2a:	97 2f       	mov	r25, r23
     a2c:	48 2f       	mov	r20, r24
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	8e bd       	out	0x2e, r24	; 46
     a32:	0d b4       	in	r0, 0x2d	; 45
     a34:	07 fe       	sbrs	r0, 7
     a36:	fd cf       	rjmp	.-6      	; 0xa32 <SPI_ReadAddress+0xa>
     a38:	4e bd       	out	0x2e, r20	; 46
     a3a:	0d b4       	in	r0, 0x2d	; 45
     a3c:	07 fe       	sbrs	r0, 7
     a3e:	fd cf       	rjmp	.-6      	; 0xa3a <SPI_ReadAddress+0x12>
     a40:	89 2f       	mov	r24, r25
     a42:	8e bd       	out	0x2e, r24	; 46
     a44:	0d b4       	in	r0, 0x2d	; 45
     a46:	07 fe       	sbrs	r0, 7
     a48:	fd cf       	rjmp	.-6      	; 0xa44 <SPI_ReadAddress+0x1c>
     a4a:	2e bd       	out	0x2e, r18	; 46
     a4c:	0d b4       	in	r0, 0x2d	; 45
     a4e:	07 fe       	sbrs	r0, 7
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <SPI_ReadAddress+0x24>
     a52:	08 95       	ret

00000a54 <SPI_ReadData>:
     a54:	1e bc       	out	0x2e, r1	; 46
     a56:	0d b4       	in	r0, 0x2d	; 45
     a58:	07 fe       	sbrs	r0, 7
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <SPI_ReadData+0x2>
     a5c:	8e b5       	in	r24, 0x2e	; 46
     a5e:	08 95       	ret

00000a60 <RAMWrite>:
     a60:	af 92       	push	r10
     a62:	bf 92       	push	r11
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	ec 01       	movw	r28, r24
     a76:	8b 01       	movw	r16, r22
     a78:	5a 01       	movw	r10, r20
     a7a:	a3 98       	cbi	0x14, 3	; 20
     a7c:	6b 01       	movw	r12, r22
     a7e:	e1 2c       	mov	r14, r1
     a80:	f1 2c       	mov	r15, r1
     a82:	c7 01       	movw	r24, r14
     a84:	b6 01       	movw	r22, r12
     a86:	b5 df       	rcall	.-150    	; 0x9f2 <SPI_WriteAddress>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	c9 df       	rcall	.-110    	; 0xa1e <SPI_WriteData>
     a8c:	a3 9a       	sbi	0x14, 3	; 20
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	a4 df       	rcall	.-184    	; 0x9da <setRAMStatus>
     a92:	95 df       	rcall	.-214    	; 0x9be <getRAMStatus>
     a94:	a3 98       	cbi	0x14, 3	; 20
     a96:	c7 01       	movw	r24, r14
     a98:	b6 01       	movw	r22, r12
     a9a:	ab df       	rcall	.-170    	; 0x9f2 <SPI_WriteAddress>
     a9c:	a1 14       	cp	r10, r1
     a9e:	b1 04       	cpc	r11, r1
     aa0:	89 f0       	breq	.+34     	; 0xac4 <RAMWrite+0x64>
     aa2:	65 01       	movw	r12, r10
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	e1 2c       	mov	r14, r1
     aaa:	f1 2c       	mov	r15, r1
     aac:	fe 01       	movw	r30, r28
     aae:	e8 0f       	add	r30, r24
     ab0:	f9 1f       	adc	r31, r25
     ab2:	80 81       	ld	r24, Z
     ab4:	b4 df       	rcall	.-152    	; 0xa1e <SPI_WriteData>
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	e8 1a       	sub	r14, r24
     aba:	f8 0a       	sbc	r15, r24
     abc:	c7 01       	movw	r24, r14
     abe:	ec 14       	cp	r14, r12
     ac0:	fd 04       	cpc	r15, r13
     ac2:	a1 f7       	brne	.-24     	; 0xaac <RAMWrite+0x4c>
     ac4:	a3 9a       	sbi	0x14, 3	; 20
     ac6:	c8 01       	movw	r24, r16
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	08 95       	ret

00000ade <RAMPrint>:

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	c6 2f       	mov	r28, r22
     aec:	d7 2f       	mov	r29, r23
     aee:	18 2f       	mov	r17, r24
     af0:	09 2f       	mov	r16, r25
     af2:	7a 01       	movw	r14, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     af4:	80 e4       	ldi	r24, 0x40	; 64
     af6:	71 df       	rcall	.-286    	; 0x9da <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     af8:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     afa:	6c 2f       	mov	r22, r28
     afc:	7d 2f       	mov	r23, r29
     afe:	81 2f       	mov	r24, r17
     b00:	90 2f       	mov	r25, r16
     b02:	92 df       	rcall	.-220    	; 0xa28 <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	82 e1       	ldi	r24, 0x12	; 18
     b0e:	93 e0       	ldi	r25, 0x03	; 3
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	c5 d1       	rcall	.+906    	; 0xea0 <printf>
	int i; 
	for(i=0; i<length; i++)
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	99 f0       	breq	.+38     	; 0xb4e <RAMPrint+0x70>
     b28:	c0 e0       	ldi	r28, 0x00	; 0
     b2a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("0x%02X ", SPI_ReadData());
     b2c:	0f e4       	ldi	r16, 0x4F	; 79
     b2e:	12 e0       	ldi	r17, 0x02	; 2
     b30:	91 df       	rcall	.-222    	; 0xa54 <SPI_ReadData>
     b32:	1f 92       	push	r1
     b34:	8f 93       	push	r24
     b36:	1f 93       	push	r17
     b38:	0f 93       	push	r16
     b3a:	b2 d1       	rcall	.+868    	; 0xea0 <printf>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     b3c:	21 96       	adiw	r28, 0x01	; 1
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	ce 15       	cp	r28, r14
     b48:	df 05       	cpc	r29, r15
     b4a:	91 f7       	brne	.-28     	; 0xb30 <RAMPrint+0x52>
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <RAMPrint+0x74>
     b4e:	e1 2c       	mov	r14, r1
     b50:	f1 2c       	mov	r15, r1
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     b52:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     b54:	ff 92       	push	r15
     b56:	ef 92       	push	r14
     b58:	83 e2       	ldi	r24, 0x23	; 35
     b5a:	93 e0       	ldi	r25, 0x03	; 3
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	9f d1       	rcall	.+830    	; 0xea0 <printf>
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	08 95       	ret

00000b78 <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
     b78:	cf 93       	push	r28
     b7a:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     b7c:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     b7e:	cb 01       	movw	r24, r22
     b80:	ba 01       	movw	r22, r20
     b82:	37 df       	rcall	.-402    	; 0x9f2 <SPI_WriteAddress>
	SPI_WriteData(data);
     b84:	8c 2f       	mov	r24, r28
     b86:	4b df       	rcall	.-362    	; 0xa1e <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     b88:	a3 9a       	sbi	0x14, 3	; 20
}
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
     b8e:	87 e0       	ldi	r24, 0x07	; 7
     b90:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     b92:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     b94:	a3 9a       	sbi	0x14, 3	; 20
	
	RAM_HOLD_DDR |= (1<<RAM_HOLD);
     b96:	27 9a       	sbi	0x04, 7	; 4
	RAM_HOLD_PORT |= (1<<RAM_HOLD);
     b98:	2f 9a       	sbi	0x05, 7	; 5
	
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     b9a:	81 e5       	ldi	r24, 0x51	; 81
     b9c:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	ba 01       	movw	r22, r20
     ba4:	82 e3       	ldi	r24, 0x32	; 50
     ba6:	e8 cf       	rjmp	.-48     	; 0xb78 <RAMWriteByte>
     ba8:	08 95       	ret

00000baa <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint32_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     baa:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     bac:	3d df       	rcall	.-390    	; 0xa28 <SPI_ReadAddress>
	char data = SPI_ReadData();
     bae:	52 df       	rcall	.-348    	; 0xa54 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     bb0:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     bb2:	08 95       	ret

00000bb4 <SPI_Switching_Circuitry_Init>:
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			ShiftRegData[i][j] = 0x00; 
		}
	}
}
     bb4:	84 b1       	in	r24, 0x04	; 4
     bb6:	87 60       	ori	r24, 0x07	; 7
     bb8:	84 b9       	out	0x04, r24	; 4
     bba:	82 e5       	ldi	r24, 0x52	; 82
     bbc:	8c bd       	out	0x2c, r24	; 44
     bbe:	e4 e0       	ldi	r30, 0x04	; 4
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	80 81       	ld	r24, Z
     bc4:	88 63       	ori	r24, 0x38	; 56
     bc6:	80 83       	st	Z, r24
     bc8:	e5 e0       	ldi	r30, 0x05	; 5
     bca:	f1 e0       	ldi	r31, 0x01	; 1
     bcc:	80 81       	ld	r24, Z
     bce:	80 62       	ori	r24, 0x20	; 32
     bd0:	80 83       	st	Z, r24
     bd2:	80 81       	ld	r24, Z
     bd4:	87 7e       	andi	r24, 0xE7	; 231
     bd6:	80 83       	st	Z, r24
     bd8:	08 95       	ret

00000bda <SPI_Switching_Circuitry_Write>:
     bda:	8e bd       	out	0x2e, r24	; 46
     bdc:	0d b4       	in	r0, 0x2d	; 45
     bde:	07 fe       	sbrs	r0, 7
     be0:	fd cf       	rjmp	.-6      	; 0xbdc <SPI_Switching_Circuitry_Write+0x2>
     be2:	08 95       	ret

00000be4 <SetShiftRegData>:


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
     be4:	db 01       	movw	r26, r22
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
	{
		ShiftRegData[pinType][i] = *(data + i); 
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	fc 01       	movw	r30, r24
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	e8 0f       	add	r30, r24
     bf4:	f9 1f       	adc	r31, r25
     bf6:	eb 59       	subi	r30, 0x9B	; 155
     bf8:	fc 4f       	sbci	r31, 0xFC	; 252


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
	{
		ShiftRegData[pinType][i] = *(data + i); 
     bfe:	2d 91       	ld	r18, X+
     c00:	21 93       	st	Z+, r18


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	85 30       	cpi	r24, 0x05	; 5
     c06:	91 05       	cpc	r25, r1
     c08:	d1 f7       	brne	.-12     	; 0xbfe <SetShiftRegData+0x1a>
	{
		ShiftRegData[pinType][i] = *(data + i); 
	}
}
     c0a:	08 95       	ret

00000c0c <WriteShiftRegData>:

void WriteShiftRegData()
{
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	0f 2e       	mov	r0, r31
     c22:	fa e6       	ldi	r31, 0x6A	; 106
     c24:	ef 2e       	mov	r14, r31
     c26:	f3 e0       	ldi	r31, 0x03	; 3
     c28:	ff 2e       	mov	r15, r31
     c2a:	f0 2d       	mov	r31, r0
     c2c:	0f 2e       	mov	r0, r31
     c2e:	f3 e8       	ldi	r31, 0x83	; 131
     c30:	cf 2e       	mov	r12, r31
     c32:	f3 e0       	ldi	r31, 0x03	; 3
     c34:	df 2e       	mov	r13, r31
     c36:	f0 2d       	mov	r31, r0
     c38:	a1 2c       	mov	r10, r1
     c3a:	b1 2c       	mov	r11, r1
     c3c:	0e c0       	rjmp	.+28     	; 0xc5a <WriteShiftRegData+0x4e>
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
     c3e:	f8 01       	movw	r30, r16
     c40:	81 91       	ld	r24, Z+
     c42:	8f 01       	movw	r16, r30
     c44:	ca df       	rcall	.-108    	; 0xbda <SPI_Switching_Circuitry_Write>
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
     c46:	21 96       	adiw	r28, 0x01	; 1
     c48:	c5 30       	cpi	r28, 0x05	; 5
     c4a:	d1 05       	cpc	r29, r1
     c4c:	c1 f7       	brne	.-16     	; 0xc3e <WriteShiftRegData+0x32>
     c4e:	f5 e0       	ldi	r31, 0x05	; 5
     c50:	ef 0e       	add	r14, r31
     c52:	f1 1c       	adc	r15, r1
	//{
		//SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
     c54:	ec 14       	cp	r14, r12
     c56:	fd 04       	cpc	r15, r13
     c58:	21 f0       	breq	.+8      	; 0xc62 <WriteShiftRegData+0x56>
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     c5a:	87 01       	movw	r16, r14
     c5c:	ca 2d       	mov	r28, r10
     c5e:	db 2d       	mov	r29, r11
     c60:	ee cf       	rjmp	.-36     	; 0xc3e <WriteShiftRegData+0x32>
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
		}
	}
	
	SR_CNTRL_PORT |= (1<<SRCS);
     c62:	e5 e0       	ldi	r30, 0x05	; 5
     c64:	f1 e0       	ldi	r31, 0x01	; 1
     c66:	80 81       	ld	r24, Z
     c68:	80 61       	ori	r24, 0x10	; 16
     c6a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6c:	f5 e3       	ldi	r31, 0x35	; 53
     c6e:	fa 95       	dec	r31
     c70:	f1 f7       	brne	.-4      	; 0xc6e <WriteShiftRegData+0x62>
     c72:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
     c74:	e5 e0       	ldi	r30, 0x05	; 5
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	80 81       	ld	r24, Z
     c7a:	8f 7e       	andi	r24, 0xEF	; 239
     c7c:	80 83       	st	Z, r24
}
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	bf 90       	pop	r11
     c90:	af 90       	pop	r10
     c92:	08 95       	ret

00000c94 <setAtTiny2313>:

void setAtTiny2313()
{
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	00 d0       	rcall	.+0      	; 0xc9a <setAtTiny2313+0x6>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <setAtTiny2313+0x8>
     c9c:	1f 92       	push	r1
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	//char shiftTempBuff[5] = {0x00, 0x1F, 0xF7, 0xD0, 0xFF};
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
     ca2:	85 e0       	ldi	r24, 0x05	; 5
     ca4:	ea e4       	ldi	r30, 0x4A	; 74
     ca6:	f2 e0       	ldi	r31, 0x02	; 2
     ca8:	de 01       	movw	r26, r28
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	01 90       	ld	r0, Z+
     cae:	0d 92       	st	X+, r0
     cb0:	8a 95       	dec	r24
     cb2:	e1 f7       	brne	.-8      	; 0xcac <setAtTiny2313+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     cb4:	be 01       	movw	r22, r28
     cb6:	6f 5f       	subi	r22, 0xFF	; 255
     cb8:	7f 4f       	sbci	r23, 0xFF	; 255
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	93 df       	rcall	.-218    	; 0xbe4 <SetShiftRegData>
	//Modify Values and shift again 
	shiftTempBuff[0] = 0x00;
     cbe:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     cc0:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
     cc2:	88 e0       	ldi	r24, 0x08	; 8
     cc4:	8b 83       	std	Y+3, r24	; 0x03
	shiftTempBuff[3] = 0x00;
     cc6:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     cc8:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
     cca:	be 01       	movw	r22, r28
     ccc:	6f 5f       	subi	r22, 0xFF	; 255
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	88 df       	rcall	.-240    	; 0xbe4 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     cd4:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     cd6:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     cd8:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     cda:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     cdc:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
     cde:	be 01       	movw	r22, r28
     ce0:	6f 5f       	subi	r22, 0xFF	; 255
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	7e df       	rcall	.-260    	; 0xbe4 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     ce8:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
     cea:	80 e2       	ldi	r24, 0x20	; 32
     cec:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
     cee:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     cf0:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     cf2:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
     cf4:	be 01       	movw	r22, r28
     cf6:	6f 5f       	subi	r22, 0xFF	; 255
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	84 e0       	ldi	r24, 0x04	; 4
     cfc:	73 df       	rcall	.-282    	; 0xbe4 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     cfe:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     d00:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     d02:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     d08:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
     d0a:	be 01       	movw	r22, r28
     d0c:	6f 5f       	subi	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	85 e0       	ldi	r24, 0x05	; 5
     d12:	68 df       	rcall	.-304    	; 0xbe4 <SetShiftRegData>
	//shiftTempBuff[2] = 0xF7;
	//shiftTempBuff[3] = 0xD0; //Setting up Logic
	//shiftTempBuff[4] = 0x00;
	//SetShiftRegData(LOGIC, shiftTempBuff);
	
	WriteShiftRegData();
     d14:	7b df       	rcall	.-266    	; 0xc0c <WriteShiftRegData>
}
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <setAtMega324PA>:

void setAtMega324PA()
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <setAtMega324PA+0x6>
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <setAtMega324PA+0x8>
     d2e:	1f 92       	push	r1
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	ea e4       	ldi	r30, 0x4A	; 74
     d38:	f2 e0       	ldi	r31, 0x02	; 2
     d3a:	de 01       	movw	r26, r28
     d3c:	11 96       	adiw	r26, 0x01	; 1
     d3e:	01 90       	ld	r0, Z+
     d40:	0d 92       	st	X+, r0
     d42:	8a 95       	dec	r24
     d44:	e1 f7       	brne	.-8      	; 0xd3e <setAtMega324PA+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     d46:	be 01       	movw	r22, r28
     d48:	6f 5f       	subi	r22, 0xFF	; 255
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	4a df       	rcall	.-364    	; 0xbe4 <SetShiftRegData>
	//Modify Values and shift again
	shiftTempBuff[0] = 0x00;
     d50:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x40;
     d52:	80 e4       	ldi	r24, 0x40	; 64
     d54:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00; //setting GND to ZIF19
     d56:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04;
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     d5c:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
     d5e:	be 01       	movw	r22, r28
     d60:	6f 5f       	subi	r22, 0xFF	; 255
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	3e df       	rcall	.-388    	; 0xbe4 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     d68:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     d6a:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     d6c:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     d6e:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     d70:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
     d72:	be 01       	movw	r22, r28
     d74:	6f 5f       	subi	r22, 0xFF	; 255
     d76:	7f 4f       	sbci	r23, 0xFF	; 255
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	34 df       	rcall	.-408    	; 0xbe4 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     d7c:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
     d82:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x02;
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     d88:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
     d8a:	be 01       	movw	r22, r28
     d8c:	6f 5f       	subi	r22, 0xFF	; 255
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	84 e0       	ldi	r24, 0x04	; 4
     d92:	28 df       	rcall	.-432    	; 0xbe4 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     d94:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     d96:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     d98:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x01; //Setting VPP to ZIF10
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     d9e:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
     da0:	be 01       	movw	r22, r28
     da2:	6f 5f       	subi	r22, 0xFF	; 255
     da4:	7f 4f       	sbci	r23, 0xFF	; 255
     da6:	85 e0       	ldi	r24, 0x05	; 5
     da8:	1d df       	rcall	.-454    	; 0xbe4 <SetShiftRegData>
	
	WriteShiftRegData();
     daa:	30 df       	rcall	.-416    	; 0xc0c <WriteShiftRegData>
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <voltageControlInit>:
}

void VLogicClear()
{
	VEN_PORT &= ~(1<<VLENABLE);
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	80 bb       	out	0x10, r24	; 16
     dc0:	11 ba       	out	0x11, r1	; 17
     dc2:	84 b1       	in	r24, 0x04	; 4
     dc4:	80 67       	ori	r24, 0x70	; 112
     dc6:	84 b9       	out	0x04, r24	; 4
     dc8:	85 b1       	in	r24, 0x05	; 5
     dca:	8f 78       	andi	r24, 0x8F	; 143
     dcc:	85 b9       	out	0x05, r24	; 5
     dce:	08 95       	ret

00000dd0 <enableVppRegulator>:
     dd0:	2c 9a       	sbi	0x05, 4	; 5
     dd2:	08 95       	ret

00000dd4 <disableVppRegulator>:
     dd4:	2c 98       	cbi	0x05, 4	; 5
     dd6:	08 95       	ret

00000dd8 <enableVccRegulator>:
     dd8:	2d 9a       	sbi	0x05, 5	; 5
     dda:	08 95       	ret

00000ddc <disableVccRegulator>:
     ddc:	2d 98       	cbi	0x05, 5	; 5
     dde:	08 95       	ret

00000de0 <setVcc>:
     de0:	41 b3       	in	r20, 0x11	; 17
     de2:	21 e0       	ldi	r18, 0x01	; 1
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	b9 01       	movw	r22, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <setVcc+0xe>
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	8a 95       	dec	r24
     df0:	e2 f7       	brpl	.-8      	; 0xdea <setVcc+0xa>
     df2:	cb 01       	movw	r24, r22
     df4:	84 2b       	or	r24, r20
     df6:	81 bb       	out	0x11, r24	; 17
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	08 95       	ret

00000dfc <setVpp>:
     dfc:	41 b3       	in	r20, 0x11	; 17
     dfe:	21 e0       	ldi	r18, 0x01	; 1
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	b9 01       	movw	r22, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <setVpp+0xe>
     e06:	66 0f       	add	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	8a 95       	dec	r24
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <setVpp+0xa>
     e0e:	cb 01       	movw	r24, r22
     e10:	84 2b       	or	r24, r20
     e12:	81 bb       	out	0x11, r24	; 17
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	08 95       	ret

00000e18 <enableVLogic>:
}

void enableVLogic()
{
	VEN_PORT |= (1<<VLENABLE);
     e18:	2e 9a       	sbi	0x05, 6	; 5
     e1a:	08 95       	ret

00000e1c <disableVLogic>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
     e1c:	2e 98       	cbi	0x05, 6	; 5
     e1e:	08 95       	ret

00000e20 <setVLogic>:
	//prevents accidental triggering of the wrong regulator
	//if(voltageLevel != (VL_3_3V || VL_5V))
	//	return 0;
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     e20:	41 b3       	in	r20, 0x11	; 17
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	b9 01       	movw	r22, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <setVLogic+0xe>
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	8a 95       	dec	r24
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <setVLogic+0xa>
     e32:	cb 01       	movw	r24, r22
     e34:	84 2b       	or	r24, r20
     e36:	81 bb       	out	0x11, r24	; 17
		return 1;
	//}
}
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	08 95       	ret

00000e3c <fputc>:
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	18 2f       	mov	r17, r24
     e46:	09 2f       	mov	r16, r25
     e48:	eb 01       	movw	r28, r22
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	81 fd       	sbrc	r24, 1
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <fputc+0x1a>
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	20 c0       	rjmp	.+64     	; 0xe96 <fputc+0x5a>
     e56:	82 ff       	sbrs	r24, 2
     e58:	10 c0       	rjmp	.+32     	; 0xe7a <fputc+0x3e>
     e5a:	4e 81       	ldd	r20, Y+6	; 0x06
     e5c:	5f 81       	ldd	r21, Y+7	; 0x07
     e5e:	2c 81       	ldd	r18, Y+4	; 0x04
     e60:	3d 81       	ldd	r19, Y+5	; 0x05
     e62:	42 17       	cp	r20, r18
     e64:	53 07       	cpc	r21, r19
     e66:	7c f4       	brge	.+30     	; 0xe86 <fputc+0x4a>
     e68:	e8 81       	ld	r30, Y
     e6a:	f9 81       	ldd	r31, Y+1	; 0x01
     e6c:	9f 01       	movw	r18, r30
     e6e:	2f 5f       	subi	r18, 0xFF	; 255
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	39 83       	std	Y+1, r19	; 0x01
     e74:	28 83       	st	Y, r18
     e76:	10 83       	st	Z, r17
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <fputc+0x4a>
     e7a:	e8 85       	ldd	r30, Y+8	; 0x08
     e7c:	f9 85       	ldd	r31, Y+9	; 0x09
     e7e:	81 2f       	mov	r24, r17
     e80:	09 95       	icall
     e82:	89 2b       	or	r24, r25
     e84:	29 f7       	brne	.-54     	; 0xe50 <fputc+0x14>
     e86:	2e 81       	ldd	r18, Y+6	; 0x06
     e88:	3f 81       	ldd	r19, Y+7	; 0x07
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
     e8e:	3f 83       	std	Y+7, r19	; 0x07
     e90:	2e 83       	std	Y+6, r18	; 0x06
     e92:	81 2f       	mov	r24, r17
     e94:	90 2f       	mov	r25, r16
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	08 95       	ret

00000ea0 <printf>:
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	fe 01       	movw	r30, r28
     eaa:	35 96       	adiw	r30, 0x05	; 5
     eac:	61 91       	ld	r22, Z+
     eae:	71 91       	ld	r23, Z+
     eb0:	af 01       	movw	r20, r30
     eb2:	80 91 85 03 	lds	r24, 0x0385
     eb6:	90 91 86 03 	lds	r25, 0x0386
     eba:	35 d0       	rcall	.+106    	; 0xf26 <vfprintf>
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <putchar>:
     ec2:	60 91 85 03 	lds	r22, 0x0385
     ec6:	70 91 86 03 	lds	r23, 0x0386
     eca:	b8 cf       	rjmp	.-144    	; 0xe3c <fputc>

00000ecc <puts>:
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	e0 91 85 03 	lds	r30, 0x0385
     ed8:	f0 91 86 03 	lds	r31, 0x0386
     edc:	23 81       	ldd	r18, Z+3	; 0x03
     ede:	21 ff       	sbrs	r18, 1
     ee0:	1b c0       	rjmp	.+54     	; 0xf18 <puts+0x4c>
     ee2:	ec 01       	movw	r28, r24
     ee4:	00 e0       	ldi	r16, 0x00	; 0
     ee6:	10 e0       	ldi	r17, 0x00	; 0
     ee8:	89 91       	ld	r24, Y+
     eea:	60 91 85 03 	lds	r22, 0x0385
     eee:	70 91 86 03 	lds	r23, 0x0386
     ef2:	db 01       	movw	r26, r22
     ef4:	18 96       	adiw	r26, 0x08	; 8
     ef6:	ed 91       	ld	r30, X+
     ef8:	fc 91       	ld	r31, X
     efa:	19 97       	sbiw	r26, 0x09	; 9
     efc:	88 23       	and	r24, r24
     efe:	31 f0       	breq	.+12     	; 0xf0c <puts+0x40>
     f00:	09 95       	icall
     f02:	89 2b       	or	r24, r25
     f04:	89 f3       	breq	.-30     	; 0xee8 <puts+0x1c>
     f06:	0f ef       	ldi	r16, 0xFF	; 255
     f08:	1f ef       	ldi	r17, 0xFF	; 255
     f0a:	ee cf       	rjmp	.-36     	; 0xee8 <puts+0x1c>
     f0c:	8a e0       	ldi	r24, 0x0A	; 10
     f0e:	09 95       	icall
     f10:	89 2b       	or	r24, r25
     f12:	11 f4       	brne	.+4      	; 0xf18 <puts+0x4c>
     f14:	c8 01       	movw	r24, r16
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <puts+0x50>
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	9f ef       	ldi	r25, 0xFF	; 255
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	08 95       	ret

00000f26 <vfprintf>:
     f26:	2f 92       	push	r2
     f28:	3f 92       	push	r3
     f2a:	4f 92       	push	r4
     f2c:	5f 92       	push	r5
     f2e:	6f 92       	push	r6
     f30:	7f 92       	push	r7
     f32:	8f 92       	push	r8
     f34:	9f 92       	push	r9
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	2c 97       	sbiw	r28, 0x0c	; 12
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	7c 01       	movw	r14, r24
     f5c:	6b 01       	movw	r12, r22
     f5e:	8a 01       	movw	r16, r20
     f60:	fc 01       	movw	r30, r24
     f62:	17 82       	std	Z+7, r1	; 0x07
     f64:	16 82       	std	Z+6, r1	; 0x06
     f66:	83 81       	ldd	r24, Z+3	; 0x03
     f68:	81 ff       	sbrs	r24, 1
     f6a:	b0 c1       	rjmp	.+864    	; 0x12cc <vfprintf+0x3a6>
     f6c:	ce 01       	movw	r24, r28
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	4c 01       	movw	r8, r24
     f72:	f7 01       	movw	r30, r14
     f74:	93 81       	ldd	r25, Z+3	; 0x03
     f76:	f6 01       	movw	r30, r12
     f78:	93 fd       	sbrc	r25, 3
     f7a:	85 91       	lpm	r24, Z+
     f7c:	93 ff       	sbrs	r25, 3
     f7e:	81 91       	ld	r24, Z+
     f80:	6f 01       	movw	r12, r30
     f82:	88 23       	and	r24, r24
     f84:	09 f4       	brne	.+2      	; 0xf88 <vfprintf+0x62>
     f86:	9e c1       	rjmp	.+828    	; 0x12c4 <vfprintf+0x39e>
     f88:	85 32       	cpi	r24, 0x25	; 37
     f8a:	39 f4       	brne	.+14     	; 0xf9a <vfprintf+0x74>
     f8c:	93 fd       	sbrc	r25, 3
     f8e:	85 91       	lpm	r24, Z+
     f90:	93 ff       	sbrs	r25, 3
     f92:	81 91       	ld	r24, Z+
     f94:	6f 01       	movw	r12, r30
     f96:	85 32       	cpi	r24, 0x25	; 37
     f98:	21 f4       	brne	.+8      	; 0xfa2 <vfprintf+0x7c>
     f9a:	b7 01       	movw	r22, r14
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	4e df       	rcall	.-356    	; 0xe3c <fputc>
     fa0:	e8 cf       	rjmp	.-48     	; 0xf72 <vfprintf+0x4c>
     fa2:	51 2c       	mov	r5, r1
     fa4:	31 2c       	mov	r3, r1
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	20 32       	cpi	r18, 0x20	; 32
     faa:	a0 f4       	brcc	.+40     	; 0xfd4 <vfprintf+0xae>
     fac:	8b 32       	cpi	r24, 0x2B	; 43
     fae:	69 f0       	breq	.+26     	; 0xfca <vfprintf+0xa4>
     fb0:	30 f4       	brcc	.+12     	; 0xfbe <vfprintf+0x98>
     fb2:	80 32       	cpi	r24, 0x20	; 32
     fb4:	59 f0       	breq	.+22     	; 0xfcc <vfprintf+0xa6>
     fb6:	83 32       	cpi	r24, 0x23	; 35
     fb8:	69 f4       	brne	.+26     	; 0xfd4 <vfprintf+0xae>
     fba:	20 61       	ori	r18, 0x10	; 16
     fbc:	2c c0       	rjmp	.+88     	; 0x1016 <vfprintf+0xf0>
     fbe:	8d 32       	cpi	r24, 0x2D	; 45
     fc0:	39 f0       	breq	.+14     	; 0xfd0 <vfprintf+0xaa>
     fc2:	80 33       	cpi	r24, 0x30	; 48
     fc4:	39 f4       	brne	.+14     	; 0xfd4 <vfprintf+0xae>
     fc6:	21 60       	ori	r18, 0x01	; 1
     fc8:	26 c0       	rjmp	.+76     	; 0x1016 <vfprintf+0xf0>
     fca:	22 60       	ori	r18, 0x02	; 2
     fcc:	24 60       	ori	r18, 0x04	; 4
     fce:	23 c0       	rjmp	.+70     	; 0x1016 <vfprintf+0xf0>
     fd0:	28 60       	ori	r18, 0x08	; 8
     fd2:	21 c0       	rjmp	.+66     	; 0x1016 <vfprintf+0xf0>
     fd4:	27 fd       	sbrc	r18, 7
     fd6:	27 c0       	rjmp	.+78     	; 0x1026 <vfprintf+0x100>
     fd8:	30 ed       	ldi	r19, 0xD0	; 208
     fda:	38 0f       	add	r19, r24
     fdc:	3a 30       	cpi	r19, 0x0A	; 10
     fde:	78 f4       	brcc	.+30     	; 0xffe <vfprintf+0xd8>
     fe0:	26 ff       	sbrs	r18, 6
     fe2:	06 c0       	rjmp	.+12     	; 0xff0 <vfprintf+0xca>
     fe4:	fa e0       	ldi	r31, 0x0A	; 10
     fe6:	5f 9e       	mul	r5, r31
     fe8:	30 0d       	add	r19, r0
     fea:	11 24       	eor	r1, r1
     fec:	53 2e       	mov	r5, r19
     fee:	13 c0       	rjmp	.+38     	; 0x1016 <vfprintf+0xf0>
     ff0:	8a e0       	ldi	r24, 0x0A	; 10
     ff2:	38 9e       	mul	r3, r24
     ff4:	30 0d       	add	r19, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	33 2e       	mov	r3, r19
     ffa:	20 62       	ori	r18, 0x20	; 32
     ffc:	0c c0       	rjmp	.+24     	; 0x1016 <vfprintf+0xf0>
     ffe:	8e 32       	cpi	r24, 0x2E	; 46
    1000:	21 f4       	brne	.+8      	; 0x100a <vfprintf+0xe4>
    1002:	26 fd       	sbrc	r18, 6
    1004:	5f c1       	rjmp	.+702    	; 0x12c4 <vfprintf+0x39e>
    1006:	20 64       	ori	r18, 0x40	; 64
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <vfprintf+0xf0>
    100a:	8c 36       	cpi	r24, 0x6C	; 108
    100c:	11 f4       	brne	.+4      	; 0x1012 <vfprintf+0xec>
    100e:	20 68       	ori	r18, 0x80	; 128
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <vfprintf+0xf0>
    1012:	88 36       	cpi	r24, 0x68	; 104
    1014:	41 f4       	brne	.+16     	; 0x1026 <vfprintf+0x100>
    1016:	f6 01       	movw	r30, r12
    1018:	93 fd       	sbrc	r25, 3
    101a:	85 91       	lpm	r24, Z+
    101c:	93 ff       	sbrs	r25, 3
    101e:	81 91       	ld	r24, Z+
    1020:	6f 01       	movw	r12, r30
    1022:	81 11       	cpse	r24, r1
    1024:	c1 cf       	rjmp	.-126    	; 0xfa8 <vfprintf+0x82>
    1026:	98 2f       	mov	r25, r24
    1028:	9f 7d       	andi	r25, 0xDF	; 223
    102a:	95 54       	subi	r25, 0x45	; 69
    102c:	93 30       	cpi	r25, 0x03	; 3
    102e:	28 f4       	brcc	.+10     	; 0x103a <vfprintf+0x114>
    1030:	0c 5f       	subi	r16, 0xFC	; 252
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	ff e3       	ldi	r31, 0x3F	; 63
    1036:	f9 83       	std	Y+1, r31	; 0x01
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <vfprintf+0x12e>
    103a:	83 36       	cpi	r24, 0x63	; 99
    103c:	31 f0       	breq	.+12     	; 0x104a <vfprintf+0x124>
    103e:	83 37       	cpi	r24, 0x73	; 115
    1040:	71 f0       	breq	.+28     	; 0x105e <vfprintf+0x138>
    1042:	83 35       	cpi	r24, 0x53	; 83
    1044:	09 f0       	breq	.+2      	; 0x1048 <vfprintf+0x122>
    1046:	57 c0       	rjmp	.+174    	; 0x10f6 <vfprintf+0x1d0>
    1048:	21 c0       	rjmp	.+66     	; 0x108c <vfprintf+0x166>
    104a:	f8 01       	movw	r30, r16
    104c:	80 81       	ld	r24, Z
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	0e 5f       	subi	r16, 0xFE	; 254
    1052:	1f 4f       	sbci	r17, 0xFF	; 255
    1054:	44 24       	eor	r4, r4
    1056:	43 94       	inc	r4
    1058:	51 2c       	mov	r5, r1
    105a:	54 01       	movw	r10, r8
    105c:	14 c0       	rjmp	.+40     	; 0x1086 <vfprintf+0x160>
    105e:	38 01       	movw	r6, r16
    1060:	f2 e0       	ldi	r31, 0x02	; 2
    1062:	6f 0e       	add	r6, r31
    1064:	71 1c       	adc	r7, r1
    1066:	f8 01       	movw	r30, r16
    1068:	a0 80       	ld	r10, Z
    106a:	b1 80       	ldd	r11, Z+1	; 0x01
    106c:	26 ff       	sbrs	r18, 6
    106e:	03 c0       	rjmp	.+6      	; 0x1076 <vfprintf+0x150>
    1070:	65 2d       	mov	r22, r5
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <vfprintf+0x154>
    1076:	6f ef       	ldi	r22, 0xFF	; 255
    1078:	7f ef       	ldi	r23, 0xFF	; 255
    107a:	c5 01       	movw	r24, r10
    107c:	2c 87       	std	Y+12, r18	; 0x0c
    107e:	4c d1       	rcall	.+664    	; 0x1318 <strnlen>
    1080:	2c 01       	movw	r4, r24
    1082:	83 01       	movw	r16, r6
    1084:	2c 85       	ldd	r18, Y+12	; 0x0c
    1086:	2f 77       	andi	r18, 0x7F	; 127
    1088:	22 2e       	mov	r2, r18
    108a:	16 c0       	rjmp	.+44     	; 0x10b8 <vfprintf+0x192>
    108c:	38 01       	movw	r6, r16
    108e:	f2 e0       	ldi	r31, 0x02	; 2
    1090:	6f 0e       	add	r6, r31
    1092:	71 1c       	adc	r7, r1
    1094:	f8 01       	movw	r30, r16
    1096:	a0 80       	ld	r10, Z
    1098:	b1 80       	ldd	r11, Z+1	; 0x01
    109a:	26 ff       	sbrs	r18, 6
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <vfprintf+0x17e>
    109e:	65 2d       	mov	r22, r5
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <vfprintf+0x182>
    10a4:	6f ef       	ldi	r22, 0xFF	; 255
    10a6:	7f ef       	ldi	r23, 0xFF	; 255
    10a8:	c5 01       	movw	r24, r10
    10aa:	2c 87       	std	Y+12, r18	; 0x0c
    10ac:	2a d1       	rcall	.+596    	; 0x1302 <strnlen_P>
    10ae:	2c 01       	movw	r4, r24
    10b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10b2:	20 68       	ori	r18, 0x80	; 128
    10b4:	22 2e       	mov	r2, r18
    10b6:	83 01       	movw	r16, r6
    10b8:	23 fc       	sbrc	r2, 3
    10ba:	19 c0       	rjmp	.+50     	; 0x10ee <vfprintf+0x1c8>
    10bc:	83 2d       	mov	r24, r3
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	48 16       	cp	r4, r24
    10c2:	59 06       	cpc	r5, r25
    10c4:	a0 f4       	brcc	.+40     	; 0x10ee <vfprintf+0x1c8>
    10c6:	b7 01       	movw	r22, r14
    10c8:	80 e2       	ldi	r24, 0x20	; 32
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	b7 de       	rcall	.-658    	; 0xe3c <fputc>
    10ce:	3a 94       	dec	r3
    10d0:	f5 cf       	rjmp	.-22     	; 0x10bc <vfprintf+0x196>
    10d2:	f5 01       	movw	r30, r10
    10d4:	27 fc       	sbrc	r2, 7
    10d6:	85 91       	lpm	r24, Z+
    10d8:	27 fe       	sbrs	r2, 7
    10da:	81 91       	ld	r24, Z+
    10dc:	5f 01       	movw	r10, r30
    10de:	b7 01       	movw	r22, r14
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	ac de       	rcall	.-680    	; 0xe3c <fputc>
    10e4:	31 10       	cpse	r3, r1
    10e6:	3a 94       	dec	r3
    10e8:	f1 e0       	ldi	r31, 0x01	; 1
    10ea:	4f 1a       	sub	r4, r31
    10ec:	51 08       	sbc	r5, r1
    10ee:	41 14       	cp	r4, r1
    10f0:	51 04       	cpc	r5, r1
    10f2:	79 f7       	brne	.-34     	; 0x10d2 <vfprintf+0x1ac>
    10f4:	de c0       	rjmp	.+444    	; 0x12b2 <vfprintf+0x38c>
    10f6:	84 36       	cpi	r24, 0x64	; 100
    10f8:	11 f0       	breq	.+4      	; 0x10fe <vfprintf+0x1d8>
    10fa:	89 36       	cpi	r24, 0x69	; 105
    10fc:	31 f5       	brne	.+76     	; 0x114a <vfprintf+0x224>
    10fe:	f8 01       	movw	r30, r16
    1100:	27 ff       	sbrs	r18, 7
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <vfprintf+0x1ec>
    1104:	60 81       	ld	r22, Z
    1106:	71 81       	ldd	r23, Z+1	; 0x01
    1108:	82 81       	ldd	r24, Z+2	; 0x02
    110a:	93 81       	ldd	r25, Z+3	; 0x03
    110c:	0c 5f       	subi	r16, 0xFC	; 252
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <vfprintf+0x1fc>
    1112:	60 81       	ld	r22, Z
    1114:	71 81       	ldd	r23, Z+1	; 0x01
    1116:	88 27       	eor	r24, r24
    1118:	77 fd       	sbrc	r23, 7
    111a:	80 95       	com	r24
    111c:	98 2f       	mov	r25, r24
    111e:	0e 5f       	subi	r16, 0xFE	; 254
    1120:	1f 4f       	sbci	r17, 0xFF	; 255
    1122:	2f 76       	andi	r18, 0x6F	; 111
    1124:	b2 2e       	mov	r11, r18
    1126:	97 ff       	sbrs	r25, 7
    1128:	09 c0       	rjmp	.+18     	; 0x113c <vfprintf+0x216>
    112a:	90 95       	com	r25
    112c:	80 95       	com	r24
    112e:	70 95       	com	r23
    1130:	61 95       	neg	r22
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	20 68       	ori	r18, 0x80	; 128
    113a:	b2 2e       	mov	r11, r18
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	a4 01       	movw	r20, r8
    1142:	f5 d0       	rcall	.+490    	; 0x132e <__ultoa_invert>
    1144:	a8 2e       	mov	r10, r24
    1146:	a8 18       	sub	r10, r8
    1148:	43 c0       	rjmp	.+134    	; 0x11d0 <vfprintf+0x2aa>
    114a:	85 37       	cpi	r24, 0x75	; 117
    114c:	29 f4       	brne	.+10     	; 0x1158 <vfprintf+0x232>
    114e:	2f 7e       	andi	r18, 0xEF	; 239
    1150:	b2 2e       	mov	r11, r18
    1152:	2a e0       	ldi	r18, 0x0A	; 10
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	25 c0       	rjmp	.+74     	; 0x11a2 <vfprintf+0x27c>
    1158:	f2 2f       	mov	r31, r18
    115a:	f9 7f       	andi	r31, 0xF9	; 249
    115c:	bf 2e       	mov	r11, r31
    115e:	8f 36       	cpi	r24, 0x6F	; 111
    1160:	c1 f0       	breq	.+48     	; 0x1192 <vfprintf+0x26c>
    1162:	18 f4       	brcc	.+6      	; 0x116a <vfprintf+0x244>
    1164:	88 35       	cpi	r24, 0x58	; 88
    1166:	79 f0       	breq	.+30     	; 0x1186 <vfprintf+0x260>
    1168:	ad c0       	rjmp	.+346    	; 0x12c4 <vfprintf+0x39e>
    116a:	80 37       	cpi	r24, 0x70	; 112
    116c:	19 f0       	breq	.+6      	; 0x1174 <vfprintf+0x24e>
    116e:	88 37       	cpi	r24, 0x78	; 120
    1170:	21 f0       	breq	.+8      	; 0x117a <vfprintf+0x254>
    1172:	a8 c0       	rjmp	.+336    	; 0x12c4 <vfprintf+0x39e>
    1174:	2f 2f       	mov	r18, r31
    1176:	20 61       	ori	r18, 0x10	; 16
    1178:	b2 2e       	mov	r11, r18
    117a:	b4 fe       	sbrs	r11, 4
    117c:	0d c0       	rjmp	.+26     	; 0x1198 <vfprintf+0x272>
    117e:	8b 2d       	mov	r24, r11
    1180:	84 60       	ori	r24, 0x04	; 4
    1182:	b8 2e       	mov	r11, r24
    1184:	09 c0       	rjmp	.+18     	; 0x1198 <vfprintf+0x272>
    1186:	24 ff       	sbrs	r18, 4
    1188:	0a c0       	rjmp	.+20     	; 0x119e <vfprintf+0x278>
    118a:	9f 2f       	mov	r25, r31
    118c:	96 60       	ori	r25, 0x06	; 6
    118e:	b9 2e       	mov	r11, r25
    1190:	06 c0       	rjmp	.+12     	; 0x119e <vfprintf+0x278>
    1192:	28 e0       	ldi	r18, 0x08	; 8
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <vfprintf+0x27c>
    1198:	20 e1       	ldi	r18, 0x10	; 16
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0x27c>
    119e:	20 e1       	ldi	r18, 0x10	; 16
    11a0:	32 e0       	ldi	r19, 0x02	; 2
    11a2:	f8 01       	movw	r30, r16
    11a4:	b7 fe       	sbrs	r11, 7
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <vfprintf+0x290>
    11a8:	60 81       	ld	r22, Z
    11aa:	71 81       	ldd	r23, Z+1	; 0x01
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	0c 5f       	subi	r16, 0xFC	; 252
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <vfprintf+0x29c>
    11b6:	60 81       	ld	r22, Z
    11b8:	71 81       	ldd	r23, Z+1	; 0x01
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 5f       	subi	r16, 0xFE	; 254
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	a4 01       	movw	r20, r8
    11c4:	b4 d0       	rcall	.+360    	; 0x132e <__ultoa_invert>
    11c6:	a8 2e       	mov	r10, r24
    11c8:	a8 18       	sub	r10, r8
    11ca:	fb 2d       	mov	r31, r11
    11cc:	ff 77       	andi	r31, 0x7F	; 127
    11ce:	bf 2e       	mov	r11, r31
    11d0:	b6 fe       	sbrs	r11, 6
    11d2:	0b c0       	rjmp	.+22     	; 0x11ea <vfprintf+0x2c4>
    11d4:	2b 2d       	mov	r18, r11
    11d6:	2e 7f       	andi	r18, 0xFE	; 254
    11d8:	a5 14       	cp	r10, r5
    11da:	50 f4       	brcc	.+20     	; 0x11f0 <vfprintf+0x2ca>
    11dc:	b4 fe       	sbrs	r11, 4
    11de:	0a c0       	rjmp	.+20     	; 0x11f4 <vfprintf+0x2ce>
    11e0:	b2 fc       	sbrc	r11, 2
    11e2:	08 c0       	rjmp	.+16     	; 0x11f4 <vfprintf+0x2ce>
    11e4:	2b 2d       	mov	r18, r11
    11e6:	2e 7e       	andi	r18, 0xEE	; 238
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <vfprintf+0x2ce>
    11ea:	7a 2c       	mov	r7, r10
    11ec:	2b 2d       	mov	r18, r11
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <vfprintf+0x2d0>
    11f0:	7a 2c       	mov	r7, r10
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <vfprintf+0x2d0>
    11f4:	75 2c       	mov	r7, r5
    11f6:	24 ff       	sbrs	r18, 4
    11f8:	0d c0       	rjmp	.+26     	; 0x1214 <vfprintf+0x2ee>
    11fa:	fe 01       	movw	r30, r28
    11fc:	ea 0d       	add	r30, r10
    11fe:	f1 1d       	adc	r31, r1
    1200:	80 81       	ld	r24, Z
    1202:	80 33       	cpi	r24, 0x30	; 48
    1204:	11 f4       	brne	.+4      	; 0x120a <vfprintf+0x2e4>
    1206:	29 7e       	andi	r18, 0xE9	; 233
    1208:	09 c0       	rjmp	.+18     	; 0x121c <vfprintf+0x2f6>
    120a:	22 ff       	sbrs	r18, 2
    120c:	06 c0       	rjmp	.+12     	; 0x121a <vfprintf+0x2f4>
    120e:	73 94       	inc	r7
    1210:	73 94       	inc	r7
    1212:	04 c0       	rjmp	.+8      	; 0x121c <vfprintf+0x2f6>
    1214:	82 2f       	mov	r24, r18
    1216:	86 78       	andi	r24, 0x86	; 134
    1218:	09 f0       	breq	.+2      	; 0x121c <vfprintf+0x2f6>
    121a:	73 94       	inc	r7
    121c:	23 fd       	sbrc	r18, 3
    121e:	12 c0       	rjmp	.+36     	; 0x1244 <vfprintf+0x31e>
    1220:	20 ff       	sbrs	r18, 0
    1222:	06 c0       	rjmp	.+12     	; 0x1230 <vfprintf+0x30a>
    1224:	5a 2c       	mov	r5, r10
    1226:	73 14       	cp	r7, r3
    1228:	18 f4       	brcc	.+6      	; 0x1230 <vfprintf+0x30a>
    122a:	53 0c       	add	r5, r3
    122c:	57 18       	sub	r5, r7
    122e:	73 2c       	mov	r7, r3
    1230:	73 14       	cp	r7, r3
    1232:	60 f4       	brcc	.+24     	; 0x124c <vfprintf+0x326>
    1234:	b7 01       	movw	r22, r14
    1236:	80 e2       	ldi	r24, 0x20	; 32
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	2c 87       	std	Y+12, r18	; 0x0c
    123c:	ff dd       	rcall	.-1026   	; 0xe3c <fputc>
    123e:	73 94       	inc	r7
    1240:	2c 85       	ldd	r18, Y+12	; 0x0c
    1242:	f6 cf       	rjmp	.-20     	; 0x1230 <vfprintf+0x30a>
    1244:	73 14       	cp	r7, r3
    1246:	10 f4       	brcc	.+4      	; 0x124c <vfprintf+0x326>
    1248:	37 18       	sub	r3, r7
    124a:	01 c0       	rjmp	.+2      	; 0x124e <vfprintf+0x328>
    124c:	31 2c       	mov	r3, r1
    124e:	24 ff       	sbrs	r18, 4
    1250:	11 c0       	rjmp	.+34     	; 0x1274 <vfprintf+0x34e>
    1252:	b7 01       	movw	r22, r14
    1254:	80 e3       	ldi	r24, 0x30	; 48
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	2c 87       	std	Y+12, r18	; 0x0c
    125a:	f0 dd       	rcall	.-1056   	; 0xe3c <fputc>
    125c:	2c 85       	ldd	r18, Y+12	; 0x0c
    125e:	22 ff       	sbrs	r18, 2
    1260:	16 c0       	rjmp	.+44     	; 0x128e <vfprintf+0x368>
    1262:	21 ff       	sbrs	r18, 1
    1264:	03 c0       	rjmp	.+6      	; 0x126c <vfprintf+0x346>
    1266:	88 e5       	ldi	r24, 0x58	; 88
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <vfprintf+0x34a>
    126c:	88 e7       	ldi	r24, 0x78	; 120
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	b7 01       	movw	r22, r14
    1272:	0c c0       	rjmp	.+24     	; 0x128c <vfprintf+0x366>
    1274:	82 2f       	mov	r24, r18
    1276:	86 78       	andi	r24, 0x86	; 134
    1278:	51 f0       	breq	.+20     	; 0x128e <vfprintf+0x368>
    127a:	21 fd       	sbrc	r18, 1
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <vfprintf+0x35c>
    127e:	80 e2       	ldi	r24, 0x20	; 32
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <vfprintf+0x35e>
    1282:	8b e2       	ldi	r24, 0x2B	; 43
    1284:	27 fd       	sbrc	r18, 7
    1286:	8d e2       	ldi	r24, 0x2D	; 45
    1288:	b7 01       	movw	r22, r14
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	d7 dd       	rcall	.-1106   	; 0xe3c <fputc>
    128e:	a5 14       	cp	r10, r5
    1290:	30 f4       	brcc	.+12     	; 0x129e <vfprintf+0x378>
    1292:	b7 01       	movw	r22, r14
    1294:	80 e3       	ldi	r24, 0x30	; 48
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	d1 dd       	rcall	.-1118   	; 0xe3c <fputc>
    129a:	5a 94       	dec	r5
    129c:	f8 cf       	rjmp	.-16     	; 0x128e <vfprintf+0x368>
    129e:	aa 94       	dec	r10
    12a0:	f4 01       	movw	r30, r8
    12a2:	ea 0d       	add	r30, r10
    12a4:	f1 1d       	adc	r31, r1
    12a6:	80 81       	ld	r24, Z
    12a8:	b7 01       	movw	r22, r14
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	c7 dd       	rcall	.-1138   	; 0xe3c <fputc>
    12ae:	a1 10       	cpse	r10, r1
    12b0:	f6 cf       	rjmp	.-20     	; 0x129e <vfprintf+0x378>
    12b2:	33 20       	and	r3, r3
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <vfprintf+0x392>
    12b6:	5d ce       	rjmp	.-838    	; 0xf72 <vfprintf+0x4c>
    12b8:	b7 01       	movw	r22, r14
    12ba:	80 e2       	ldi	r24, 0x20	; 32
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	be dd       	rcall	.-1156   	; 0xe3c <fputc>
    12c0:	3a 94       	dec	r3
    12c2:	f7 cf       	rjmp	.-18     	; 0x12b2 <vfprintf+0x38c>
    12c4:	f7 01       	movw	r30, r14
    12c6:	86 81       	ldd	r24, Z+6	; 0x06
    12c8:	97 81       	ldd	r25, Z+7	; 0x07
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <vfprintf+0x3aa>
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	9f ef       	ldi	r25, 0xFF	; 255
    12d0:	2c 96       	adiw	r28, 0x0c	; 12
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	df 90       	pop	r13
    12ea:	cf 90       	pop	r12
    12ec:	bf 90       	pop	r11
    12ee:	af 90       	pop	r10
    12f0:	9f 90       	pop	r9
    12f2:	8f 90       	pop	r8
    12f4:	7f 90       	pop	r7
    12f6:	6f 90       	pop	r6
    12f8:	5f 90       	pop	r5
    12fa:	4f 90       	pop	r4
    12fc:	3f 90       	pop	r3
    12fe:	2f 90       	pop	r2
    1300:	08 95       	ret

00001302 <strnlen_P>:
    1302:	fc 01       	movw	r30, r24
    1304:	05 90       	lpm	r0, Z+
    1306:	61 50       	subi	r22, 0x01	; 1
    1308:	70 40       	sbci	r23, 0x00	; 0
    130a:	01 10       	cpse	r0, r1
    130c:	d8 f7       	brcc	.-10     	; 0x1304 <strnlen_P+0x2>
    130e:	80 95       	com	r24
    1310:	90 95       	com	r25
    1312:	8e 0f       	add	r24, r30
    1314:	9f 1f       	adc	r25, r31
    1316:	08 95       	ret

00001318 <strnlen>:
    1318:	fc 01       	movw	r30, r24
    131a:	61 50       	subi	r22, 0x01	; 1
    131c:	70 40       	sbci	r23, 0x00	; 0
    131e:	01 90       	ld	r0, Z+
    1320:	01 10       	cpse	r0, r1
    1322:	d8 f7       	brcc	.-10     	; 0x131a <strnlen+0x2>
    1324:	80 95       	com	r24
    1326:	90 95       	com	r25
    1328:	8e 0f       	add	r24, r30
    132a:	9f 1f       	adc	r25, r31
    132c:	08 95       	ret

0000132e <__ultoa_invert>:
    132e:	fa 01       	movw	r30, r20
    1330:	aa 27       	eor	r26, r26
    1332:	28 30       	cpi	r18, 0x08	; 8
    1334:	51 f1       	breq	.+84     	; 0x138a <__ultoa_invert+0x5c>
    1336:	20 31       	cpi	r18, 0x10	; 16
    1338:	81 f1       	breq	.+96     	; 0x139a <__ultoa_invert+0x6c>
    133a:	e8 94       	clt
    133c:	6f 93       	push	r22
    133e:	6e 7f       	andi	r22, 0xFE	; 254
    1340:	6e 5f       	subi	r22, 0xFE	; 254
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	af 4f       	sbci	r26, 0xFF	; 255
    134a:	b1 e0       	ldi	r27, 0x01	; 1
    134c:	3e d0       	rcall	.+124    	; 0x13ca <__ultoa_invert+0x9c>
    134e:	b4 e0       	ldi	r27, 0x04	; 4
    1350:	3c d0       	rcall	.+120    	; 0x13ca <__ultoa_invert+0x9c>
    1352:	67 0f       	add	r22, r23
    1354:	78 1f       	adc	r23, r24
    1356:	89 1f       	adc	r24, r25
    1358:	9a 1f       	adc	r25, r26
    135a:	a1 1d       	adc	r26, r1
    135c:	68 0f       	add	r22, r24
    135e:	79 1f       	adc	r23, r25
    1360:	8a 1f       	adc	r24, r26
    1362:	91 1d       	adc	r25, r1
    1364:	a1 1d       	adc	r26, r1
    1366:	6a 0f       	add	r22, r26
    1368:	71 1d       	adc	r23, r1
    136a:	81 1d       	adc	r24, r1
    136c:	91 1d       	adc	r25, r1
    136e:	a1 1d       	adc	r26, r1
    1370:	20 d0       	rcall	.+64     	; 0x13b2 <__ultoa_invert+0x84>
    1372:	09 f4       	brne	.+2      	; 0x1376 <__ultoa_invert+0x48>
    1374:	68 94       	set
    1376:	3f 91       	pop	r19
    1378:	2a e0       	ldi	r18, 0x0A	; 10
    137a:	26 9f       	mul	r18, r22
    137c:	11 24       	eor	r1, r1
    137e:	30 19       	sub	r19, r0
    1380:	30 5d       	subi	r19, 0xD0	; 208
    1382:	31 93       	st	Z+, r19
    1384:	de f6       	brtc	.-74     	; 0x133c <__ultoa_invert+0xe>
    1386:	cf 01       	movw	r24, r30
    1388:	08 95       	ret
    138a:	46 2f       	mov	r20, r22
    138c:	47 70       	andi	r20, 0x07	; 7
    138e:	40 5d       	subi	r20, 0xD0	; 208
    1390:	41 93       	st	Z+, r20
    1392:	b3 e0       	ldi	r27, 0x03	; 3
    1394:	0f d0       	rcall	.+30     	; 0x13b4 <__ultoa_invert+0x86>
    1396:	c9 f7       	brne	.-14     	; 0x138a <__ultoa_invert+0x5c>
    1398:	f6 cf       	rjmp	.-20     	; 0x1386 <__ultoa_invert+0x58>
    139a:	46 2f       	mov	r20, r22
    139c:	4f 70       	andi	r20, 0x0F	; 15
    139e:	40 5d       	subi	r20, 0xD0	; 208
    13a0:	4a 33       	cpi	r20, 0x3A	; 58
    13a2:	18 f0       	brcs	.+6      	; 0x13aa <__ultoa_invert+0x7c>
    13a4:	49 5d       	subi	r20, 0xD9	; 217
    13a6:	31 fd       	sbrc	r19, 1
    13a8:	40 52       	subi	r20, 0x20	; 32
    13aa:	41 93       	st	Z+, r20
    13ac:	02 d0       	rcall	.+4      	; 0x13b2 <__ultoa_invert+0x84>
    13ae:	a9 f7       	brne	.-22     	; 0x139a <__ultoa_invert+0x6c>
    13b0:	ea cf       	rjmp	.-44     	; 0x1386 <__ultoa_invert+0x58>
    13b2:	b4 e0       	ldi	r27, 0x04	; 4
    13b4:	a6 95       	lsr	r26
    13b6:	97 95       	ror	r25
    13b8:	87 95       	ror	r24
    13ba:	77 95       	ror	r23
    13bc:	67 95       	ror	r22
    13be:	ba 95       	dec	r27
    13c0:	c9 f7       	brne	.-14     	; 0x13b4 <__ultoa_invert+0x86>
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	61 05       	cpc	r22, r1
    13c6:	71 05       	cpc	r23, r1
    13c8:	08 95       	ret
    13ca:	9b 01       	movw	r18, r22
    13cc:	ac 01       	movw	r20, r24
    13ce:	0a 2e       	mov	r0, r26
    13d0:	06 94       	lsr	r0
    13d2:	57 95       	ror	r21
    13d4:	47 95       	ror	r20
    13d6:	37 95       	ror	r19
    13d8:	27 95       	ror	r18
    13da:	ba 95       	dec	r27
    13dc:	c9 f7       	brne	.-14     	; 0x13d0 <__ultoa_invert+0xa2>
    13de:	62 0f       	add	r22, r18
    13e0:	73 1f       	adc	r23, r19
    13e2:	84 1f       	adc	r24, r20
    13e4:	95 1f       	adc	r25, r21
    13e6:	a0 1d       	adc	r26, r0
    13e8:	08 95       	ret

000013ea <_exit>:
    13ea:	f8 94       	cli

000013ec <__stop_program>:
    13ec:	ff cf       	rjmp	.-2      	; 0x13ec <__stop_program>
