
RAMModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000dc  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000018d  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011f  00000000  00000000  0000035d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001aa  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000068  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000165  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000026  00000000  00000000  000007f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  0000081b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 65 00 	call	0xca	; 0xca <main>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
  94:	80 eb       	ldi	r24, 0xB0	; 176
  96:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
  98:	11 9a       	sbi	0x02, 1	; 2
	// Enable SPI, Master Mode 0, set the clock rate fck/2
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
  9a:	80 e5       	ldi	r24, 0x50	; 80
  9c:	8c bd       	out	0x2c, r24	; 44
  9e:	08 95       	ret

000000a0 <SPI_Read>:
}

uint8_t SPI_Read(int address)
{
	//Enable RAM CS
	RAM_PORT &= ~(1<<RAM_CS);
  a0:	11 98       	cbi	0x02, 1	; 2
	SPDR0 = READ;
  a2:	23 e0       	ldi	r18, 0x03	; 3
  a4:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  a6:	0d b4       	in	r0, 0x2d	; 45
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <SPI_Read+0x6>
	SPDR0 = (address & 0xFF00) >> 8;
  ac:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  ae:	0d b4       	in	r0, 0x2d	; 45
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <SPI_Read+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR0 = address & 0x00FF;
  b4:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <SPI_Read+0x16>
	// Send Dummy transmission for reading the data
	SPDR0 = 0x00;
  bc:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  be:	0d b4       	in	r0, 0x2d	; 45
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <SPI_Read+0x1e>
	//Disable RAM CS 
	RAM_PORT |= (1<<RAM_CS);
  c4:	11 9a       	sbi	0x02, 1	; 2
	return(SPDR0);
  c6:	8e b5       	in	r24, 0x2e	; 46
}
  c8:	08 95       	ret

000000ca <main>:
#include <avr/io.h>
#include "RAMDriver.h"

int main(void)
{
	SPI_Init(); 
  ca:	0e 94 4a 00 	call	0x94	; 0x94 <SPI_Init>
	SPI_Read(0000);	
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Read>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0xc>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
