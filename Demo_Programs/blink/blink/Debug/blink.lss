
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000064  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000b8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000018b  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ed  00000000  00000000  000002ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000173  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000019f  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  000006ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	17 c0       	rjmp	.+46     	; 0x60 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
void LED_off(void);

int main(void)
{
	//initialization();
	DDRD |= (1<<PD6);//make PD6 an output
  34:	8e 9a       	sbi	0x11, 6	; 17
    while(1)
    {
		//LED_on();
		PORTD |= (1<<PD6);
  36:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  38:	2f e3       	ldi	r18, 0x3F	; 63
  3a:	8d e0       	ldi	r24, 0x0D	; 13
  3c:	93 e0       	ldi	r25, 0x03	; 3
  3e:	21 50       	subi	r18, 0x01	; 1
  40:	80 40       	sbci	r24, 0x00	; 0
  42:	90 40       	sbci	r25, 0x00	; 0
  44:	e1 f7       	brne	.-8      	; 0x3e <__SP_L__+0x1>
  46:	00 c0       	rjmp	.+0      	; 0x48 <__SREG__+0x9>
  48:	00 00       	nop
        _delay_ms(1000);//delay for 1 second
		//LED_off();
		PORTD &= ~(1<<PD6);
  4a:	96 98       	cbi	0x12, 6	; 18
  4c:	2f e3       	ldi	r18, 0x3F	; 63
  4e:	8d e0       	ldi	r24, 0x0D	; 13
  50:	93 e0       	ldi	r25, 0x03	; 3
  52:	21 50       	subi	r18, 0x01	; 1
  54:	80 40       	sbci	r24, 0x00	; 0
  56:	90 40       	sbci	r25, 0x00	; 0
  58:	e1 f7       	brne	.-8      	; 0x52 <__SREG__+0x13>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <__SREG__+0x1d>
  5c:	00 00       	nop
  5e:	eb cf       	rjmp	.-42     	; 0x36 <main+0x2>

00000060 <_exit>:
  60:	f8 94       	cli

00000062 <__stop_program>:
  62:	ff cf       	rjmp	.-2      	; 0x62 <__stop_program>
