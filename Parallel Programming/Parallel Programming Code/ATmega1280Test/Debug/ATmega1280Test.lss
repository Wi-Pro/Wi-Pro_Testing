
ATmega1280Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000001f4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001e49  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000226  00000000  00000000  00002191  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000ec2  00000000  00000000  000023b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  0000327c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000361  00000000  00000000  0000340c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000029f  00000000  00000000  0000376d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a0  00000000  00000000  00003a0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
   6:	00 00       	nop
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	00 00       	nop
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	00 00       	nop
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
  22:	00 00       	nop
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
  26:	00 00       	nop
  28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
  32:	00 00       	nop
  34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__bad_interrupt>
  42:	00 00       	nop
  44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
  46:	00 00       	nop
  48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	51 c0       	rjmp	.+162    	; 0xf4 <__bad_interrupt>
  52:	00 00       	nop
  54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
  56:	00 00       	nop
  58:	4d c0       	rjmp	.+154    	; 0xf4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
  62:	00 00       	nop
  64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
  66:	00 00       	nop
  68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	41 c0       	rjmp	.+130    	; 0xf4 <__bad_interrupt>
  72:	00 00       	nop
  74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
  76:	00 00       	nop
  78:	3d c0       	rjmp	.+122    	; 0xf4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
  82:	00 00       	nop
  84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
  86:	00 00       	nop
  88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	33 c0       	rjmp	.+102    	; 0xf4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	31 c0       	rjmp	.+98     	; 0xf4 <__bad_interrupt>
  92:	00 00       	nop
  94:	2f c0       	rjmp	.+94     	; 0xf4 <__bad_interrupt>
  96:	00 00       	nop
  98:	2d c0       	rjmp	.+90     	; 0xf4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2b c0       	rjmp	.+86     	; 0xf4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	29 c0       	rjmp	.+82     	; 0xf4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	27 c0       	rjmp	.+78     	; 0xf4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	25 c0       	rjmp	.+74     	; 0xf4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	23 c0       	rjmp	.+70     	; 0xf4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	21 c0       	rjmp	.+66     	; 0xf4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	1f c0       	rjmp	.+62     	; 0xf4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1d c0       	rjmp	.+58     	; 0xf4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1b c0       	rjmp	.+54     	; 0xf4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	19 c0       	rjmp	.+50     	; 0xf4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	15 c0       	rjmp	.+42     	; 0xf4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	59 d0       	rcall	.+178    	; 0x1a4 <main>
  f2:	7e c0       	rjmp	.+252    	; 0x1f0 <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <SPI_Switching_Circuitry_Init>:
void USB_UART0_Out(unsigned char TransmissionValue)
{
	while(!(UCSR0A & (1<<UDRE0))); //buffer empty and ready to transmit
	UDR0 = TransmissionValue; //start transmitting value
	while(!(UCSR0A & (1<<TXC0))); //wait for transmit to complete
	UCSR0A |= 1<<TXC0; //clear transmit complete flag
  f6:	9d 9a       	sbi	0x13, 5	; 19
  f8:	e4 e0       	ldi	r30, 0x04	; 4
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	80 81       	ld	r24, Z
  fe:	88 63       	ori	r24, 0x38	; 56
 100:	80 83       	st	Z, r24
 102:	e5 e0       	ldi	r30, 0x05	; 5
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	80 81       	ld	r24, Z
 108:	88 61       	ori	r24, 0x18	; 24
 10a:	80 83       	st	Z, r24
 10c:	80 81       	ld	r24, Z
 10e:	8f 7d       	andi	r24, 0xDF	; 223
 110:	80 83       	st	Z, r24
 112:	a5 9a       	sbi	0x14, 5	; 20
 114:	08 95       	ret

00000116 <SPI_FPGA_Write>:
 116:	a4 98       	cbi	0x14, 4	; 20
 118:	8e bd       	out	0x2e, r24	; 46
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_FPGA_Write+0x4>
 120:	a4 9a       	sbi	0x14, 4	; 20
 122:	08 95       	ret

00000124 <SPI_FPGA_Init>:
 124:	84 b1       	in	r24, 0x04	; 4
 126:	87 60       	ori	r24, 0x07	; 7
 128:	84 b9       	out	0x04, r24	; 4
 12a:	23 98       	cbi	0x04, 3	; 4
 12c:	9c 9a       	sbi	0x13, 4	; 19
 12e:	a4 9a       	sbi	0x14, 4	; 20
 130:	83 e5       	ldi	r24, 0x53	; 83
 132:	8c bd       	out	0x2c, r24	; 44
 134:	8d b5       	in	r24, 0x2d	; 45
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	8d bd       	out	0x2d, r24	; 45
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	ec cf       	rjmp	.-40     	; 0x116 <SPI_FPGA_Write>
 13e:	08 95       	ret

00000140 <USB_UART0_Initialization>:
 140:	69 9a       	sbi	0x0d, 1	; 13
 142:	68 98       	cbi	0x0d, 0	; 13
 144:	70 9a       	sbi	0x0e, 0	; 14
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24
 14c:	10 92 c5 00 	sts	0x00C5, r1
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 c4 00 	sts	0x00C4, r24
 156:	e1 ec       	ldi	r30, 0xC1	; 193
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	80 83       	st	Z, r24
 160:	80 81       	ld	r24, Z
 162:	80 61       	ori	r24, 0x10	; 16
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <USB_UART2_Initialization>:
}

void USB_UART2_Initialization(void)
{
	DDRH |= 1<<1;
 168:	e1 e0       	ldi	r30, 0x01	; 1
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	80 81       	ld	r24, Z
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	80 83       	st	Z, r24
	DDRH &= ~(1<<0);
 172:	80 81       	ld	r24, Z
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	80 83       	st	Z, r24
	PORTH |= 1<<0;
 178:	e2 e0       	ldi	r30, 0x02	; 2
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	80 81       	ld	r24, Z
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	80 83       	st	Z, r24
	UCSR2C = (1<<UCSZ21 | 1<<UCSZ20);	//8 bit data
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	80 93 d2 00 	sts	0x00D2, r24
	UBRR2H = 0;
 188:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = 25;						//9600 Baud at 8MHz
 18c:	89 e1       	ldi	r24, 0x19	; 25
 18e:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B |= 1<<TXEN2; //Enable Transmit
 192:	e1 ed       	ldi	r30, 0xD1	; 209
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 60       	ori	r24, 0x08	; 8
 19a:	80 83       	st	Z, r24
	UCSR2B |= 1<<RXEN2; //Enable Receive
 19c:	80 81       	ld	r24, Z
 19e:	80 61       	ori	r24, 0x10	; 16
 1a0:	80 83       	st	Z, r24
 1a2:	08 95       	ret

000001a4 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	2f e7       	ldi	r18, 0x7F	; 127
 1a6:	8a e1       	ldi	r24, 0x1A	; 26
 1a8:	96 e0       	ldi	r25, 0x06	; 6
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x6>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x10>
 1b4:	00 00       	nop

int main(void)
{
	_delay_ms(500);
	
	USB_UART0_Initialization();
 1b6:	c4 df       	rcall	.-120    	; 0x140 <USB_UART0_Initialization>
	USB_UART2_Initialization();
 1b8:	d7 df       	rcall	.-82     	; 0x168 <USB_UART2_Initialization>
	SPI_FPGA_Init();
 1ba:	b4 df       	rcall	.-152    	; 0x124 <SPI_FPGA_Init>
	SPI_Switching_Circuitry_Init();
 1bc:	9c df       	rcall	.-200    	; 0xf6 <SPI_Switching_Circuitry_Init>
 1be:	2f e7       	ldi	r18, 0x7F	; 127
 1c0:	8a e1       	ldi	r24, 0x1A	; 26
 1c2:	96 e0       	ldi	r25, 0x06	; 6
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x20>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x2a>
 1ce:	00 00       	nop
	//USB_UART0_Out('l');
	//USB_UART0_Out('p');
	//USB_UART0_Out(0x0A);
	
	//turning on top board LEDs
	LED_DDR |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
 1d0:	83 b3       	in	r24, 0x13	; 19
 1d2:	87 60       	ori	r24, 0x07	; 7
 1d4:	83 bb       	out	0x13, r24	; 19
	LED_PORT |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
 1d6:	84 b3       	in	r24, 0x14	; 20
 1d8:	87 60       	ori	r24, 0x07	; 7
 1da:	84 bb       	out	0x14, r24	; 20
 1dc:	2f e7       	ldi	r18, 0x7F	; 127
 1de:	8a e1       	ldi	r24, 0x1A	; 26
 1e0:	96 e0       	ldi	r25, 0x06	; 6
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x3e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x48>
 1ec:	00 00       	nop
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <main+0x4a>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
