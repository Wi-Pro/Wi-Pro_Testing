
VoltageControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000320  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000180  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000033d  00000000  00000000  00000752  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000108  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000021d  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ae  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
   6:	00 00       	nop
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	00 00       	nop
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	00 00       	nop
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
  22:	00 00       	nop
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
  26:	00 00       	nop
  28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
  32:	00 00       	nop
  34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__bad_interrupt>
  42:	00 00       	nop
  44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
  46:	00 00       	nop
  48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	51 c0       	rjmp	.+162    	; 0xf4 <__bad_interrupt>
  52:	00 00       	nop
  54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
  56:	00 00       	nop
  58:	4d c0       	rjmp	.+154    	; 0xf4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
  62:	00 00       	nop
  64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
  66:	00 00       	nop
  68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	41 c0       	rjmp	.+130    	; 0xf4 <__bad_interrupt>
  72:	00 00       	nop
  74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
  76:	00 00       	nop
  78:	3d c0       	rjmp	.+122    	; 0xf4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
  82:	00 00       	nop
  84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
  86:	00 00       	nop
  88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	33 c0       	rjmp	.+102    	; 0xf4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	31 c0       	rjmp	.+98     	; 0xf4 <__bad_interrupt>
  92:	00 00       	nop
  94:	2f c0       	rjmp	.+94     	; 0xf4 <__bad_interrupt>
  96:	00 00       	nop
  98:	2d c0       	rjmp	.+90     	; 0xf4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2b c0       	rjmp	.+86     	; 0xf4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	29 c0       	rjmp	.+82     	; 0xf4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	27 c0       	rjmp	.+78     	; 0xf4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	25 c0       	rjmp	.+74     	; 0xf4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	23 c0       	rjmp	.+70     	; 0xf4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	21 c0       	rjmp	.+66     	; 0xf4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	1f c0       	rjmp	.+62     	; 0xf4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1d c0       	rjmp	.+58     	; 0xf4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1b c0       	rjmp	.+54     	; 0xf4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	19 c0       	rjmp	.+50     	; 0xf4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	15 c0       	rjmp	.+42     	; 0xf4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	02 d0       	rcall	.+4      	; 0xf6 <main>
  f2:	3b c0       	rjmp	.+118    	; 0x16a <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <main>:
#include <avr/io.h>
#include "VoltageControlDriver.h"

int main(void)
{
	voltageControlInit(); 
  f6:	0b d0       	rcall	.+22     	; 0x10e <voltageControlInit>
	setVcc(VCC_5V);
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	1d d0       	rcall	.+58     	; 0x136 <setVcc>
	setVpp(VPP_12V);
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	23 d0       	rcall	.+70     	; 0x146 <setVpp>
	setVLogic(VL_5V);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	2b d0       	rcall	.+86     	; 0x15a <setVLogic>
 104:	ff cf       	rjmp	.-2      	; 0x104 <main+0xe>

00000106 <VppClear>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
 106:	81 b3       	in	r24, 0x11	; 17
 108:	8e 79       	andi	r24, 0x9E	; 158
 10a:	81 bb       	out	0x11, r24	; 17
 10c:	08 95       	ret

0000010e <voltageControlInit>:
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	80 bb       	out	0x10, r24	; 16
 112:	11 ba       	out	0x11, r1	; 17
 114:	84 b1       	in	r24, 0x04	; 4
 116:	80 67       	ori	r24, 0x70	; 112
 118:	84 b9       	out	0x04, r24	; 4
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8f 78       	andi	r24, 0x8F	; 143
 11e:	85 b9       	out	0x05, r24	; 5
 120:	08 95       	ret

00000122 <enableVppRegulator>:
 122:	f1 df       	rcall	.-30     	; 0x106 <VppClear>
 124:	8e 9a       	sbi	0x11, 6	; 17
 126:	08 95       	ret

00000128 <VccClear>:
 128:	81 b3       	in	r24, 0x11	; 17
 12a:	83 7e       	andi	r24, 0xE3	; 227
 12c:	81 bb       	out	0x11, r24	; 17
 12e:	08 95       	ret

00000130 <enableVccRegulator>:
 130:	fb df       	rcall	.-10     	; 0x128 <VccClear>
 132:	2d 9a       	sbi	0x05, 5	; 5
 134:	08 95       	ret

00000136 <setVcc>:
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	21 f4       	brne	.+8      	; 0x142 <setVcc+0xc>
 13a:	89 9a       	sbi	0x11, 1	; 17
 13c:	f9 df       	rcall	.-14     	; 0x130 <enableVccRegulator>
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret

00000146 <setVpp>:
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	21 f4       	brne	.+8      	; 0x152 <setVpp+0xc>
 14a:	89 9a       	sbi	0x11, 1	; 17
 14c:	ea df       	rcall	.-44     	; 0x122 <enableVppRegulator>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret

00000156 <enableVLogic>:
 156:	2c 9a       	sbi	0x05, 4	; 5
 158:	08 95       	ret

0000015a <setVLogic>:
}

uint8_t setVLogic(uint8_t voltageLevel)
{
	//prevents accidental triggering of the wrong regulator
	if(voltageLevel != (VL_3_3V || VL_5V))
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	21 f4       	brne	.+8      	; 0x166 <setVLogic+0xc>
		return 0;
	else
	{
		VCNTRL_PORT |= (1<<voltageLevel);
 15e:	89 9a       	sbi	0x11, 1	; 17
		enableVLogic();
 160:	fa df       	rcall	.-12     	; 0x156 <enableVLogic>
		return 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	08 95       	ret

uint8_t setVLogic(uint8_t voltageLevel)
{
	//prevents accidental triggering of the wrong regulator
	if(voltageLevel != (VL_3_3V || VL_5V))
		return 0;
 166:	80 e0       	ldi	r24, 0x00	; 0
	{
		VCNTRL_PORT |= (1<<voltageLevel);
		enableVLogic();
		return 1;
	}
}
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
