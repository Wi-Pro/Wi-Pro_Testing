
VoltageControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b0  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000320  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000180  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000033d  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000108  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000229  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ae  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	3b c0       	rjmp	.+118    	; 0xac <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include "VoltageControlDriver.h"

int main(void)
{
	voltageControlInit(); 
  38:	0b d0       	rcall	.+22     	; 0x50 <voltageControlInit>
	setVcc(VCC_5V);
  3a:	83 e0       	ldi	r24, 0x03	; 3
  3c:	1d d0       	rcall	.+58     	; 0x78 <setVcc>
	setVpp(VPP_12V);
  3e:	86 e0       	ldi	r24, 0x06	; 6
  40:	23 d0       	rcall	.+70     	; 0x88 <setVpp>
	setVLogic(VL_5V);
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	2b d0       	rcall	.+86     	; 0x9c <setVLogic>
  46:	ff cf       	rjmp	.-2      	; 0x46 <__SREG__+0x7>

00000048 <VppClear>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
  48:	8b b3       	in	r24, 0x1b	; 27
  4a:	8e 79       	andi	r24, 0x9E	; 158
  4c:	8b bb       	out	0x1b, r24	; 27
  4e:	08 95       	ret

00000050 <voltageControlInit>:
  50:	8f ef       	ldi	r24, 0xFF	; 255
  52:	8a bb       	out	0x1a, r24	; 26
  54:	1b ba       	out	0x1b, r1	; 27
  56:	87 b3       	in	r24, 0x17	; 23
  58:	80 67       	ori	r24, 0x70	; 112
  5a:	87 bb       	out	0x17, r24	; 23
  5c:	88 b3       	in	r24, 0x18	; 24
  5e:	8f 78       	andi	r24, 0x8F	; 143
  60:	88 bb       	out	0x18, r24	; 24
  62:	08 95       	ret

00000064 <enableVppRegulator>:
  64:	f1 df       	rcall	.-30     	; 0x48 <VppClear>
  66:	de 9a       	sbi	0x1b, 6	; 27
  68:	08 95       	ret

0000006a <VccClear>:
  6a:	8b b3       	in	r24, 0x1b	; 27
  6c:	83 7e       	andi	r24, 0xE3	; 227
  6e:	8b bb       	out	0x1b, r24	; 27
  70:	08 95       	ret

00000072 <enableVccRegulator>:
  72:	fb df       	rcall	.-10     	; 0x6a <VccClear>
  74:	c5 9a       	sbi	0x18, 5	; 24
  76:	08 95       	ret

00000078 <setVcc>:
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	21 f4       	brne	.+8      	; 0x84 <setVcc+0xc>
  7c:	d9 9a       	sbi	0x1b, 1	; 27
  7e:	f9 df       	rcall	.-14     	; 0x72 <enableVccRegulator>
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	08 95       	ret
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	08 95       	ret

00000088 <setVpp>:
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	21 f4       	brne	.+8      	; 0x94 <setVpp+0xc>
  8c:	d9 9a       	sbi	0x1b, 1	; 27
  8e:	ea df       	rcall	.-44     	; 0x64 <enableVppRegulator>
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	08 95       	ret
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	08 95       	ret

00000098 <enableVLogic>:
  98:	c4 9a       	sbi	0x18, 4	; 24
  9a:	08 95       	ret

0000009c <setVLogic>:
}

uint8_t setVLogic(uint8_t voltageLevel)
{
	//prevents accidental triggering of the wrong regulator
	if(voltageLevel != (VL_3_3V || VL_5V))
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	21 f4       	brne	.+8      	; 0xa8 <setVLogic+0xc>
		return 0;
	else
	{
		VCNTRL_PORT |= (1<<voltageLevel);
  a0:	d9 9a       	sbi	0x1b, 1	; 27
		enableVLogic();
  a2:	fa df       	rcall	.-12     	; 0x98 <enableVLogic>
		return 1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	08 95       	ret

uint8_t setVLogic(uint8_t voltageLevel)
{
	//prevents accidental triggering of the wrong regulator
	if(voltageLevel != (VL_3_3V || VL_5V))
		return 0;
  a8:	80 e0       	ldi	r24, 0x00	; 0
	{
		VCNTRL_PORT |= (1<<voltageLevel);
		enableVLogic();
		return 1;
	}
}
  aa:	08 95       	ret

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
