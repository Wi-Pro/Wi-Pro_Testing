
Logic_Switching_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000e6  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000176  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000132  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000016d  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b4  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  8c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <SPI_Init>:
}

void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
  94:	80 eb       	ldi	r24, 0xB0	; 176
  96:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
  98:	5c 9a       	sbi	0x0b, 4	; 11
	// Enable SPI, Master Mode 0, set the clock rate fck/4
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
  9a:	80 e5       	ldi	r24, 0x50	; 80
  9c:	8c bd       	out	0x2c, r24	; 44
  9e:	08 95       	ret

000000a0 <SPI_Write>:
}

void SPI_Write(unsigned char SPI_Data)
{
	// Start Write transmission
	SPDR0 = SPI_Data;
  a0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));	
  a2:	0d b4       	in	r0, 0x2d	; 45
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <SPI_Write+0x2>
  a8:	08 95       	ret

000000aa <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f e3       	ldi	r18, 0x3F	; 63
  ac:	8d e0       	ldi	r24, 0x0D	; 13
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x6>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x10>
  ba:	00 00       	nop
void SPI_Write(unsigned char SPI_Data);

int main(void)
{
	_delay_ms(1000);
	DDRA = 0x00;
  bc:	11 b8       	out	0x01, r1	; 1
	Shift_Reg_Cntrl_DDR |= (1<<3 | 1<<4 | 1<<5);
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	88 63       	ori	r24, 0x38	; 56
  c2:	8a b9       	out	0x0a, r24	; 10
	DDRD |= 1<<6;
  c4:	56 9a       	sbi	0x0a, 6	; 10
	
	Shift_Reg_Cntrl_PORT |= 1<<Reset;
  c6:	5d 9a       	sbi	0x0b, 5	; 11
	SPI_Init();
  c8:	0e 94 4a 00 	call	0x94	; 0x94 <SPI_Init>
	Shift_Reg_Cntrl_PORT &= ~(1<<OE);
  cc:	5b 98       	cbi	0x0b, 3	; 11
	
	PORTD |= 1<<6;
  ce:	5e 9a       	sbi	0x0b, 6	; 11
	//PORTA = 0x00;
	
	
	
	// Activate the CS pin
	Switching_Circuitry_CS_PORT &= ~(1<<Switching_Circuitry_SPI_CS);
  d0:	5c 98       	cbi	0x0b, 4	; 11
	SPI_Write(0x07);
  d2:	87 e0       	ldi	r24, 0x07	; 7
  d4:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x01);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	// CS pin is not active
	Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
  de:	5c 9a       	sbi	0x0b, 4	; 11
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x36>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
