
Logic_Switching_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000032a  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000132  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000185  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b4  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  8c:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <SPI_Init>:
}

void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
  94:	80 eb       	ldi	r24, 0xB0	; 176
  96:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
  98:	5c 9a       	sbi	0x0b, 4	; 11
	// Enable SPI, Master Mode 0, set the clock rate fck/128
	SPCR0 = ((1<<SPE0)|(1<<MSTR0)|(1<<SPR10)|(1<<SPR00));
  9a:	83 e5       	ldi	r24, 0x53	; 83
  9c:	8c bd       	out	0x2c, r24	; 44
  9e:	08 95       	ret

000000a0 <SPI_Write>:

void SPI_Write(unsigned char SPI_Data)
{
	
	// Start Write transmission
	SPDR0 = SPI_Data;
  a0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  a2:	0d b4       	in	r0, 0x2d	; 45
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <SPI_Write+0x2>
  a8:	08 95       	ret

000000aa <main>:
void SPI_Init();
void SPI_Write(unsigned char SPI_Data);

int main(void)
{
	DDRC = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x07;
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	88 b9       	out	0x08, r24	; 8
	Shift_Reg_Cntrl_DDR |= (1<<3 | 1<<4 | 1<<5);
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	88 63       	ori	r24, 0x38	; 56
  b6:	8a b9       	out	0x0a, r24	; 10
	
	Shift_Reg_Cntrl_PORT &= ~(1<<SReset);
  b8:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8a e1       	ldi	r24, 0x1A	; 26
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x18>
	_delay_us(10);
	Shift_Reg_Cntrl_PORT |= 1<<SReset;
  c2:	5d 9a       	sbi	0x0b, 5	; 11
	SPI_Init();
  c4:	0e 94 4a 00 	call	0x94	; 0x94 <SPI_Init>
	Shift_Reg_Cntrl_PORT &= ~(1<<SROE);
  c8:	5b 98       	cbi	0x0b, 3	; 11

	Switching_Circuitry_CS_PORT &= ~(1<<Switching_Circuitry_SPI_CS);
  ca:	5c 98       	cbi	0x0b, 4	; 11
	SPI_Write(0xFE);
  cc:	8e ef       	ldi	r24, 0xFE	; 254
  ce:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x55);
  d2:	85 e5       	ldi	r24, 0x55	; 85
  d4:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	
	SPI_Write(0x00);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	
	SPI_Write(0x00);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	
	SPI_Write(0x00);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	
	SPI_Write(0x00);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	SPI_Write(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Write>
	
	Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
 162:	5c 9a       	sbi	0x0b, 4	; 11
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0xba>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
