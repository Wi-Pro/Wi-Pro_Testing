
Practice_Parallel_Programming_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c56  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d8  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000047d  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000fc  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002f8  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015d  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00001ad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a0 30       	cpi	r26, 0x00	; 0
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <SPI_Init>:
	
	//_delay_us(25);
	//PORTD |= 1<<2;
	
	 Switching_Circuitry_CS_PORT &= ~(1<<Switching_Circuitry_SPI_CS);
	SPI_Write(0x00); //Pull Downs
  a4:	80 eb       	ldi	r24, 0xB0	; 176
  a6:	84 b9       	out	0x04, r24	; 4
	SPI_Write(0x00);
  a8:	5c 9a       	sbi	0x0b, 4	; 11
  aa:	83 e5       	ldi	r24, 0x53	; 83
  ac:	8c bd       	out	0x2c, r24	; 44
	SPI_Write(0x00);
  ae:	08 95       	ret

000000b0 <SPI_Write>:
  b0:	8e bd       	out	0x2e, r24	; 46
  b2:	0d b4       	in	r0, 0x2d	; 45
	SPI_Write(0x00);
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <SPI_Write+0x2>
  b8:	08 95       	ret

000000ba <USB_UART_Initialization>:
	SPI_Write(0x00);
  ba:	51 9a       	sbi	0x0a, 1	; 10
  bc:	50 98       	cbi	0x0a, 0	; 10
  be:	58 9a       	sbi	0x0b, 0	; 11
	
	SPI_Write(0x00); //GND
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	80 93 c2 00 	sts	0x00C2, r24
	SPI_Write(0x00);
  c6:	10 92 c5 00 	sts	0x00C5, r1
  ca:	89 e1       	ldi	r24, 0x19	; 25
	SPI_Write(0x08);
  cc:	80 93 c4 00 	sts	0x00C4, r24
  d0:	e1 ec       	ldi	r30, 0xC1	; 193
	SPI_Write(0x00);
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	88 60       	ori	r24, 0x08	; 8
	SPI_Write(0x00);
  d8:	80 83       	st	Z, r24
  da:	80 81       	ld	r24, Z
  dc:	80 61       	ori	r24, 0x10	; 16
	
	SPI_Write(0x00); //Pull Ups
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <main>:
  e2:	0e 94 5d 00 	call	0xba	; 0xba <USB_UART_Initialization>
	SPI_Write(0x00);
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	88 67       	ori	r24, 0x78	; 120
	SPI_Write(0x00);
  ea:	8a b9       	out	0x0a, r24	; 10
  ec:	52 9a       	sbi	0x0a, 2	; 10
  ee:	5d 9a       	sbi	0x0b, 5	; 11
	SPI_Write(0x00);
  f0:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Init>
  f4:	5b 98       	cbi	0x0b, 3	; 11
	SPI_Write(0x00);
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	87 b1       	in	r24, 0x07	; 7
  fa:	8d 67       	ori	r24, 0x7D	; 125
	
	SPI_Write(0x00); //VCC
  fc:	87 b9       	out	0x07, r24	; 7
  fe:	39 98       	cbi	0x07, 1	; 7
 100:	40 98       	cbi	0x08, 0	; 8
	SPI_Write(0x20);
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	81 b9       	out	0x01, r24	; 1
 106:	2f ef       	ldi	r18, 0xFF	; 255
	SPI_Write(0x00);
 108:	89 e6       	ldi	r24, 0x69	; 105
 10a:	98 e1       	ldi	r25, 0x18	; 24
 10c:	21 50       	subi	r18, 0x01	; 1
	SPI_Write(0x00);
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x2a>
	SPI_Write(0x00);
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x34>
 116:	00 00       	nop
 118:	5c 98       	cbi	0x0b, 4	; 11
	
	SPI_Write(0x00); //VPP
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x04);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	 Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
 138:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
 13e:	80 e0       	ldi	r24, 0x00	; 0
	_delay_us(15);
	ControlPort |= (1<<WR | 1<<OE);
 140:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
		SPI_Write(0x08);
		SPI_Write(0x00);
		SPI_Write(0x00);
		
		SPI_Write(0x00); //Pull Ups
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		
		SPI_Write(0x00); //VCC
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x20);
 17a:	80 e2       	ldi	r24, 0x20	; 32
 17c:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		
		SPI_Write(0x00); //VPP
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x04);
 1a4:	84 e0       	ldi	r24, 0x04	; 4
 1a6:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
 1b0:	5c 9a       	sbi	0x0b, 4	; 11
 1b2:	a9 cf       	rjmp	.-174    	; 0x106 <main+0x24>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
