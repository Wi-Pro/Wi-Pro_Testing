
Practice_Parallel_Programming_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003cc  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000460  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a22  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f8  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f1  00000000  00000000  0000112a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001901  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 30       	cpi	r26, 0x01	; 1
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 cb 01 	call	0x396	; 0x396 <main>
  9c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <SPI_Init>:
}

void SPI_Init(void)
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
  a4:	80 eb       	ldi	r24, 0xB0	; 176
  a6:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
  a8:	5c 9a       	sbi	0x0b, 4	; 11
	// Enable SPI, Master Mode 0, set the clock rate fck/4
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
  aa:	80 e5       	ldi	r24, 0x50	; 80
  ac:	8c bd       	out	0x2c, r24	; 44
  ae:	08 95       	ret

000000b0 <SPI_Write>:
}

void SPI_Write(unsigned char SPI_Data)
{
	// Start Write transmission
	SPDR0 = SPI_Data;
  b0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <SPI_Write+0x2>
}
  b8:	08 95       	ret

000000ba <EnterParallelProgrammingMode>:



void EnterParallelProgrammingMode(void)
{	
	ControlPort &= ~(1<<XA1_BS2 | 1<<XA0 | 1<<BS1_PAGEL | 1<<WR);
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	87 78       	andi	r24, 0x87	; 135
  be:	88 b9       	out	0x08, r24	; 8
	
	Switching_Circuitry_CS_PORT &= ~(1<<Switching_Circuitry_SPI_CS);
  c0:	5c 98       	cbi	0x0b, 4	; 11
	SPI_Write(0x00); //Pull Downs
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	
	SPI_Write(0x00); //GND
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x08);
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	
	SPI_Write(0x00); //Pull Ups
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	
	SPI_Write(0x00); //VCC
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x20);
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	
	SPI_Write(0x00); //VPP
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
 158:	5c 9a       	sbi	0x0b, 4	; 11
	
	//_delay_us(25);
	//PORTD |= 1<<2;
	
	 Switching_Circuitry_CS_PORT &= ~(1<<Switching_Circuitry_SPI_CS);
 15a:	5c 98       	cbi	0x0b, 4	; 11
	SPI_Write(0x00); //Pull Downs
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	
	SPI_Write(0x00); //GND
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x08);
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	
	SPI_Write(0x00); //Pull Ups
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	
	SPI_Write(0x00); //VCC
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x20);
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	
	SPI_Write(0x00); //VPP
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x04);
 1e6:	84 e0       	ldi	r24, 0x04	; 4
 1e8:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0x00);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	 Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
 1f2:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <EnterParallelProgrammingMode+0x13c>
	_delay_us(15);
	ControlPort |= (1<<WR | 1<<OE);
 1fa:	88 b1       	in	r24, 0x08	; 8
 1fc:	8c 60       	ori	r24, 0x0C	; 12
 1fe:	88 b9       	out	0x08, r24	; 8
 200:	8b e6       	ldi	r24, 0x6B	; 107
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <EnterParallelProgrammingMode+0x14a>
 208:	00 c0       	rjmp	.+0      	; 0x20a <EnterParallelProgrammingMode+0x150>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <ExitParallelProgrammingMode>:
	ControlPort &= ~(1<<XTAL1);
}

void ExitParallelProgrammingMode(void)
{
	PORTD &= ~(1<<2);
 20e:	5a 98       	cbi	0x0b, 2	; 11

	Switching_Circuitry_CS_PORT &= ~(1<<Switching_Circuitry_SPI_CS);
 210:	5c 98       	cbi	0x0b, 4	; 11
		SPI_Write(0x00); //Pull Downs
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		
		SPI_Write(0x00); //GND
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		
		SPI_Write(0x00); //Pull Ups
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		
		SPI_Write(0x00); //VCC
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		
		SPI_Write(0x00); //VPP
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
		SPI_Write(0x00);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
 2a8:	5c 9a       	sbi	0x0b, 4	; 11
 2aa:	08 95       	ret

000002ac <USB_UART_Initialization>:
	while(!(SPSR0 & (1<<SPIF0)));
}

void USB_UART_Initialization(void)
{
	DDRD |= 1<<1;
 2ac:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(1<<0);
 2ae:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= 1<<0;
 2b0:	58 9a       	sbi	0x0b, 0	; 11
	UCSR0C = (1<<UCSZ01 | 1<<UCSZ00);	//8 bit data
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H = 0;
 2b8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 25;						//2400 Baud
 2bc:	89 e1       	ldi	r24, 0x19	; 25
 2be:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= 1<<TXEN0; //Enable Transmit
 2c2:	e1 ec       	ldi	r30, 0xC1	; 193
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	88 60       	ori	r24, 0x08	; 8
 2ca:	80 83       	st	Z, r24
	UCSR0B |= 1<<RXEN0; //Enable Receive
 2cc:	80 81       	ld	r24, Z
 2ce:	80 61       	ori	r24, 0x10	; 16
 2d0:	80 83       	st	Z, r24
 2d2:	08 95       	ret

000002d4 <USB_UART_Out>:
	//UCSR0B |= 1<<RXCIE0;	//Interrupt enable
}

void USB_UART_Out(unsigned char TransmissionValue)
{
	while(!(UCSR0A & (1<<UDRE0))); //buffer empty and ready to transmit
 2d4:	e0 ec       	ldi	r30, 0xC0	; 192
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	90 81       	ld	r25, Z
 2da:	95 ff       	sbrs	r25, 5
 2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <USB_UART_Out+0x4>
	UDR0 = TransmissionValue; //start transmitting value
 2de:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<TXC0))); //wait for transmit to complete
 2e2:	e0 ec       	ldi	r30, 0xC0	; 192
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	86 ff       	sbrs	r24, 6
 2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <USB_UART_Out+0x12>
	UCSR0A |= 1<<TXC0; //clear transmit complete flag
 2ec:	e0 ec       	ldi	r30, 0xC0	; 192
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	80 64       	ori	r24, 0x40	; 64
 2f4:	80 83       	st	Z, r24
 2f6:	08 95       	ret

000002f8 <ReadSignatureBytes>:
}

void ReadSignatureBytes(void)
{
	//A: Load Command "Read Signature Bytes"
	ControlPort |= 1<<XA1_BS2;
 2f8:	46 9a       	sbi	0x08, 6	; 8
	ControlPort &= ~(1<<XA0);
 2fa:	45 98       	cbi	0x08, 5	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 2fc:	44 98       	cbi	0x08, 4	; 8
	DATAOut = 0x08;
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	82 b9       	out	0x02, r24	; 2
	ControlPort |= 1<<XTAL1;
 302:	40 9a       	sbi	0x08, 0	; 8
	ControlPort &= ~(1<<XTAL1);
 304:	40 98       	cbi	0x08, 0	; 8
	
	//B: Load Address Low Byte
	ControlPort &= ~(1<<XA1_BS2);
 306:	46 98       	cbi	0x08, 6	; 8
	ControlPort &= ~(1<<XA0);
 308:	45 98       	cbi	0x08, 5	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 30a:	44 98       	cbi	0x08, 4	; 8
	DATAOut = 0x00;
 30c:	12 b8       	out	0x02, r1	; 2
	ControlPort |= 1<<XTAL1;
 30e:	40 9a       	sbi	0x08, 0	; 8
	ControlPort &= ~(1<<XTAL1);
 310:	40 98       	cbi	0x08, 0	; 8
	
	//Read data
	DATADirection = 0;
 312:	11 b8       	out	0x01, r1	; 1
	ControlPort &= ~(1<<OE);
 314:	42 98       	cbi	0x08, 2	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 316:	44 98       	cbi	0x08, 4	; 8
 318:	8f ec       	ldi	r24, 0xCF	; 207
 31a:	97 e0       	ldi	r25, 0x07	; 7
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <ReadSignatureBytes+0x24>
 320:	00 c0       	rjmp	.+0      	; 0x322 <ReadSignatureBytes+0x2a>
 322:	00 00       	nop
	_delay_us(1000);
	DataValueIn = DATAIn;
 324:	80 b1       	in	r24, 0x00	; 0
 326:	80 93 00 01 	sts	0x0100, r24
	USB_UART_Out(DataValueIn);
 32a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <USB_UART_Out>
	//HexToASCII(DataValueIn);
	ControlPort |= 1<<OE;
 32e:	42 9a       	sbi	0x08, 2	; 8
	DATADirection = 0xFF;
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	81 b9       	out	0x01, r24	; 1
	
	//Load Address Low Byte
	ControlPort &= ~(1<<XA1_BS2);
 334:	46 98       	cbi	0x08, 6	; 8
	ControlPort &= ~(1<<XA0);
 336:	45 98       	cbi	0x08, 5	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 338:	44 98       	cbi	0x08, 4	; 8
	DATAOut = 0x01;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	82 b9       	out	0x02, r24	; 2
	ControlPort |= 1<<XTAL1;
 33e:	40 9a       	sbi	0x08, 0	; 8
	ControlPort &= ~(1<<XTAL1);
 340:	40 98       	cbi	0x08, 0	; 8
	
	//Read data
	DATADirection = 0;
 342:	11 b8       	out	0x01, r1	; 1
	ControlPort &= ~(1<<OE);
 344:	42 98       	cbi	0x08, 2	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 346:	44 98       	cbi	0x08, 4	; 8
 348:	8f ec       	ldi	r24, 0xCF	; 207
 34a:	97 e0       	ldi	r25, 0x07	; 7
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <ReadSignatureBytes+0x54>
 350:	00 c0       	rjmp	.+0      	; 0x352 <ReadSignatureBytes+0x5a>
 352:	00 00       	nop
	_delay_us(1000);
	DataValueIn = DATAIn;
 354:	80 b1       	in	r24, 0x00	; 0
 356:	80 93 00 01 	sts	0x0100, r24
	USB_UART_Out(DataValueIn);
 35a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <USB_UART_Out>
	//HexToASCII(DataValueIn);
	ControlPort |= 1<<OE;
 35e:	42 9a       	sbi	0x08, 2	; 8
	DATADirection = 0xFF;
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	81 b9       	out	0x01, r24	; 1
	
	//Load Address Low Byte
	ControlPort &= ~(1<<XA1_BS2);
 364:	46 98       	cbi	0x08, 6	; 8
	ControlPort &= ~(1<<XA0);
 366:	45 98       	cbi	0x08, 5	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 368:	44 98       	cbi	0x08, 4	; 8
	DATAOut = 0x02;
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	82 b9       	out	0x02, r24	; 2
	ControlPort |= 1<<XTAL1;
 36e:	40 9a       	sbi	0x08, 0	; 8
	ControlPort &= ~(1<<XTAL1);
 370:	40 98       	cbi	0x08, 0	; 8
	
	//Read data
	DATADirection = 0;
 372:	11 b8       	out	0x01, r1	; 1
	ControlPort &= ~(1<<OE);
 374:	42 98       	cbi	0x08, 2	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 376:	44 98       	cbi	0x08, 4	; 8
 378:	8f ec       	ldi	r24, 0xCF	; 207
 37a:	97 e0       	ldi	r25, 0x07	; 7
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <ReadSignatureBytes+0x84>
 380:	00 c0       	rjmp	.+0      	; 0x382 <ReadSignatureBytes+0x8a>
 382:	00 00       	nop
	_delay_us(1000);
	DataValueIn = DATAIn;
 384:	80 b1       	in	r24, 0x00	; 0
 386:	80 93 00 01 	sts	0x0100, r24
	USB_UART_Out(DataValueIn);
 38a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <USB_UART_Out>
	//HexToASCII(DataValueIn);
	ControlPort |= 1<<OE;
 38e:	42 9a       	sbi	0x08, 2	; 8
	DATADirection = 0xFF;
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	81 b9       	out	0x01, r24	; 1
 394:	08 95       	ret

00000396 <main>:

unsigned char DataValueIn = 0;

int main(void)
{
	USB_UART_Initialization();
 396:	0e 94 56 01 	call	0x2ac	; 0x2ac <USB_UART_Initialization>
	
	Shift_Reg_Cntrl_DDR |= (1<<SROE | 1<<Switching_Circuitry_SPI_CS | 1<<SReset | 1<<6);
 39a:	8a b1       	in	r24, 0x0a	; 10
 39c:	88 67       	ori	r24, 0x78	; 120
 39e:	8a b9       	out	0x0a, r24	; 10
	
	DDRD |= 1<<2;
 3a0:	52 9a       	sbi	0x0a, 2	; 10
	
	Shift_Reg_Cntrl_PORT |= 1<<SReset;
 3a2:	5d 9a       	sbi	0x0b, 5	; 11
	SPI_Init();
 3a4:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Init>
	Shift_Reg_Cntrl_PORT &= ~(1<<SROE);
 3a8:	5b 98       	cbi	0x0b, 3	; 11
	PORTD |= 1<<6;
 3aa:	5e 9a       	sbi	0x0b, 6	; 11
	
	ControlDirection |= ( 1<<XTAL1 | 1<<OE | 1<<WR | 1<<BS1_PAGEL | 1<<XA0 | 1<<XA1_BS2);
 3ac:	87 b1       	in	r24, 0x07	; 7
 3ae:	8d 67       	ori	r24, 0x7D	; 125
 3b0:	87 b9       	out	0x07, r24	; 7
	ControlDirection &= ~(1<<RDY_BSY);
 3b2:	39 98       	cbi	0x07, 1	; 7
	ControlPort &= ~(1<<XTAL1);
 3b4:	40 98       	cbi	0x08, 0	; 8
	DATADirection = 0xFF;
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	81 b9       	out	0x01, r24	; 1
	
	EnterParallelProgrammingMode();
 3ba:	0e 94 5d 00 	call	0xba	; 0xba <EnterParallelProgrammingMode>
	ReadSignatureBytes();
 3be:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ReadSignatureBytes>
	ExitParallelProgrammingMode();
 3c2:	0e 94 07 01 	call	0x20e	; 0x20e <ExitParallelProgrammingMode>
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <main+0x30>

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
