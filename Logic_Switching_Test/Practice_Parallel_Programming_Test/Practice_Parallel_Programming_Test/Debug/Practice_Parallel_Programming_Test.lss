
Practice_Parallel_Programming_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000234  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056c  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ff  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b8  00000000  00000000  00000ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001281  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 30       	cpi	r26, 0x01	; 1
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 01 01 	call	0x202	; 0x202 <main>
  9c:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <SPI_Init>:
}

void SPI_Init(void)
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
  a4:	80 eb       	ldi	r24, 0xB0	; 176
  a6:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
  a8:	5c 9a       	sbi	0x0b, 4	; 11
	// Enable SPI, Master Mode 0, set the clock rate fck/4
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
  aa:	80 e5       	ldi	r24, 0x50	; 80
  ac:	8c bd       	out	0x2c, r24	; 44
  ae:	08 95       	ret

000000b0 <SPI_Write>:
}

void SPI_Write(unsigned char SPI_Data)
{
	// Start Write transmission
	SPDR0 = SPI_Data;
  b0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <SPI_Write+0x2>
}
  b8:	08 95       	ret

000000ba <EnterParallelProgrammingMode>:



void EnterParallelProgrammingMode(void)
{
	Switching_Circuitry_CS_PORT &= ~(1<<Switching_Circuitry_SPI_CS);
  ba:	5c 98       	cbi	0x0b, 4	; 11
	SPI_Write(0x00);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0xFF);
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0xFF);
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	// CS pin is not active
	Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
  ce:	5c 9a       	sbi	0x0b, 4	; 11
	
	ControlPort &= ~(1<<XA1_BS2 | 1<<XA0 | 1<<BS1_PAGEL | 1<<WR);
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	87 78       	andi	r24, 0x87	; 135
  d4:	88 b9       	out	0x08, r24	; 8
	
	// Activate the CS pin
	Switching_Circuitry_CS_PORT &= ~(1<<Switching_Circuitry_SPI_CS);
  d6:	5c 98       	cbi	0x0b, 4	; 11
	SPI_Write(0x06);
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0xFF);
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	SPI_Write(0xFF);
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	// CS pin is not active
	Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
  ea:	5c 9a       	sbi	0x0b, 4	; 11
	
	//_delay_us(25);
	//PORTD |= 1<<2;
	
	 Switching_Circuitry_CS_PORT &= ~(1<<Switching_Circuitry_SPI_CS);
  ec:	5c 98       	cbi	0x0b, 4	; 11
	 SPI_Write(0x07);
  ee:	87 e0       	ldi	r24, 0x07	; 7
  f0:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	 SPI_Write(0xFF);
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	 SPI_Write(0xFF);
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Write>
	 Switching_Circuitry_CS_PORT |= (1<<Switching_Circuitry_SPI_CS);
 100:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <EnterParallelProgrammingMode+0x4a>
	_delay_us(15);
	ControlPort |= (1<<WR | 1<<OE);
 108:	88 b1       	in	r24, 0x08	; 8
 10a:	8c 60       	ori	r24, 0x0C	; 12
 10c:	88 b9       	out	0x08, r24	; 8
 10e:	87 e6       	ldi	r24, 0x67	; 103
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <EnterParallelProgrammingMode+0x56>
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <USB_UART_Initialization>:
	while(!(SPSR0 & (1<<SPIF0)));
}

void USB_UART_Initialization(void)
{
	DDRD |= 1<<1;
 118:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(1<<0);
 11a:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= 1<<0;
 11c:	58 9a       	sbi	0x0b, 0	; 11
	UCSR0C = (1<<UCSZ01 | 1<<UCSZ00);	//8 bit data
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H = 0;
 124:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 25;						//2400 Baud
 128:	89 e1       	ldi	r24, 0x19	; 25
 12a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= 1<<TXEN0; //Enable Transmit
 12e:	e1 ec       	ldi	r30, 0xC1	; 193
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 60       	ori	r24, 0x08	; 8
 136:	80 83       	st	Z, r24
	UCSR0B |= 1<<RXEN0; //Enable Receive
 138:	80 81       	ld	r24, Z
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <USB_UART_Out>:
	//UCSR0B |= 1<<RXCIE0;	//Interrupt enable
}

void USB_UART_Out(unsigned char TransmissionValue)
{
	while(!(UCSR0A & (1<<UDRE0))); //buffer empty and ready to transmit
 140:	e0 ec       	ldi	r30, 0xC0	; 192
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	95 ff       	sbrs	r25, 5
 148:	fd cf       	rjmp	.-6      	; 0x144 <USB_UART_Out+0x4>
	UDR0 = TransmissionValue; //start transmitting value
 14a:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<TXC0))); //wait for transmit to complete
 14e:	e0 ec       	ldi	r30, 0xC0	; 192
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	86 ff       	sbrs	r24, 6
 156:	fd cf       	rjmp	.-6      	; 0x152 <USB_UART_Out+0x12>
	UCSR0A |= 1<<TXC0; //clear transmit complete flag
 158:	e0 ec       	ldi	r30, 0xC0	; 192
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <ReadSignatureBytes>:
}

void ReadSignatureBytes(void)
{
	//A: Load Command "Read Signature Bytes"
	ControlPort |= 1<<XA1_BS2;
 164:	46 9a       	sbi	0x08, 6	; 8
	ControlPort &= ~(1<<XA0);
 166:	45 98       	cbi	0x08, 5	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 168:	44 98       	cbi	0x08, 4	; 8
	DATAOut = 0x08;
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	82 b9       	out	0x02, r24	; 2
	ControlPort |= 1<<XTAL1;
 16e:	40 9a       	sbi	0x08, 0	; 8
	ControlPort &= ~(1<<XTAL1);
 170:	40 98       	cbi	0x08, 0	; 8
	
	//B: Load Address Low Byte
	ControlPort &= ~(1<<XA1_BS2);
 172:	46 98       	cbi	0x08, 6	; 8
	ControlPort &= ~(1<<XA0);
 174:	45 98       	cbi	0x08, 5	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 176:	44 98       	cbi	0x08, 4	; 8
	DATAOut = 0x00;
 178:	12 b8       	out	0x02, r1	; 2
	ControlPort |= 1<<XTAL1;
 17a:	40 9a       	sbi	0x08, 0	; 8
	ControlPort &= ~(1<<XTAL1);
 17c:	40 98       	cbi	0x08, 0	; 8
	
	//Read data
	DATADirection = 0;
 17e:	11 b8       	out	0x01, r1	; 1
	ControlPort &= ~(1<<OE);
 180:	42 98       	cbi	0x08, 2	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 182:	44 98       	cbi	0x08, 4	; 8
 184:	89 ef       	ldi	r24, 0xF9	; 249
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <ReadSignatureBytes+0x24>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <ReadSignatureBytes+0x2a>
 18e:	00 00       	nop
	_delay_us(1000);
	DataValueIn = DATAIn;
 190:	80 b1       	in	r24, 0x00	; 0
 192:	80 93 00 01 	sts	0x0100, r24
	USB_UART_Out(DataValueIn);
 196:	0e 94 a0 00 	call	0x140	; 0x140 <USB_UART_Out>
	//HexToASCII(DataValueIn);
	ControlPort |= 1<<OE;
 19a:	42 9a       	sbi	0x08, 2	; 8
	DATADirection = 0xFF;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	81 b9       	out	0x01, r24	; 1
	
	//Load Address Low Byte
	ControlPort &= ~(1<<XA1_BS2);
 1a0:	46 98       	cbi	0x08, 6	; 8
	ControlPort &= ~(1<<XA0);
 1a2:	45 98       	cbi	0x08, 5	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 1a4:	44 98       	cbi	0x08, 4	; 8
	DATAOut = 0x01;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	82 b9       	out	0x02, r24	; 2
	ControlPort |= 1<<XTAL1;
 1aa:	40 9a       	sbi	0x08, 0	; 8
	ControlPort &= ~(1<<XTAL1);
 1ac:	40 98       	cbi	0x08, 0	; 8
	
	//Read data
	DATADirection = 0;
 1ae:	11 b8       	out	0x01, r1	; 1
	ControlPort &= ~(1<<OE);
 1b0:	42 98       	cbi	0x08, 2	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 1b2:	44 98       	cbi	0x08, 4	; 8
 1b4:	89 ef       	ldi	r24, 0xF9	; 249
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <ReadSignatureBytes+0x54>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <ReadSignatureBytes+0x5a>
 1be:	00 00       	nop
	_delay_us(1000);
	DataValueIn = DATAIn;
 1c0:	80 b1       	in	r24, 0x00	; 0
 1c2:	80 93 00 01 	sts	0x0100, r24
	USB_UART_Out(DataValueIn);
 1c6:	0e 94 a0 00 	call	0x140	; 0x140 <USB_UART_Out>
	//HexToASCII(DataValueIn);
	ControlPort |= 1<<OE;
 1ca:	42 9a       	sbi	0x08, 2	; 8
	DATADirection = 0xFF;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	81 b9       	out	0x01, r24	; 1
	
	//Load Address Low Byte
	ControlPort &= ~(1<<XA1_BS2);
 1d0:	46 98       	cbi	0x08, 6	; 8
	ControlPort &= ~(1<<XA0);
 1d2:	45 98       	cbi	0x08, 5	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 1d4:	44 98       	cbi	0x08, 4	; 8
	DATAOut = 0x02;
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	82 b9       	out	0x02, r24	; 2
	ControlPort |= 1<<XTAL1;
 1da:	40 9a       	sbi	0x08, 0	; 8
	ControlPort &= ~(1<<XTAL1);
 1dc:	40 98       	cbi	0x08, 0	; 8
	
	//Read data
	DATADirection = 0;
 1de:	11 b8       	out	0x01, r1	; 1
	ControlPort &= ~(1<<OE);
 1e0:	42 98       	cbi	0x08, 2	; 8
	ControlPort &= ~(1<<BS1_PAGEL);
 1e2:	44 98       	cbi	0x08, 4	; 8
 1e4:	89 ef       	ldi	r24, 0xF9	; 249
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <ReadSignatureBytes+0x84>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <ReadSignatureBytes+0x8a>
 1ee:	00 00       	nop
	_delay_us(1000);
	DataValueIn = DATAIn;
 1f0:	80 b1       	in	r24, 0x00	; 0
 1f2:	80 93 00 01 	sts	0x0100, r24
	USB_UART_Out(DataValueIn);
 1f6:	0e 94 a0 00 	call	0x140	; 0x140 <USB_UART_Out>
	//HexToASCII(DataValueIn);
	ControlPort |= 1<<OE;
 1fa:	42 9a       	sbi	0x08, 2	; 8
	DATADirection = 0xFF;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	81 b9       	out	0x01, r24	; 1
 200:	08 95       	ret

00000202 <main>:

unsigned char DataValueIn = 0;

int main(void)
{
	USB_UART_Initialization();
 202:	0e 94 8c 00 	call	0x118	; 0x118 <USB_UART_Initialization>
	
	Shift_Reg_Cntrl_DDR |= (1<<SROE | 1<<Switching_Circuitry_SPI_CS | 1<<SReset | 1<<6);
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	88 67       	ori	r24, 0x78	; 120
 20a:	8a b9       	out	0x0a, r24	; 10
	
	DDRD |= 1<<2;
 20c:	52 9a       	sbi	0x0a, 2	; 10
	
	Shift_Reg_Cntrl_PORT |= 1<<SReset;
 20e:	5d 9a       	sbi	0x0b, 5	; 11
	SPI_Init();
 210:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Init>
	Shift_Reg_Cntrl_PORT &= ~(1<<SROE);
 214:	5b 98       	cbi	0x0b, 3	; 11
	PORTD |= 1<<6;
 216:	5e 9a       	sbi	0x0b, 6	; 11
	
	ControlDirection |= ( 1<<XTAL1 | 1<<OE | 1<<WR | 1<<BS1_PAGEL | 1<<XA0 | 1<<XA1_BS2);
 218:	87 b1       	in	r24, 0x07	; 7
 21a:	8d 67       	ori	r24, 0x7D	; 125
 21c:	87 b9       	out	0x07, r24	; 7
	ControlDirection &= ~(1<<RDY_BSY);
 21e:	39 98       	cbi	0x07, 1	; 7
	ControlPort &= ~(1<<XTAL1);
 220:	40 98       	cbi	0x08, 0	; 8
	DATADirection = 0xFF;
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	81 b9       	out	0x01, r24	; 1
	
	EnterParallelProgrammingMode();
 226:	0e 94 5d 00 	call	0xba	; 0xba <EnterParallelProgrammingMode>
	ReadSignatureBytes();
 22a:	0e 94 b2 00 	call	0x164	; 0x164 <ReadSignatureBytes>
 22e:	ff cf       	rjmp	.-2      	; 0x22e <main+0x2c>

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
