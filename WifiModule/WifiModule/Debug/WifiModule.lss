
WifiModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00000edc  00000f70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000edc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000077  00800242  00800242  000010b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010b2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  0000110e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000122b  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ae  00000000  00000000  000024c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d7  00000000  00000000  00002c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000434  00000000  00000000  00003450  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b6  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b1d  00000000  00000000  00003d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00004857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_28>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec ed       	ldi	r30, 0xDC	; 220
  90:	fe e0       	ldi	r31, 0x0E	; 14
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 34       	cpi	r26, 0x42	; 66
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a2 e4       	ldi	r26, 0x42	; 66
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a9 3b       	cpi	r26, 0xB9	; 185
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  b2:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
  ba:	80 eb       	ldi	r24, 0xB0	; 176
  bc:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
  be:	09 9a       	sbi	0x01, 1	; 1
	// Enable SPI, Master Mode 0, set the clock rate fck/8
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
  c0:	80 e5       	ldi	r24, 0x50	; 80
  c2:	8c bd       	out	0x2c, r24	; 44
  c4:	08 95       	ret

000000c6 <setRAMStatus>:
}

void setRAMStatus(char mode)
{
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
  c6:	11 98       	cbi	0x02, 1	; 2
	SPDR0 = WRSR;
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  cc:	0d b4       	in	r0, 0x2d	; 45
  ce:	07 fe       	sbrs	r0, 7
  d0:	fd cf       	rjmp	.-6      	; 0xcc <setRAMStatus+0x6>
	// Start Data transmission
	SPDR0 = mode;
  d2:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  d4:	0d b4       	in	r0, 0x2d	; 45
  d6:	07 fe       	sbrs	r0, 7
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <setRAMStatus+0xe>
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
  da:	11 9a       	sbi	0x02, 1	; 2
  dc:	08 95       	ret

000000de <SPI_WriteAddress>:
}

void SPI_WriteAddress(uint16_t address)
{
	SPDR0 = WRITE;
  de:	22 e0       	ldi	r18, 0x02	; 2
  e0:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  e2:	0d b4       	in	r0, 0x2d	; 45
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <SPI_WriteAddress+0x4>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR0 = (address & 0xFF00) >> 8;
  e8:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  ea:	0d b4       	in	r0, 0x2d	; 45
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <SPI_WriteAddress+0xc>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR0 = address & 0x00FF;
  f0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  f2:	0d b4       	in	r0, 0x2d	; 45
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <SPI_WriteAddress+0x14>
}
  f8:	08 95       	ret

000000fa <SPI_WriteData>:

void SPI_WriteData(char data)
{
	// Start Data transmission
	SPDR0 = data;
  fa:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
  fc:	0d b4       	in	r0, 0x2d	; 45
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <SPI_WriteData+0x2>
}
 102:	08 95       	ret

00000104 <SPI_ReadAddress>:

void SPI_ReadAddress(uint16_t address)
{
	SPDR0 = READ;
 104:	23 e0       	ldi	r18, 0x03	; 3
 106:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 108:	0d b4       	in	r0, 0x2d	; 45
 10a:	07 fe       	sbrs	r0, 7
 10c:	fd cf       	rjmp	.-6      	; 0x108 <SPI_ReadAddress+0x4>
	SPDR0 = (address & 0xFF00) >> 8;
 10e:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 110:	0d b4       	in	r0, 0x2d	; 45
 112:	07 fe       	sbrs	r0, 7
 114:	fd cf       	rjmp	.-6      	; 0x110 <SPI_ReadAddress+0xc>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR0 = address & 0x00FF;
 116:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 118:	0d b4       	in	r0, 0x2d	; 45
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <SPI_ReadAddress+0x14>
}
 11e:	08 95       	ret

00000120 <SPI_ReadData>:

char SPI_ReadData()
{
	// Send Dummy transmission for reading the data
	SPDR0 = 0x00;
 120:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 122:	0d b4       	in	r0, 0x2d	; 45
 124:	07 fe       	sbrs	r0, 7
 126:	fd cf       	rjmp	.-6      	; 0x122 <SPI_ReadData+0x2>
	return(SPDR0);
 128:	8e b5       	in	r24, 0x2e	; 46
}
 12a:	08 95       	ret

0000012c <RAMRead>:

	return startAddress; 
}

char* RAMRead(uint16_t startAddress, uint16_t length)
{
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
 13a:	7b 01       	movw	r14, r22
	char* data = ""; 
	setRAMStatus(SEQ);
 13c:	80 e4       	ldi	r24, 0x40	; 64
 13e:	0e 94 63 00 	call	0xc6	; 0xc6 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
 142:	11 98       	cbi	0x02, 1	; 2
	SPI_ReadAddress(startAddress);
 144:	ce 01       	movw	r24, r28
 146:	0e 94 82 00 	call	0x104	; 0x104 <SPI_ReadAddress>
	for(int i=0; i<length; i++)
 14a:	e1 14       	cp	r14, r1
 14c:	f1 04       	cpc	r15, r1
 14e:	79 f0       	breq	.+30     	; 0x16e <RAMRead+0x42>
 150:	00 e0       	ldi	r16, 0x00	; 0
 152:	10 e0       	ldi	r17, 0x00	; 0
 154:	c0 e0       	ldi	r28, 0x00	; 0
 156:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*(data + i) = SPI_ReadData();
 158:	0e 94 90 00 	call	0x120	; 0x120 <SPI_ReadData>
 15c:	f8 01       	movw	r30, r16
 15e:	e0 5d       	subi	r30, 0xD0	; 208
 160:	fd 4f       	sbci	r31, 0xFD	; 253
 162:	80 83       	st	Z, r24
{
	char* data = ""; 
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	for(int i=0; i<length; i++)
 164:	21 96       	adiw	r28, 0x01	; 1
 166:	8e 01       	movw	r16, r28
 168:	ce 15       	cp	r28, r14
 16a:	df 05       	cpc	r29, r15
 16c:	a9 f7       	brne	.-22     	; 0x158 <RAMRead+0x2c>
	{
		*(data + i) = SPI_ReadData();
	}
	RAM_PORT |= (1<<RAM_CS); 
 16e:	11 9a       	sbi	0x02, 1	; 2
	
	return data; 
}
 170:	80 e3       	ldi	r24, 0x30	; 48
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	08 95       	ret

00000182 <RAMWriteByte>:

void RAMWriteByte(char data, uint16_t address)
{
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
 186:	11 98       	cbi	0x02, 1	; 2
	SPI_WriteAddress(address);
 188:	cb 01       	movw	r24, r22
 18a:	0e 94 6f 00 	call	0xde	; 0xde <SPI_WriteAddress>
	SPI_WriteData(data);
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 7d 00 	call	0xfa	; 0xfa <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
 194:	11 9a       	sbi	0x02, 1	; 2
}
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <networkScan>:
}

char* networkScan()
{
	//enableReceiveINT();
	sendCommand(NOPREFIX, SCAN, NOVAL);
 19a:	40 e3       	ldi	r20, 0x30	; 48
 19c:	52 e0       	ldi	r21, 0x02	; 2
 19e:	66 e7       	ldi	r22, 0x76	; 118
 1a0:	71 e0       	ldi	r23, 0x01	; 1
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	0e 94 03 02 	call	0x406	; 0x406 <sendCommand>
	char* networks = getReceiveBuffer(); 
 1a8:	0e 94 83 01 	call	0x306	; 0x306 <getReceiveBuffer>
	//{
		//printf("%c", networks[i]);
	//}
	//printf("\n");
	return networks; 
}
 1ac:	08 95       	ret

000001ae <main>:


int main(void)
{
	//cli(); 
	uart_init();
 1ae:	0e 94 2f 01 	call	0x25e	; 0x25e <uart_init>
	uart0_init(); 
 1b2:	0e 94 19 01 	call	0x232	; 0x232 <uart0_init>
	//printf("%s\n", string);
	sei(); 
 1b6:	78 94       	sei
	SPI_Init(); 
 1b8:	0e 94 5d 00 	call	0xba	; 0xba <SPI_Init>
	//sendCommand(GET, "wlan", NOVAL); 
	//uart_send("scan\r\n\0", 7);
	//char* data = getReceiveBuffer();
	//networkScan();
	//setTestPrint(); 
	setRAMStatus(BYTE);
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 63 00 	call	0xc6	; 0xc6 <setRAMStatus>
	RAMWriteByte(0x00, 0x0000); 
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 c1 00 	call	0x182	; 0x182 <RAMWriteByte>
	char* networks = networkScan(); 
 1cc:	0e 94 cd 00 	call	0x19a	; 0x19a <networkScan>
	//networkConnect("Wi-Pro", "brightshoe902");
	//_delay_ms(3100);
	//serverConnect("www.wi-pro.us", "80"); 
	//setHumanMode();
	//char* data = getReceiveBuffer(); 
	int length = getTransmissionLength();
 1d0:	0e 94 92 01 	call	0x324	; 0x324 <getTransmissionLength>
	//RAMWrite(data, 0x0000, length);
	RAMRead(0x0000, 10);
 1d4:	6a e0       	ldi	r22, 0x0A	; 10
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 96 00 	call	0x12c	; 0x12c <RAMRead>
	//}
	//printf("Found Receive!\n");
	//printf("Received Data: %s\n", data);
	//int length = strlen(data);
	//printf("Message: ");
	printf("\nDone!\n");
 1e0:	84 eb       	ldi	r24, 0xB4	; 180
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 90 04 	call	0x920	; 0x920 <puts>
}
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret

000001ee <uart_sendStream>:
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
}


int uart_sendStream(char ch,FILE *stream)
{
 1ee:	cf 93       	push	r28
 1f0:	c8 2f       	mov	r28, r24
	if (ch == '\n')
 1f2:	8a 30       	cpi	r24, 0x0A	; 10
 1f4:	19 f4       	brne	.+6      	; 0x1fc <uart_sendStream+0xe>
	uart_sendStream('\r', stream);
 1f6:	8d e0       	ldi	r24, 0x0D	; 13
 1f8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <uart_sendStream>
	while (!(UCSR0A & (1<<UDRE0)));
 1fc:	e0 ec       	ldi	r30, 0xC0	; 192
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	90 81       	ld	r25, Z
 202:	95 ff       	sbrs	r25, 5
 204:	fd cf       	rjmp	.-6      	; 0x200 <uart_sendStream+0x12>
	UDR0=ch;
 206:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
}
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <uart_receiveStream>:

int uart_receiveStream(FILE *stream)
{
 212:	cf 93       	push	r28
 214:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR0A & (1<<RXC0)));
 216:	e0 ec       	ldi	r30, 0xC0	; 192
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	88 23       	and	r24, r24
 21e:	ec f7       	brge	.-6      	; 0x21a <uart_receiveStream+0x8>
	ch=UDR0;
 220:	c0 91 c6 00 	lds	r28, 0x00C6

	/* Echo the Output Back to terminal */
	uart_sendStream(ch,stream);
 224:	8c 2f       	mov	r24, r28
 226:	0e 94 f7 00 	call	0x1ee	; 0x1ee <uart_sendStream>

	return ch;
}
 22a:	8c 2f       	mov	r24, r28
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <uart0_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart0_init()
{
	UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
 232:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 		// enable Rx & Tx
 23c:	88 e1       	ldi	r24, 0x18	; 24
 23e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=  (1<<UCSZ01)|(1<<UCSZ00);  	       // config USART; 8N1
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	80 93 c2 00 	sts	0x00C2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	90 93 b4 02 	sts	0x02B4, r25
 250:	80 93 b3 02 	sts	0x02B3, r24
 254:	90 93 b6 02 	sts	0x02B6, r25
 258:	80 93 b5 02 	sts	0x02B5, r24
 25c:	08 95       	ret

0000025e <uart_init>:
	testPrint = 1; 
}

void uart_init()
{
	UBRR1H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
 25e:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (((F_CPU/BAUD_RATE)/16)-1);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1<<RXEN1)|(1<<TXEN1); // enable Rx & Tx
 268:	e9 ec       	ldi	r30, 0xC9	; 201
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	88 e1       	ldi	r24, 0x18	; 24
 26e:	80 83       	st	Z, r24
	UCSR1C =  (1<<UCSZ11)|(1<<UCSZ10); // config USART; 8N1
 270:	86 e0       	ldi	r24, 0x06	; 6
 272:	80 93 ca 00 	sts	0x00CA, r24
	UCSR1B |= (1<<RXCIE1);	//Enable Receive Interrupt 
 276:	80 81       	ld	r24, Z
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	80 83       	st	Z, r24
	
	DDRA |= (1<<PORTA1);
 27c:	09 9a       	sbi	0x01, 1	; 1
 27e:	08 95       	ret

00000280 <getStringLen>:
}

uint16_t getStringLen(unsigned char* p)
{
	uint16_t count = 0; 
	while(*p != '\0')
 280:	fc 01       	movw	r30, r24
 282:	20 81       	ld	r18, Z
 284:	22 23       	and	r18, r18
 286:	41 f0       	breq	.+16     	; 0x298 <getStringLen+0x18>
 288:	31 96       	adiw	r30, 0x01	; 1
	DDRA |= (1<<PORTA1);
}

uint16_t getStringLen(unsigned char* p)
{
	uint16_t count = 0; 
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
	while(*p != '\0')
	{
		count++; 
 28e:	01 96       	adiw	r24, 0x01	; 1
}

uint16_t getStringLen(unsigned char* p)
{
	uint16_t count = 0; 
	while(*p != '\0')
 290:	21 91       	ld	r18, Z+
 292:	21 11       	cpse	r18, r1
 294:	fc cf       	rjmp	.-8      	; 0x28e <getStringLen+0xe>
 296:	08 95       	ret
	DDRA |= (1<<PORTA1);
}

uint16_t getStringLen(unsigned char* p)
{
	uint16_t count = 0; 
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
	{
		count++; 
		p++; 
	}
	return count; 
}
 29c:	08 95       	ret

0000029e <uart_send>:

int uart_send(unsigned char* data, unsigned int length)
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
	//UCSR1B |= (1<<RXCIE1);
	receiveFlag = 0;
 2a2:	10 92 46 02 	sts	0x0246, r1
	memset(receiveBuffer, 0x00, MaxRecSize);
 2a6:	24 e6       	ldi	r18, 0x64	; 100
 2a8:	eb e4       	ldi	r30, 0x4B	; 75
 2aa:	f2 e0       	ldi	r31, 0x02	; 2
 2ac:	df 01       	movw	r26, r30
 2ae:	1d 92       	st	X+, r1
 2b0:	2a 95       	dec	r18
 2b2:	e9 f7       	brne	.-6      	; 0x2ae <uart_send+0x10>
	PORTD |= (1<<RTS);
 2b4:	5d 9a       	sbi	0x0b, 5	; 11
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
 2b6:	61 15       	cp	r22, r1
 2b8:	71 05       	cpc	r23, r1
 2ba:	a9 f0       	breq	.+42     	; 0x2e6 <uart_send+0x48>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
}

int uart_send(unsigned char* data, unsigned int length)
{
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
 2c0:	50 e0       	ldi	r21, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR1A & (1<<UDRE1)));
 2c2:	e8 ec       	ldi	r30, 0xC8	; 200
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = data[i];
 2c6:	ae ec       	ldi	r26, 0xCE	; 206
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR1A & (1<<UDRE1)));
 2ca:	40 81       	ld	r20, Z
 2cc:	45 ff       	sbrs	r20, 5
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <uart_send+0x2c>
		UDR1 = data[i];
 2d0:	ec 01       	movw	r28, r24
 2d2:	c2 0f       	add	r28, r18
 2d4:	d3 1f       	adc	r29, r19
 2d6:	28 81       	ld	r18, Y
 2d8:	2c 93       	st	X, r18
		i++;
 2da:	5f 5f       	subi	r21, 0xFF	; 255
	PORTD |= (1<<RTS);
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
 2dc:	25 2f       	mov	r18, r21
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	26 17       	cp	r18, r22
 2e2:	37 07       	cpc	r19, r23
 2e4:	90 f3       	brcs	.-28     	; 0x2ca <uart_send+0x2c>
		UDR1 = data[i];
		i++;
	}
	//while(!(PIND & (1<<CTS))){_delay_us(100);}
	return 0;
}
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <uart_receiveChar>:
}

unsigned char uart_receiveChar()
{
	//printf("Receiving...\n");
	while (!(UCSR1A & (1<<RXC1)));
 2f0:	e8 ec       	ldi	r30, 0xC8	; 200
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	88 23       	and	r24, r24
 2f8:	ec f7       	brge	.-6      	; 0x2f4 <uart_receiveChar+0x4>
	PORTA ^= 0xFF; 
 2fa:	82 b1       	in	r24, 0x02	; 2
 2fc:	80 95       	com	r24
 2fe:	82 b9       	out	0x02, r24	; 2
	return UDR1; 
 300:	80 91 ce 00 	lds	r24, 0x00CE
}
 304:	08 95       	ret

00000306 <getReceiveBuffer>:
char* getReceiveBuffer()
{
	//printf("Waiting for Receive to Complete...\n");
	//Wait for receiving to be completed
	//sendFlag accounts for the delay between sending and receiving 
	while(!receiveFlag & 1)
 306:	80 91 46 02 	lds	r24, 0x0246
 30a:	81 11       	cpse	r24, r1
 30c:	08 c0       	rjmp	.+16     	; 0x31e <getReceiveBuffer+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	81 e2       	ldi	r24, 0x21	; 33
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <getReceiveBuffer+0xa>
 314:	00 00       	nop
 316:	80 91 46 02 	lds	r24, 0x0246
 31a:	88 23       	and	r24, r24
 31c:	c1 f3       	breq	.-16     	; 0x30e <getReceiveBuffer+0x8>
	}
	//_delay_ms(500);
	//begin receiving
	//printf("Received Data: %s\n", receiveBuffer);
	return receiveBuffer; 
}
 31e:	8b e4       	ldi	r24, 0x4B	; 75
 320:	92 e0       	ldi	r25, 0x02	; 2
 322:	08 95       	ret

00000324 <getTransmissionLength>:

unsigned int getTransmissionLength()
{
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
	if(testPrint)
 330:	80 91 42 02 	lds	r24, 0x0242
 334:	90 91 43 02 	lds	r25, 0x0243
 338:	89 2b       	or	r24, r25
 33a:	11 f1       	breq	.+68     	; 0x380 <getTransmissionLength+0x5c>
 33c:	cb e4       	ldi	r28, 0x4B	; 75
 33e:	d2 e0       	ldi	r29, 0x02	; 2
 340:	0f 2e       	mov	r0, r31
 342:	f2 e5       	ldi	r31, 0x52	; 82
 344:	ef 2e       	mov	r14, r31
 346:	f2 e0       	ldi	r31, 0x02	; 2
 348:	ff 2e       	mov	r15, r31
 34a:	f0 2d       	mov	r31, r0
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
		{
			printf("Value: %d, Address: %p\n", receiveBuffer[i], receiveBuffer + i);
 34c:	0e eb       	ldi	r16, 0xBE	; 190
 34e:	11 e0       	ldi	r17, 0x01	; 1
 350:	fe 01       	movw	r30, r28
 352:	21 96       	adiw	r28, 0x01	; 1
 354:	ff 93       	push	r31
 356:	ef 93       	push	r30
 358:	80 81       	ld	r24, Z
 35a:	1f 92       	push	r1
 35c:	8f 93       	push	r24
 35e:	1f 93       	push	r17
 360:	0f 93       	push	r16
 362:	0e 94 75 04 	call	0x8ea	; 0x8ea <printf>
unsigned int getTransmissionLength()
{
	if(testPrint)
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	ce 15       	cp	r28, r14
 374:	df 05       	cpc	r29, r15
 376:	61 f7       	brne	.-40     	; 0x350 <getTransmissionLength+0x2c>
		{
			printf("Value: %d, Address: %p\n", receiveBuffer[i], receiveBuffer + i);
			//printf("0x%02x ", receiveBuffer[i]);
		}
		printf("\n");
 378:	8a e0       	ldi	r24, 0x0A	; 10
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 89 04 	call	0x912	; 0x912 <putchar>
	}
	
	unsigned int transLength = 0;
	transLength += (receiveBuffer[ones] & 0x0F);
	transLength += (receiveBuffer[tens] & 0x0F) * 10; 
 380:	80 91 50 02 	lds	r24, 0x0250
 384:	8f 70       	andi	r24, 0x0F	; 15
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	9c 01       	movw	r18, r24
 38a:	22 0f       	add	r18, r18
 38c:	33 1f       	adc	r19, r19
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	28 0f       	add	r18, r24
 39c:	39 1f       	adc	r19, r25
	transLength += (receiveBuffer[hundreds] & 0x0F) * 100; 
 39e:	80 91 4f 02 	lds	r24, 0x024F
 3a2:	8f 70       	andi	r24, 0x0F	; 15
		printf("\n");
	}
	
	unsigned int transLength = 0;
	transLength += (receiveBuffer[ones] & 0x0F);
	transLength += (receiveBuffer[tens] & 0x0F) * 10; 
 3a4:	94 e6       	ldi	r25, 0x64	; 100
 3a6:	89 9f       	mul	r24, r25
 3a8:	20 0d       	add	r18, r0
 3aa:	31 1d       	adc	r19, r1
 3ac:	11 24       	eor	r1, r1
		}
		printf("\n");
	}
	
	unsigned int transLength = 0;
	transLength += (receiveBuffer[ones] & 0x0F);
 3ae:	80 91 51 02 	lds	r24, 0x0251
 3b2:	8f 70       	andi	r24, 0x0F	; 15
	transLength += (receiveBuffer[tens] & 0x0F) * 10; 
	transLength += (receiveBuffer[hundreds] & 0x0F) * 100; 
 3b4:	28 0f       	add	r18, r24
 3b6:	31 1d       	adc	r19, r1
	transLength += (receiveBuffer[thousands] & 0x0F) * 1000; 
 3b8:	60 91 4e 02 	lds	r22, 0x024E
 3bc:	6f 70       	andi	r22, 0x0F	; 15
 3be:	88 ee       	ldi	r24, 0xE8	; 232
 3c0:	93 e0       	ldi	r25, 0x03	; 3
 3c2:	68 9f       	mul	r22, r24
 3c4:	a0 01       	movw	r20, r0
 3c6:	69 9f       	mul	r22, r25
 3c8:	50 0d       	add	r21, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	24 0f       	add	r18, r20
 3ce:	35 1f       	adc	r19, r21
	transLength += (receiveBuffer[tenThousands] & 0x0F) * 10000; 
 3d0:	60 91 4d 02 	lds	r22, 0x024D
 3d4:	6f 70       	andi	r22, 0x0F	; 15
 3d6:	80 e1       	ldi	r24, 0x10	; 16
 3d8:	97 e2       	ldi	r25, 0x27	; 39
 3da:	68 9f       	mul	r22, r24
 3dc:	a0 01       	movw	r20, r0
 3de:	69 9f       	mul	r22, r25
 3e0:	50 0d       	add	r21, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	24 0f       	add	r18, r20
 3e6:	35 1f       	adc	r19, r21
	if(transLength < MaxRecSize)
 3e8:	24 36       	cpi	r18, 0x64	; 100
 3ea:	31 05       	cpc	r19, r1
 3ec:	18 f0       	brcs	.+6      	; 0x3f4 <getTransmissionLength+0xd0>
		return transLength; 
	else
		//8 is the length of the header 
		return MaxRecSize - 8; 
 3ee:	8c e5       	ldi	r24, 0x5C	; 92
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <getTransmissionLength+0xd4>
	transLength += (receiveBuffer[tens] & 0x0F) * 10; 
	transLength += (receiveBuffer[hundreds] & 0x0F) * 100; 
	transLength += (receiveBuffer[thousands] & 0x0F) * 1000; 
	transLength += (receiveBuffer[tenThousands] & 0x0F) * 10000; 
	if(transLength < MaxRecSize)
		return transLength; 
 3f4:	82 2f       	mov	r24, r18
 3f6:	93 2f       	mov	r25, r19
	else
		//8 is the length of the header 
		return MaxRecSize - 8; 
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	08 95       	ret

00000406 <sendCommand>:
	else 
		return 0; 
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{	
 406:	df 92       	push	r13
 408:	ef 92       	push	r14
 40a:	ff 92       	push	r15
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	d8 2e       	mov	r13, r24
 416:	8b 01       	movw	r16, r22
 418:	7a 01       	movw	r14, r20
	printf("Begin Send Command\n");
 41a:	86 ed       	ldi	r24, 0xD6	; 214
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 90 04 	call	0x920	; 0x920 <puts>
	char* fullCommand = (char *)malloc(MaxSendSize);
 422:	82 e3       	ldi	r24, 0x32	; 50
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 43 03 	call	0x686	; 0x686 <malloc>
 42a:	ec 01       	movw	r28, r24
	switch(prefix)
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	d8 16       	cp	r13, r24
 430:	39 f0       	breq	.+14     	; 0x440 <sendCommand+0x3a>
 432:	92 e0       	ldi	r25, 0x02	; 2
 434:	d9 16       	cp	r13, r25
 436:	89 f0       	breq	.+34     	; 0x45a <sendCommand+0x54>
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	d8 12       	cpse	r13, r24
 43c:	6f c0       	rjmp	.+222    	; 0x51c <sendCommand+0x116>
 43e:	19 c0       	rjmp	.+50     	; 0x472 <sendCommand+0x6c>
	{
		case NOPREFIX: 
			break; 
		case GET: 
			strcat(fullCommand, "get ");
 440:	de 01       	movw	r26, r28
 442:	0d 90       	ld	r0, X+
 444:	00 20       	and	r0, r0
 446:	e9 f7       	brne	.-6      	; 0x442 <sendCommand+0x3c>
 448:	11 97       	sbiw	r26, 0x01	; 1
 44a:	85 e0       	ldi	r24, 0x05	; 5
 44c:	e9 ee       	ldi	r30, 0xE9	; 233
 44e:	f1 e0       	ldi	r31, 0x01	; 1
 450:	01 90       	ld	r0, Z+
 452:	0d 92       	st	X+, r0
 454:	8a 95       	dec	r24
 456:	e1 f7       	brne	.-8      	; 0x450 <sendCommand+0x4a>
			break; 
 458:	0c c0       	rjmp	.+24     	; 0x472 <sendCommand+0x6c>
		case SET: 
			strcat(fullCommand, "set ");
 45a:	de 01       	movw	r26, r28
 45c:	0d 90       	ld	r0, X+
 45e:	00 20       	and	r0, r0
 460:	e9 f7       	brne	.-6      	; 0x45c <sendCommand+0x56>
 462:	11 97       	sbiw	r26, 0x01	; 1
 464:	85 e0       	ldi	r24, 0x05	; 5
 466:	ee ee       	ldi	r30, 0xEE	; 238
 468:	f1 e0       	ldi	r31, 0x01	; 1
 46a:	01 90       	ld	r0, Z+
 46c:	0d 92       	st	X+, r0
 46e:	8a 95       	dec	r24
 470:	e1 f7       	brne	.-8      	; 0x46a <sendCommand+0x64>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
 472:	b8 01       	movw	r22, r16
 474:	ce 01       	movw	r24, r28
 476:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <strcat>
	
	if(value != NOVAL)
 47a:	90 e3       	ldi	r25, 0x30	; 48
 47c:	e9 16       	cp	r14, r25
 47e:	92 e0       	ldi	r25, 0x02	; 2
 480:	f9 06       	cpc	r15, r25
 482:	69 f0       	breq	.+26     	; 0x49e <sendCommand+0x98>
	{
		strcat(fullCommand, " ");
 484:	fe 01       	movw	r30, r28
 486:	01 90       	ld	r0, Z+
 488:	00 20       	and	r0, r0
 48a:	e9 f7       	brne	.-6      	; 0x486 <sendCommand+0x80>
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	80 e2       	ldi	r24, 0x20	; 32
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	91 83       	std	Z+1, r25	; 0x01
 494:	80 83       	st	Z, r24
		strcat(fullCommand, value);
 496:	b7 01       	movw	r22, r14
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
 49e:	fe 01       	movw	r30, r28
 4a0:	01 90       	ld	r0, Z+
 4a2:	00 20       	and	r0, r0
 4a4:	e9 f7       	brne	.-6      	; 0x4a0 <sendCommand+0x9a>
 4a6:	31 97       	sbiw	r30, 0x01	; 1
 4a8:	2d e0       	ldi	r18, 0x0D	; 13
 4aa:	3a e0       	ldi	r19, 0x0A	; 10
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	20 83       	st	Z, r18
 4b0:	31 83       	std	Z+1, r19	; 0x01
 4b2:	42 83       	std	Z+2, r20	; 0x02
	uint16_t length = getStringLen(fullCommand);
 4b4:	ce 01       	movw	r24, r28
 4b6:	0e 94 40 01 	call	0x280	; 0x280 <getStringLen>
 4ba:	e8 2e       	mov	r14, r24
 4bc:	f9 2e       	mov	r15, r25
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
 4be:	df 93       	push	r29
 4c0:	cf 93       	push	r28
 4c2:	ff 92       	push	r15
 4c4:	ef 92       	push	r14
 4c6:	df 93       	push	r29
 4c8:	cf 93       	push	r28
 4ca:	23 ef       	ldi	r18, 0xF3	; 243
 4cc:	31 e0       	ldi	r19, 0x01	; 1
 4ce:	3f 93       	push	r19
 4d0:	2f 93       	push	r18
 4d2:	0e 94 75 04 	call	0x8ea	; 0x8ea <printf>
	uart_send(fullCommand, length);
 4d6:	6e 2d       	mov	r22, r14
 4d8:	7f 2d       	mov	r23, r15
 4da:	ce 01       	movw	r24, r28
 4dc:	0e 94 4f 01 	call	0x29e	; 0x29e <uart_send>
	PORTD |= (1<<RTS);
 4e0:	5d 9a       	sbi	0x0b, 5	; 11
	while(!receiveFlag & 1)
 4e2:	8d b7       	in	r24, 0x3d	; 61
 4e4:	9e b7       	in	r25, 0x3e	; 62
 4e6:	08 96       	adiw	r24, 0x08	; 8
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	9e bf       	out	0x3e, r25	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	8d bf       	out	0x3d, r24	; 61
 4f2:	80 91 46 02 	lds	r24, 0x0246
 4f6:	81 11       	cpse	r24, r1
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <sendCommand+0x104>
 4fa:	93 e0       	ldi	r25, 0x03	; 3
 4fc:	9a 95       	dec	r25
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <sendCommand+0xf6>
 500:	00 00       	nop
 502:	80 91 46 02 	lds	r24, 0x0246
 506:	88 23       	and	r24, r24
 508:	c1 f3       	breq	.-16     	; 0x4fa <sendCommand+0xf4>
		//While loop does not work correctly without a delay
		//An issue with the compiler or the stack pointer when invoking the interrupt
		_delay_us(10);
		//printf("Loop\n");
	}
	free(fullCommand);
 50a:	ce 01       	movw	r24, r28
 50c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <free>
	free(command);
 510:	c8 01       	movw	r24, r16
 512:	0e 94 db 03 	call	0x7b6	; 0x7b6 <free>
	return 1; 
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <sendCommand+0x11a>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
		//printf("Loop\n");
	}
	free(fullCommand);
	free(command);
	return 1; 
}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	df 90       	pop	r13
 52e:	08 95       	ret

00000530 <__vector_28>:

ISR(USART1_RX_vect)
{
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	2f 93       	push	r18
 53c:	3f 93       	push	r19
 53e:	4f 93       	push	r20
 540:	5f 93       	push	r21
 542:	6f 93       	push	r22
 544:	7f 93       	push	r23
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
 54a:	af 93       	push	r26
 54c:	bf 93       	push	r27
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
	//printf("Receive Interrupt!\n");
	cli();
 556:	f8 94       	cli
	if(!bufferStart && testPrint)
 558:	80 91 47 02 	lds	r24, 0x0247
 55c:	90 91 48 02 	lds	r25, 0x0248
 560:	89 2b       	or	r24, r25
 562:	01 f5       	brne	.+64     	; 0x5a4 <__vector_28+0x74>
 564:	80 91 42 02 	lds	r24, 0x0242
 568:	90 91 43 02 	lds	r25, 0x0243
 56c:	89 2b       	or	r24, r25
 56e:	d1 f0       	breq	.+52     	; 0x5a4 <__vector_28+0x74>
	{
		receiveBuffer[i] = uart_receiveChar();
 570:	c0 91 49 02 	lds	r28, 0x0249
 574:	d0 91 4a 02 	lds	r29, 0x024A
 578:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uart_receiveChar>
 57c:	c5 5b       	subi	r28, 0xB5	; 181
 57e:	dd 4f       	sbci	r29, 0xFD	; 253
 580:	88 83       	st	Y, r24
		if(receiveBuffer[i] == 'R')
 582:	e0 91 49 02 	lds	r30, 0x0249
 586:	f0 91 4a 02 	lds	r31, 0x024A
 58a:	e5 5b       	subi	r30, 0xB5	; 181
 58c:	fd 4f       	sbci	r31, 0xFD	; 253
 58e:	80 81       	ld	r24, Z
 590:	82 35       	cpi	r24, 0x52	; 82
 592:	09 f0       	breq	.+2      	; 0x596 <__vector_28+0x66>
 594:	64 c0       	rjmp	.+200    	; 0x65e <__vector_28+0x12e>
		{
			//printf("Found Beginning!\n");
			bufferStart = 1;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	90 93 48 02 	sts	0x0248, r25
 59e:	80 93 47 02 	sts	0x0247, r24
 5a2:	5d c0       	rjmp	.+186    	; 0x65e <__vector_28+0x12e>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
 5a4:	c0 91 49 02 	lds	r28, 0x0249
 5a8:	d0 91 4a 02 	lds	r29, 0x024A
 5ac:	c7 30       	cpi	r28, 0x07	; 7
 5ae:	d1 05       	cpc	r29, r1
 5b0:	78 f4       	brcc	.+30     	; 0x5d0 <__vector_28+0xa0>
		{
			receiveBuffer[i] = uart_receiveChar();
 5b2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uart_receiveChar>
 5b6:	c5 5b       	subi	r28, 0xB5	; 181
 5b8:	dd 4f       	sbci	r29, 0xFD	; 253
 5ba:	88 83       	st	Y, r24
			RAMWriteByte(uart_receiveChar(), i);
 5bc:	c0 91 49 02 	lds	r28, 0x0249
 5c0:	d0 91 4a 02 	lds	r29, 0x024A
 5c4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uart_receiveChar>
 5c8:	be 01       	movw	r22, r28
 5ca:	0e 94 c1 00 	call	0x182	; 0x182 <RAMWriteByte>
 5ce:	3e c0       	rjmp	.+124    	; 0x64c <__vector_28+0x11c>
		}
		else if(i == endHeader)
 5d0:	c7 30       	cpi	r28, 0x07	; 7
 5d2:	d1 05       	cpc	r29, r1
 5d4:	39 f4       	brne	.+14     	; 0x5e4 <__vector_28+0xb4>
		{
			transLength = getTransmissionLength();
 5d6:	0e 94 92 01 	call	0x324	; 0x324 <getTransmissionLength>
 5da:	90 93 45 02 	sts	0x0245, r25
 5de:	80 93 44 02 	sts	0x0244, r24
 5e2:	34 c0       	rjmp	.+104    	; 0x64c <__vector_28+0x11c>
			//if(testPrint)
			//printf("Transmission Length: %d\n", transLength);
		}
		else
		{
			if(i < transLength + 8)
 5e4:	80 91 44 02 	lds	r24, 0x0244
 5e8:	90 91 45 02 	lds	r25, 0x0245
 5ec:	08 96       	adiw	r24, 0x08	; 8
 5ee:	c8 17       	cp	r28, r24
 5f0:	d9 07       	cpc	r29, r25
 5f2:	30 f4       	brcc	.+12     	; 0x600 <__vector_28+0xd0>
			{
				receiveBuffer[i] = uart_receiveChar();
 5f4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uart_receiveChar>
 5f8:	c5 5b       	subi	r28, 0xB5	; 181
 5fa:	dd 4f       	sbci	r29, 0xFD	; 253
 5fc:	88 83       	st	Y, r24
 5fe:	26 c0       	rjmp	.+76     	; 0x64c <__vector_28+0x11c>

			else
			{
				//printf("End of String!\n");
				//receiveBuffer[i] = 0;
				RAMWriteByte(0x00, i);
 600:	be 01       	movw	r22, r28
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	0e 94 c1 00 	call	0x182	; 0x182 <RAMWriteByte>
				UCSR1B &= ~(1<<RXCIE1);
 608:	e9 ec       	ldi	r30, 0xC9	; 201
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	8f 77       	andi	r24, 0x7F	; 127
 610:	80 83       	st	Z, r24
				//cli();
				i = 0;
 612:	10 92 4a 02 	sts	0x024A, r1
 616:	10 92 49 02 	sts	0x0249, r1
				bufferStart = 0;
 61a:	10 92 48 02 	sts	0x0248, r1
 61e:	10 92 47 02 	sts	0x0247, r1
				//done receiving
				receiveFlag = 1;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	80 93 46 02 	sts	0x0246, r24
				printf("Transmission Length: %d\n", getTransmissionLength());
 628:	0e 94 92 01 	call	0x324	; 0x324 <getTransmissionLength>
 62c:	9f 93       	push	r25
 62e:	8f 93       	push	r24
 630:	88 e1       	ldi	r24, 0x18	; 24
 632:	92 e0       	ldi	r25, 0x02	; 2
 634:	9f 93       	push	r25
 636:	8f 93       	push	r24
 638:	0e 94 75 04 	call	0x8ea	; 0x8ea <printf>
				printf("Done Receiving!\n");
 63c:	81 e3       	ldi	r24, 0x31	; 49
 63e:	92 e0       	ldi	r25, 0x02	; 2
 640:	0e 94 90 04 	call	0x920	; 0x920 <puts>
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
			}
		}
		i++;
 64c:	80 91 49 02 	lds	r24, 0x0249
 650:	90 91 4a 02 	lds	r25, 0x024A
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	90 93 4a 02 	sts	0x024A, r25
 65a:	80 93 49 02 	sts	0x0249, r24
		//printf("%d\n", i);
	}
	sei(); 
 65e:	78 94       	sei
}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

00000686 <malloc>:
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	82 30       	cpi	r24, 0x02	; 2
 68c:	91 05       	cpc	r25, r1
 68e:	10 f4       	brcc	.+4      	; 0x694 <malloc+0xe>
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	e0 91 b1 02 	lds	r30, 0x02B1
 698:	f0 91 b2 02 	lds	r31, 0x02B2
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	a0 e0       	ldi	r26, 0x00	; 0
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	30 97       	sbiw	r30, 0x00	; 0
 6a6:	39 f1       	breq	.+78     	; 0x6f6 <malloc+0x70>
 6a8:	40 81       	ld	r20, Z
 6aa:	51 81       	ldd	r21, Z+1	; 0x01
 6ac:	48 17       	cp	r20, r24
 6ae:	59 07       	cpc	r21, r25
 6b0:	b8 f0       	brcs	.+46     	; 0x6e0 <malloc+0x5a>
 6b2:	48 17       	cp	r20, r24
 6b4:	59 07       	cpc	r21, r25
 6b6:	71 f4       	brne	.+28     	; 0x6d4 <malloc+0x4e>
 6b8:	82 81       	ldd	r24, Z+2	; 0x02
 6ba:	93 81       	ldd	r25, Z+3	; 0x03
 6bc:	10 97       	sbiw	r26, 0x00	; 0
 6be:	29 f0       	breq	.+10     	; 0x6ca <malloc+0x44>
 6c0:	13 96       	adiw	r26, 0x03	; 3
 6c2:	9c 93       	st	X, r25
 6c4:	8e 93       	st	-X, r24
 6c6:	12 97       	sbiw	r26, 0x02	; 2
 6c8:	2c c0       	rjmp	.+88     	; 0x722 <malloc+0x9c>
 6ca:	90 93 b2 02 	sts	0x02B2, r25
 6ce:	80 93 b1 02 	sts	0x02B1, r24
 6d2:	27 c0       	rjmp	.+78     	; 0x722 <malloc+0x9c>
 6d4:	21 15       	cp	r18, r1
 6d6:	31 05       	cpc	r19, r1
 6d8:	31 f0       	breq	.+12     	; 0x6e6 <malloc+0x60>
 6da:	42 17       	cp	r20, r18
 6dc:	53 07       	cpc	r21, r19
 6de:	18 f0       	brcs	.+6      	; 0x6e6 <malloc+0x60>
 6e0:	a9 01       	movw	r20, r18
 6e2:	db 01       	movw	r26, r22
 6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <malloc+0x62>
 6e6:	ef 01       	movw	r28, r30
 6e8:	9a 01       	movw	r18, r20
 6ea:	bd 01       	movw	r22, r26
 6ec:	df 01       	movw	r26, r30
 6ee:	02 80       	ldd	r0, Z+2	; 0x02
 6f0:	f3 81       	ldd	r31, Z+3	; 0x03
 6f2:	e0 2d       	mov	r30, r0
 6f4:	d7 cf       	rjmp	.-82     	; 0x6a4 <malloc+0x1e>
 6f6:	21 15       	cp	r18, r1
 6f8:	31 05       	cpc	r19, r1
 6fa:	f9 f0       	breq	.+62     	; 0x73a <malloc+0xb4>
 6fc:	28 1b       	sub	r18, r24
 6fe:	39 0b       	sbc	r19, r25
 700:	24 30       	cpi	r18, 0x04	; 4
 702:	31 05       	cpc	r19, r1
 704:	80 f4       	brcc	.+32     	; 0x726 <malloc+0xa0>
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	9b 81       	ldd	r25, Y+3	; 0x03
 70a:	61 15       	cp	r22, r1
 70c:	71 05       	cpc	r23, r1
 70e:	21 f0       	breq	.+8      	; 0x718 <malloc+0x92>
 710:	fb 01       	movw	r30, r22
 712:	93 83       	std	Z+3, r25	; 0x03
 714:	82 83       	std	Z+2, r24	; 0x02
 716:	04 c0       	rjmp	.+8      	; 0x720 <malloc+0x9a>
 718:	90 93 b2 02 	sts	0x02B2, r25
 71c:	80 93 b1 02 	sts	0x02B1, r24
 720:	fe 01       	movw	r30, r28
 722:	32 96       	adiw	r30, 0x02	; 2
 724:	44 c0       	rjmp	.+136    	; 0x7ae <malloc+0x128>
 726:	fe 01       	movw	r30, r28
 728:	e2 0f       	add	r30, r18
 72a:	f3 1f       	adc	r31, r19
 72c:	81 93       	st	Z+, r24
 72e:	91 93       	st	Z+, r25
 730:	22 50       	subi	r18, 0x02	; 2
 732:	31 09       	sbc	r19, r1
 734:	39 83       	std	Y+1, r19	; 0x01
 736:	28 83       	st	Y, r18
 738:	3a c0       	rjmp	.+116    	; 0x7ae <malloc+0x128>
 73a:	20 91 af 02 	lds	r18, 0x02AF
 73e:	30 91 b0 02 	lds	r19, 0x02B0
 742:	23 2b       	or	r18, r19
 744:	41 f4       	brne	.+16     	; 0x756 <malloc+0xd0>
 746:	20 91 02 01 	lds	r18, 0x0102
 74a:	30 91 03 01 	lds	r19, 0x0103
 74e:	30 93 b0 02 	sts	0x02B0, r19
 752:	20 93 af 02 	sts	0x02AF, r18
 756:	20 91 00 01 	lds	r18, 0x0100
 75a:	30 91 01 01 	lds	r19, 0x0101
 75e:	21 15       	cp	r18, r1
 760:	31 05       	cpc	r19, r1
 762:	41 f4       	brne	.+16     	; 0x774 <malloc+0xee>
 764:	2d b7       	in	r18, 0x3d	; 61
 766:	3e b7       	in	r19, 0x3e	; 62
 768:	40 91 04 01 	lds	r20, 0x0104
 76c:	50 91 05 01 	lds	r21, 0x0105
 770:	24 1b       	sub	r18, r20
 772:	35 0b       	sbc	r19, r21
 774:	e0 91 af 02 	lds	r30, 0x02AF
 778:	f0 91 b0 02 	lds	r31, 0x02B0
 77c:	e2 17       	cp	r30, r18
 77e:	f3 07       	cpc	r31, r19
 780:	a0 f4       	brcc	.+40     	; 0x7aa <malloc+0x124>
 782:	2e 1b       	sub	r18, r30
 784:	3f 0b       	sbc	r19, r31
 786:	28 17       	cp	r18, r24
 788:	39 07       	cpc	r19, r25
 78a:	78 f0       	brcs	.+30     	; 0x7aa <malloc+0x124>
 78c:	ac 01       	movw	r20, r24
 78e:	4e 5f       	subi	r20, 0xFE	; 254
 790:	5f 4f       	sbci	r21, 0xFF	; 255
 792:	24 17       	cp	r18, r20
 794:	35 07       	cpc	r19, r21
 796:	48 f0       	brcs	.+18     	; 0x7aa <malloc+0x124>
 798:	4e 0f       	add	r20, r30
 79a:	5f 1f       	adc	r21, r31
 79c:	50 93 b0 02 	sts	0x02B0, r21
 7a0:	40 93 af 02 	sts	0x02AF, r20
 7a4:	81 93       	st	Z+, r24
 7a6:	91 93       	st	Z+, r25
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <malloc+0x128>
 7aa:	e0 e0       	ldi	r30, 0x00	; 0
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	cf 01       	movw	r24, r30
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <free>:
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	00 97       	sbiw	r24, 0x00	; 0
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <free+0xa>
 7be:	87 c0       	rjmp	.+270    	; 0x8ce <free+0x118>
 7c0:	fc 01       	movw	r30, r24
 7c2:	32 97       	sbiw	r30, 0x02	; 2
 7c4:	13 82       	std	Z+3, r1	; 0x03
 7c6:	12 82       	std	Z+2, r1	; 0x02
 7c8:	c0 91 b1 02 	lds	r28, 0x02B1
 7cc:	d0 91 b2 02 	lds	r29, 0x02B2
 7d0:	20 97       	sbiw	r28, 0x00	; 0
 7d2:	81 f4       	brne	.+32     	; 0x7f4 <free+0x3e>
 7d4:	20 81       	ld	r18, Z
 7d6:	31 81       	ldd	r19, Z+1	; 0x01
 7d8:	28 0f       	add	r18, r24
 7da:	39 1f       	adc	r19, r25
 7dc:	80 91 af 02 	lds	r24, 0x02AF
 7e0:	90 91 b0 02 	lds	r25, 0x02B0
 7e4:	82 17       	cp	r24, r18
 7e6:	93 07       	cpc	r25, r19
 7e8:	79 f5       	brne	.+94     	; 0x848 <free+0x92>
 7ea:	f0 93 b0 02 	sts	0x02B0, r31
 7ee:	e0 93 af 02 	sts	0x02AF, r30
 7f2:	6d c0       	rjmp	.+218    	; 0x8ce <free+0x118>
 7f4:	de 01       	movw	r26, r28
 7f6:	20 e0       	ldi	r18, 0x00	; 0
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	ae 17       	cp	r26, r30
 7fc:	bf 07       	cpc	r27, r31
 7fe:	50 f4       	brcc	.+20     	; 0x814 <free+0x5e>
 800:	12 96       	adiw	r26, 0x02	; 2
 802:	4d 91       	ld	r20, X+
 804:	5c 91       	ld	r21, X
 806:	13 97       	sbiw	r26, 0x03	; 3
 808:	9d 01       	movw	r18, r26
 80a:	41 15       	cp	r20, r1
 80c:	51 05       	cpc	r21, r1
 80e:	09 f1       	breq	.+66     	; 0x852 <free+0x9c>
 810:	da 01       	movw	r26, r20
 812:	f3 cf       	rjmp	.-26     	; 0x7fa <free+0x44>
 814:	b3 83       	std	Z+3, r27	; 0x03
 816:	a2 83       	std	Z+2, r26	; 0x02
 818:	40 81       	ld	r20, Z
 81a:	51 81       	ldd	r21, Z+1	; 0x01
 81c:	84 0f       	add	r24, r20
 81e:	95 1f       	adc	r25, r21
 820:	8a 17       	cp	r24, r26
 822:	9b 07       	cpc	r25, r27
 824:	71 f4       	brne	.+28     	; 0x842 <free+0x8c>
 826:	8d 91       	ld	r24, X+
 828:	9c 91       	ld	r25, X
 82a:	11 97       	sbiw	r26, 0x01	; 1
 82c:	84 0f       	add	r24, r20
 82e:	95 1f       	adc	r25, r21
 830:	02 96       	adiw	r24, 0x02	; 2
 832:	91 83       	std	Z+1, r25	; 0x01
 834:	80 83       	st	Z, r24
 836:	12 96       	adiw	r26, 0x02	; 2
 838:	8d 91       	ld	r24, X+
 83a:	9c 91       	ld	r25, X
 83c:	13 97       	sbiw	r26, 0x03	; 3
 83e:	93 83       	std	Z+3, r25	; 0x03
 840:	82 83       	std	Z+2, r24	; 0x02
 842:	21 15       	cp	r18, r1
 844:	31 05       	cpc	r19, r1
 846:	29 f4       	brne	.+10     	; 0x852 <free+0x9c>
 848:	f0 93 b2 02 	sts	0x02B2, r31
 84c:	e0 93 b1 02 	sts	0x02B1, r30
 850:	3e c0       	rjmp	.+124    	; 0x8ce <free+0x118>
 852:	d9 01       	movw	r26, r18
 854:	13 96       	adiw	r26, 0x03	; 3
 856:	fc 93       	st	X, r31
 858:	ee 93       	st	-X, r30
 85a:	12 97       	sbiw	r26, 0x02	; 2
 85c:	4d 91       	ld	r20, X+
 85e:	5d 91       	ld	r21, X+
 860:	a4 0f       	add	r26, r20
 862:	b5 1f       	adc	r27, r21
 864:	ea 17       	cp	r30, r26
 866:	fb 07       	cpc	r31, r27
 868:	79 f4       	brne	.+30     	; 0x888 <free+0xd2>
 86a:	80 81       	ld	r24, Z
 86c:	91 81       	ldd	r25, Z+1	; 0x01
 86e:	84 0f       	add	r24, r20
 870:	95 1f       	adc	r25, r21
 872:	02 96       	adiw	r24, 0x02	; 2
 874:	d9 01       	movw	r26, r18
 876:	11 96       	adiw	r26, 0x01	; 1
 878:	9c 93       	st	X, r25
 87a:	8e 93       	st	-X, r24
 87c:	82 81       	ldd	r24, Z+2	; 0x02
 87e:	93 81       	ldd	r25, Z+3	; 0x03
 880:	13 96       	adiw	r26, 0x03	; 3
 882:	9c 93       	st	X, r25
 884:	8e 93       	st	-X, r24
 886:	12 97       	sbiw	r26, 0x02	; 2
 888:	e0 e0       	ldi	r30, 0x00	; 0
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	8a 81       	ldd	r24, Y+2	; 0x02
 88e:	9b 81       	ldd	r25, Y+3	; 0x03
 890:	00 97       	sbiw	r24, 0x00	; 0
 892:	19 f0       	breq	.+6      	; 0x89a <free+0xe4>
 894:	fe 01       	movw	r30, r28
 896:	ec 01       	movw	r28, r24
 898:	f9 cf       	rjmp	.-14     	; 0x88c <free+0xd6>
 89a:	ce 01       	movw	r24, r28
 89c:	02 96       	adiw	r24, 0x02	; 2
 89e:	28 81       	ld	r18, Y
 8a0:	39 81       	ldd	r19, Y+1	; 0x01
 8a2:	82 0f       	add	r24, r18
 8a4:	93 1f       	adc	r25, r19
 8a6:	20 91 af 02 	lds	r18, 0x02AF
 8aa:	30 91 b0 02 	lds	r19, 0x02B0
 8ae:	28 17       	cp	r18, r24
 8b0:	39 07       	cpc	r19, r25
 8b2:	69 f4       	brne	.+26     	; 0x8ce <free+0x118>
 8b4:	30 97       	sbiw	r30, 0x00	; 0
 8b6:	29 f4       	brne	.+10     	; 0x8c2 <free+0x10c>
 8b8:	10 92 b2 02 	sts	0x02B2, r1
 8bc:	10 92 b1 02 	sts	0x02B1, r1
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <free+0x110>
 8c2:	13 82       	std	Z+3, r1	; 0x03
 8c4:	12 82       	std	Z+2, r1	; 0x02
 8c6:	d0 93 b0 02 	sts	0x02B0, r29
 8ca:	c0 93 af 02 	sts	0x02AF, r28
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	08 95       	ret

000008d4 <strcat>:
 8d4:	fb 01       	movw	r30, r22
 8d6:	dc 01       	movw	r26, r24
 8d8:	0d 90       	ld	r0, X+
 8da:	00 20       	and	r0, r0
 8dc:	e9 f7       	brne	.-6      	; 0x8d8 <strcat+0x4>
 8de:	11 97       	sbiw	r26, 0x01	; 1
 8e0:	01 90       	ld	r0, Z+
 8e2:	0d 92       	st	X+, r0
 8e4:	00 20       	and	r0, r0
 8e6:	e1 f7       	brne	.-8      	; 0x8e0 <strcat+0xc>
 8e8:	08 95       	ret

000008ea <printf>:
 8ea:	a0 e0       	ldi	r26, 0x00	; 0
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	eb e7       	ldi	r30, 0x7B	; 123
 8f0:	f4 e0       	ldi	r31, 0x04	; 4
 8f2:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <__prologue_saves__+0x20>
 8f6:	fe 01       	movw	r30, r28
 8f8:	35 96       	adiw	r30, 0x05	; 5
 8fa:	61 91       	ld	r22, Z+
 8fc:	71 91       	ld	r23, Z+
 8fe:	af 01       	movw	r20, r30
 900:	80 91 b5 02 	lds	r24, 0x02B5
 904:	90 91 b6 02 	lds	r25, 0x02B6
 908:	0e 94 bd 04 	call	0x97a	; 0x97a <vfprintf>
 90c:	e2 e0       	ldi	r30, 0x02	; 2
 90e:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__epilogue_restores__+0x20>

00000912 <putchar>:
 912:	60 91 b5 02 	lds	r22, 0x02B5
 916:	70 91 b6 02 	lds	r23, 0x02B6
 91a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fputc>
 91e:	08 95       	ret

00000920 <puts>:
 920:	0f 93       	push	r16
 922:	1f 93       	push	r17
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	e0 91 b5 02 	lds	r30, 0x02B5
 92c:	f0 91 b6 02 	lds	r31, 0x02B6
 930:	23 81       	ldd	r18, Z+3	; 0x03
 932:	21 ff       	sbrs	r18, 1
 934:	1b c0       	rjmp	.+54     	; 0x96c <puts+0x4c>
 936:	ec 01       	movw	r28, r24
 938:	00 e0       	ldi	r16, 0x00	; 0
 93a:	10 e0       	ldi	r17, 0x00	; 0
 93c:	89 91       	ld	r24, Y+
 93e:	60 91 b5 02 	lds	r22, 0x02B5
 942:	70 91 b6 02 	lds	r23, 0x02B6
 946:	db 01       	movw	r26, r22
 948:	18 96       	adiw	r26, 0x08	; 8
 94a:	ed 91       	ld	r30, X+
 94c:	fc 91       	ld	r31, X
 94e:	19 97       	sbiw	r26, 0x09	; 9
 950:	88 23       	and	r24, r24
 952:	31 f0       	breq	.+12     	; 0x960 <puts+0x40>
 954:	09 95       	icall
 956:	89 2b       	or	r24, r25
 958:	89 f3       	breq	.-30     	; 0x93c <puts+0x1c>
 95a:	0f ef       	ldi	r16, 0xFF	; 255
 95c:	1f ef       	ldi	r17, 0xFF	; 255
 95e:	ee cf       	rjmp	.-36     	; 0x93c <puts+0x1c>
 960:	8a e0       	ldi	r24, 0x0A	; 10
 962:	09 95       	icall
 964:	89 2b       	or	r24, r25
 966:	11 f4       	brne	.+4      	; 0x96c <puts+0x4c>
 968:	c8 01       	movw	r24, r16
 96a:	02 c0       	rjmp	.+4      	; 0x970 <puts+0x50>
 96c:	8f ef       	ldi	r24, 0xFF	; 255
 96e:	9f ef       	ldi	r25, 0xFF	; 255
 970:	df 91       	pop	r29
 972:	cf 91       	pop	r28
 974:	1f 91       	pop	r17
 976:	0f 91       	pop	r16
 978:	08 95       	ret

0000097a <vfprintf>:
 97a:	ac e0       	ldi	r26, 0x0C	; 12
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	e3 ec       	ldi	r30, 0xC3	; 195
 980:	f4 e0       	ldi	r31, 0x04	; 4
 982:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__prologue_saves__>
 986:	7c 01       	movw	r14, r24
 988:	6b 01       	movw	r12, r22
 98a:	8a 01       	movw	r16, r20
 98c:	fc 01       	movw	r30, r24
 98e:	17 82       	std	Z+7, r1	; 0x07
 990:	16 82       	std	Z+6, r1	; 0x06
 992:	83 81       	ldd	r24, Z+3	; 0x03
 994:	81 ff       	sbrs	r24, 1
 996:	bd c1       	rjmp	.+890    	; 0xd12 <vfprintf+0x398>
 998:	ce 01       	movw	r24, r28
 99a:	01 96       	adiw	r24, 0x01	; 1
 99c:	4c 01       	movw	r8, r24
 99e:	f7 01       	movw	r30, r14
 9a0:	93 81       	ldd	r25, Z+3	; 0x03
 9a2:	f6 01       	movw	r30, r12
 9a4:	93 fd       	sbrc	r25, 3
 9a6:	85 91       	lpm	r24, Z+
 9a8:	93 ff       	sbrs	r25, 3
 9aa:	81 91       	ld	r24, Z+
 9ac:	6f 01       	movw	r12, r30
 9ae:	88 23       	and	r24, r24
 9b0:	09 f4       	brne	.+2      	; 0x9b4 <vfprintf+0x3a>
 9b2:	ab c1       	rjmp	.+854    	; 0xd0a <vfprintf+0x390>
 9b4:	85 32       	cpi	r24, 0x25	; 37
 9b6:	39 f4       	brne	.+14     	; 0x9c6 <vfprintf+0x4c>
 9b8:	93 fd       	sbrc	r25, 3
 9ba:	85 91       	lpm	r24, Z+
 9bc:	93 ff       	sbrs	r25, 3
 9be:	81 91       	ld	r24, Z+
 9c0:	6f 01       	movw	r12, r30
 9c2:	85 32       	cpi	r24, 0x25	; 37
 9c4:	29 f4       	brne	.+10     	; 0x9d0 <vfprintf+0x56>
 9c6:	b7 01       	movw	r22, r14
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fputc>
 9ce:	e7 cf       	rjmp	.-50     	; 0x99e <vfprintf+0x24>
 9d0:	51 2c       	mov	r5, r1
 9d2:	31 2c       	mov	r3, r1
 9d4:	20 e0       	ldi	r18, 0x00	; 0
 9d6:	20 32       	cpi	r18, 0x20	; 32
 9d8:	a0 f4       	brcc	.+40     	; 0xa02 <vfprintf+0x88>
 9da:	8b 32       	cpi	r24, 0x2B	; 43
 9dc:	69 f0       	breq	.+26     	; 0x9f8 <vfprintf+0x7e>
 9de:	30 f4       	brcc	.+12     	; 0x9ec <vfprintf+0x72>
 9e0:	80 32       	cpi	r24, 0x20	; 32
 9e2:	59 f0       	breq	.+22     	; 0x9fa <vfprintf+0x80>
 9e4:	83 32       	cpi	r24, 0x23	; 35
 9e6:	69 f4       	brne	.+26     	; 0xa02 <vfprintf+0x88>
 9e8:	20 61       	ori	r18, 0x10	; 16
 9ea:	2c c0       	rjmp	.+88     	; 0xa44 <vfprintf+0xca>
 9ec:	8d 32       	cpi	r24, 0x2D	; 45
 9ee:	39 f0       	breq	.+14     	; 0x9fe <vfprintf+0x84>
 9f0:	80 33       	cpi	r24, 0x30	; 48
 9f2:	39 f4       	brne	.+14     	; 0xa02 <vfprintf+0x88>
 9f4:	21 60       	ori	r18, 0x01	; 1
 9f6:	26 c0       	rjmp	.+76     	; 0xa44 <vfprintf+0xca>
 9f8:	22 60       	ori	r18, 0x02	; 2
 9fa:	24 60       	ori	r18, 0x04	; 4
 9fc:	23 c0       	rjmp	.+70     	; 0xa44 <vfprintf+0xca>
 9fe:	28 60       	ori	r18, 0x08	; 8
 a00:	21 c0       	rjmp	.+66     	; 0xa44 <vfprintf+0xca>
 a02:	27 fd       	sbrc	r18, 7
 a04:	27 c0       	rjmp	.+78     	; 0xa54 <vfprintf+0xda>
 a06:	30 ed       	ldi	r19, 0xD0	; 208
 a08:	38 0f       	add	r19, r24
 a0a:	3a 30       	cpi	r19, 0x0A	; 10
 a0c:	78 f4       	brcc	.+30     	; 0xa2c <vfprintf+0xb2>
 a0e:	26 ff       	sbrs	r18, 6
 a10:	06 c0       	rjmp	.+12     	; 0xa1e <vfprintf+0xa4>
 a12:	fa e0       	ldi	r31, 0x0A	; 10
 a14:	5f 9e       	mul	r5, r31
 a16:	30 0d       	add	r19, r0
 a18:	11 24       	eor	r1, r1
 a1a:	53 2e       	mov	r5, r19
 a1c:	13 c0       	rjmp	.+38     	; 0xa44 <vfprintf+0xca>
 a1e:	8a e0       	ldi	r24, 0x0A	; 10
 a20:	38 9e       	mul	r3, r24
 a22:	30 0d       	add	r19, r0
 a24:	11 24       	eor	r1, r1
 a26:	33 2e       	mov	r3, r19
 a28:	20 62       	ori	r18, 0x20	; 32
 a2a:	0c c0       	rjmp	.+24     	; 0xa44 <vfprintf+0xca>
 a2c:	8e 32       	cpi	r24, 0x2E	; 46
 a2e:	21 f4       	brne	.+8      	; 0xa38 <vfprintf+0xbe>
 a30:	26 fd       	sbrc	r18, 6
 a32:	6b c1       	rjmp	.+726    	; 0xd0a <vfprintf+0x390>
 a34:	20 64       	ori	r18, 0x40	; 64
 a36:	06 c0       	rjmp	.+12     	; 0xa44 <vfprintf+0xca>
 a38:	8c 36       	cpi	r24, 0x6C	; 108
 a3a:	11 f4       	brne	.+4      	; 0xa40 <vfprintf+0xc6>
 a3c:	20 68       	ori	r18, 0x80	; 128
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <vfprintf+0xca>
 a40:	88 36       	cpi	r24, 0x68	; 104
 a42:	41 f4       	brne	.+16     	; 0xa54 <vfprintf+0xda>
 a44:	f6 01       	movw	r30, r12
 a46:	93 fd       	sbrc	r25, 3
 a48:	85 91       	lpm	r24, Z+
 a4a:	93 ff       	sbrs	r25, 3
 a4c:	81 91       	ld	r24, Z+
 a4e:	6f 01       	movw	r12, r30
 a50:	81 11       	cpse	r24, r1
 a52:	c1 cf       	rjmp	.-126    	; 0x9d6 <vfprintf+0x5c>
 a54:	98 2f       	mov	r25, r24
 a56:	9f 7d       	andi	r25, 0xDF	; 223
 a58:	95 54       	subi	r25, 0x45	; 69
 a5a:	93 30       	cpi	r25, 0x03	; 3
 a5c:	28 f4       	brcc	.+10     	; 0xa68 <vfprintf+0xee>
 a5e:	0c 5f       	subi	r16, 0xFC	; 252
 a60:	1f 4f       	sbci	r17, 0xFF	; 255
 a62:	ff e3       	ldi	r31, 0x3F	; 63
 a64:	f9 83       	std	Y+1, r31	; 0x01
 a66:	0d c0       	rjmp	.+26     	; 0xa82 <vfprintf+0x108>
 a68:	83 36       	cpi	r24, 0x63	; 99
 a6a:	31 f0       	breq	.+12     	; 0xa78 <vfprintf+0xfe>
 a6c:	83 37       	cpi	r24, 0x73	; 115
 a6e:	71 f0       	breq	.+28     	; 0xa8c <vfprintf+0x112>
 a70:	83 35       	cpi	r24, 0x53	; 83
 a72:	09 f0       	breq	.+2      	; 0xa76 <vfprintf+0xfc>
 a74:	5b c0       	rjmp	.+182    	; 0xb2c <vfprintf+0x1b2>
 a76:	22 c0       	rjmp	.+68     	; 0xabc <vfprintf+0x142>
 a78:	f8 01       	movw	r30, r16
 a7a:	80 81       	ld	r24, Z
 a7c:	89 83       	std	Y+1, r24	; 0x01
 a7e:	0e 5f       	subi	r16, 0xFE	; 254
 a80:	1f 4f       	sbci	r17, 0xFF	; 255
 a82:	44 24       	eor	r4, r4
 a84:	43 94       	inc	r4
 a86:	51 2c       	mov	r5, r1
 a88:	54 01       	movw	r10, r8
 a8a:	15 c0       	rjmp	.+42     	; 0xab6 <vfprintf+0x13c>
 a8c:	38 01       	movw	r6, r16
 a8e:	f2 e0       	ldi	r31, 0x02	; 2
 a90:	6f 0e       	add	r6, r31
 a92:	71 1c       	adc	r7, r1
 a94:	f8 01       	movw	r30, r16
 a96:	a0 80       	ld	r10, Z
 a98:	b1 80       	ldd	r11, Z+1	; 0x01
 a9a:	26 ff       	sbrs	r18, 6
 a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <vfprintf+0x12a>
 a9e:	65 2d       	mov	r22, r5
 aa0:	70 e0       	ldi	r23, 0x00	; 0
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <vfprintf+0x12e>
 aa4:	6f ef       	ldi	r22, 0xFF	; 255
 aa6:	7f ef       	ldi	r23, 0xFF	; 255
 aa8:	c5 01       	movw	r24, r10
 aaa:	2c 87       	std	Y+12, r18	; 0x0c
 aac:	0e 94 9a 06 	call	0xd34	; 0xd34 <strnlen>
 ab0:	2c 01       	movw	r4, r24
 ab2:	83 01       	movw	r16, r6
 ab4:	2c 85       	ldd	r18, Y+12	; 0x0c
 ab6:	2f 77       	andi	r18, 0x7F	; 127
 ab8:	22 2e       	mov	r2, r18
 aba:	17 c0       	rjmp	.+46     	; 0xaea <vfprintf+0x170>
 abc:	38 01       	movw	r6, r16
 abe:	f2 e0       	ldi	r31, 0x02	; 2
 ac0:	6f 0e       	add	r6, r31
 ac2:	71 1c       	adc	r7, r1
 ac4:	f8 01       	movw	r30, r16
 ac6:	a0 80       	ld	r10, Z
 ac8:	b1 80       	ldd	r11, Z+1	; 0x01
 aca:	26 ff       	sbrs	r18, 6
 acc:	03 c0       	rjmp	.+6      	; 0xad4 <vfprintf+0x15a>
 ace:	65 2d       	mov	r22, r5
 ad0:	70 e0       	ldi	r23, 0x00	; 0
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <vfprintf+0x15e>
 ad4:	6f ef       	ldi	r22, 0xFF	; 255
 ad6:	7f ef       	ldi	r23, 0xFF	; 255
 ad8:	c5 01       	movw	r24, r10
 ada:	2c 87       	std	Y+12, r18	; 0x0c
 adc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <strnlen_P>
 ae0:	2c 01       	movw	r4, r24
 ae2:	2c 85       	ldd	r18, Y+12	; 0x0c
 ae4:	20 68       	ori	r18, 0x80	; 128
 ae6:	22 2e       	mov	r2, r18
 ae8:	83 01       	movw	r16, r6
 aea:	23 fc       	sbrc	r2, 3
 aec:	1b c0       	rjmp	.+54     	; 0xb24 <vfprintf+0x1aa>
 aee:	83 2d       	mov	r24, r3
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	48 16       	cp	r4, r24
 af4:	59 06       	cpc	r5, r25
 af6:	b0 f4       	brcc	.+44     	; 0xb24 <vfprintf+0x1aa>
 af8:	b7 01       	movw	r22, r14
 afa:	80 e2       	ldi	r24, 0x20	; 32
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fputc>
 b02:	3a 94       	dec	r3
 b04:	f4 cf       	rjmp	.-24     	; 0xaee <vfprintf+0x174>
 b06:	f5 01       	movw	r30, r10
 b08:	27 fc       	sbrc	r2, 7
 b0a:	85 91       	lpm	r24, Z+
 b0c:	27 fe       	sbrs	r2, 7
 b0e:	81 91       	ld	r24, Z+
 b10:	5f 01       	movw	r10, r30
 b12:	b7 01       	movw	r22, r14
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fputc>
 b1a:	31 10       	cpse	r3, r1
 b1c:	3a 94       	dec	r3
 b1e:	f1 e0       	ldi	r31, 0x01	; 1
 b20:	4f 1a       	sub	r4, r31
 b22:	51 08       	sbc	r5, r1
 b24:	41 14       	cp	r4, r1
 b26:	51 04       	cpc	r5, r1
 b28:	71 f7       	brne	.-36     	; 0xb06 <vfprintf+0x18c>
 b2a:	e5 c0       	rjmp	.+458    	; 0xcf6 <vfprintf+0x37c>
 b2c:	84 36       	cpi	r24, 0x64	; 100
 b2e:	11 f0       	breq	.+4      	; 0xb34 <vfprintf+0x1ba>
 b30:	89 36       	cpi	r24, 0x69	; 105
 b32:	39 f5       	brne	.+78     	; 0xb82 <vfprintf+0x208>
 b34:	f8 01       	movw	r30, r16
 b36:	27 ff       	sbrs	r18, 7
 b38:	07 c0       	rjmp	.+14     	; 0xb48 <vfprintf+0x1ce>
 b3a:	60 81       	ld	r22, Z
 b3c:	71 81       	ldd	r23, Z+1	; 0x01
 b3e:	82 81       	ldd	r24, Z+2	; 0x02
 b40:	93 81       	ldd	r25, Z+3	; 0x03
 b42:	0c 5f       	subi	r16, 0xFC	; 252
 b44:	1f 4f       	sbci	r17, 0xFF	; 255
 b46:	08 c0       	rjmp	.+16     	; 0xb58 <vfprintf+0x1de>
 b48:	60 81       	ld	r22, Z
 b4a:	71 81       	ldd	r23, Z+1	; 0x01
 b4c:	88 27       	eor	r24, r24
 b4e:	77 fd       	sbrc	r23, 7
 b50:	80 95       	com	r24
 b52:	98 2f       	mov	r25, r24
 b54:	0e 5f       	subi	r16, 0xFE	; 254
 b56:	1f 4f       	sbci	r17, 0xFF	; 255
 b58:	2f 76       	andi	r18, 0x6F	; 111
 b5a:	b2 2e       	mov	r11, r18
 b5c:	97 ff       	sbrs	r25, 7
 b5e:	09 c0       	rjmp	.+18     	; 0xb72 <vfprintf+0x1f8>
 b60:	90 95       	com	r25
 b62:	80 95       	com	r24
 b64:	70 95       	com	r23
 b66:	61 95       	neg	r22
 b68:	7f 4f       	sbci	r23, 0xFF	; 255
 b6a:	8f 4f       	sbci	r24, 0xFF	; 255
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	20 68       	ori	r18, 0x80	; 128
 b70:	b2 2e       	mov	r11, r18
 b72:	2a e0       	ldi	r18, 0x0A	; 10
 b74:	30 e0       	ldi	r19, 0x00	; 0
 b76:	a4 01       	movw	r20, r8
 b78:	0e 94 d7 06 	call	0xdae	; 0xdae <__ultoa_invert>
 b7c:	a8 2e       	mov	r10, r24
 b7e:	a8 18       	sub	r10, r8
 b80:	44 c0       	rjmp	.+136    	; 0xc0a <vfprintf+0x290>
 b82:	85 37       	cpi	r24, 0x75	; 117
 b84:	29 f4       	brne	.+10     	; 0xb90 <vfprintf+0x216>
 b86:	2f 7e       	andi	r18, 0xEF	; 239
 b88:	b2 2e       	mov	r11, r18
 b8a:	2a e0       	ldi	r18, 0x0A	; 10
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	25 c0       	rjmp	.+74     	; 0xbda <vfprintf+0x260>
 b90:	f2 2f       	mov	r31, r18
 b92:	f9 7f       	andi	r31, 0xF9	; 249
 b94:	bf 2e       	mov	r11, r31
 b96:	8f 36       	cpi	r24, 0x6F	; 111
 b98:	c1 f0       	breq	.+48     	; 0xbca <vfprintf+0x250>
 b9a:	18 f4       	brcc	.+6      	; 0xba2 <vfprintf+0x228>
 b9c:	88 35       	cpi	r24, 0x58	; 88
 b9e:	79 f0       	breq	.+30     	; 0xbbe <vfprintf+0x244>
 ba0:	b4 c0       	rjmp	.+360    	; 0xd0a <vfprintf+0x390>
 ba2:	80 37       	cpi	r24, 0x70	; 112
 ba4:	19 f0       	breq	.+6      	; 0xbac <vfprintf+0x232>
 ba6:	88 37       	cpi	r24, 0x78	; 120
 ba8:	21 f0       	breq	.+8      	; 0xbb2 <vfprintf+0x238>
 baa:	af c0       	rjmp	.+350    	; 0xd0a <vfprintf+0x390>
 bac:	2f 2f       	mov	r18, r31
 bae:	20 61       	ori	r18, 0x10	; 16
 bb0:	b2 2e       	mov	r11, r18
 bb2:	b4 fe       	sbrs	r11, 4
 bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <vfprintf+0x256>
 bb6:	8b 2d       	mov	r24, r11
 bb8:	84 60       	ori	r24, 0x04	; 4
 bba:	b8 2e       	mov	r11, r24
 bbc:	09 c0       	rjmp	.+18     	; 0xbd0 <vfprintf+0x256>
 bbe:	24 ff       	sbrs	r18, 4
 bc0:	0a c0       	rjmp	.+20     	; 0xbd6 <vfprintf+0x25c>
 bc2:	9f 2f       	mov	r25, r31
 bc4:	96 60       	ori	r25, 0x06	; 6
 bc6:	b9 2e       	mov	r11, r25
 bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <vfprintf+0x25c>
 bca:	28 e0       	ldi	r18, 0x08	; 8
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	05 c0       	rjmp	.+10     	; 0xbda <vfprintf+0x260>
 bd0:	20 e1       	ldi	r18, 0x10	; 16
 bd2:	30 e0       	ldi	r19, 0x00	; 0
 bd4:	02 c0       	rjmp	.+4      	; 0xbda <vfprintf+0x260>
 bd6:	20 e1       	ldi	r18, 0x10	; 16
 bd8:	32 e0       	ldi	r19, 0x02	; 2
 bda:	f8 01       	movw	r30, r16
 bdc:	b7 fe       	sbrs	r11, 7
 bde:	07 c0       	rjmp	.+14     	; 0xbee <vfprintf+0x274>
 be0:	60 81       	ld	r22, Z
 be2:	71 81       	ldd	r23, Z+1	; 0x01
 be4:	82 81       	ldd	r24, Z+2	; 0x02
 be6:	93 81       	ldd	r25, Z+3	; 0x03
 be8:	0c 5f       	subi	r16, 0xFC	; 252
 bea:	1f 4f       	sbci	r17, 0xFF	; 255
 bec:	06 c0       	rjmp	.+12     	; 0xbfa <vfprintf+0x280>
 bee:	60 81       	ld	r22, Z
 bf0:	71 81       	ldd	r23, Z+1	; 0x01
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	0e 5f       	subi	r16, 0xFE	; 254
 bf8:	1f 4f       	sbci	r17, 0xFF	; 255
 bfa:	a4 01       	movw	r20, r8
 bfc:	0e 94 d7 06 	call	0xdae	; 0xdae <__ultoa_invert>
 c00:	a8 2e       	mov	r10, r24
 c02:	a8 18       	sub	r10, r8
 c04:	fb 2d       	mov	r31, r11
 c06:	ff 77       	andi	r31, 0x7F	; 127
 c08:	bf 2e       	mov	r11, r31
 c0a:	b6 fe       	sbrs	r11, 6
 c0c:	0b c0       	rjmp	.+22     	; 0xc24 <vfprintf+0x2aa>
 c0e:	2b 2d       	mov	r18, r11
 c10:	2e 7f       	andi	r18, 0xFE	; 254
 c12:	a5 14       	cp	r10, r5
 c14:	50 f4       	brcc	.+20     	; 0xc2a <vfprintf+0x2b0>
 c16:	b4 fe       	sbrs	r11, 4
 c18:	0a c0       	rjmp	.+20     	; 0xc2e <vfprintf+0x2b4>
 c1a:	b2 fc       	sbrc	r11, 2
 c1c:	08 c0       	rjmp	.+16     	; 0xc2e <vfprintf+0x2b4>
 c1e:	2b 2d       	mov	r18, r11
 c20:	2e 7e       	andi	r18, 0xEE	; 238
 c22:	05 c0       	rjmp	.+10     	; 0xc2e <vfprintf+0x2b4>
 c24:	7a 2c       	mov	r7, r10
 c26:	2b 2d       	mov	r18, r11
 c28:	03 c0       	rjmp	.+6      	; 0xc30 <vfprintf+0x2b6>
 c2a:	7a 2c       	mov	r7, r10
 c2c:	01 c0       	rjmp	.+2      	; 0xc30 <vfprintf+0x2b6>
 c2e:	75 2c       	mov	r7, r5
 c30:	24 ff       	sbrs	r18, 4
 c32:	0d c0       	rjmp	.+26     	; 0xc4e <vfprintf+0x2d4>
 c34:	fe 01       	movw	r30, r28
 c36:	ea 0d       	add	r30, r10
 c38:	f1 1d       	adc	r31, r1
 c3a:	80 81       	ld	r24, Z
 c3c:	80 33       	cpi	r24, 0x30	; 48
 c3e:	11 f4       	brne	.+4      	; 0xc44 <vfprintf+0x2ca>
 c40:	29 7e       	andi	r18, 0xE9	; 233
 c42:	09 c0       	rjmp	.+18     	; 0xc56 <vfprintf+0x2dc>
 c44:	22 ff       	sbrs	r18, 2
 c46:	06 c0       	rjmp	.+12     	; 0xc54 <vfprintf+0x2da>
 c48:	73 94       	inc	r7
 c4a:	73 94       	inc	r7
 c4c:	04 c0       	rjmp	.+8      	; 0xc56 <vfprintf+0x2dc>
 c4e:	82 2f       	mov	r24, r18
 c50:	86 78       	andi	r24, 0x86	; 134
 c52:	09 f0       	breq	.+2      	; 0xc56 <vfprintf+0x2dc>
 c54:	73 94       	inc	r7
 c56:	23 fd       	sbrc	r18, 3
 c58:	13 c0       	rjmp	.+38     	; 0xc80 <vfprintf+0x306>
 c5a:	20 ff       	sbrs	r18, 0
 c5c:	06 c0       	rjmp	.+12     	; 0xc6a <vfprintf+0x2f0>
 c5e:	5a 2c       	mov	r5, r10
 c60:	73 14       	cp	r7, r3
 c62:	18 f4       	brcc	.+6      	; 0xc6a <vfprintf+0x2f0>
 c64:	53 0c       	add	r5, r3
 c66:	57 18       	sub	r5, r7
 c68:	73 2c       	mov	r7, r3
 c6a:	73 14       	cp	r7, r3
 c6c:	68 f4       	brcc	.+26     	; 0xc88 <vfprintf+0x30e>
 c6e:	b7 01       	movw	r22, r14
 c70:	80 e2       	ldi	r24, 0x20	; 32
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	2c 87       	std	Y+12, r18	; 0x0c
 c76:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fputc>
 c7a:	73 94       	inc	r7
 c7c:	2c 85       	ldd	r18, Y+12	; 0x0c
 c7e:	f5 cf       	rjmp	.-22     	; 0xc6a <vfprintf+0x2f0>
 c80:	73 14       	cp	r7, r3
 c82:	10 f4       	brcc	.+4      	; 0xc88 <vfprintf+0x30e>
 c84:	37 18       	sub	r3, r7
 c86:	01 c0       	rjmp	.+2      	; 0xc8a <vfprintf+0x310>
 c88:	31 2c       	mov	r3, r1
 c8a:	24 ff       	sbrs	r18, 4
 c8c:	12 c0       	rjmp	.+36     	; 0xcb2 <vfprintf+0x338>
 c8e:	b7 01       	movw	r22, r14
 c90:	80 e3       	ldi	r24, 0x30	; 48
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	2c 87       	std	Y+12, r18	; 0x0c
 c96:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fputc>
 c9a:	2c 85       	ldd	r18, Y+12	; 0x0c
 c9c:	22 ff       	sbrs	r18, 2
 c9e:	17 c0       	rjmp	.+46     	; 0xcce <vfprintf+0x354>
 ca0:	21 ff       	sbrs	r18, 1
 ca2:	03 c0       	rjmp	.+6      	; 0xcaa <vfprintf+0x330>
 ca4:	88 e5       	ldi	r24, 0x58	; 88
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x334>
 caa:	88 e7       	ldi	r24, 0x78	; 120
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	b7 01       	movw	r22, r14
 cb0:	0c c0       	rjmp	.+24     	; 0xcca <vfprintf+0x350>
 cb2:	82 2f       	mov	r24, r18
 cb4:	86 78       	andi	r24, 0x86	; 134
 cb6:	59 f0       	breq	.+22     	; 0xcce <vfprintf+0x354>
 cb8:	21 fd       	sbrc	r18, 1
 cba:	02 c0       	rjmp	.+4      	; 0xcc0 <vfprintf+0x346>
 cbc:	80 e2       	ldi	r24, 0x20	; 32
 cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <vfprintf+0x348>
 cc0:	8b e2       	ldi	r24, 0x2B	; 43
 cc2:	27 fd       	sbrc	r18, 7
 cc4:	8d e2       	ldi	r24, 0x2D	; 45
 cc6:	b7 01       	movw	r22, r14
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fputc>
 cce:	a5 14       	cp	r10, r5
 cd0:	38 f4       	brcc	.+14     	; 0xce0 <vfprintf+0x366>
 cd2:	b7 01       	movw	r22, r14
 cd4:	80 e3       	ldi	r24, 0x30	; 48
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fputc>
 cdc:	5a 94       	dec	r5
 cde:	f7 cf       	rjmp	.-18     	; 0xcce <vfprintf+0x354>
 ce0:	aa 94       	dec	r10
 ce2:	f4 01       	movw	r30, r8
 ce4:	ea 0d       	add	r30, r10
 ce6:	f1 1d       	adc	r31, r1
 ce8:	80 81       	ld	r24, Z
 cea:	b7 01       	movw	r22, r14
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fputc>
 cf2:	a1 10       	cpse	r10, r1
 cf4:	f5 cf       	rjmp	.-22     	; 0xce0 <vfprintf+0x366>
 cf6:	33 20       	and	r3, r3
 cf8:	09 f4       	brne	.+2      	; 0xcfc <vfprintf+0x382>
 cfa:	51 ce       	rjmp	.-862    	; 0x99e <vfprintf+0x24>
 cfc:	b7 01       	movw	r22, r14
 cfe:	80 e2       	ldi	r24, 0x20	; 32
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fputc>
 d06:	3a 94       	dec	r3
 d08:	f6 cf       	rjmp	.-20     	; 0xcf6 <vfprintf+0x37c>
 d0a:	f7 01       	movw	r30, r14
 d0c:	86 81       	ldd	r24, Z+6	; 0x06
 d0e:	97 81       	ldd	r25, Z+7	; 0x07
 d10:	02 c0       	rjmp	.+4      	; 0xd16 <vfprintf+0x39c>
 d12:	8f ef       	ldi	r24, 0xFF	; 255
 d14:	9f ef       	ldi	r25, 0xFF	; 255
 d16:	2c 96       	adiw	r28, 0x0c	; 12
 d18:	e2 e1       	ldi	r30, 0x12	; 18
 d1a:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__epilogue_restores__>

00000d1e <strnlen_P>:
 d1e:	fc 01       	movw	r30, r24
 d20:	05 90       	lpm	r0, Z+
 d22:	61 50       	subi	r22, 0x01	; 1
 d24:	70 40       	sbci	r23, 0x00	; 0
 d26:	01 10       	cpse	r0, r1
 d28:	d8 f7       	brcc	.-10     	; 0xd20 <strnlen_P+0x2>
 d2a:	80 95       	com	r24
 d2c:	90 95       	com	r25
 d2e:	8e 0f       	add	r24, r30
 d30:	9f 1f       	adc	r25, r31
 d32:	08 95       	ret

00000d34 <strnlen>:
 d34:	fc 01       	movw	r30, r24
 d36:	61 50       	subi	r22, 0x01	; 1
 d38:	70 40       	sbci	r23, 0x00	; 0
 d3a:	01 90       	ld	r0, Z+
 d3c:	01 10       	cpse	r0, r1
 d3e:	d8 f7       	brcc	.-10     	; 0xd36 <strnlen+0x2>
 d40:	80 95       	com	r24
 d42:	90 95       	com	r25
 d44:	8e 0f       	add	r24, r30
 d46:	9f 1f       	adc	r25, r31
 d48:	08 95       	ret

00000d4a <fputc>:
 d4a:	0f 93       	push	r16
 d4c:	1f 93       	push	r17
 d4e:	cf 93       	push	r28
 d50:	df 93       	push	r29
 d52:	18 2f       	mov	r17, r24
 d54:	09 2f       	mov	r16, r25
 d56:	eb 01       	movw	r28, r22
 d58:	8b 81       	ldd	r24, Y+3	; 0x03
 d5a:	81 fd       	sbrc	r24, 1
 d5c:	03 c0       	rjmp	.+6      	; 0xd64 <fputc+0x1a>
 d5e:	8f ef       	ldi	r24, 0xFF	; 255
 d60:	9f ef       	ldi	r25, 0xFF	; 255
 d62:	20 c0       	rjmp	.+64     	; 0xda4 <fputc+0x5a>
 d64:	82 ff       	sbrs	r24, 2
 d66:	10 c0       	rjmp	.+32     	; 0xd88 <fputc+0x3e>
 d68:	4e 81       	ldd	r20, Y+6	; 0x06
 d6a:	5f 81       	ldd	r21, Y+7	; 0x07
 d6c:	2c 81       	ldd	r18, Y+4	; 0x04
 d6e:	3d 81       	ldd	r19, Y+5	; 0x05
 d70:	42 17       	cp	r20, r18
 d72:	53 07       	cpc	r21, r19
 d74:	7c f4       	brge	.+30     	; 0xd94 <fputc+0x4a>
 d76:	e8 81       	ld	r30, Y
 d78:	f9 81       	ldd	r31, Y+1	; 0x01
 d7a:	9f 01       	movw	r18, r30
 d7c:	2f 5f       	subi	r18, 0xFF	; 255
 d7e:	3f 4f       	sbci	r19, 0xFF	; 255
 d80:	39 83       	std	Y+1, r19	; 0x01
 d82:	28 83       	st	Y, r18
 d84:	10 83       	st	Z, r17
 d86:	06 c0       	rjmp	.+12     	; 0xd94 <fputc+0x4a>
 d88:	e8 85       	ldd	r30, Y+8	; 0x08
 d8a:	f9 85       	ldd	r31, Y+9	; 0x09
 d8c:	81 2f       	mov	r24, r17
 d8e:	09 95       	icall
 d90:	89 2b       	or	r24, r25
 d92:	29 f7       	brne	.-54     	; 0xd5e <fputc+0x14>
 d94:	2e 81       	ldd	r18, Y+6	; 0x06
 d96:	3f 81       	ldd	r19, Y+7	; 0x07
 d98:	2f 5f       	subi	r18, 0xFF	; 255
 d9a:	3f 4f       	sbci	r19, 0xFF	; 255
 d9c:	3f 83       	std	Y+7, r19	; 0x07
 d9e:	2e 83       	std	Y+6, r18	; 0x06
 da0:	81 2f       	mov	r24, r17
 da2:	90 2f       	mov	r25, r16
 da4:	df 91       	pop	r29
 da6:	cf 91       	pop	r28
 da8:	1f 91       	pop	r17
 daa:	0f 91       	pop	r16
 dac:	08 95       	ret

00000dae <__ultoa_invert>:
 dae:	fa 01       	movw	r30, r20
 db0:	aa 27       	eor	r26, r26
 db2:	28 30       	cpi	r18, 0x08	; 8
 db4:	51 f1       	breq	.+84     	; 0xe0a <__ultoa_invert+0x5c>
 db6:	20 31       	cpi	r18, 0x10	; 16
 db8:	81 f1       	breq	.+96     	; 0xe1a <__ultoa_invert+0x6c>
 dba:	e8 94       	clt
 dbc:	6f 93       	push	r22
 dbe:	6e 7f       	andi	r22, 0xFE	; 254
 dc0:	6e 5f       	subi	r22, 0xFE	; 254
 dc2:	7f 4f       	sbci	r23, 0xFF	; 255
 dc4:	8f 4f       	sbci	r24, 0xFF	; 255
 dc6:	9f 4f       	sbci	r25, 0xFF	; 255
 dc8:	af 4f       	sbci	r26, 0xFF	; 255
 dca:	b1 e0       	ldi	r27, 0x01	; 1
 dcc:	3e d0       	rcall	.+124    	; 0xe4a <__ultoa_invert+0x9c>
 dce:	b4 e0       	ldi	r27, 0x04	; 4
 dd0:	3c d0       	rcall	.+120    	; 0xe4a <__ultoa_invert+0x9c>
 dd2:	67 0f       	add	r22, r23
 dd4:	78 1f       	adc	r23, r24
 dd6:	89 1f       	adc	r24, r25
 dd8:	9a 1f       	adc	r25, r26
 dda:	a1 1d       	adc	r26, r1
 ddc:	68 0f       	add	r22, r24
 dde:	79 1f       	adc	r23, r25
 de0:	8a 1f       	adc	r24, r26
 de2:	91 1d       	adc	r25, r1
 de4:	a1 1d       	adc	r26, r1
 de6:	6a 0f       	add	r22, r26
 de8:	71 1d       	adc	r23, r1
 dea:	81 1d       	adc	r24, r1
 dec:	91 1d       	adc	r25, r1
 dee:	a1 1d       	adc	r26, r1
 df0:	20 d0       	rcall	.+64     	; 0xe32 <__ultoa_invert+0x84>
 df2:	09 f4       	brne	.+2      	; 0xdf6 <__ultoa_invert+0x48>
 df4:	68 94       	set
 df6:	3f 91       	pop	r19
 df8:	2a e0       	ldi	r18, 0x0A	; 10
 dfa:	26 9f       	mul	r18, r22
 dfc:	11 24       	eor	r1, r1
 dfe:	30 19       	sub	r19, r0
 e00:	30 5d       	subi	r19, 0xD0	; 208
 e02:	31 93       	st	Z+, r19
 e04:	de f6       	brtc	.-74     	; 0xdbc <__ultoa_invert+0xe>
 e06:	cf 01       	movw	r24, r30
 e08:	08 95       	ret
 e0a:	46 2f       	mov	r20, r22
 e0c:	47 70       	andi	r20, 0x07	; 7
 e0e:	40 5d       	subi	r20, 0xD0	; 208
 e10:	41 93       	st	Z+, r20
 e12:	b3 e0       	ldi	r27, 0x03	; 3
 e14:	0f d0       	rcall	.+30     	; 0xe34 <__ultoa_invert+0x86>
 e16:	c9 f7       	brne	.-14     	; 0xe0a <__ultoa_invert+0x5c>
 e18:	f6 cf       	rjmp	.-20     	; 0xe06 <__ultoa_invert+0x58>
 e1a:	46 2f       	mov	r20, r22
 e1c:	4f 70       	andi	r20, 0x0F	; 15
 e1e:	40 5d       	subi	r20, 0xD0	; 208
 e20:	4a 33       	cpi	r20, 0x3A	; 58
 e22:	18 f0       	brcs	.+6      	; 0xe2a <__ultoa_invert+0x7c>
 e24:	49 5d       	subi	r20, 0xD9	; 217
 e26:	31 fd       	sbrc	r19, 1
 e28:	40 52       	subi	r20, 0x20	; 32
 e2a:	41 93       	st	Z+, r20
 e2c:	02 d0       	rcall	.+4      	; 0xe32 <__ultoa_invert+0x84>
 e2e:	a9 f7       	brne	.-22     	; 0xe1a <__ultoa_invert+0x6c>
 e30:	ea cf       	rjmp	.-44     	; 0xe06 <__ultoa_invert+0x58>
 e32:	b4 e0       	ldi	r27, 0x04	; 4
 e34:	a6 95       	lsr	r26
 e36:	97 95       	ror	r25
 e38:	87 95       	ror	r24
 e3a:	77 95       	ror	r23
 e3c:	67 95       	ror	r22
 e3e:	ba 95       	dec	r27
 e40:	c9 f7       	brne	.-14     	; 0xe34 <__ultoa_invert+0x86>
 e42:	00 97       	sbiw	r24, 0x00	; 0
 e44:	61 05       	cpc	r22, r1
 e46:	71 05       	cpc	r23, r1
 e48:	08 95       	ret
 e4a:	9b 01       	movw	r18, r22
 e4c:	ac 01       	movw	r20, r24
 e4e:	0a 2e       	mov	r0, r26
 e50:	06 94       	lsr	r0
 e52:	57 95       	ror	r21
 e54:	47 95       	ror	r20
 e56:	37 95       	ror	r19
 e58:	27 95       	ror	r18
 e5a:	ba 95       	dec	r27
 e5c:	c9 f7       	brne	.-14     	; 0xe50 <__ultoa_invert+0xa2>
 e5e:	62 0f       	add	r22, r18
 e60:	73 1f       	adc	r23, r19
 e62:	84 1f       	adc	r24, r20
 e64:	95 1f       	adc	r25, r21
 e66:	a0 1d       	adc	r26, r0
 e68:	08 95       	ret

00000e6a <__prologue_saves__>:
 e6a:	2f 92       	push	r2
 e6c:	3f 92       	push	r3
 e6e:	4f 92       	push	r4
 e70:	5f 92       	push	r5
 e72:	6f 92       	push	r6
 e74:	7f 92       	push	r7
 e76:	8f 92       	push	r8
 e78:	9f 92       	push	r9
 e7a:	af 92       	push	r10
 e7c:	bf 92       	push	r11
 e7e:	cf 92       	push	r12
 e80:	df 92       	push	r13
 e82:	ef 92       	push	r14
 e84:	ff 92       	push	r15
 e86:	0f 93       	push	r16
 e88:	1f 93       	push	r17
 e8a:	cf 93       	push	r28
 e8c:	df 93       	push	r29
 e8e:	cd b7       	in	r28, 0x3d	; 61
 e90:	de b7       	in	r29, 0x3e	; 62
 e92:	ca 1b       	sub	r28, r26
 e94:	db 0b       	sbc	r29, r27
 e96:	0f b6       	in	r0, 0x3f	; 63
 e98:	f8 94       	cli
 e9a:	de bf       	out	0x3e, r29	; 62
 e9c:	0f be       	out	0x3f, r0	; 63
 e9e:	cd bf       	out	0x3d, r28	; 61
 ea0:	09 94       	ijmp

00000ea2 <__epilogue_restores__>:
 ea2:	2a 88       	ldd	r2, Y+18	; 0x12
 ea4:	39 88       	ldd	r3, Y+17	; 0x11
 ea6:	48 88       	ldd	r4, Y+16	; 0x10
 ea8:	5f 84       	ldd	r5, Y+15	; 0x0f
 eaa:	6e 84       	ldd	r6, Y+14	; 0x0e
 eac:	7d 84       	ldd	r7, Y+13	; 0x0d
 eae:	8c 84       	ldd	r8, Y+12	; 0x0c
 eb0:	9b 84       	ldd	r9, Y+11	; 0x0b
 eb2:	aa 84       	ldd	r10, Y+10	; 0x0a
 eb4:	b9 84       	ldd	r11, Y+9	; 0x09
 eb6:	c8 84       	ldd	r12, Y+8	; 0x08
 eb8:	df 80       	ldd	r13, Y+7	; 0x07
 eba:	ee 80       	ldd	r14, Y+6	; 0x06
 ebc:	fd 80       	ldd	r15, Y+5	; 0x05
 ebe:	0c 81       	ldd	r16, Y+4	; 0x04
 ec0:	1b 81       	ldd	r17, Y+3	; 0x03
 ec2:	aa 81       	ldd	r26, Y+2	; 0x02
 ec4:	b9 81       	ldd	r27, Y+1	; 0x01
 ec6:	ce 0f       	add	r28, r30
 ec8:	d1 1d       	adc	r29, r1
 eca:	0f b6       	in	r0, 0x3f	; 63
 ecc:	f8 94       	cli
 ece:	de bf       	out	0x3e, r29	; 62
 ed0:	0f be       	out	0x3f, r0	; 63
 ed2:	cd bf       	out	0x3d, r28	; 61
 ed4:	ed 01       	movw	r28, r26
 ed6:	08 95       	ret

00000ed8 <_exit>:
 ed8:	f8 94       	cli

00000eda <__stop_program>:
 eda:	ff cf       	rjmp	.-2      	; 0xeda <__stop_program>
