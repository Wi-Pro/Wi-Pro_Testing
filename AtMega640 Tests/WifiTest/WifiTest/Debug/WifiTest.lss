
WifiTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800200  00000604  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f5  008002b4  008002b4  0000074c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afe  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000434  00000000  00000000  0000138e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000071d  00000000  00000000  000017c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000025c  00000000  00000000  00001ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d4  00000000  00000000  000024d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002ba7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	24 c1       	rjmp	.+584    	; 0x2da <__vector_36>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e4 e0       	ldi	r30, 0x04	; 4
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a4 3b       	cpi	r26, 0xB4	; 180
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	25 e0       	ldi	r18, 0x05	; 5
 10c:	a4 eb       	ldi	r26, 0xB4	; 180
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a9 3a       	cpi	r26, 0xA9	; 169
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	3a d1       	rcall	.+628    	; 0x390 <main>
 11c:	71 c2       	rjmp	.+1250   	; 0x600 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <networkScan>:
}

char* networkScan()
{
	//enableReceiveINT();
	sendCommand(NOPREFIX, SCAN, NOVAL);
 120:	4d ea       	ldi	r20, 0xAD	; 173
 122:	52 e0       	ldi	r21, 0x02	; 2
 124:	68 e6       	ldi	r22, 0x68	; 104
 126:	72 e0       	ldi	r23, 0x02	; 2
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	68 d0       	rcall	.+208    	; 0x1fc <sendCommand>
	char* networks = getReceiveBuffer(); 
 12c:	58 c0       	rjmp	.+176    	; 0x1de <getReceiveBuffer>
	return networks; 
}
 12e:	08 95       	ret

00000130 <uart_init>:
	//0 denotes a successful command 
	if(header[errorCode] != 0)
		return 1; 
	else 
		return 0; 
}
 130:	10 92 c5 00 	sts	0x00C5, r1
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 c4 00 	sts	0x00C4, r24
 13a:	e1 ec       	ldi	r30, 0xC1	; 193
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	88 e1       	ldi	r24, 0x18	; 24
 140:	80 83       	st	Z, r24
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	80 93 c2 00 	sts	0x00C2, r24
 148:	80 81       	ld	r24, Z
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	80 83       	st	Z, r24
 14e:	08 95       	ret

00000150 <getStringLen>:
 150:	fc 01       	movw	r30, r24
 152:	20 81       	ld	r18, Z
 154:	22 23       	and	r18, r18
 156:	41 f0       	breq	.+16     	; 0x168 <getStringLen+0x18>
 158:	31 96       	adiw	r30, 0x01	; 1
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	21 91       	ld	r18, Z+
 162:	21 11       	cpse	r18, r1
 164:	fc cf       	rjmp	.-8      	; 0x15e <getStringLen+0xe>
 166:	08 95       	ret
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret

0000016e <uart_send>:
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	e1 ec       	ldi	r30, 0xC1	; 193
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	20 81       	ld	r18, Z
 178:	20 68       	ori	r18, 0x80	; 128
 17a:	20 83       	st	Z, r18
 17c:	10 92 b4 02 	sts	0x02B4, r1
 180:	2e ee       	ldi	r18, 0xEE	; 238
 182:	32 e0       	ldi	r19, 0x02	; 2
 184:	e7 eb       	ldi	r30, 0xB7	; 183
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	df 01       	movw	r26, r30
 18a:	a9 01       	movw	r20, r18
 18c:	1d 92       	st	X+, r1
 18e:	41 50       	subi	r20, 0x01	; 1
 190:	50 40       	sbci	r21, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <uart_send+0x1e>
 194:	61 15       	cp	r22, r1
 196:	71 05       	cpc	r23, r1
 198:	a9 f0       	breq	.+42     	; 0x1c4 <uart_send+0x56>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	e0 ec       	ldi	r30, 0xC0	; 192
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	a6 ec       	ldi	r26, 0xC6	; 198
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	40 81       	ld	r20, Z
 1aa:	45 ff       	sbrs	r20, 5
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <uart_send+0x3a>
 1ae:	ec 01       	movw	r28, r24
 1b0:	c2 0f       	add	r28, r18
 1b2:	d3 1f       	adc	r29, r19
 1b4:	28 81       	ld	r18, Y
 1b6:	2c 93       	st	X, r18
 1b8:	5f 5f       	subi	r21, 0xFF	; 255
 1ba:	25 2f       	mov	r18, r21
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	26 17       	cp	r18, r22
 1c0:	37 07       	cpc	r19, r23
 1c2:	90 f3       	brcs	.-28     	; 0x1a8 <uart_send+0x3a>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <uart_receiveChar>:
 1ce:	e0 ec       	ldi	r30, 0xC0	; 192
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 23       	and	r24, r24
 1d6:	ec f7       	brge	.-6      	; 0x1d2 <uart_receiveChar+0x4>
 1d8:	80 91 c6 00 	lds	r24, 0x00C6
 1dc:	08 95       	ret

000001de <getReceiveBuffer>:
 1de:	80 91 b4 02 	lds	r24, 0x02B4
 1e2:	81 11       	cpse	r24, r1
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <getReceiveBuffer+0x18>
 1e6:	81 e2       	ldi	r24, 0x21	; 33
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <getReceiveBuffer+0xa>
 1ec:	00 00       	nop
 1ee:	80 91 b4 02 	lds	r24, 0x02B4
 1f2:	88 23       	and	r24, r24
 1f4:	c1 f3       	breq	.-16     	; 0x1e6 <getReceiveBuffer+0x8>
 1f6:	87 eb       	ldi	r24, 0xB7	; 183
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	08 95       	ret

000001fc <sendCommand>:

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{	
 1fc:	df 92       	push	r13
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	d8 2e       	mov	r13, r24
 20c:	7b 01       	movw	r14, r22
 20e:	8a 01       	movw	r16, r20
	char* fullCommand = (char *)malloc(MaxSendSize);
 210:	82 e3       	ldi	r24, 0x32	; 50
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	c3 d0       	rcall	.+390    	; 0x39c <malloc>
 216:	ec 01       	movw	r28, r24
	switch(prefix)
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	d8 16       	cp	r13, r24
 21c:	39 f0       	breq	.+14     	; 0x22c <sendCommand+0x30>
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	d8 16       	cp	r13, r24
 222:	89 f0       	breq	.+34     	; 0x246 <sendCommand+0x4a>
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	d8 12       	cpse	r13, r24
 228:	4e c0       	rjmp	.+156    	; 0x2c6 <sendCommand+0xca>
 22a:	19 c0       	rjmp	.+50     	; 0x25e <sendCommand+0x62>
	{
		case NOPREFIX: 
			break; 
		case GET: 
			strcat(fullCommand, "get ");
 22c:	de 01       	movw	r26, r28
 22e:	0d 90       	ld	r0, X+
 230:	00 20       	and	r0, r0
 232:	e9 f7       	brne	.-6      	; 0x22e <sendCommand+0x32>
 234:	11 97       	sbiw	r26, 0x01	; 1
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	e9 ea       	ldi	r30, 0xA9	; 169
 23a:	f2 e0       	ldi	r31, 0x02	; 2
 23c:	01 90       	ld	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	8a 95       	dec	r24
 242:	e1 f7       	brne	.-8      	; 0x23c <sendCommand+0x40>
			break; 
 244:	0c c0       	rjmp	.+24     	; 0x25e <sendCommand+0x62>
		case SET: 
			strcat(fullCommand, "set ");
 246:	de 01       	movw	r26, r28
 248:	0d 90       	ld	r0, X+
 24a:	00 20       	and	r0, r0
 24c:	e9 f7       	brne	.-6      	; 0x248 <sendCommand+0x4c>
 24e:	11 97       	sbiw	r26, 0x01	; 1
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	ee ea       	ldi	r30, 0xAE	; 174
 254:	f2 e0       	ldi	r31, 0x02	; 2
 256:	01 90       	ld	r0, Z+
 258:	0d 92       	st	X+, r0
 25a:	8a 95       	dec	r24
 25c:	e1 f7       	brne	.-8      	; 0x256 <sendCommand+0x5a>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
 25e:	b7 01       	movw	r22, r14
 260:	ce 01       	movw	r24, r28
 262:	c3 d1       	rcall	.+902    	; 0x5ea <strcat>
	
	if(value != NOVAL)
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0d 3a       	cpi	r16, 0xAD	; 173
 268:	18 07       	cpc	r17, r24
 26a:	61 f0       	breq	.+24     	; 0x284 <sendCommand+0x88>
	{
		strcat(fullCommand, " ");
 26c:	fe 01       	movw	r30, r28
 26e:	01 90       	ld	r0, Z+
 270:	00 20       	and	r0, r0
 272:	e9 f7       	brne	.-6      	; 0x26e <sendCommand+0x72>
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	91 83       	std	Z+1, r25	; 0x01
 27c:	80 83       	st	Z, r24
		strcat(fullCommand, value);
 27e:	b8 01       	movw	r22, r16
 280:	ce 01       	movw	r24, r28
 282:	b3 d1       	rcall	.+870    	; 0x5ea <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
 284:	fe 01       	movw	r30, r28
 286:	01 90       	ld	r0, Z+
 288:	00 20       	and	r0, r0
 28a:	e9 f7       	brne	.-6      	; 0x286 <sendCommand+0x8a>
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	2d e0       	ldi	r18, 0x0D	; 13
 290:	3a e0       	ldi	r19, 0x0A	; 10
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	20 83       	st	Z, r18
 296:	31 83       	std	Z+1, r19	; 0x01
 298:	42 83       	std	Z+2, r20	; 0x02
	uint16_t length = getStringLen(fullCommand);
 29a:	ce 01       	movw	r24, r28
 29c:	59 df       	rcall	.-334    	; 0x150 <getStringLen>
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
	uart_send(fullCommand, length);
 29e:	bc 01       	movw	r22, r24
 2a0:	ce 01       	movw	r24, r28
 2a2:	65 df       	rcall	.-310    	; 0x16e <uart_send>
	while(!receiveFlag & 1)
 2a4:	80 91 b4 02 	lds	r24, 0x02B4
 2a8:	81 11       	cpse	r24, r1
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <sendCommand+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <sendCommand+0xb2>
 2b2:	00 00       	nop
 2b4:	80 91 b4 02 	lds	r24, 0x02B4
 2b8:	88 23       	and	r24, r24
 2ba:	c1 f3       	breq	.-16     	; 0x2ac <sendCommand+0xb0>
		//While loop does not work correctly without a delay
		//An issue with the compiler or the stack pointer when invoking the interrupt
		_delay_us(10);
		//printf("Loop\n");
	}
	free(fullCommand);
 2bc:	ce 01       	movw	r24, r28
 2be:	06 d1       	rcall	.+524    	; 0x4cc <free>
	return 1; 
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <sendCommand+0xce>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
		_delay_us(10);
		//printf("Loop\n");
	}
	free(fullCommand);
	return 1; 
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	ff 90       	pop	r15
 2d4:	ef 90       	pop	r14
 2d6:	df 90       	pop	r13
 2d8:	08 95       	ret

000002da <__vector_36>:

ISR(USART1_RX_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	//printf("Receive Interrupt!\n");
	cli();
 304:	f8 94       	cli
	//Grab Receive Header
	if(i < endHeader)
 306:	c0 91 b5 02 	lds	r28, 0x02B5
 30a:	d0 91 b6 02 	lds	r29, 0x02B6
 30e:	c7 30       	cpi	r28, 0x07	; 7
 310:	d1 05       	cpc	r29, r1
 312:	28 f4       	brcc	.+10     	; 0x31e <__vector_36+0x44>
		receiveBuffer[i] = uart_receiveChar();
 314:	5c df       	rcall	.-328    	; 0x1ce <uart_receiveChar>
 316:	c9 54       	subi	r28, 0x49	; 73
 318:	dd 4f       	sbci	r29, 0xFD	; 253
 31a:	88 83       	st	Y, r24
 31c:	1a c0       	rjmp	.+52     	; 0x352 <__vector_36+0x78>
	else if(i == endHeader)
 31e:	c7 30       	cpi	r28, 0x07	; 7
 320:	d1 05       	cpc	r29, r1
 322:	b9 f0       	breq	.+46     	; 0x352 <__vector_36+0x78>
		//if(testPrint)
			//printf("Transmission Length: %d\n", transLength);
	}
	else
	{
		if(i < 8 + 8)
 324:	c0 31       	cpi	r28, 0x10	; 16
 326:	d1 05       	cpc	r29, r1
 328:	28 f4       	brcc	.+10     	; 0x334 <__vector_36+0x5a>
		{
			receiveBuffer[i] = uart_receiveChar();
 32a:	51 df       	rcall	.-350    	; 0x1ce <uart_receiveChar>
 32c:	c9 54       	subi	r28, 0x49	; 73
 32e:	dd 4f       	sbci	r29, 0xFD	; 253
 330:	88 83       	st	Y, r24
 332:	0f c0       	rjmp	.+30     	; 0x352 <__vector_36+0x78>
		}

		else
		{
			//printf("End of String!\n");
			receiveBuffer[i] = 0;
 334:	c9 54       	subi	r28, 0x49	; 73
 336:	dd 4f       	sbci	r29, 0xFD	; 253
 338:	18 82       	st	Y, r1
			UCSR0B &= ~(1<<RXCIE0);
 33a:	e1 ec       	ldi	r30, 0xC1	; 193
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	8f 77       	andi	r24, 0x7F	; 127
 342:	80 83       	st	Z, r24
			i = 0;
 344:	10 92 b6 02 	sts	0x02B6, r1
 348:	10 92 b5 02 	sts	0x02B5, r1
			receiveFlag = 1;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 b4 02 	sts	0x02B4, r24
			//printf("Transmission Length: %d\n", getTransmissionLength());
			//printf("Done Receiving!\n");
		}
	}
	i++; 
 352:	80 91 b5 02 	lds	r24, 0x02B5
 356:	90 91 b6 02 	lds	r25, 0x02B6
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 b6 02 	sts	0x02B6, r25
 360:	80 93 b5 02 	sts	0x02B5, r24
	sei(); 
 364:	78 94       	sei
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	7f 91       	pop	r23
 378:	6f 91       	pop	r22
 37a:	5f 91       	pop	r21
 37c:	4f 91       	pop	r20
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0b be       	out	0x3b, r0	; 59
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <main>:
#include "Wifi.h"


int main(void)
{
	uart_init();
 390:	cf de       	rcall	.-610    	; 0x130 <uart_init>
	sei(); 
 392:	78 94       	sei
	networkScan();
 394:	c5 de       	rcall	.-630    	; 0x120 <networkScan>
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	08 95       	ret

0000039c <malloc>:
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	91 05       	cpc	r25, r1
 3a4:	10 f4       	brcc	.+4      	; 0x3aa <malloc+0xe>
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	e0 91 a7 05 	lds	r30, 0x05A7
 3ae:	f0 91 a8 05 	lds	r31, 0x05A8
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	a0 e0       	ldi	r26, 0x00	; 0
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	30 97       	sbiw	r30, 0x00	; 0
 3bc:	39 f1       	breq	.+78     	; 0x40c <malloc+0x70>
 3be:	40 81       	ld	r20, Z
 3c0:	51 81       	ldd	r21, Z+1	; 0x01
 3c2:	48 17       	cp	r20, r24
 3c4:	59 07       	cpc	r21, r25
 3c6:	b8 f0       	brcs	.+46     	; 0x3f6 <malloc+0x5a>
 3c8:	48 17       	cp	r20, r24
 3ca:	59 07       	cpc	r21, r25
 3cc:	71 f4       	brne	.+28     	; 0x3ea <malloc+0x4e>
 3ce:	82 81       	ldd	r24, Z+2	; 0x02
 3d0:	93 81       	ldd	r25, Z+3	; 0x03
 3d2:	10 97       	sbiw	r26, 0x00	; 0
 3d4:	29 f0       	breq	.+10     	; 0x3e0 <malloc+0x44>
 3d6:	13 96       	adiw	r26, 0x03	; 3
 3d8:	9c 93       	st	X, r25
 3da:	8e 93       	st	-X, r24
 3dc:	12 97       	sbiw	r26, 0x02	; 2
 3de:	2c c0       	rjmp	.+88     	; 0x438 <malloc+0x9c>
 3e0:	90 93 a8 05 	sts	0x05A8, r25
 3e4:	80 93 a7 05 	sts	0x05A7, r24
 3e8:	27 c0       	rjmp	.+78     	; 0x438 <malloc+0x9c>
 3ea:	21 15       	cp	r18, r1
 3ec:	31 05       	cpc	r19, r1
 3ee:	31 f0       	breq	.+12     	; 0x3fc <malloc+0x60>
 3f0:	42 17       	cp	r20, r18
 3f2:	53 07       	cpc	r21, r19
 3f4:	18 f0       	brcs	.+6      	; 0x3fc <malloc+0x60>
 3f6:	a9 01       	movw	r20, r18
 3f8:	db 01       	movw	r26, r22
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <malloc+0x62>
 3fc:	ef 01       	movw	r28, r30
 3fe:	9a 01       	movw	r18, r20
 400:	bd 01       	movw	r22, r26
 402:	df 01       	movw	r26, r30
 404:	02 80       	ldd	r0, Z+2	; 0x02
 406:	f3 81       	ldd	r31, Z+3	; 0x03
 408:	e0 2d       	mov	r30, r0
 40a:	d7 cf       	rjmp	.-82     	; 0x3ba <malloc+0x1e>
 40c:	21 15       	cp	r18, r1
 40e:	31 05       	cpc	r19, r1
 410:	f9 f0       	breq	.+62     	; 0x450 <malloc+0xb4>
 412:	28 1b       	sub	r18, r24
 414:	39 0b       	sbc	r19, r25
 416:	24 30       	cpi	r18, 0x04	; 4
 418:	31 05       	cpc	r19, r1
 41a:	80 f4       	brcc	.+32     	; 0x43c <malloc+0xa0>
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	9b 81       	ldd	r25, Y+3	; 0x03
 420:	61 15       	cp	r22, r1
 422:	71 05       	cpc	r23, r1
 424:	21 f0       	breq	.+8      	; 0x42e <malloc+0x92>
 426:	fb 01       	movw	r30, r22
 428:	93 83       	std	Z+3, r25	; 0x03
 42a:	82 83       	std	Z+2, r24	; 0x02
 42c:	04 c0       	rjmp	.+8      	; 0x436 <malloc+0x9a>
 42e:	90 93 a8 05 	sts	0x05A8, r25
 432:	80 93 a7 05 	sts	0x05A7, r24
 436:	fe 01       	movw	r30, r28
 438:	32 96       	adiw	r30, 0x02	; 2
 43a:	44 c0       	rjmp	.+136    	; 0x4c4 <malloc+0x128>
 43c:	fe 01       	movw	r30, r28
 43e:	e2 0f       	add	r30, r18
 440:	f3 1f       	adc	r31, r19
 442:	81 93       	st	Z+, r24
 444:	91 93       	st	Z+, r25
 446:	22 50       	subi	r18, 0x02	; 2
 448:	31 09       	sbc	r19, r1
 44a:	39 83       	std	Y+1, r19	; 0x01
 44c:	28 83       	st	Y, r18
 44e:	3a c0       	rjmp	.+116    	; 0x4c4 <malloc+0x128>
 450:	20 91 a5 05 	lds	r18, 0x05A5
 454:	30 91 a6 05 	lds	r19, 0x05A6
 458:	23 2b       	or	r18, r19
 45a:	41 f4       	brne	.+16     	; 0x46c <malloc+0xd0>
 45c:	20 91 02 02 	lds	r18, 0x0202
 460:	30 91 03 02 	lds	r19, 0x0203
 464:	30 93 a6 05 	sts	0x05A6, r19
 468:	20 93 a5 05 	sts	0x05A5, r18
 46c:	20 91 00 02 	lds	r18, 0x0200
 470:	30 91 01 02 	lds	r19, 0x0201
 474:	21 15       	cp	r18, r1
 476:	31 05       	cpc	r19, r1
 478:	41 f4       	brne	.+16     	; 0x48a <malloc+0xee>
 47a:	2d b7       	in	r18, 0x3d	; 61
 47c:	3e b7       	in	r19, 0x3e	; 62
 47e:	40 91 04 02 	lds	r20, 0x0204
 482:	50 91 05 02 	lds	r21, 0x0205
 486:	24 1b       	sub	r18, r20
 488:	35 0b       	sbc	r19, r21
 48a:	e0 91 a5 05 	lds	r30, 0x05A5
 48e:	f0 91 a6 05 	lds	r31, 0x05A6
 492:	e2 17       	cp	r30, r18
 494:	f3 07       	cpc	r31, r19
 496:	a0 f4       	brcc	.+40     	; 0x4c0 <malloc+0x124>
 498:	2e 1b       	sub	r18, r30
 49a:	3f 0b       	sbc	r19, r31
 49c:	28 17       	cp	r18, r24
 49e:	39 07       	cpc	r19, r25
 4a0:	78 f0       	brcs	.+30     	; 0x4c0 <malloc+0x124>
 4a2:	ac 01       	movw	r20, r24
 4a4:	4e 5f       	subi	r20, 0xFE	; 254
 4a6:	5f 4f       	sbci	r21, 0xFF	; 255
 4a8:	24 17       	cp	r18, r20
 4aa:	35 07       	cpc	r19, r21
 4ac:	48 f0       	brcs	.+18     	; 0x4c0 <malloc+0x124>
 4ae:	4e 0f       	add	r20, r30
 4b0:	5f 1f       	adc	r21, r31
 4b2:	50 93 a6 05 	sts	0x05A6, r21
 4b6:	40 93 a5 05 	sts	0x05A5, r20
 4ba:	81 93       	st	Z+, r24
 4bc:	91 93       	st	Z+, r25
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <malloc+0x128>
 4c0:	e0 e0       	ldi	r30, 0x00	; 0
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	cf 01       	movw	r24, r30
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <free>:
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	00 97       	sbiw	r24, 0x00	; 0
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <free+0xa>
 4d4:	87 c0       	rjmp	.+270    	; 0x5e4 <free+0x118>
 4d6:	fc 01       	movw	r30, r24
 4d8:	32 97       	sbiw	r30, 0x02	; 2
 4da:	13 82       	std	Z+3, r1	; 0x03
 4dc:	12 82       	std	Z+2, r1	; 0x02
 4de:	c0 91 a7 05 	lds	r28, 0x05A7
 4e2:	d0 91 a8 05 	lds	r29, 0x05A8
 4e6:	20 97       	sbiw	r28, 0x00	; 0
 4e8:	81 f4       	brne	.+32     	; 0x50a <free+0x3e>
 4ea:	20 81       	ld	r18, Z
 4ec:	31 81       	ldd	r19, Z+1	; 0x01
 4ee:	28 0f       	add	r18, r24
 4f0:	39 1f       	adc	r19, r25
 4f2:	80 91 a5 05 	lds	r24, 0x05A5
 4f6:	90 91 a6 05 	lds	r25, 0x05A6
 4fa:	82 17       	cp	r24, r18
 4fc:	93 07       	cpc	r25, r19
 4fe:	79 f5       	brne	.+94     	; 0x55e <free+0x92>
 500:	f0 93 a6 05 	sts	0x05A6, r31
 504:	e0 93 a5 05 	sts	0x05A5, r30
 508:	6d c0       	rjmp	.+218    	; 0x5e4 <free+0x118>
 50a:	de 01       	movw	r26, r28
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	ae 17       	cp	r26, r30
 512:	bf 07       	cpc	r27, r31
 514:	50 f4       	brcc	.+20     	; 0x52a <free+0x5e>
 516:	12 96       	adiw	r26, 0x02	; 2
 518:	4d 91       	ld	r20, X+
 51a:	5c 91       	ld	r21, X
 51c:	13 97       	sbiw	r26, 0x03	; 3
 51e:	9d 01       	movw	r18, r26
 520:	41 15       	cp	r20, r1
 522:	51 05       	cpc	r21, r1
 524:	09 f1       	breq	.+66     	; 0x568 <free+0x9c>
 526:	da 01       	movw	r26, r20
 528:	f3 cf       	rjmp	.-26     	; 0x510 <free+0x44>
 52a:	b3 83       	std	Z+3, r27	; 0x03
 52c:	a2 83       	std	Z+2, r26	; 0x02
 52e:	40 81       	ld	r20, Z
 530:	51 81       	ldd	r21, Z+1	; 0x01
 532:	84 0f       	add	r24, r20
 534:	95 1f       	adc	r25, r21
 536:	8a 17       	cp	r24, r26
 538:	9b 07       	cpc	r25, r27
 53a:	71 f4       	brne	.+28     	; 0x558 <free+0x8c>
 53c:	8d 91       	ld	r24, X+
 53e:	9c 91       	ld	r25, X
 540:	11 97       	sbiw	r26, 0x01	; 1
 542:	84 0f       	add	r24, r20
 544:	95 1f       	adc	r25, r21
 546:	02 96       	adiw	r24, 0x02	; 2
 548:	91 83       	std	Z+1, r25	; 0x01
 54a:	80 83       	st	Z, r24
 54c:	12 96       	adiw	r26, 0x02	; 2
 54e:	8d 91       	ld	r24, X+
 550:	9c 91       	ld	r25, X
 552:	13 97       	sbiw	r26, 0x03	; 3
 554:	93 83       	std	Z+3, r25	; 0x03
 556:	82 83       	std	Z+2, r24	; 0x02
 558:	21 15       	cp	r18, r1
 55a:	31 05       	cpc	r19, r1
 55c:	29 f4       	brne	.+10     	; 0x568 <free+0x9c>
 55e:	f0 93 a8 05 	sts	0x05A8, r31
 562:	e0 93 a7 05 	sts	0x05A7, r30
 566:	3e c0       	rjmp	.+124    	; 0x5e4 <free+0x118>
 568:	d9 01       	movw	r26, r18
 56a:	13 96       	adiw	r26, 0x03	; 3
 56c:	fc 93       	st	X, r31
 56e:	ee 93       	st	-X, r30
 570:	12 97       	sbiw	r26, 0x02	; 2
 572:	4d 91       	ld	r20, X+
 574:	5d 91       	ld	r21, X+
 576:	a4 0f       	add	r26, r20
 578:	b5 1f       	adc	r27, r21
 57a:	ea 17       	cp	r30, r26
 57c:	fb 07       	cpc	r31, r27
 57e:	79 f4       	brne	.+30     	; 0x59e <free+0xd2>
 580:	80 81       	ld	r24, Z
 582:	91 81       	ldd	r25, Z+1	; 0x01
 584:	84 0f       	add	r24, r20
 586:	95 1f       	adc	r25, r21
 588:	02 96       	adiw	r24, 0x02	; 2
 58a:	d9 01       	movw	r26, r18
 58c:	11 96       	adiw	r26, 0x01	; 1
 58e:	9c 93       	st	X, r25
 590:	8e 93       	st	-X, r24
 592:	82 81       	ldd	r24, Z+2	; 0x02
 594:	93 81       	ldd	r25, Z+3	; 0x03
 596:	13 96       	adiw	r26, 0x03	; 3
 598:	9c 93       	st	X, r25
 59a:	8e 93       	st	-X, r24
 59c:	12 97       	sbiw	r26, 0x02	; 2
 59e:	e0 e0       	ldi	r30, 0x00	; 0
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	9b 81       	ldd	r25, Y+3	; 0x03
 5a6:	00 97       	sbiw	r24, 0x00	; 0
 5a8:	19 f0       	breq	.+6      	; 0x5b0 <free+0xe4>
 5aa:	fe 01       	movw	r30, r28
 5ac:	ec 01       	movw	r28, r24
 5ae:	f9 cf       	rjmp	.-14     	; 0x5a2 <free+0xd6>
 5b0:	ce 01       	movw	r24, r28
 5b2:	02 96       	adiw	r24, 0x02	; 2
 5b4:	28 81       	ld	r18, Y
 5b6:	39 81       	ldd	r19, Y+1	; 0x01
 5b8:	82 0f       	add	r24, r18
 5ba:	93 1f       	adc	r25, r19
 5bc:	20 91 a5 05 	lds	r18, 0x05A5
 5c0:	30 91 a6 05 	lds	r19, 0x05A6
 5c4:	28 17       	cp	r18, r24
 5c6:	39 07       	cpc	r19, r25
 5c8:	69 f4       	brne	.+26     	; 0x5e4 <free+0x118>
 5ca:	30 97       	sbiw	r30, 0x00	; 0
 5cc:	29 f4       	brne	.+10     	; 0x5d8 <free+0x10c>
 5ce:	10 92 a8 05 	sts	0x05A8, r1
 5d2:	10 92 a7 05 	sts	0x05A7, r1
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <free+0x110>
 5d8:	13 82       	std	Z+3, r1	; 0x03
 5da:	12 82       	std	Z+2, r1	; 0x02
 5dc:	d0 93 a6 05 	sts	0x05A6, r29
 5e0:	c0 93 a5 05 	sts	0x05A5, r28
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	08 95       	ret

000005ea <strcat>:
 5ea:	fb 01       	movw	r30, r22
 5ec:	dc 01       	movw	r26, r24
 5ee:	0d 90       	ld	r0, X+
 5f0:	00 20       	and	r0, r0
 5f2:	e9 f7       	brne	.-6      	; 0x5ee <strcat+0x4>
 5f4:	11 97       	sbiw	r26, 0x01	; 1
 5f6:	01 90       	ld	r0, Z+
 5f8:	0d 92       	st	X+, r0
 5fa:	00 20       	and	r0, r0
 5fc:	e1 f7       	brne	.-8      	; 0x5f6 <strcat+0xc>
 5fe:	08 95       	ret

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
