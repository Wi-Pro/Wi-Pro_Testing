
WifiTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800200  0000062c  000006c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000062c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f5  008002b4  008002b4  00000774  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b16  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000434  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000723  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000025c  00000000  00000000  00001f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d4  00000000  00000000  00002515  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002be9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8a c0       	rjmp	.+276    	; 0x11a <__bad_interrupt>
   6:	00 00       	nop
   8:	88 c0       	rjmp	.+272    	; 0x11a <__bad_interrupt>
   a:	00 00       	nop
   c:	86 c0       	rjmp	.+268    	; 0x11a <__bad_interrupt>
   e:	00 00       	nop
  10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
  12:	00 00       	nop
  14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
  16:	00 00       	nop
  18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7e c0       	rjmp	.+252    	; 0x11a <__bad_interrupt>
  1e:	00 00       	nop
  20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
  22:	00 00       	nop
  24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
  26:	00 00       	nop
  28:	78 c0       	rjmp	.+240    	; 0x11a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	76 c0       	rjmp	.+236    	; 0x11a <__bad_interrupt>
  2e:	00 00       	nop
  30:	74 c0       	rjmp	.+232    	; 0x11a <__bad_interrupt>
  32:	00 00       	nop
  34:	72 c0       	rjmp	.+228    	; 0x11a <__bad_interrupt>
  36:	00 00       	nop
  38:	70 c0       	rjmp	.+224    	; 0x11a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6e c0       	rjmp	.+220    	; 0x11a <__bad_interrupt>
  3e:	00 00       	nop
  40:	6c c0       	rjmp	.+216    	; 0x11a <__bad_interrupt>
  42:	00 00       	nop
  44:	6a c0       	rjmp	.+212    	; 0x11a <__bad_interrupt>
  46:	00 00       	nop
  48:	68 c0       	rjmp	.+208    	; 0x11a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	66 c0       	rjmp	.+204    	; 0x11a <__bad_interrupt>
  4e:	00 00       	nop
  50:	64 c0       	rjmp	.+200    	; 0x11a <__bad_interrupt>
  52:	00 00       	nop
  54:	62 c0       	rjmp	.+196    	; 0x11a <__bad_interrupt>
  56:	00 00       	nop
  58:	60 c0       	rjmp	.+192    	; 0x11a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5e c0       	rjmp	.+188    	; 0x11a <__bad_interrupt>
  5e:	00 00       	nop
  60:	5c c0       	rjmp	.+184    	; 0x11a <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c1       	rjmp	.+674    	; 0x308 <__vector_25>
  66:	00 00       	nop
  68:	58 c0       	rjmp	.+176    	; 0x11a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	56 c0       	rjmp	.+172    	; 0x11a <__bad_interrupt>
  6e:	00 00       	nop
  70:	54 c0       	rjmp	.+168    	; 0x11a <__bad_interrupt>
  72:	00 00       	nop
  74:	52 c0       	rjmp	.+164    	; 0x11a <__bad_interrupt>
  76:	00 00       	nop
  78:	50 c0       	rjmp	.+160    	; 0x11a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4e c0       	rjmp	.+156    	; 0x11a <__bad_interrupt>
  7e:	00 00       	nop
  80:	4c c0       	rjmp	.+152    	; 0x11a <__bad_interrupt>
  82:	00 00       	nop
  84:	4a c0       	rjmp	.+148    	; 0x11a <__bad_interrupt>
  86:	00 00       	nop
  88:	48 c0       	rjmp	.+144    	; 0x11a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	46 c0       	rjmp	.+140    	; 0x11a <__bad_interrupt>
  8e:	00 00       	nop
  90:	44 c0       	rjmp	.+136    	; 0x11a <__bad_interrupt>
  92:	00 00       	nop
  94:	42 c0       	rjmp	.+132    	; 0x11a <__bad_interrupt>
  96:	00 00       	nop
  98:	40 c0       	rjmp	.+128    	; 0x11a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3e c0       	rjmp	.+124    	; 0x11a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3c c0       	rjmp	.+120    	; 0x11a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3a c0       	rjmp	.+116    	; 0x11a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	38 c0       	rjmp	.+112    	; 0x11a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	36 c0       	rjmp	.+108    	; 0x11a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	34 c0       	rjmp	.+104    	; 0x11a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	32 c0       	rjmp	.+100    	; 0x11a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	30 c0       	rjmp	.+96     	; 0x11a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2e c0       	rjmp	.+92     	; 0x11a <__bad_interrupt>
  be:	00 00       	nop
  c0:	2c c0       	rjmp	.+88     	; 0x11a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2a c0       	rjmp	.+84     	; 0x11a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	28 c0       	rjmp	.+80     	; 0x11a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	26 c0       	rjmp	.+76     	; 0x11a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	24 c0       	rjmp	.+72     	; 0x11a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	22 c0       	rjmp	.+68     	; 0x11a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	20 c0       	rjmp	.+64     	; 0x11a <__bad_interrupt>
  da:	00 00       	nop
  dc:	1e c0       	rjmp	.+60     	; 0x11a <__bad_interrupt>
  de:	00 00       	nop
  e0:	1c c0       	rjmp	.+56     	; 0x11a <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ec e2       	ldi	r30, 0x2C	; 44
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a4 3b       	cpi	r26, 0xB4	; 180
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	25 e0       	ldi	r18, 0x05	; 5
 108:	a4 eb       	ldi	r26, 0xB4	; 180
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a9 3a       	cpi	r26, 0xA9	; 169
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	4f d1       	rcall	.+670    	; 0x3b6 <main>
 118:	87 c2       	rjmp	.+1294   	; 0x628 <_exit>

0000011a <__bad_interrupt>:
 11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <setMachineMode>:
void setHumanMode()
{
	sendCommand(SET, SYSTEM_CMD_ECHO, ON);
	sendCommand(SET, SYSTEM_CMD_PROMPT, ONE);
	sendCommand(SET, SYSTEM_CMD_HEADER, ZERO);
	sendCommand(SET, SYSTEM_PRINT_LEVEL, ONE);
 11c:	46 e0       	ldi	r20, 0x06	; 6
 11e:	52 e0       	ldi	r21, 0x02	; 2
 120:	68 e0       	ldi	r22, 0x08	; 8
 122:	72 e0       	ldi	r23, 0x02	; 2
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	81 d0       	rcall	.+258    	; 0x22a <sendCommand>
 128:	4b e1       	ldi	r20, 0x1B	; 27
 12a:	52 e0       	ldi	r21, 0x02	; 2
 12c:	6d e1       	ldi	r22, 0x1D	; 29
 12e:	72 e0       	ldi	r23, 0x02	; 2
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	7b d0       	rcall	.+246    	; 0x22a <sendCommand>
 134:	46 e0       	ldi	r20, 0x06	; 6
 136:	52 e0       	ldi	r21, 0x02	; 2
 138:	67 e3       	ldi	r22, 0x37	; 55
 13a:	72 e0       	ldi	r23, 0x02	; 2
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	75 d0       	rcall	.+234    	; 0x22a <sendCommand>
 140:	41 e5       	ldi	r20, 0x51	; 81
 142:	52 e0       	ldi	r21, 0x02	; 2
 144:	65 e5       	ldi	r22, 0x55	; 85
 146:	72 e0       	ldi	r23, 0x02	; 2
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	6f c0       	rjmp	.+222    	; 0x22a <sendCommand>
 14c:	08 95       	ret

0000014e <networkScan>:
}

char* networkScan()
{
	//enableReceiveINT();
	sendCommand(NOPREFIX, SCAN, NOVAL);
 14e:	4d ea       	ldi	r20, 0xAD	; 173
 150:	52 e0       	ldi	r21, 0x02	; 2
 152:	68 e6       	ldi	r22, 0x68	; 104
 154:	72 e0       	ldi	r23, 0x02	; 2
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	68 d0       	rcall	.+208    	; 0x22a <sendCommand>
	char* networks = getReceiveBuffer(); 
 15a:	58 c0       	rjmp	.+176    	; 0x20c <getReceiveBuffer>
	return networks; 
}
 15c:	08 95       	ret

0000015e <uart_init>:
	//0 denotes a successful command 
	if(header[errorCode] != 0)
		return 1; 
	else 
		return 0; 
}
 15e:	10 92 c5 00 	sts	0x00C5, r1
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 c4 00 	sts	0x00C4, r24
 168:	e1 ec       	ldi	r30, 0xC1	; 193
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	88 e1       	ldi	r24, 0x18	; 24
 16e:	80 83       	st	Z, r24
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	80 93 c2 00 	sts	0x00C2, r24
 176:	80 81       	ld	r24, Z
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <getStringLen>:
 17e:	fc 01       	movw	r30, r24
 180:	20 81       	ld	r18, Z
 182:	22 23       	and	r18, r18
 184:	41 f0       	breq	.+16     	; 0x196 <getStringLen+0x18>
 186:	31 96       	adiw	r30, 0x01	; 1
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	21 91       	ld	r18, Z+
 190:	21 11       	cpse	r18, r1
 192:	fc cf       	rjmp	.-8      	; 0x18c <getStringLen+0xe>
 194:	08 95       	ret
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret

0000019c <uart_send>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	e1 ec       	ldi	r30, 0xC1	; 193
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	20 81       	ld	r18, Z
 1a6:	20 68       	ori	r18, 0x80	; 128
 1a8:	20 83       	st	Z, r18
 1aa:	10 92 b4 02 	sts	0x02B4, r1
 1ae:	2e ee       	ldi	r18, 0xEE	; 238
 1b0:	32 e0       	ldi	r19, 0x02	; 2
 1b2:	e7 eb       	ldi	r30, 0xB7	; 183
 1b4:	f2 e0       	ldi	r31, 0x02	; 2
 1b6:	df 01       	movw	r26, r30
 1b8:	a9 01       	movw	r20, r18
 1ba:	1d 92       	st	X+, r1
 1bc:	41 50       	subi	r20, 0x01	; 1
 1be:	50 40       	sbci	r21, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <uart_send+0x1e>
 1c2:	61 15       	cp	r22, r1
 1c4:	71 05       	cpc	r23, r1
 1c6:	a9 f0       	breq	.+42     	; 0x1f2 <uart_send+0x56>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	e0 ec       	ldi	r30, 0xC0	; 192
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	a6 ec       	ldi	r26, 0xC6	; 198
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	40 81       	ld	r20, Z
 1d8:	45 ff       	sbrs	r20, 5
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <uart_send+0x3a>
 1dc:	ec 01       	movw	r28, r24
 1de:	c2 0f       	add	r28, r18
 1e0:	d3 1f       	adc	r29, r19
 1e2:	28 81       	ld	r18, Y
 1e4:	2c 93       	st	X, r18
 1e6:	5f 5f       	subi	r21, 0xFF	; 255
 1e8:	25 2f       	mov	r18, r21
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	26 17       	cp	r18, r22
 1ee:	37 07       	cpc	r19, r23
 1f0:	90 f3       	brcs	.-28     	; 0x1d6 <uart_send+0x3a>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <uart_receiveChar>:
 1fc:	e0 ec       	ldi	r30, 0xC0	; 192
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	ec f7       	brge	.-6      	; 0x200 <uart_receiveChar+0x4>
 206:	80 91 c6 00 	lds	r24, 0x00C6
 20a:	08 95       	ret

0000020c <getReceiveBuffer>:
 20c:	80 91 b4 02 	lds	r24, 0x02B4
 210:	81 11       	cpse	r24, r1
 212:	08 c0       	rjmp	.+16     	; 0x224 <getReceiveBuffer+0x18>
 214:	81 e2       	ldi	r24, 0x21	; 33
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <getReceiveBuffer+0xa>
 21a:	00 00       	nop
 21c:	80 91 b4 02 	lds	r24, 0x02B4
 220:	88 23       	and	r24, r24
 222:	c1 f3       	breq	.-16     	; 0x214 <getReceiveBuffer+0x8>
 224:	87 eb       	ldi	r24, 0xB7	; 183
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	08 95       	ret

0000022a <sendCommand>:

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{	
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	d8 2e       	mov	r13, r24
 23a:	7b 01       	movw	r14, r22
 23c:	8a 01       	movw	r16, r20
	char* fullCommand = (char *)malloc(MaxSendSize);
 23e:	82 e3       	ldi	r24, 0x32	; 50
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	c0 d0       	rcall	.+384    	; 0x3c4 <malloc>
 244:	ec 01       	movw	r28, r24
	switch(prefix)
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	d8 16       	cp	r13, r24
 24a:	39 f0       	breq	.+14     	; 0x25a <sendCommand+0x30>
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	d8 16       	cp	r13, r24
 250:	89 f0       	breq	.+34     	; 0x274 <sendCommand+0x4a>
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	d8 12       	cpse	r13, r24
 256:	4e c0       	rjmp	.+156    	; 0x2f4 <sendCommand+0xca>
 258:	19 c0       	rjmp	.+50     	; 0x28c <sendCommand+0x62>
	{
		case NOPREFIX: 
			break; 
		case GET: 
			strcat(fullCommand, "get ");
 25a:	de 01       	movw	r26, r28
 25c:	0d 90       	ld	r0, X+
 25e:	00 20       	and	r0, r0
 260:	e9 f7       	brne	.-6      	; 0x25c <sendCommand+0x32>
 262:	11 97       	sbiw	r26, 0x01	; 1
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	e9 ea       	ldi	r30, 0xA9	; 169
 268:	f2 e0       	ldi	r31, 0x02	; 2
 26a:	01 90       	ld	r0, Z+
 26c:	0d 92       	st	X+, r0
 26e:	8a 95       	dec	r24
 270:	e1 f7       	brne	.-8      	; 0x26a <sendCommand+0x40>
			break; 
 272:	0c c0       	rjmp	.+24     	; 0x28c <sendCommand+0x62>
		case SET: 
			strcat(fullCommand, "set ");
 274:	de 01       	movw	r26, r28
 276:	0d 90       	ld	r0, X+
 278:	00 20       	and	r0, r0
 27a:	e9 f7       	brne	.-6      	; 0x276 <sendCommand+0x4c>
 27c:	11 97       	sbiw	r26, 0x01	; 1
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	ee ea       	ldi	r30, 0xAE	; 174
 282:	f2 e0       	ldi	r31, 0x02	; 2
 284:	01 90       	ld	r0, Z+
 286:	0d 92       	st	X+, r0
 288:	8a 95       	dec	r24
 28a:	e1 f7       	brne	.-8      	; 0x284 <sendCommand+0x5a>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
 28c:	b7 01       	movw	r22, r14
 28e:	ce 01       	movw	r24, r28
 290:	c0 d1       	rcall	.+896    	; 0x612 <strcat>
	
	if(value != NOVAL)
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	0d 3a       	cpi	r16, 0xAD	; 173
 296:	18 07       	cpc	r17, r24
 298:	61 f0       	breq	.+24     	; 0x2b2 <sendCommand+0x88>
	{
		strcat(fullCommand, " ");
 29a:	fe 01       	movw	r30, r28
 29c:	01 90       	ld	r0, Z+
 29e:	00 20       	and	r0, r0
 2a0:	e9 f7       	brne	.-6      	; 0x29c <sendCommand+0x72>
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	80 e2       	ldi	r24, 0x20	; 32
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	91 83       	std	Z+1, r25	; 0x01
 2aa:	80 83       	st	Z, r24
		strcat(fullCommand, value);
 2ac:	b8 01       	movw	r22, r16
 2ae:	ce 01       	movw	r24, r28
 2b0:	b0 d1       	rcall	.+864    	; 0x612 <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
 2b2:	fe 01       	movw	r30, r28
 2b4:	01 90       	ld	r0, Z+
 2b6:	00 20       	and	r0, r0
 2b8:	e9 f7       	brne	.-6      	; 0x2b4 <sendCommand+0x8a>
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	2d e0       	ldi	r18, 0x0D	; 13
 2be:	3a e0       	ldi	r19, 0x0A	; 10
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	20 83       	st	Z, r18
 2c4:	31 83       	std	Z+1, r19	; 0x01
 2c6:	42 83       	std	Z+2, r20	; 0x02
	uint16_t length = getStringLen(fullCommand);
 2c8:	ce 01       	movw	r24, r28
 2ca:	59 df       	rcall	.-334    	; 0x17e <getStringLen>
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
	uart_send(fullCommand, length);
 2cc:	bc 01       	movw	r22, r24
 2ce:	ce 01       	movw	r24, r28
 2d0:	65 df       	rcall	.-310    	; 0x19c <uart_send>
	while(!receiveFlag & 1)
 2d2:	80 91 b4 02 	lds	r24, 0x02B4
 2d6:	81 11       	cpse	r24, r1
 2d8:	08 c0       	rjmp	.+16     	; 0x2ea <sendCommand+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <sendCommand+0xb2>
 2e0:	00 00       	nop
 2e2:	80 91 b4 02 	lds	r24, 0x02B4
 2e6:	88 23       	and	r24, r24
 2e8:	c1 f3       	breq	.-16     	; 0x2da <sendCommand+0xb0>
		//While loop does not work correctly without a delay
		//An issue with the compiler or the stack pointer when invoking the interrupt
		_delay_us(10);
		//printf("Loop\n");
	}
	free(fullCommand);
 2ea:	ce 01       	movw	r24, r28
 2ec:	03 d1       	rcall	.+518    	; 0x4f4 <free>
	return 1; 
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <sendCommand+0xce>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
		_delay_us(10);
		//printf("Loop\n");
	}
	free(fullCommand);
	return 1; 
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	df 90       	pop	r13
 306:	08 95       	ret

00000308 <__vector_25>:

ISR(USART0_RX_vect)
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	3f 93       	push	r19
 316:	4f 93       	push	r20
 318:	5f 93       	push	r21
 31a:	6f 93       	push	r22
 31c:	7f 93       	push	r23
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	af 93       	push	r26
 324:	bf 93       	push	r27
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
	//printf("Receive Interrupt!\n");
	cli();
 32e:	f8 94       	cli
	//Grab Receive Header
	if(i < endHeader)
 330:	c0 91 b5 02 	lds	r28, 0x02B5
 334:	d0 91 b6 02 	lds	r29, 0x02B6
 338:	c7 30       	cpi	r28, 0x07	; 7
 33a:	d1 05       	cpc	r29, r1
 33c:	28 f4       	brcc	.+10     	; 0x348 <__vector_25+0x40>
		receiveBuffer[i] = uart_receiveChar();
 33e:	5e df       	rcall	.-324    	; 0x1fc <uart_receiveChar>
 340:	c9 54       	subi	r28, 0x49	; 73
 342:	dd 4f       	sbci	r29, 0xFD	; 253
 344:	88 83       	st	Y, r24
 346:	1a c0       	rjmp	.+52     	; 0x37c <__vector_25+0x74>
	else if(i == endHeader)
 348:	c7 30       	cpi	r28, 0x07	; 7
 34a:	d1 05       	cpc	r29, r1
 34c:	b9 f0       	breq	.+46     	; 0x37c <__vector_25+0x74>
		//if(testPrint)
			//printf("Transmission Length: %d\n", transLength);
	}
	else
	{
		if(i < 8 + 8)
 34e:	c0 31       	cpi	r28, 0x10	; 16
 350:	d1 05       	cpc	r29, r1
 352:	28 f4       	brcc	.+10     	; 0x35e <__vector_25+0x56>
		{
			receiveBuffer[i] = uart_receiveChar();
 354:	53 df       	rcall	.-346    	; 0x1fc <uart_receiveChar>
 356:	c9 54       	subi	r28, 0x49	; 73
 358:	dd 4f       	sbci	r29, 0xFD	; 253
 35a:	88 83       	st	Y, r24
 35c:	0f c0       	rjmp	.+30     	; 0x37c <__vector_25+0x74>
		}

		else
		{
			//printf("End of String!\n");
			receiveBuffer[i] = 0;
 35e:	c9 54       	subi	r28, 0x49	; 73
 360:	dd 4f       	sbci	r29, 0xFD	; 253
 362:	18 82       	st	Y, r1
			UCSR0B &= ~(1<<RXCIE0);
 364:	e1 ec       	ldi	r30, 0xC1	; 193
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	8f 77       	andi	r24, 0x7F	; 127
 36c:	80 83       	st	Z, r24
			i = 0;
 36e:	10 92 b6 02 	sts	0x02B6, r1
 372:	10 92 b5 02 	sts	0x02B5, r1
			receiveFlag = 1;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	80 93 b4 02 	sts	0x02B4, r24
			//printf("Transmission Length: %d\n", getTransmissionLength());
			//printf("Done Receiving!\n");
		}
	}
	i++; 
 37c:	80 91 b5 02 	lds	r24, 0x02B5
 380:	90 91 b6 02 	lds	r25, 0x02B6
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	90 93 b6 02 	sts	0x02B6, r25
 38a:	80 93 b5 02 	sts	0x02B5, r24
	sei(); 
 38e:	78 94       	sei
}
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <main>:
#include "Wifi.h"


int main(void)
{
	uart_init();
 3b6:	d3 de       	rcall	.-602    	; 0x15e <uart_init>
	sei(); 
 3b8:	78 94       	sei
	setMachineMode();
 3ba:	b0 de       	rcall	.-672    	; 0x11c <setMachineMode>
	networkScan();
 3bc:	c8 de       	rcall	.-624    	; 0x14e <networkScan>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	08 95       	ret

000003c4 <malloc>:
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	91 05       	cpc	r25, r1
 3cc:	10 f4       	brcc	.+4      	; 0x3d2 <malloc+0xe>
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	e0 91 a7 05 	lds	r30, 0x05A7
 3d6:	f0 91 a8 05 	lds	r31, 0x05A8
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	a0 e0       	ldi	r26, 0x00	; 0
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	30 97       	sbiw	r30, 0x00	; 0
 3e4:	39 f1       	breq	.+78     	; 0x434 <malloc+0x70>
 3e6:	40 81       	ld	r20, Z
 3e8:	51 81       	ldd	r21, Z+1	; 0x01
 3ea:	48 17       	cp	r20, r24
 3ec:	59 07       	cpc	r21, r25
 3ee:	b8 f0       	brcs	.+46     	; 0x41e <malloc+0x5a>
 3f0:	48 17       	cp	r20, r24
 3f2:	59 07       	cpc	r21, r25
 3f4:	71 f4       	brne	.+28     	; 0x412 <malloc+0x4e>
 3f6:	82 81       	ldd	r24, Z+2	; 0x02
 3f8:	93 81       	ldd	r25, Z+3	; 0x03
 3fa:	10 97       	sbiw	r26, 0x00	; 0
 3fc:	29 f0       	breq	.+10     	; 0x408 <malloc+0x44>
 3fe:	13 96       	adiw	r26, 0x03	; 3
 400:	9c 93       	st	X, r25
 402:	8e 93       	st	-X, r24
 404:	12 97       	sbiw	r26, 0x02	; 2
 406:	2c c0       	rjmp	.+88     	; 0x460 <malloc+0x9c>
 408:	90 93 a8 05 	sts	0x05A8, r25
 40c:	80 93 a7 05 	sts	0x05A7, r24
 410:	27 c0       	rjmp	.+78     	; 0x460 <malloc+0x9c>
 412:	21 15       	cp	r18, r1
 414:	31 05       	cpc	r19, r1
 416:	31 f0       	breq	.+12     	; 0x424 <malloc+0x60>
 418:	42 17       	cp	r20, r18
 41a:	53 07       	cpc	r21, r19
 41c:	18 f0       	brcs	.+6      	; 0x424 <malloc+0x60>
 41e:	a9 01       	movw	r20, r18
 420:	db 01       	movw	r26, r22
 422:	01 c0       	rjmp	.+2      	; 0x426 <malloc+0x62>
 424:	ef 01       	movw	r28, r30
 426:	9a 01       	movw	r18, r20
 428:	bd 01       	movw	r22, r26
 42a:	df 01       	movw	r26, r30
 42c:	02 80       	ldd	r0, Z+2	; 0x02
 42e:	f3 81       	ldd	r31, Z+3	; 0x03
 430:	e0 2d       	mov	r30, r0
 432:	d7 cf       	rjmp	.-82     	; 0x3e2 <malloc+0x1e>
 434:	21 15       	cp	r18, r1
 436:	31 05       	cpc	r19, r1
 438:	f9 f0       	breq	.+62     	; 0x478 <malloc+0xb4>
 43a:	28 1b       	sub	r18, r24
 43c:	39 0b       	sbc	r19, r25
 43e:	24 30       	cpi	r18, 0x04	; 4
 440:	31 05       	cpc	r19, r1
 442:	80 f4       	brcc	.+32     	; 0x464 <malloc+0xa0>
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	9b 81       	ldd	r25, Y+3	; 0x03
 448:	61 15       	cp	r22, r1
 44a:	71 05       	cpc	r23, r1
 44c:	21 f0       	breq	.+8      	; 0x456 <malloc+0x92>
 44e:	fb 01       	movw	r30, r22
 450:	93 83       	std	Z+3, r25	; 0x03
 452:	82 83       	std	Z+2, r24	; 0x02
 454:	04 c0       	rjmp	.+8      	; 0x45e <malloc+0x9a>
 456:	90 93 a8 05 	sts	0x05A8, r25
 45a:	80 93 a7 05 	sts	0x05A7, r24
 45e:	fe 01       	movw	r30, r28
 460:	32 96       	adiw	r30, 0x02	; 2
 462:	44 c0       	rjmp	.+136    	; 0x4ec <malloc+0x128>
 464:	fe 01       	movw	r30, r28
 466:	e2 0f       	add	r30, r18
 468:	f3 1f       	adc	r31, r19
 46a:	81 93       	st	Z+, r24
 46c:	91 93       	st	Z+, r25
 46e:	22 50       	subi	r18, 0x02	; 2
 470:	31 09       	sbc	r19, r1
 472:	39 83       	std	Y+1, r19	; 0x01
 474:	28 83       	st	Y, r18
 476:	3a c0       	rjmp	.+116    	; 0x4ec <malloc+0x128>
 478:	20 91 a5 05 	lds	r18, 0x05A5
 47c:	30 91 a6 05 	lds	r19, 0x05A6
 480:	23 2b       	or	r18, r19
 482:	41 f4       	brne	.+16     	; 0x494 <malloc+0xd0>
 484:	20 91 02 02 	lds	r18, 0x0202
 488:	30 91 03 02 	lds	r19, 0x0203
 48c:	30 93 a6 05 	sts	0x05A6, r19
 490:	20 93 a5 05 	sts	0x05A5, r18
 494:	20 91 00 02 	lds	r18, 0x0200
 498:	30 91 01 02 	lds	r19, 0x0201
 49c:	21 15       	cp	r18, r1
 49e:	31 05       	cpc	r19, r1
 4a0:	41 f4       	brne	.+16     	; 0x4b2 <malloc+0xee>
 4a2:	2d b7       	in	r18, 0x3d	; 61
 4a4:	3e b7       	in	r19, 0x3e	; 62
 4a6:	40 91 04 02 	lds	r20, 0x0204
 4aa:	50 91 05 02 	lds	r21, 0x0205
 4ae:	24 1b       	sub	r18, r20
 4b0:	35 0b       	sbc	r19, r21
 4b2:	e0 91 a5 05 	lds	r30, 0x05A5
 4b6:	f0 91 a6 05 	lds	r31, 0x05A6
 4ba:	e2 17       	cp	r30, r18
 4bc:	f3 07       	cpc	r31, r19
 4be:	a0 f4       	brcc	.+40     	; 0x4e8 <malloc+0x124>
 4c0:	2e 1b       	sub	r18, r30
 4c2:	3f 0b       	sbc	r19, r31
 4c4:	28 17       	cp	r18, r24
 4c6:	39 07       	cpc	r19, r25
 4c8:	78 f0       	brcs	.+30     	; 0x4e8 <malloc+0x124>
 4ca:	ac 01       	movw	r20, r24
 4cc:	4e 5f       	subi	r20, 0xFE	; 254
 4ce:	5f 4f       	sbci	r21, 0xFF	; 255
 4d0:	24 17       	cp	r18, r20
 4d2:	35 07       	cpc	r19, r21
 4d4:	48 f0       	brcs	.+18     	; 0x4e8 <malloc+0x124>
 4d6:	4e 0f       	add	r20, r30
 4d8:	5f 1f       	adc	r21, r31
 4da:	50 93 a6 05 	sts	0x05A6, r21
 4de:	40 93 a5 05 	sts	0x05A5, r20
 4e2:	81 93       	st	Z+, r24
 4e4:	91 93       	st	Z+, r25
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <malloc+0x128>
 4e8:	e0 e0       	ldi	r30, 0x00	; 0
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	cf 01       	movw	r24, r30
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <free>:
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	00 97       	sbiw	r24, 0x00	; 0
 4fa:	09 f4       	brne	.+2      	; 0x4fe <free+0xa>
 4fc:	87 c0       	rjmp	.+270    	; 0x60c <free+0x118>
 4fe:	fc 01       	movw	r30, r24
 500:	32 97       	sbiw	r30, 0x02	; 2
 502:	13 82       	std	Z+3, r1	; 0x03
 504:	12 82       	std	Z+2, r1	; 0x02
 506:	c0 91 a7 05 	lds	r28, 0x05A7
 50a:	d0 91 a8 05 	lds	r29, 0x05A8
 50e:	20 97       	sbiw	r28, 0x00	; 0
 510:	81 f4       	brne	.+32     	; 0x532 <free+0x3e>
 512:	20 81       	ld	r18, Z
 514:	31 81       	ldd	r19, Z+1	; 0x01
 516:	28 0f       	add	r18, r24
 518:	39 1f       	adc	r19, r25
 51a:	80 91 a5 05 	lds	r24, 0x05A5
 51e:	90 91 a6 05 	lds	r25, 0x05A6
 522:	82 17       	cp	r24, r18
 524:	93 07       	cpc	r25, r19
 526:	79 f5       	brne	.+94     	; 0x586 <free+0x92>
 528:	f0 93 a6 05 	sts	0x05A6, r31
 52c:	e0 93 a5 05 	sts	0x05A5, r30
 530:	6d c0       	rjmp	.+218    	; 0x60c <free+0x118>
 532:	de 01       	movw	r26, r28
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	ae 17       	cp	r26, r30
 53a:	bf 07       	cpc	r27, r31
 53c:	50 f4       	brcc	.+20     	; 0x552 <free+0x5e>
 53e:	12 96       	adiw	r26, 0x02	; 2
 540:	4d 91       	ld	r20, X+
 542:	5c 91       	ld	r21, X
 544:	13 97       	sbiw	r26, 0x03	; 3
 546:	9d 01       	movw	r18, r26
 548:	41 15       	cp	r20, r1
 54a:	51 05       	cpc	r21, r1
 54c:	09 f1       	breq	.+66     	; 0x590 <free+0x9c>
 54e:	da 01       	movw	r26, r20
 550:	f3 cf       	rjmp	.-26     	; 0x538 <free+0x44>
 552:	b3 83       	std	Z+3, r27	; 0x03
 554:	a2 83       	std	Z+2, r26	; 0x02
 556:	40 81       	ld	r20, Z
 558:	51 81       	ldd	r21, Z+1	; 0x01
 55a:	84 0f       	add	r24, r20
 55c:	95 1f       	adc	r25, r21
 55e:	8a 17       	cp	r24, r26
 560:	9b 07       	cpc	r25, r27
 562:	71 f4       	brne	.+28     	; 0x580 <free+0x8c>
 564:	8d 91       	ld	r24, X+
 566:	9c 91       	ld	r25, X
 568:	11 97       	sbiw	r26, 0x01	; 1
 56a:	84 0f       	add	r24, r20
 56c:	95 1f       	adc	r25, r21
 56e:	02 96       	adiw	r24, 0x02	; 2
 570:	91 83       	std	Z+1, r25	; 0x01
 572:	80 83       	st	Z, r24
 574:	12 96       	adiw	r26, 0x02	; 2
 576:	8d 91       	ld	r24, X+
 578:	9c 91       	ld	r25, X
 57a:	13 97       	sbiw	r26, 0x03	; 3
 57c:	93 83       	std	Z+3, r25	; 0x03
 57e:	82 83       	std	Z+2, r24	; 0x02
 580:	21 15       	cp	r18, r1
 582:	31 05       	cpc	r19, r1
 584:	29 f4       	brne	.+10     	; 0x590 <free+0x9c>
 586:	f0 93 a8 05 	sts	0x05A8, r31
 58a:	e0 93 a7 05 	sts	0x05A7, r30
 58e:	3e c0       	rjmp	.+124    	; 0x60c <free+0x118>
 590:	d9 01       	movw	r26, r18
 592:	13 96       	adiw	r26, 0x03	; 3
 594:	fc 93       	st	X, r31
 596:	ee 93       	st	-X, r30
 598:	12 97       	sbiw	r26, 0x02	; 2
 59a:	4d 91       	ld	r20, X+
 59c:	5d 91       	ld	r21, X+
 59e:	a4 0f       	add	r26, r20
 5a0:	b5 1f       	adc	r27, r21
 5a2:	ea 17       	cp	r30, r26
 5a4:	fb 07       	cpc	r31, r27
 5a6:	79 f4       	brne	.+30     	; 0x5c6 <free+0xd2>
 5a8:	80 81       	ld	r24, Z
 5aa:	91 81       	ldd	r25, Z+1	; 0x01
 5ac:	84 0f       	add	r24, r20
 5ae:	95 1f       	adc	r25, r21
 5b0:	02 96       	adiw	r24, 0x02	; 2
 5b2:	d9 01       	movw	r26, r18
 5b4:	11 96       	adiw	r26, 0x01	; 1
 5b6:	9c 93       	st	X, r25
 5b8:	8e 93       	st	-X, r24
 5ba:	82 81       	ldd	r24, Z+2	; 0x02
 5bc:	93 81       	ldd	r25, Z+3	; 0x03
 5be:	13 96       	adiw	r26, 0x03	; 3
 5c0:	9c 93       	st	X, r25
 5c2:	8e 93       	st	-X, r24
 5c4:	12 97       	sbiw	r26, 0x02	; 2
 5c6:	e0 e0       	ldi	r30, 0x00	; 0
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	9b 81       	ldd	r25, Y+3	; 0x03
 5ce:	00 97       	sbiw	r24, 0x00	; 0
 5d0:	19 f0       	breq	.+6      	; 0x5d8 <free+0xe4>
 5d2:	fe 01       	movw	r30, r28
 5d4:	ec 01       	movw	r28, r24
 5d6:	f9 cf       	rjmp	.-14     	; 0x5ca <free+0xd6>
 5d8:	ce 01       	movw	r24, r28
 5da:	02 96       	adiw	r24, 0x02	; 2
 5dc:	28 81       	ld	r18, Y
 5de:	39 81       	ldd	r19, Y+1	; 0x01
 5e0:	82 0f       	add	r24, r18
 5e2:	93 1f       	adc	r25, r19
 5e4:	20 91 a5 05 	lds	r18, 0x05A5
 5e8:	30 91 a6 05 	lds	r19, 0x05A6
 5ec:	28 17       	cp	r18, r24
 5ee:	39 07       	cpc	r19, r25
 5f0:	69 f4       	brne	.+26     	; 0x60c <free+0x118>
 5f2:	30 97       	sbiw	r30, 0x00	; 0
 5f4:	29 f4       	brne	.+10     	; 0x600 <free+0x10c>
 5f6:	10 92 a8 05 	sts	0x05A8, r1
 5fa:	10 92 a7 05 	sts	0x05A7, r1
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <free+0x110>
 600:	13 82       	std	Z+3, r1	; 0x03
 602:	12 82       	std	Z+2, r1	; 0x02
 604:	d0 93 a6 05 	sts	0x05A6, r29
 608:	c0 93 a5 05 	sts	0x05A5, r28
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	08 95       	ret

00000612 <strcat>:
 612:	fb 01       	movw	r30, r22
 614:	dc 01       	movw	r26, r24
 616:	0d 90       	ld	r0, X+
 618:	00 20       	and	r0, r0
 61a:	e9 f7       	brne	.-6      	; 0x616 <strcat+0x4>
 61c:	11 97       	sbiw	r26, 0x01	; 1
 61e:	01 90       	ld	r0, Z+
 620:	0d 92       	st	X+, r0
 622:	00 20       	and	r0, r0
 624:	e1 f7       	brne	.-8      	; 0x61e <strcat+0xc>
 626:	08 95       	ret

00000628 <_exit>:
 628:	f8 94       	cli

0000062a <__stop_program>:
 62a:	ff cf       	rjmp	.-2      	; 0x62a <__stop_program>
