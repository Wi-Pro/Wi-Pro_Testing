
BasicTests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000001a4  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003db  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c6  00000000  00000000  0000067b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000276  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000078  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c3  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000cf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  68:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  6c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  70:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  74:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  7c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  80:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  84:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  88:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  8c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  90:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  94:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  98:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  9c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  a0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  a4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  a8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  ac:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  b0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  b4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  b8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  bc:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  c0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  c4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  c8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  cc:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  d0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  d4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  d8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  dc:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  e0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  f4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <main>:

#define F_CPU 8000000UL

int main(void)
{
	LEDInit();
  fc:	0e 94 ba 00 	call	0x174	; 0x174 <LEDInit>
	
    while(1)
    {
		ToggleRed(ON);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 be 00 	call	0x17c	; 0x17c <ToggleRed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	83 e2       	ldi	r24, 0x23	; 35
 10a:	94 ef       	ldi	r25, 0xF4	; 244
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x10>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x16>
 112:	00 00       	nop
		_delay_ms(250);
		ToggleYellow(ON);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 c4 00 	call	0x188	; 0x188 <ToggleYellow>
 11c:	83 e2       	ldi	r24, 0x23	; 35
 11e:	94 ef       	ldi	r25, 0xF4	; 244
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x24>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x2a>
 126:	00 00       	nop
		_delay_ms(250);
		ToggleGreen(ON);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 ca 00 	call	0x194	; 0x194 <ToggleGreen>
 130:	9f e9       	ldi	r25, 0x9F	; 159
 132:	26 e8       	ldi	r18, 0x86	; 134
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	91 50       	subi	r25, 0x01	; 1
 138:	20 40       	sbci	r18, 0x00	; 0
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x3a>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x44>
 140:	00 00       	nop
		_delay_ms(500);
		ToggleRed(OFF);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 be 00 	call	0x17c	; 0x17c <ToggleRed>
 14a:	83 e2       	ldi	r24, 0x23	; 35
 14c:	94 ef       	ldi	r25, 0xF4	; 244
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x52>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x58>
 154:	00 00       	nop
		_delay_ms(250);
		ToggleYellow(OFF);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 c4 00 	call	0x188	; 0x188 <ToggleYellow>
 15e:	83 e2       	ldi	r24, 0x23	; 35
 160:	94 ef       	ldi	r25, 0xF4	; 244
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x66>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x6c>
 168:	00 00       	nop
		_delay_ms(250);
		ToggleGreen(OFF);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 ca 00 	call	0x194	; 0x194 <ToggleGreen>
 172:	c6 cf       	rjmp	.-116    	; 0x100 <main+0x4>

00000174 <LEDInit>:
#include <stdio.h>

void LEDInit()
{
	//Sets pins 0, 1, and 2 as outputs
	LED_DDR |= 0x07; 
 174:	83 b3       	in	r24, 0x13	; 19
 176:	87 60       	ori	r24, 0x07	; 7
 178:	83 bb       	out	0x13, r24	; 19
 17a:	08 95       	ret

0000017c <ToggleRed>:
}

void ToggleRed(int val)
{
	if(val == ON)
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	11 f4       	brne	.+4      	; 0x184 <ToggleRed+0x8>
		LED_REG |= (1<<RED_LED);
 180:	a2 9a       	sbi	0x14, 2	; 20
 182:	08 95       	ret
	else
		LED_REG &= ~(1<<RED_LED);
 184:	a2 98       	cbi	0x14, 2	; 20
 186:	08 95       	ret

00000188 <ToggleYellow>:
}

void ToggleYellow(int val)
{
	if(val == ON)
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	11 f4       	brne	.+4      	; 0x190 <ToggleYellow+0x8>
		LED_REG |= (1<<YELLOW_LED);
 18c:	a1 9a       	sbi	0x14, 1	; 20
 18e:	08 95       	ret
	else
		LED_REG &= ~(1<<YELLOW_LED);
 190:	a1 98       	cbi	0x14, 1	; 20
 192:	08 95       	ret

00000194 <ToggleGreen>:
}

void ToggleGreen(int val)
{
	if(val == ON)
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	11 f4       	brne	.+4      	; 0x19c <ToggleGreen+0x8>
		LED_REG |= (1<<GREEN_LED);
 198:	a0 9a       	sbi	0x14, 0	; 20
 19a:	08 95       	ret
	else
		LED_REG &= ~(1<<GREEN_LED);
 19c:	a0 98       	cbi	0x14, 0	; 20
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
