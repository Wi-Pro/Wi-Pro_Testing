
Communications.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000516  00800200  000018c0  00001954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018d  00800716  00800716  00001e6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000330  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000039b0  00000000  00000000  000021f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f55  00000000  00000000  00005ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d17  00000000  00000000  00006afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bd8  00000000  00000000  00008814  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009a5  00000000  00000000  000093ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002a58  00000000  00000000  00009d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c8  00000000  00000000  0000c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8d c0       	rjmp	.+282    	; 0x120 <__bad_interrupt>
       6:	00 00       	nop
       8:	8b c0       	rjmp	.+278    	; 0x120 <__bad_interrupt>
       a:	00 00       	nop
       c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c0       	rjmp	.+250    	; 0x120 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c0       	rjmp	.+246    	; 0x120 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c0       	rjmp	.+242    	; 0x120 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c0       	rjmp	.+238    	; 0x120 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c0       	rjmp	.+234    	; 0x120 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c0       	rjmp	.+230    	; 0x120 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c0       	rjmp	.+226    	; 0x120 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c0       	rjmp	.+222    	; 0x120 <__bad_interrupt>
      42:	00 00       	nop
      44:	6d c0       	rjmp	.+218    	; 0x120 <__bad_interrupt>
      46:	00 00       	nop
      48:	6b c0       	rjmp	.+214    	; 0x120 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c0       	rjmp	.+210    	; 0x120 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c1       	rjmp	.+738    	; 0x334 <__vector_20>
      52:	00 00       	nop
      54:	65 c0       	rjmp	.+202    	; 0x120 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c0       	rjmp	.+198    	; 0x120 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c0       	rjmp	.+194    	; 0x120 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c0       	rjmp	.+190    	; 0x120 <__bad_interrupt>
      62:	00 00       	nop
      64:	5d c0       	rjmp	.+186    	; 0x120 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c0       	rjmp	.+182    	; 0x120 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	59 c0       	rjmp	.+178    	; 0x120 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c0       	rjmp	.+174    	; 0x120 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c0       	rjmp	.+170    	; 0x120 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c0       	rjmp	.+162    	; 0x120 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c0       	rjmp	.+158    	; 0x120 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c0       	rjmp	.+154    	; 0x120 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c0       	rjmp	.+150    	; 0x120 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	49 c0       	rjmp	.+146    	; 0x120 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ed c7       	rjmp	.+4058   	; 0x106c <__vector_36>
      92:	00 00       	nop
      94:	45 c0       	rjmp	.+138    	; 0x120 <__bad_interrupt>
      96:	00 00       	nop
      98:	43 c0       	rjmp	.+134    	; 0x120 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	41 c0       	rjmp	.+130    	; 0x120 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3f c0       	rjmp	.+126    	; 0x120 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3d c0       	rjmp	.+122    	; 0x120 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3b c0       	rjmp	.+118    	; 0x120 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	39 c0       	rjmp	.+114    	; 0x120 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	37 c0       	rjmp	.+110    	; 0x120 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	35 c0       	rjmp	.+106    	; 0x120 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	33 c0       	rjmp	.+102    	; 0x120 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	31 c0       	rjmp	.+98     	; 0x120 <__bad_interrupt>
      be:	00 00       	nop
      c0:	2f c0       	rjmp	.+94     	; 0x120 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2d c0       	rjmp	.+90     	; 0x120 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2b c0       	rjmp	.+86     	; 0x120 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	29 c0       	rjmp	.+82     	; 0x120 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	27 c0       	rjmp	.+78     	; 0x120 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	25 c0       	rjmp	.+74     	; 0x120 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	23 c0       	rjmp	.+70     	; 0x120 <__bad_interrupt>
      da:	00 00       	nop
      dc:	21 c0       	rjmp	.+66     	; 0x120 <__bad_interrupt>
      de:	00 00       	nop
      e0:	1f c0       	rjmp	.+62     	; 0x120 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	17 e0       	ldi	r17, 0x07	; 7
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e0 ec       	ldi	r30, 0xC0	; 192
      f8:	f8 e1       	ldi	r31, 0x18	; 24
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a6 31       	cpi	r26, 0x16	; 22
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	28 e0       	ldi	r18, 0x08	; 8
     10c:	a6 e1       	ldi	r26, 0x16	; 22
     10e:	b7 e0       	ldi	r27, 0x07	; 7
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a3 3a       	cpi	r26, 0xA3	; 163
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	3d d1       	rcall	.+634    	; 0x396 <main>
     11c:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <_exit>

00000120 <__bad_interrupt>:
     120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <clearFlags>:
	RAMPrint(WIFI_QSTRING_ADDRESS, qLength);
	//RAMRead(WIFI_QSTRING_ADDRESS, qLength, buffer);
	SendData(WIFI_QSTRING_ADDRESS, qLength, 1);
	memset(filepath, 0x00, 100);
	printf("Sent!");
}
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	80 91 7a 07 	lds	r24, 0x077A
     12a:	88 23       	and	r24, r24
     12c:	91 f1       	breq	.+100    	; 0x192 <clearFlags+0x70>
     12e:	c6 e1       	ldi	r28, 0x16	; 22
     130:	d7 e0       	ldi	r29, 0x07	; 7
     132:	85 e0       	ldi	r24, 0x05	; 5
     134:	e6 e1       	ldi	r30, 0x16	; 22
     136:	f2 e0       	ldi	r31, 0x02	; 2
     138:	de 01       	movw	r26, r28
     13a:	01 90       	ld	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	8a 95       	dec	r24
     140:	e1 f7       	brne	.-8      	; 0x13a <clearFlags+0x18>
     142:	de 01       	movw	r26, r28
     144:	0d 90       	ld	r0, X+
     146:	00 20       	and	r0, r0
     148:	e9 f7       	brne	.-6      	; 0x144 <clearFlags+0x22>
     14a:	11 97       	sbiw	r26, 0x01	; 1
     14c:	85 e1       	ldi	r24, 0x15	; 21
     14e:	eb e1       	ldi	r30, 0x1B	; 27
     150:	f2 e0       	ldi	r31, 0x02	; 2
     152:	01 90       	ld	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	8a 95       	dec	r24
     158:	e1 f7       	brne	.-8      	; 0x152 <clearFlags+0x30>
     15a:	de 01       	movw	r26, r28
     15c:	0d 90       	ld	r0, X+
     15e:	00 20       	and	r0, r0
     160:	e9 f7       	brne	.-6      	; 0x15c <clearFlags+0x3a>
     162:	11 97       	sbiw	r26, 0x01	; 1
     164:	82 e1       	ldi	r24, 0x12	; 18
     166:	e0 e3       	ldi	r30, 0x30	; 48
     168:	f2 e0       	ldi	r31, 0x02	; 2
     16a:	01 90       	ld	r0, Z+
     16c:	0d 92       	st	X+, r0
     16e:	8a 95       	dec	r24
     170:	e1 f7       	brne	.-8      	; 0x16a <clearFlags+0x48>
     172:	09 90       	ld	r0, Y+
     174:	00 20       	and	r0, r0
     176:	e9 f7       	brne	.-6      	; 0x172 <clearFlags+0x50>
     178:	de 01       	movw	r26, r28
     17a:	11 97       	sbiw	r26, 0x01	; 1
     17c:	83 e1       	ldi	r24, 0x13	; 19
     17e:	e2 e4       	ldi	r30, 0x42	; 66
     180:	f2 e0       	ldi	r31, 0x02	; 2
     182:	01 90       	ld	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	8a 95       	dec	r24
     188:	e1 f7       	brne	.-8      	; 0x182 <clearFlags+0x60>
     18a:	86 e1       	ldi	r24, 0x16	; 22
     18c:	97 e0       	ldi	r25, 0x07	; 7
     18e:	76 d1       	rcall	.+748    	; 0x47c <updateFileEthernet>
     190:	35 c0       	rjmp	.+106    	; 0x1fc <clearFlags+0xda>
     192:	80 91 7b 07 	lds	r24, 0x077B
     196:	88 23       	and	r24, r24
     198:	89 f1       	breq	.+98     	; 0x1fc <clearFlags+0xda>
     19a:	c6 e1       	ldi	r28, 0x16	; 22
     19c:	d7 e0       	ldi	r29, 0x07	; 7
     19e:	89 e0       	ldi	r24, 0x09	; 9
     1a0:	e5 e5       	ldi	r30, 0x55	; 85
     1a2:	f2 e0       	ldi	r31, 0x02	; 2
     1a4:	de 01       	movw	r26, r28
     1a6:	01 90       	ld	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	8a 95       	dec	r24
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <clearFlags+0x84>
     1ae:	de 01       	movw	r26, r28
     1b0:	0d 90       	ld	r0, X+
     1b2:	00 20       	and	r0, r0
     1b4:	e9 f7       	brne	.-6      	; 0x1b0 <clearFlags+0x8e>
     1b6:	11 97       	sbiw	r26, 0x01	; 1
     1b8:	85 e1       	ldi	r24, 0x15	; 21
     1ba:	eb e1       	ldi	r30, 0x1B	; 27
     1bc:	f2 e0       	ldi	r31, 0x02	; 2
     1be:	01 90       	ld	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	8a 95       	dec	r24
     1c4:	e1 f7       	brne	.-8      	; 0x1be <clearFlags+0x9c>
     1c6:	de 01       	movw	r26, r28
     1c8:	0d 90       	ld	r0, X+
     1ca:	00 20       	and	r0, r0
     1cc:	e9 f7       	brne	.-6      	; 0x1c8 <clearFlags+0xa6>
     1ce:	11 97       	sbiw	r26, 0x01	; 1
     1d0:	82 e1       	ldi	r24, 0x12	; 18
     1d2:	e0 e3       	ldi	r30, 0x30	; 48
     1d4:	f2 e0       	ldi	r31, 0x02	; 2
     1d6:	01 90       	ld	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	8a 95       	dec	r24
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <clearFlags+0xb4>
     1de:	09 90       	ld	r0, Y+
     1e0:	00 20       	and	r0, r0
     1e2:	e9 f7       	brne	.-6      	; 0x1de <clearFlags+0xbc>
     1e4:	de 01       	movw	r26, r28
     1e6:	11 97       	sbiw	r26, 0x01	; 1
     1e8:	83 e1       	ldi	r24, 0x13	; 19
     1ea:	e2 e4       	ldi	r30, 0x42	; 66
     1ec:	f2 e0       	ldi	r31, 0x02	; 2
     1ee:	01 90       	ld	r0, Z+
     1f0:	0d 92       	st	X+, r0
     1f2:	8a 95       	dec	r24
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <clearFlags+0xcc>
     1f6:	86 e1       	ldi	r24, 0x16	; 22
     1f8:	97 e0       	ldi	r25, 0x07	; 7
     1fa:	73 d5       	rcall	.+2790   	; 0xce2 <updateFileWifi>
     1fc:	84 e6       	ldi	r24, 0x64	; 100
     1fe:	e6 e1       	ldi	r30, 0x16	; 22
     200:	f7 e0       	ldi	r31, 0x07	; 7
     202:	df 01       	movw	r26, r30
     204:	1d 92       	st	X+, r1
     206:	8a 95       	dec	r24
     208:	e9 f7       	brne	.-6      	; 0x204 <clearFlags+0xe2>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <getHexFile>:

int getHexFile()
{
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
	Flags[WIFI] = 1; 
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	80 93 7b 07 	sts	0x077B, r24
	if(Flags[WIFI])
	{
		strcpy(filepath, URL);
     21e:	85 e1       	ldi	r24, 0x15	; 21
     220:	eb e1       	ldi	r30, 0x1B	; 27
     222:	f2 e0       	ldi	r31, 0x02	; 2
     224:	a6 e1       	ldi	r26, 0x16	; 22
     226:	b7 e0       	ldi	r27, 0x07	; 7
     228:	01 90       	ld	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	8a 95       	dec	r24
     22e:	e1 f7       	brne	.-8      	; 0x228 <getHexFile+0x14>
		strcat(filepath, HEX_FILE);
     230:	a6 e1       	ldi	r26, 0x16	; 22
     232:	b7 e0       	ldi	r27, 0x07	; 7
     234:	0d 90       	ld	r0, X+
     236:	00 20       	and	r0, r0
     238:	e9 f7       	brne	.-6      	; 0x234 <getHexFile+0x20>
     23a:	11 97       	sbiw	r26, 0x01	; 1
     23c:	84 e2       	ldi	r24, 0x24	; 36
     23e:	ec e9       	ldi	r30, 0x9C	; 156
     240:	f2 e0       	ldi	r31, 0x02	; 2
     242:	01 90       	ld	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	8a 95       	dec	r24
     248:	e1 f7       	brne	.-8      	; 0x242 <getHexFile+0x2e>
		//setTestPrint(1);
		printf("Compress Flag Set!");
     24a:	80 ec       	ldi	r24, 0xC0	; 192
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	9f 93       	push	r25
     250:	8f 93       	push	r24
     252:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>
		setCompressFlag(1);
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	7f d5       	rcall	.+2814   	; 0xd5a <setCompressFlag>
		getFileWifi(filepath, 1, HEX_FILE_ADDRESS, 1);
     25c:	01 e0       	ldi	r16, 0x01	; 1
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	a9 01       	movw	r20, r18
     266:	61 e0       	ldi	r22, 0x01	; 1
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	86 e1       	ldi	r24, 0x16	; 22
     26c:	97 e0       	ldi	r25, 0x07	; 7
     26e:	bf d4       	rcall	.+2430   	; 0xbee <getFileWifi>
		//setCompressFlag(0); 
		RAMPrint(HEX_FILE_ADDRESS, 1045);
     270:	45 e1       	ldi	r20, 0x15	; 21
     272:	54 e0       	ldi	r21, 0x04	; 4
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	cb 01       	movw	r24, r22
     27a:	28 d4       	rcall	.+2128   	; 0xacc <RAMPrint>
		//printf("Hex File Downloaded!\n");
	}
	
	return 1; 
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
}
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	08 95       	ret

0000028a <getFlagStatus>:

int getFlagStatus()
{
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
	//Testing 
	TIMSK1 &= ~(1 << TOIE1);
     292:	ef e6       	ldi	r30, 0x6F	; 111
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	8e 7f       	andi	r24, 0xFE	; 254
     29a:	80 83       	st	Z, r24
	Flags[ETHERNET] = 1; 
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 7a 07 	sts	0x077A, r24
	Flags[WIFI] = 0; 
     2a2:	10 92 7b 07 	sts	0x077B, r1
	
	if(Flags[ETHERNET]){
		getFileEthernet(FLAG_FILE, 1, STATUS_FLAG_ADDRESS, 3); 
     2a6:	03 e0       	ldi	r16, 0x03	; 3
     2a8:	10 e0       	ldi	r17, 0x00	; 0
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e3       	ldi	r19, 0x30	; 48
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	83 ed       	ldi	r24, 0xD3	; 211
     2b8:	92 e0       	ldi	r25, 0x02	; 2
     2ba:	78 d0       	rcall	.+240    	; 0x3ac <getFileEthernet>
		printf("Ram Print: ");
     2bc:	88 ef       	ldi	r24, 0xF8	; 248
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	9f 93       	push	r25
     2c2:	8f 93       	push	r24
     2c4:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>
		RAMPrint(STATUS_FLAG_ADDRESS-10, 20);
     2c8:	44 e1       	ldi	r20, 0x14	; 20
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	66 ef       	ldi	r22, 0xF6	; 246
     2ce:	7f e2       	ldi	r23, 0x2F	; 47
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fb d3       	rcall	.+2038   	; 0xacc <RAMPrint>
		printf("\n");
     2d6:	8a e0       	ldi	r24, 0x0A	; 10
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 ca 09 	call	0x1394	; 0x1394 <putchar>
		//RAMRead(STATUS_FLAG_ADDRESS, 1, Flags[PROGRAM]); 
		//RAMRead(STATUS_FLAG_ADDRESS + 1, 1, Flags[PROGRAM + 1]); 
		//RAMRead(STATUS_FLAG_ADDRESS + 2, 1, Flags[PROGRAM + 2]); 
		
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e3       	ldi	r25, 0x30	; 48
     2e2:	50 d4       	rcall	.+2208   	; 0xb84 <RAMReadByte>
     2e4:	cc e7       	ldi	r28, 0x7C	; 124
     2e6:	d7 e0       	ldi	r29, 0x07	; 7
     2e8:	8f 70       	andi	r24, 0x0F	; 15
     2ea:	88 83       	st	Y, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e3       	ldi	r25, 0x30	; 48
     2f0:	49 d4       	rcall	.+2194   	; 0xb84 <RAMReadByte>
     2f2:	8f 70       	andi	r24, 0x0F	; 15
     2f4:	80 93 7d 07 	sts	0x077D, r24
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F); 
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	90 e3       	ldi	r25, 0x30	; 48
     2fc:	43 d4       	rcall	.+2182   	; 0xb84 <RAMReadByte>
     2fe:	8f 70       	andi	r24, 0x0F	; 15
     300:	80 93 7e 07 	sts	0x077E, r24
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F);
		
	}
	memset(filepath, 0x00, 100); 
     304:	84 e6       	ldi	r24, 0x64	; 100
     306:	e6 e1       	ldi	r30, 0x16	; 22
     308:	f7 e0       	ldi	r31, 0x07	; 7
     30a:	df 01       	movw	r26, r30
     30c:	1d 92       	st	X+, r1
     30e:	8a 95       	dec	r24
     310:	e9 f7       	brne	.-6      	; 0x30c <getFlagStatus+0x82>
	//Perform actions based on flags 
	if(Flags[PROGRAM] == 0x01)
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	88 81       	ld	r24, Y
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	09 f4       	brne	.+2      	; 0x31e <getFlagStatus+0x94>
		//printf("Program!\n");
		//PORTD &= ~(1<<CTS);
		//wifiDriverInit(); 
		//PORTD |= (1<<CTS); 
		//_delay_ms(2000); 
		getHexFile(); 
     31c:	7b df       	rcall	.-266    	; 0x214 <getHexFile>
		//printf("Network Connect!\n");
		//networkConnect("Wi-Pro", "brightshoe902"); 
		//getFileEthernet()
	}
	//_delay_ms(500);
	clearFlags(); 
     31e:	01 df       	rcall	.-510    	; 0x122 <clearFlags>
	TIMSK1 |= (1 << TOIE1);
     320:	ef e6       	ldi	r30, 0x6F	; 111
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	81 60       	ori	r24, 0x01	; 1
     328:	80 83       	st	Z, r24
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	08 95       	ret

00000334 <__vector_20>:



//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
     33e:	0b b6       	in	r0, 0x3b	; 59
     340:	0f 92       	push	r0
     342:	2f 93       	push	r18
     344:	3f 93       	push	r19
     346:	4f 93       	push	r20
     348:	5f 93       	push	r21
     34a:	6f 93       	push	r22
     34c:	7f 93       	push	r23
     34e:	8f 93       	push	r24
     350:	9f 93       	push	r25
     352:	af 93       	push	r26
     354:	bf 93       	push	r27
     356:	ef 93       	push	r30
     358:	ff 93       	push	r31
	cli(); 
     35a:	f8 94       	cli
	printf("Flag Status\n");
     35c:	84 e0       	ldi	r24, 0x04	; 4
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	0e 94 cf 09 	call	0x139e	; 0x139e <puts>
	getFlagStatus(); 
     364:	92 df       	rcall	.-220    	; 0x28a <getFlagStatus>
	TCNT1L = 0x00;
     366:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
     36a:	10 92 85 00 	sts	0x0085, r1
	sei();  
     36e:	78 94       	sei
}
     370:	ff 91       	pop	r31
     372:	ef 91       	pop	r30
     374:	bf 91       	pop	r27
     376:	af 91       	pop	r26
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	7f 91       	pop	r23
     37e:	6f 91       	pop	r22
     380:	5f 91       	pop	r21
     382:	4f 91       	pop	r20
     384:	3f 91       	pop	r19
     386:	2f 91       	pop	r18
     388:	0f 90       	pop	r0
     38a:	0b be       	out	0x3b, r0	; 59
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <main>:

int main(void)
{
	char buffer[100];
	char* message = "What the fuck is this shit";
	uart_init();
     396:	eb d4       	rcall	.+2518   	; 0xd6e <uart_init>
	uart0_init(); 
     398:	40 d3       	rcall	.+1664   	; 0xa1a <uart0_init>
	SPI_Init();  
     39a:	e7 d3       	rcall	.+1998   	; 0xb6a <SPI_Init>
	sei(); 
     39c:	78 94       	sei
	//RAMRead(0, 30, buffer);
	
	//ethernetInit();
	//printf("ethernetInit Done");
	//pollingInit();
	wifiInit(); 
     39e:	fa d3       	rcall	.+2036   	; 0xb94 <wifiInit>
	setMachineMode(); 
     3a0:	fb d3       	rcall	.+2038   	; 0xb98 <setMachineMode>
	networkScan(); 
     3a2:	15 d4       	rcall	.+2090   	; 0xbce <networkScan>
	

	printf("Done!\n");
     3a4:	80 e1       	ldi	r24, 0x10	; 16
     3a6:	93 e0       	ldi	r25, 0x03	; 3
     3a8:	fa d7       	rcall	.+4084   	; 0x139e <puts>
     3aa:	ff cf       	rjmp	.-2      	; 0x3aa <main+0x14>

000003ac <getFileEthernet>:
	MemoryInit(); 
}

//Sends a filepath and retrieves the data contained in the file 
char* getFileEthernet(char* filepath, int externRAM, uint32_t RAMAddress, uint16_t receiveLength)
{ 
     3ac:	8f 92       	push	r8
     3ae:	9f 92       	push	r9
     3b0:	af 92       	push	r10
     3b2:	bf 92       	push	r11
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	4b 01       	movw	r8, r22
     3c6:	69 01       	movw	r12, r18
     3c8:	7a 01       	movw	r14, r20
     3ca:	58 01       	movw	r10, r16
	char* receiveData; 
	strncpy(httpBuff, "GET ", 4);
     3cc:	cf e7       	ldi	r28, 0x7F	; 127
     3ce:	d7 e0       	ldi	r29, 0x07	; 7
     3d0:	47 e4       	ldi	r20, 0x47	; 71
     3d2:	55 e4       	ldi	r21, 0x45	; 69
     3d4:	64 e5       	ldi	r22, 0x54	; 84
     3d6:	70 e2       	ldi	r23, 0x20	; 32
     3d8:	48 83       	st	Y, r20
     3da:	59 83       	std	Y+1, r21	; 0x01
     3dc:	6a 83       	std	Y+2, r22	; 0x02
     3de:	7b 83       	std	Y+3, r23	; 0x03
	strcat(httpBuff, URL); 
     3e0:	de 01       	movw	r26, r28
     3e2:	0d 90       	ld	r0, X+
     3e4:	00 20       	and	r0, r0
     3e6:	e9 f7       	brne	.-6      	; 0x3e2 <getFileEthernet+0x36>
     3e8:	11 97       	sbiw	r26, 0x01	; 1
     3ea:	25 e1       	ldi	r18, 0x15	; 21
     3ec:	eb e1       	ldi	r30, 0x1B	; 27
     3ee:	f2 e0       	ldi	r31, 0x02	; 2
     3f0:	01 90       	ld	r0, Z+
     3f2:	0d 92       	st	X+, r0
     3f4:	2a 95       	dec	r18
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <getFileEthernet+0x44>
	strcat(httpBuff, filepath);
     3f8:	bc 01       	movw	r22, r24
     3fa:	ce 01       	movw	r24, r28
     3fc:	76 d7       	rcall	.+3820   	; 0x12ea <strcat>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     3fe:	de 01       	movw	r26, r28
     400:	0d 90       	ld	r0, X+
     402:	00 20       	and	r0, r0
     404:	e9 f7       	brne	.-6      	; 0x400 <getFileEthernet+0x54>
     406:	11 97       	sbiw	r26, 0x01	; 1
     408:	82 e2       	ldi	r24, 0x22	; 34
     40a:	e6 e1       	ldi	r30, 0x16	; 22
     40c:	f3 e0       	ldi	r31, 0x03	; 3
     40e:	01 90       	ld	r0, Z+
     410:	0d 92       	st	X+, r0
     412:	8a 95       	dec	r24
     414:	e1 f7       	brne	.-8      	; 0x40e <getFileEthernet+0x62>
	printf("Sent: %s\n", httpBuff);
     416:	df 93       	push	r29
     418:	cf 93       	push	r28
     41a:	88 e3       	ldi	r24, 0x38	; 56
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	9f 93       	push	r25
     420:	8f 93       	push	r24
     422:	a7 d7       	rcall	.+3918   	; 0x1372 <printf>
	//EnableEthernetInterrupt(); 
	SendData(httpBuff, strlen(httpBuff), 0);
     424:	fe 01       	movw	r30, r28
     426:	01 90       	ld	r0, Z+
     428:	00 20       	and	r0, r0
     42a:	e9 f7       	brne	.-6      	; 0x426 <getFileEthernet+0x7a>
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	bf 01       	movw	r22, r30
     430:	6f 57       	subi	r22, 0x7F	; 127
     432:	77 40       	sbci	r23, 0x07	; 7
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	ce 01       	movw	r24, r28
     43a:	2f d1       	rcall	.+606    	; 0x69a <SendData>
	ReceiveData(RAMAddress, receiveData, receiveLength, 1, externRAM);
     43c:	84 01       	movw	r16, r8
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	a5 01       	movw	r20, r10
     444:	a1 2c       	mov	r10, r1
     446:	b1 2c       	mov	r11, r1
     448:	b5 01       	movw	r22, r10
     44a:	c6 01       	movw	r24, r12
     44c:	28 d2       	rcall	.+1104   	; 0x89e <ReceiveData>
	memset(httpBuff, 0x00, 100); 
     44e:	84 e6       	ldi	r24, 0x64	; 100
     450:	fe 01       	movw	r30, r28
     452:	11 92       	st	Z+, r1
     454:	8a 95       	dec	r24
     456:	e9 f7       	brne	.-6      	; 0x452 <getFileEthernet+0xa6>
	return receiveData; 
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
}
     460:	c5 01       	movw	r24, r10
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	ff 90       	pop	r15
     46c:	ef 90       	pop	r14
     46e:	df 90       	pop	r13
     470:	cf 90       	pop	r12
     472:	bf 90       	pop	r11
     474:	af 90       	pop	r10
     476:	9f 90       	pop	r9
     478:	8f 90       	pop	r8
     47a:	08 95       	ret

0000047c <updateFileEthernet>:

void updateFileEthernet(char* filepath)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
     480:	bc 01       	movw	r22, r24
     482:	8f e7       	ldi	r24, 0x7F	; 127
     484:	97 e0       	ldi	r25, 0x07	; 7
     486:	3c d7       	rcall	.+3704   	; 0x1300 <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     488:	cf e7       	ldi	r28, 0x7F	; 127
     48a:	d7 e0       	ldi	r29, 0x07	; 7
     48c:	de 01       	movw	r26, r28
     48e:	0d 90       	ld	r0, X+
     490:	00 20       	and	r0, r0
     492:	e9 f7       	brne	.-6      	; 0x48e <updateFileEthernet+0x12>
     494:	11 97       	sbiw	r26, 0x01	; 1
     496:	82 e2       	ldi	r24, 0x22	; 34
     498:	e6 e1       	ldi	r30, 0x16	; 22
     49a:	f3 e0       	ldi	r31, 0x03	; 3
     49c:	01 90       	ld	r0, Z+
     49e:	0d 92       	st	X+, r0
     4a0:	8a 95       	dec	r24
     4a2:	e1 f7       	brne	.-8      	; 0x49c <updateFileEthernet+0x20>
	printf("%s", httpBuff); 
     4a4:	df 93       	push	r29
     4a6:	cf 93       	push	r28
     4a8:	83 e9       	ldi	r24, 0x93	; 147
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	9f 93       	push	r25
     4ae:	8f 93       	push	r24
     4b0:	60 d7       	rcall	.+3776   	; 0x1372 <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
     4b2:	fe 01       	movw	r30, r28
     4b4:	01 90       	ld	r0, Z+
     4b6:	00 20       	and	r0, r0
     4b8:	e9 f7       	brne	.-6      	; 0x4b4 <updateFileEthernet+0x38>
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	bf 01       	movw	r22, r30
     4be:	6f 57       	subi	r22, 0x7F	; 127
     4c0:	77 40       	sbci	r23, 0x07	; 7
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	ce 01       	movw	r24, r28
     4c8:	e8 d0       	rcall	.+464    	; 0x69a <SendData>
	memset(httpBuff, 0x00, 100); 
     4ca:	84 e6       	ldi	r24, 0x64	; 100
     4cc:	fe 01       	movw	r30, r28
     4ce:	11 92       	st	Z+, r1
     4d0:	8a 95       	dec	r24
     4d2:	e9 f7       	brne	.-6      	; 0x4ce <updateFileEthernet+0x52>
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <SPI_EthernetWrite>:
}

uint16_t ReceiveSize(void)
{
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}
     4e2:	74 98       	cbi	0x0e, 4	; 14
     4e4:	20 ef       	ldi	r18, 0xF0	; 240
     4e6:	2e bd       	out	0x2e, r18	; 46
     4e8:	0d b4       	in	r0, 0x2d	; 45
     4ea:	07 fe       	sbrs	r0, 7
     4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <SPI_EthernetWrite+0x6>
     4ee:	9e bd       	out	0x2e, r25	; 46
     4f0:	0d b4       	in	r0, 0x2d	; 45
     4f2:	07 fe       	sbrs	r0, 7
     4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <SPI_EthernetWrite+0xe>
     4f6:	8e bd       	out	0x2e, r24	; 46
     4f8:	0d b4       	in	r0, 0x2d	; 45
     4fa:	07 fe       	sbrs	r0, 7
     4fc:	fd cf       	rjmp	.-6      	; 0x4f8 <SPI_EthernetWrite+0x16>
     4fe:	6e bd       	out	0x2e, r22	; 46
     500:	0d b4       	in	r0, 0x2d	; 45
     502:	07 fe       	sbrs	r0, 7
     504:	fd cf       	rjmp	.-6      	; 0x500 <SPI_EthernetWrite+0x1e>
     506:	74 9a       	sbi	0x0e, 4	; 14
     508:	08 95       	ret

0000050a <SPI_EthernetRead>:
     50a:	74 98       	cbi	0x0e, 4	; 14
     50c:	2f e0       	ldi	r18, 0x0F	; 15
     50e:	2e bd       	out	0x2e, r18	; 46
     510:	0d b4       	in	r0, 0x2d	; 45
     512:	07 fe       	sbrs	r0, 7
     514:	fd cf       	rjmp	.-6      	; 0x510 <SPI_EthernetRead+0x6>
     516:	9e bd       	out	0x2e, r25	; 46
     518:	0d b4       	in	r0, 0x2d	; 45
     51a:	07 fe       	sbrs	r0, 7
     51c:	fd cf       	rjmp	.-6      	; 0x518 <SPI_EthernetRead+0xe>
     51e:	8e bd       	out	0x2e, r24	; 46
     520:	0d b4       	in	r0, 0x2d	; 45
     522:	07 fe       	sbrs	r0, 7
     524:	fd cf       	rjmp	.-6      	; 0x520 <SPI_EthernetRead+0x16>
     526:	1e bc       	out	0x2e, r1	; 46
     528:	0d b4       	in	r0, 0x2d	; 45
     52a:	07 fe       	sbrs	r0, 7
     52c:	fd cf       	rjmp	.-6      	; 0x528 <SPI_EthernetRead+0x1e>
     52e:	74 9a       	sbi	0x0e, 4	; 14
     530:	8e b5       	in	r24, 0x2e	; 46
     532:	08 95       	ret

00000534 <Server_Connect>:
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	b8 2e       	mov	r11, r24
     548:	7b 01       	movw	r14, r22
     54a:	6a 01       	movw	r12, r20
     54c:	89 01       	movw	r16, r18
     54e:	ce eb       	ldi	r28, 0xBE	; 190
     550:	d4 e0       	ldi	r29, 0x04	; 4
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	94 e0       	ldi	r25, 0x04	; 4
     556:	d9 df       	rcall	.-78     	; 0x50a <SPI_EthernetRead>
     558:	1f 92       	push	r1
     55a:	8f 93       	push	r24
     55c:	df 93       	push	r29
     55e:	cf 93       	push	r28
     560:	08 d7       	rcall	.+3600   	; 0x1372 <printf>
     562:	60 e1       	ldi	r22, 0x10	; 16
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	94 e0       	ldi	r25, 0x04	; 4
     568:	bc df       	rcall	.-136    	; 0x4e2 <SPI_EthernetWrite>
     56a:	6b 2d       	mov	r22, r11
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	94 e0       	ldi	r25, 0x04	; 4
     570:	b8 df       	rcall	.-144    	; 0x4e2 <SPI_EthernetWrite>
     572:	f8 01       	movw	r30, r16
     574:	60 81       	ld	r22, Z
     576:	84 e0       	ldi	r24, 0x04	; 4
     578:	94 e0       	ldi	r25, 0x04	; 4
     57a:	b3 df       	rcall	.-154    	; 0x4e2 <SPI_EthernetWrite>
     57c:	f8 01       	movw	r30, r16
     57e:	61 81       	ldd	r22, Z+1	; 0x01
     580:	85 e0       	ldi	r24, 0x05	; 5
     582:	94 e0       	ldi	r25, 0x04	; 4
     584:	ae df       	rcall	.-164    	; 0x4e2 <SPI_EthernetWrite>
     586:	61 e0       	ldi	r22, 0x01	; 1
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	94 e0       	ldi	r25, 0x04	; 4
     58c:	aa df       	rcall	.-172    	; 0x4e2 <SPI_EthernetWrite>
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	94 e0       	ldi	r25, 0x04	; 4
     592:	bb df       	rcall	.-138    	; 0x50a <SPI_EthernetRead>
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	83 31       	cpi	r24, 0x13	; 19
     59e:	c9 f6       	brne	.-78     	; 0x552 <Server_Connect+0x1e>
     5a0:	f7 01       	movw	r30, r14
     5a2:	60 81       	ld	r22, Z
     5a4:	8c e0       	ldi	r24, 0x0C	; 12
     5a6:	94 e0       	ldi	r25, 0x04	; 4
     5a8:	9c df       	rcall	.-200    	; 0x4e2 <SPI_EthernetWrite>
     5aa:	f7 01       	movw	r30, r14
     5ac:	61 81       	ldd	r22, Z+1	; 0x01
     5ae:	8d e0       	ldi	r24, 0x0D	; 13
     5b0:	94 e0       	ldi	r25, 0x04	; 4
     5b2:	97 df       	rcall	.-210    	; 0x4e2 <SPI_EthernetWrite>
     5b4:	f7 01       	movw	r30, r14
     5b6:	62 81       	ldd	r22, Z+2	; 0x02
     5b8:	8e e0       	ldi	r24, 0x0E	; 14
     5ba:	94 e0       	ldi	r25, 0x04	; 4
     5bc:	92 df       	rcall	.-220    	; 0x4e2 <SPI_EthernetWrite>
     5be:	f7 01       	movw	r30, r14
     5c0:	63 81       	ldd	r22, Z+3	; 0x03
     5c2:	8f e0       	ldi	r24, 0x0F	; 15
     5c4:	94 e0       	ldi	r25, 0x04	; 4
     5c6:	8d df       	rcall	.-230    	; 0x4e2 <SPI_EthernetWrite>
     5c8:	f6 01       	movw	r30, r12
     5ca:	60 81       	ld	r22, Z
     5cc:	80 e1       	ldi	r24, 0x10	; 16
     5ce:	94 e0       	ldi	r25, 0x04	; 4
     5d0:	88 df       	rcall	.-240    	; 0x4e2 <SPI_EthernetWrite>
     5d2:	f6 01       	movw	r30, r12
     5d4:	61 81       	ldd	r22, Z+1	; 0x01
     5d6:	81 e1       	ldi	r24, 0x11	; 17
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	83 df       	rcall	.-250    	; 0x4e2 <SPI_EthernetWrite>
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	94 e0       	ldi	r25, 0x04	; 4
     5e2:	7f df       	rcall	.-258    	; 0x4e2 <SPI_EthernetWrite>
     5e4:	c0 e0       	ldi	r28, 0x00	; 0
     5e6:	d0 e0       	ldi	r29, 0x00	; 0
     5e8:	00 e1       	ldi	r16, 0x10	; 16
     5ea:	17 e2       	ldi	r17, 0x27	; 39
     5ec:	32 c0       	rjmp	.+100    	; 0x652 <Server_Connect+0x11e>
     5ee:	87 e5       	ldi	r24, 0x57	; 87
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <Server_Connect+0xbe>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <Server_Connect+0xc4>
     5f8:	00 00       	nop
     5fa:	21 96       	adiw	r28, 0x01	; 1
     5fc:	9e 01       	movw	r18, r28
     5fe:	32 95       	swap	r19
     600:	22 95       	swap	r18
     602:	2f 70       	andi	r18, 0x0F	; 15
     604:	23 27       	eor	r18, r19
     606:	3f 70       	andi	r19, 0x0F	; 15
     608:	23 27       	eor	r18, r19
     60a:	a7 e4       	ldi	r26, 0x47	; 71
     60c:	b3 e0       	ldi	r27, 0x03	; 3
     60e:	5e d6       	rcall	.+3260   	; 0x12cc <__umulhisi3>
     610:	96 95       	lsr	r25
     612:	87 95       	ror	r24
     614:	96 95       	lsr	r25
     616:	87 95       	ror	r24
     618:	96 95       	lsr	r25
     61a:	87 95       	ror	r24
     61c:	80 9f       	mul	r24, r16
     61e:	90 01       	movw	r18, r0
     620:	81 9f       	mul	r24, r17
     622:	30 0d       	add	r19, r0
     624:	90 9f       	mul	r25, r16
     626:	30 0d       	add	r19, r0
     628:	11 24       	eor	r1, r1
     62a:	c2 17       	cp	r28, r18
     62c:	d3 07       	cpc	r29, r19
     62e:	89 f4       	brne	.+34     	; 0x652 <Server_Connect+0x11e>
     630:	81 ed       	ldi	r24, 0xD1	; 209
     632:	94 e0       	ldi	r25, 0x04	; 4
     634:	b4 d6       	rcall	.+3432   	; 0x139e <puts>
     636:	c1 35       	cpi	r28, 0x51	; 81
     638:	93 ec       	ldi	r25, 0xC3	; 195
     63a:	d9 07       	cpc	r29, r25
     63c:	50 f0       	brcs	.+20     	; 0x652 <Server_Connect+0x11e>
     63e:	83 ef       	ldi	r24, 0xF3	; 243
     640:	94 e0       	ldi	r25, 0x04	; 4
     642:	ad d6       	rcall	.+3418   	; 0x139e <puts>
     644:	60 e1       	ldi	r22, 0x10	; 16
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	94 e0       	ldi	r25, 0x04	; 4
     64a:	4b df       	rcall	.-362    	; 0x4e2 <SPI_EthernetWrite>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	15 c0       	rjmp	.+42     	; 0x67c <Server_Connect+0x148>
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	94 e0       	ldi	r25, 0x04	; 4
     656:	59 df       	rcall	.-334    	; 0x50a <SPI_EthernetRead>
     658:	87 31       	cpi	r24, 0x17	; 23
     65a:	49 f6       	brne	.-110    	; 0x5ee <Server_Connect+0xba>
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	94 e0       	ldi	r25, 0x04	; 4
     660:	54 df       	rcall	.-344    	; 0x50a <SPI_EthernetRead>
     662:	87 31       	cpi	r24, 0x17	; 23
     664:	31 f4       	brne	.+12     	; 0x672 <Server_Connect+0x13e>
     666:	8b e0       	ldi	r24, 0x0B	; 11
     668:	95 e0       	ldi	r25, 0x05	; 5
     66a:	99 d6       	rcall	.+3378   	; 0x139e <puts>
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	05 c0       	rjmp	.+10     	; 0x67c <Server_Connect+0x148>
     672:	82 e2       	ldi	r24, 0x22	; 34
     674:	95 e0       	ldi	r25, 0x05	; 5
     676:	93 d6       	rcall	.+3366   	; 0x139e <puts>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	08 95       	ret

00000690 <SocketCommand>:

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     690:	68 2f       	mov	r22, r24
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	94 e0       	ldi	r25, 0x04	; 4
     696:	25 cf       	rjmp	.-438    	; 0x4e2 <SPI_EthernetWrite>
     698:	08 95       	ret

0000069a <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     69a:	4f 92       	push	r4
     69c:	5f 92       	push	r5
     69e:	6f 92       	push	r6
     6a0:	7f 92       	push	r7
     6a2:	8f 92       	push	r8
     6a4:	9f 92       	push	r9
     6a6:	af 92       	push	r10
     6a8:	bf 92       	push	r11
     6aa:	cf 92       	push	r12
     6ac:	df 92       	push	r13
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	7c 01       	movw	r14, r24
     6bc:	6b 01       	movw	r12, r22
     6be:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     6c0:	83 e0       	ldi	r24, 0x03	; 3
     6c2:	94 e0       	ldi	r25, 0x04	; 4
     6c4:	22 df       	rcall	.-444    	; 0x50a <SPI_EthernetRead>
     6c6:	1f 92       	push	r1
     6c8:	8f 93       	push	r24
     6ca:	81 e4       	ldi	r24, 0x41	; 65
     6cc:	95 e0       	ldi	r25, 0x05	; 5
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	4f d6       	rcall	.+3230   	; 0x1372 <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     6d4:	83 e0       	ldi	r24, 0x03	; 3
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	18 df       	rcall	.-464    	; 0x50a <SPI_EthernetRead>
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	87 31       	cpi	r24, 0x17	; 23
     6e4:	51 f0       	breq	.+20     	; 0x6fa <SendData+0x60>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	32 e0       	ldi	r19, 0x02	; 2
     6ea:	42 e0       	ldi	r20, 0x02	; 2
     6ec:	52 e0       	ldi	r21, 0x02	; 2
     6ee:	64 e0       	ldi	r22, 0x04	; 4
     6f0:	72 e0       	ldi	r23, 0x02	; 2
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	1f df       	rcall	.-450    	; 0x534 <Server_Connect>
     6f6:	89 2b       	or	r24, r25
     6f8:	b1 f3       	breq	.-20     	; 0x6e6 <SendData+0x4c>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     6fa:	80 e2       	ldi	r24, 0x20	; 32
     6fc:	94 e0       	ldi	r25, 0x04	; 4
     6fe:	05 df       	rcall	.-502    	; 0x50a <SPI_EthernetRead>
     700:	c8 2f       	mov	r28, r24
     702:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     704:	dc 2f       	mov	r29, r28
     706:	cc 27       	eor	r28, r28
     708:	81 e2       	ldi	r24, 0x21	; 33
     70a:	94 e0       	ldi	r25, 0x04	; 4
     70c:	fe de       	rcall	.-516    	; 0x50a <SPI_EthernetRead>
     70e:	c8 0f       	add	r28, r24
     710:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     712:	cc 15       	cp	r28, r12
     714:	dd 05       	cpc	r29, r13
     716:	08 f4       	brcc	.+2      	; 0x71a <SendData+0x80>
     718:	8b c0       	rjmp	.+278    	; 0x830 <SendData+0x196>
     71a:	2b c0       	rjmp	.+86     	; 0x772 <SendData+0xd8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71c:	8f ec       	ldi	r24, 0xCF	; 207
     71e:	97 e0       	ldi	r25, 0x07	; 7
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <SendData+0x86>
     724:	00 c0       	rjmp	.+0      	; 0x726 <SendData+0x8c>
     726:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     728:	80 e2       	ldi	r24, 0x20	; 32
     72a:	94 e0       	ldi	r25, 0x04	; 4
     72c:	ee de       	rcall	.-548    	; 0x50a <SPI_EthernetRead>
     72e:	c8 2f       	mov	r28, r24
     730:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     732:	dc 2f       	mov	r29, r28
     734:	cc 27       	eor	r28, r28
     736:	81 e2       	ldi	r24, 0x21	; 33
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	e7 de       	rcall	.-562    	; 0x50a <SPI_EthernetRead>
     73c:	c8 0f       	add	r28, r24
     73e:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     740:	df 93       	push	r29
     742:	cf 93       	push	r28
     744:	9f 92       	push	r9
     746:	8f 92       	push	r8
     748:	14 d6       	rcall	.+3112   	; 0x1372 <printf>
     74a:	01 50       	subi	r16, 0x01	; 1
     74c:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	01 15       	cp	r16, r1
     758:	11 05       	cpc	r17, r1
     75a:	41 f4       	brne	.+16     	; 0x76c <SendData+0xd2>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     75c:	88 e0       	ldi	r24, 0x08	; 8
     75e:	98 df       	rcall	.-208    	; 0x690 <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	94 e0       	ldi	r25, 0x04	; 4
     764:	d2 de       	rcall	.-604    	; 0x50a <SPI_EthernetRead>
     766:	81 11       	cpse	r24, r1
     768:	fb cf       	rjmp	.-10     	; 0x760 <SendData+0xc6>
     76a:	5c c0       	rjmp	.+184    	; 0x824 <SendData+0x18a>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     76c:	cc 15       	cp	r28, r12
     76e:	dd 05       	cpc	r29, r13
     770:	a8 f2       	brcs	.-86     	; 0x71c <SendData+0x82>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     772:	84 e2       	ldi	r24, 0x24	; 36
     774:	94 e0       	ldi	r25, 0x04	; 4
     776:	c9 de       	rcall	.-622    	; 0x50a <SPI_EthernetRead>
     778:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     77a:	85 e2       	ldi	r24, 0x25	; 37
     77c:	94 e0       	ldi	r25, 0x04	; 4
     77e:	c5 de       	rcall	.-630    	; 0x50a <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     780:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     782:	54 2c       	mov	r5, r4
     784:	44 24       	eor	r4, r4
     786:	48 0e       	add	r4, r24
     788:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     78a:	82 e2       	ldi	r24, 0x22	; 34
     78c:	94 e0       	ldi	r25, 0x04	; 4
     78e:	bd de       	rcall	.-646    	; 0x50a <SPI_EthernetRead>
     790:	83 e2       	ldi	r24, 0x23	; 35
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	ba de       	rcall	.-652    	; 0x50a <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     796:	89 e5       	ldi	r24, 0x59	; 89
     798:	95 e0       	ldi	r25, 0x05	; 5
     79a:	01 d6       	rcall	.+3074   	; 0x139e <puts>
	while(i < bufferLength) {
     79c:	c1 14       	cp	r12, r1
     79e:	d1 04       	cpc	r13, r1
     7a0:	51 f1       	breq	.+84     	; 0x7f6 <SendData+0x15c>
     7a2:	47 01       	movw	r8, r14
     7a4:	8c 0c       	add	r8, r12
     7a6:	9d 1c       	adc	r9, r13
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     7a8:	82 01       	movw	r16, r4
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     7aa:	c0 e0       	ldi	r28, 0x00	; 0
     7ac:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     7ae:	a0 90 15 08 	lds	r10, 0x0815
     7b2:	b0 90 16 08 	lds	r11, 0x0816
     7b6:	a0 22       	and	r10, r16
     7b8:	b1 22       	and	r11, r17
     7ba:	80 91 17 08 	lds	r24, 0x0817
     7be:	90 91 18 08 	lds	r25, 0x0818
     7c2:	a8 0e       	add	r10, r24
     7c4:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     7c6:	61 14       	cp	r6, r1
     7c8:	71 04       	cpc	r7, r1
     7ca:	31 f0       	breq	.+12     	; 0x7d8 <SendData+0x13e>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     7cc:	ce 01       	movw	r24, r28
     7ce:	da d1       	rcall	.+948    	; 0xb84 <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     7d0:	68 2f       	mov	r22, r24
     7d2:	c5 01       	movw	r24, r10
     7d4:	86 de       	rcall	.-756    	; 0x4e2 <SPI_EthernetWrite>
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <SendData+0x146>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     7d8:	f7 01       	movw	r30, r14
     7da:	60 81       	ld	r22, Z
     7dc:	c5 01       	movw	r24, r10
     7de:	81 de       	rcall	.-766    	; 0x4e2 <SPI_EthernetWrite>
		}
		offaddr++;
     7e0:	0f 5f       	subi	r16, 0xFF	; 255
     7e2:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     7e4:	ff ef       	ldi	r31, 0xFF	; 255
     7e6:	ef 1a       	sub	r14, r31
     7e8:	ff 0a       	sbc	r15, r31
     7ea:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     7ec:	e8 14       	cp	r14, r8
     7ee:	f9 04       	cpc	r15, r9
     7f0:	f1 f6       	brne	.-68     	; 0x7ae <SendData+0x114>
     7f2:	4c 0c       	add	r4, r12
     7f4:	5d 1c       	adc	r5, r13
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	c5 01       	movw	r24, r10
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	72 de       	rcall	.-796    	; 0x4e2 <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     7fe:	84 e2       	ldi	r24, 0x24	; 36
     800:	94 e0       	ldi	r25, 0x04	; 4
     802:	83 de       	rcall	.-762    	; 0x50a <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     804:	6f ef       	ldi	r22, 0xFF	; 255
     806:	84 e2       	ldi	r24, 0x24	; 36
     808:	94 e0       	ldi	r25, 0x04	; 4
     80a:	6b de       	rcall	.-810    	; 0x4e2 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     80c:	64 2d       	mov	r22, r4
     80e:	85 e2       	ldi	r24, 0x25	; 37
     810:	94 e0       	ldi	r25, 0x04	; 4
     812:	67 de       	rcall	.-818    	; 0x4e2 <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     814:	80 e2       	ldi	r24, 0x20	; 32
     816:	3c df       	rcall	.-392    	; 0x690 <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	76 de       	rcall	.-788    	; 0x50a <SPI_EthernetRead>
     81e:	81 11       	cpse	r24, r1
     820:	fb cf       	rjmp	.-10     	; 0x818 <SendData+0x17e>
     822:	03 c0       	rjmp	.+6      	; 0x82a <SendData+0x190>
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_EthernetRead(S0_CR));
			return 0;
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	29 c0       	rjmp	.+82     	; 0x87c <SendData+0x1e2>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	26 c0       	rjmp	.+76     	; 0x87c <SendData+0x1e2>
     830:	8f ec       	ldi	r24, 0xCF	; 207
     832:	97 e0       	ldi	r25, 0x07	; 7
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <SendData+0x19a>
     838:	00 c0       	rjmp	.+0      	; 0x83a <SendData+0x1a0>
     83a:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     83c:	80 e2       	ldi	r24, 0x20	; 32
     83e:	94 e0       	ldi	r25, 0x04	; 4
     840:	64 de       	rcall	.-824    	; 0x50a <SPI_EthernetRead>
     842:	c8 2f       	mov	r28, r24
     844:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     846:	dc 2f       	mov	r29, r28
     848:	cc 27       	eor	r28, r28
     84a:	81 e2       	ldi	r24, 0x21	; 33
     84c:	94 e0       	ldi	r25, 0x04	; 4
     84e:	5d de       	rcall	.-838    	; 0x50a <SPI_EthernetRead>
     850:	c8 0f       	add	r28, r24
     852:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	8d e4       	ldi	r24, 0x4D	; 77
     85a:	95 e0       	ldi	r25, 0x05	; 5
     85c:	9f 93       	push	r25
     85e:	8f 93       	push	r24
     860:	88 d5       	rcall	.+2832   	; 0x1372 <printf>
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	09 ee       	ldi	r16, 0xE9	; 233
     86c:	13 e0       	ldi	r17, 0x03	; 3
     86e:	0f 2e       	mov	r0, r31
     870:	fd e4       	ldi	r31, 0x4D	; 77
     872:	8f 2e       	mov	r8, r31
     874:	f5 e0       	ldi	r31, 0x05	; 5
     876:	9f 2e       	mov	r9, r31
     878:	f0 2d       	mov	r31, r0
     87a:	78 cf       	rjmp	.-272    	; 0x76c <SendData+0xd2>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	af 90       	pop	r10
     890:	9f 90       	pop	r9
     892:	8f 90       	pop	r8
     894:	7f 90       	pop	r7
     896:	6f 90       	pop	r6
     898:	5f 90       	pop	r5
     89a:	4f 90       	pop	r4
     89c:	08 95       	ret

0000089e <ReceiveData>:

int ReceiveData(uint16_t RAMAddress, char* buffer, uint16_t dataLength, int header, int externRAM)
{
     89e:	5f 92       	push	r5
     8a0:	6f 92       	push	r6
     8a2:	7f 92       	push	r7
     8a4:	8f 92       	push	r8
     8a6:	9f 92       	push	r9
     8a8:	af 92       	push	r10
     8aa:	bf 92       	push	r11
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	4c 01       	movw	r8, r24
     8be:	5b 01       	movw	r10, r22
     8c0:	6a 01       	movw	r12, r20
     8c2:	79 01       	movw	r14, r18
     8c4:	ca ee       	ldi	r28, 0xEA	; 234
     8c6:	d3 e0       	ldi	r29, 0x03	; 3
	if (dataLength > MAX_BUFF)
		dataLength = MAX_BUFF - 2;
		
	while(1)
	{
		if(SPI_EthernetRead(S0_SR) == SOCK_ESTABLISHED)
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	1e de       	rcall	.-964    	; 0x50a <SPI_EthernetRead>
     8ce:	87 31       	cpi	r24, 0x17	; 23
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <ReceiveData+0x36>
     8d2:	55 c0       	rjmp	.+170    	; 0x97e <ReceiveData+0xe0>
		{
			// Read the Rx Read Pointer
			ptr = SPI_EthernetRead(S0_RX_RD);
     8d4:	88 e2       	ldi	r24, 0x28	; 40
     8d6:	94 e0       	ldi	r25, 0x04	; 4
     8d8:	18 de       	rcall	.-976    	; 0x50a <SPI_EthernetRead>
     8da:	c8 2f       	mov	r28, r24
			//printf("RX Read Pointer: %d\n", ptr);
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
     8dc:	89 e2       	ldi	r24, 0x29	; 41
     8de:	94 e0       	ldi	r25, 0x04	; 4
     8e0:	14 de       	rcall	.-984    	; 0x50a <SPI_EthernetRead>
	while(1)
	{
		if(SPI_EthernetRead(S0_SR) == SOCK_ESTABLISHED)
		{
			// Read the Rx Read Pointer
			ptr = SPI_EthernetRead(S0_RX_RD);
     8e2:	d0 e0       	ldi	r29, 0x00	; 0
			//printf("RX Read Pointer: %d\n", ptr);
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
     8e4:	dc 2f       	mov	r29, r28
     8e6:	cc 27       	eor	r28, r28
     8e8:	c8 0f       	add	r28, r24
     8ea:	d1 1d       	adc	r29, r1
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
     8ec:	c1 14       	cp	r12, r1
     8ee:	d1 04       	cpc	r13, r1
     8f0:	a9 f1       	breq	.+106    	; 0x95c <ReceiveData+0xbe>
{
	uint16_t ptr,offaddr,realaddr;
	//uint16_t RAMAddress = 0; 
	char tempvar; 
	//uint8_t header = 1; 
	uint8_t headerCount = 0; 
     8f2:	51 2c       	mov	r5, r1
					else{
						//printf("Writing to Buffer\n"); 
						*buffer = tempvar; 
						buffer++; 
					}
					dataLength--;
     8f4:	61 2c       	mov	r6, r1
     8f6:	71 2c       	mov	r7, r1
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
				realaddr = S0_RX_BASE + (offaddr & S0_RX_MASK);
     8f8:	80 91 1b 08 	lds	r24, 0x081B
     8fc:	90 91 1c 08 	lds	r25, 0x081C
     900:	8c 23       	and	r24, r28
     902:	9d 23       	and	r25, r29
     904:	20 91 19 08 	lds	r18, 0x0819
     908:	30 91 1a 08 	lds	r19, 0x081A
				//printf("Real Address: %d\n", realaddr);
				tempvar = SPI_EthernetRead(realaddr);
     90c:	82 0f       	add	r24, r18
     90e:	93 1f       	adc	r25, r19
     910:	fc dd       	rcall	.-1032   	; 0x50a <SPI_EthernetRead>
				//printf("Buffer: %c\n", tempvar);
				if(tempvar == '\n' && header)
     912:	8a 30       	cpi	r24, 0x0A	; 10
     914:	41 f4       	brne	.+16     	; 0x926 <ReceiveData+0x88>
     916:	e1 14       	cp	r14, r1
     918:	f1 04       	cpc	r15, r1
     91a:	41 f0       	breq	.+16     	; 0x92c <ReceiveData+0x8e>
				{
					//printf("Found New Line!\n");
					headerCount++; 
     91c:	53 94       	inc	r5
					if(headerCount >= 10)
     91e:	89 e0       	ldi	r24, 0x09	; 9
     920:	85 15       	cp	r24, r5
     922:	b0 f0       	brcs	.+44     	; 0x950 <ReceiveData+0xb2>
     924:	17 c0       	rjmp	.+46     	; 0x954 <ReceiveData+0xb6>
						header = 0; 
				}
				else if(!header)
     926:	e1 14       	cp	r14, r1
     928:	f1 04       	cpc	r15, r1
     92a:	a1 f4       	brne	.+40     	; 0x954 <ReceiveData+0xb6>
				{
					//printf("Write to RAM!\n");
					//printf("Writing to RAM: %c @ address %d\n", tempvar, RAMAddress); 
					if(externRAM){
     92c:	01 15       	cp	r16, r1
     92e:	11 05       	cpc	r17, r1
     930:	31 f0       	breq	.+12     	; 0x93e <ReceiveData+0xa0>
						RAMWriteByte(tempvar, RAMAddress);	
     932:	b4 01       	movw	r22, r8
     934:	0f d1       	rcall	.+542    	; 0xb54 <RAMWriteByte>
						RAMAddress++;
     936:	9f ef       	ldi	r25, 0xFF	; 255
     938:	89 1a       	sub	r8, r25
     93a:	99 0a       	sbc	r9, r25
     93c:	03 c0       	rjmp	.+6      	; 0x944 <ReceiveData+0xa6>
					}
					else{
						//printf("Writing to Buffer\n"); 
						*buffer = tempvar; 
     93e:	f5 01       	movw	r30, r10
     940:	81 93       	st	Z+, r24
     942:	5f 01       	movw	r10, r30
						buffer++; 
					}
					dataLength--;
     944:	f1 e0       	ldi	r31, 0x01	; 1
     946:	cf 1a       	sub	r12, r31
     948:	d1 08       	sbc	r13, r1
     94a:	e6 2c       	mov	r14, r6
     94c:	f7 2c       	mov	r15, r7
     94e:	02 c0       	rjmp	.+4      	; 0x954 <ReceiveData+0xb6>
				if(tempvar == '\n' && header)
				{
					//printf("Found New Line!\n");
					headerCount++; 
					if(headerCount >= 10)
						header = 0; 
     950:	e6 2c       	mov	r14, r6
     952:	f7 2c       	mov	r15, r7
						*buffer = tempvar; 
						buffer++; 
					}
					dataLength--;
				}
				offaddr++;
     954:	21 96       	adiw	r28, 0x01	; 1
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
     956:	c1 14       	cp	r12, r1
     958:	d1 04       	cpc	r13, r1
     95a:	71 f6       	brne	.-100    	; 0x8f8 <ReceiveData+0x5a>
					}
					dataLength--;
				}
				offaddr++;
			}
			*buffer='\0';        // String terminated character
     95c:	f5 01       	movw	r30, r10
     95e:	10 82       	st	Z, r1
			//printf("%s", buffer);

			// Increase the S0_RX_RD value, so it point to the next receive
			SPI_EthernetWrite(S0_RX_RD,(offaddr & 0xFF00) >> 8 );
     960:	6d 2f       	mov	r22, r29
     962:	88 e2       	ldi	r24, 0x28	; 40
     964:	94 e0       	ldi	r25, 0x04	; 4
     966:	bd dd       	rcall	.-1158   	; 0x4e2 <SPI_EthernetWrite>
			SPI_EthernetWrite(S0_RX_RD + 1,(offaddr & 0x00FF));
     968:	6c 2f       	mov	r22, r28
     96a:	89 e2       	ldi	r24, 0x29	; 41
     96c:	94 e0       	ldi	r25, 0x04	; 4
     96e:	b9 dd       	rcall	.-1166   	; 0x4e2 <SPI_EthernetWrite>

			// Now Send the RECV command
			SocketCommand(RECV);
     970:	80 e4       	ldi	r24, 0x40	; 64
     972:	8e de       	rcall	.-740    	; 0x690 <SocketCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     974:	fd e0       	ldi	r31, 0x0D	; 13
     976:	fa 95       	dec	r31
     978:	f1 f7       	brne	.-4      	; 0x976 <ReceiveData+0xd8>
     97a:	00 00       	nop
     97c:	1c c0       	rjmp	.+56     	; 0x9b6 <ReceiveData+0x118>
     97e:	21 97       	sbiw	r28, 0x01	; 1
			_delay_us(5);    // Wait for Receive Process
			break; 
		}
		else if(timeCount > MAX_TIME_COUNT)
     980:	20 97       	sbiw	r28, 0x00	; 0
     982:	91 f4       	brne	.+36     	; 0x9a8 <ReceiveData+0x10a>
		{
			printf("Ethernet Receive Data Timeout!\n");
     984:	85 e6       	ldi	r24, 0x65	; 101
     986:	95 e0       	ldi	r25, 0x05	; 5
     988:	0a d5       	rcall	.+2580   	; 0x139e <puts>
			printf("Stats Reg: 0x%02x", SPI_EthernetRead(S0_SR));
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	94 e0       	ldi	r25, 0x04	; 4
     98e:	bd dd       	rcall	.-1158   	; 0x50a <SPI_EthernetRead>
     990:	1f 92       	push	r1
     992:	8f 93       	push	r24
     994:	84 e8       	ldi	r24, 0x84	; 132
     996:	95 e0       	ldi	r25, 0x05	; 5
     998:	9f 93       	push	r25
     99a:	8f 93       	push	r24
     99c:	ea d4       	rcall	.+2516   	; 0x1372 <printf>
			break; 
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <ReceiveData+0x118>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a8:	8f e1       	ldi	r24, 0x1F	; 31
     9aa:	9e e4       	ldi	r25, 0x4E	; 78
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <ReceiveData+0x10e>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <ReceiveData+0x114>
     9b2:	00 00       	nop
     9b4:	89 cf       	rjmp	.-238    	; 0x8c8 <ReceiveData+0x2a>
		}
		
	}	

	return 1;
}
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	9f 90       	pop	r9
     9d0:	8f 90       	pop	r8
     9d2:	7f 90       	pop	r7
     9d4:	6f 90       	pop	r6
     9d6:	5f 90       	pop	r5
     9d8:	08 95       	ret

000009da <uart_sendStream>:
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
	putchar('[');
	putchar('0');
	putchar('m');
}
     9da:	cf 93       	push	r28
     9dc:	c8 2f       	mov	r28, r24
     9de:	8a 30       	cpi	r24, 0x0A	; 10
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <uart_sendStream+0xc>
     9e2:	8d e0       	ldi	r24, 0x0D	; 13
     9e4:	fa df       	rcall	.-12     	; 0x9da <uart_sendStream>
     9e6:	e0 ed       	ldi	r30, 0xD0	; 208
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	90 81       	ld	r25, Z
     9ec:	95 ff       	sbrs	r25, 5
     9ee:	fd cf       	rjmp	.-6      	; 0x9ea <uart_sendStream+0x10>
     9f0:	c0 93 d6 00 	sts	0x00D6, r28
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <uart_receiveStream>:
     9fc:	cf 93       	push	r28
     9fe:	bc 01       	movw	r22, r24
     a00:	e0 ed       	ldi	r30, 0xD0	; 208
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	88 23       	and	r24, r24
     a08:	ec f7       	brge	.-6      	; 0xa04 <uart_receiveStream+0x8>
     a0a:	c0 91 d6 00 	lds	r28, 0x00D6
     a0e:	8c 2f       	mov	r24, r28
     a10:	e4 df       	rcall	.-56     	; 0x9da <uart_sendStream>
     a12:	8c 2f       	mov	r24, r28
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <uart0_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart0_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     a1a:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     a1e:	83 e3       	ldi	r24, 0x33	; 51
     a20:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     a24:	88 e1       	ldi	r24, 0x18	; 24
     a26:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     a2a:	86 e0       	ldi	r24, 0x06	; 6
     a2c:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     a30:	88 e0       	ldi	r24, 0x08	; 8
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	90 93 9e 08 	sts	0x089E, r25
     a38:	80 93 9d 08 	sts	0x089D, r24
     a3c:	90 93 a0 08 	sts	0x08A0, r25
     a40:	80 93 9f 08 	sts	0x089F, r24
     a44:	08 95       	ret

00000a46 <setRAMStatus>:
		*(buffer + i) = SPI_ReadData();
	}
	RAM_PORT |= (1<<RAM_CS); 
	//printf("%d\n", buffer);
	return buffer; 
}
     a46:	a3 98       	cbi	0x14, 3	; 20
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	9e bd       	out	0x2e, r25	; 46
     a4c:	0d b4       	in	r0, 0x2d	; 45
     a4e:	07 fe       	sbrs	r0, 7
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <setRAMStatus+0x6>
     a52:	8e bd       	out	0x2e, r24	; 46
     a54:	0d b4       	in	r0, 0x2d	; 45
     a56:	07 fe       	sbrs	r0, 7
     a58:	fd cf       	rjmp	.-6      	; 0xa54 <setRAMStatus+0xe>
     a5a:	a3 9a       	sbi	0x14, 3	; 20
     a5c:	08 95       	ret

00000a5e <SPI_WriteAddress>:
     a5e:	26 2f       	mov	r18, r22
     a60:	97 2f       	mov	r25, r23
     a62:	48 2f       	mov	r20, r24
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	8e bd       	out	0x2e, r24	; 46
     a68:	0d b4       	in	r0, 0x2d	; 45
     a6a:	07 fe       	sbrs	r0, 7
     a6c:	fd cf       	rjmp	.-6      	; 0xa68 <SPI_WriteAddress+0xa>
     a6e:	4e bd       	out	0x2e, r20	; 46
     a70:	0d b4       	in	r0, 0x2d	; 45
     a72:	07 fe       	sbrs	r0, 7
     a74:	fd cf       	rjmp	.-6      	; 0xa70 <SPI_WriteAddress+0x12>
     a76:	89 2f       	mov	r24, r25
     a78:	8e bd       	out	0x2e, r24	; 46
     a7a:	0d b4       	in	r0, 0x2d	; 45
     a7c:	07 fe       	sbrs	r0, 7
     a7e:	fd cf       	rjmp	.-6      	; 0xa7a <SPI_WriteAddress+0x1c>
     a80:	2e bd       	out	0x2e, r18	; 46
     a82:	0d b4       	in	r0, 0x2d	; 45
     a84:	07 fe       	sbrs	r0, 7
     a86:	fd cf       	rjmp	.-6      	; 0xa82 <SPI_WriteAddress+0x24>
     a88:	08 95       	ret

00000a8a <SPI_WriteData>:
     a8a:	8e bd       	out	0x2e, r24	; 46
     a8c:	0d b4       	in	r0, 0x2d	; 45
     a8e:	07 fe       	sbrs	r0, 7
     a90:	fd cf       	rjmp	.-6      	; 0xa8c <SPI_WriteData+0x2>
     a92:	08 95       	ret

00000a94 <SPI_ReadAddress>:
     a94:	26 2f       	mov	r18, r22
     a96:	97 2f       	mov	r25, r23
     a98:	48 2f       	mov	r20, r24
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	8e bd       	out	0x2e, r24	; 46
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <SPI_ReadAddress+0xa>
     aa4:	4e bd       	out	0x2e, r20	; 46
     aa6:	0d b4       	in	r0, 0x2d	; 45
     aa8:	07 fe       	sbrs	r0, 7
     aaa:	fd cf       	rjmp	.-6      	; 0xaa6 <SPI_ReadAddress+0x12>
     aac:	89 2f       	mov	r24, r25
     aae:	8e bd       	out	0x2e, r24	; 46
     ab0:	0d b4       	in	r0, 0x2d	; 45
     ab2:	07 fe       	sbrs	r0, 7
     ab4:	fd cf       	rjmp	.-6      	; 0xab0 <SPI_ReadAddress+0x1c>
     ab6:	2e bd       	out	0x2e, r18	; 46
     ab8:	0d b4       	in	r0, 0x2d	; 45
     aba:	07 fe       	sbrs	r0, 7
     abc:	fd cf       	rjmp	.-6      	; 0xab8 <SPI_ReadAddress+0x24>
     abe:	08 95       	ret

00000ac0 <SPI_ReadData>:
     ac0:	1e bc       	out	0x2e, r1	; 46
     ac2:	0d b4       	in	r0, 0x2d	; 45
     ac4:	07 fe       	sbrs	r0, 7
     ac6:	fd cf       	rjmp	.-6      	; 0xac2 <SPI_ReadData+0x2>
     ac8:	8e b5       	in	r24, 0x2e	; 46
     aca:	08 95       	ret

00000acc <RAMPrint>:

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	c6 2f       	mov	r28, r22
     ada:	d7 2f       	mov	r29, r23
     adc:	f8 2e       	mov	r15, r24
     ade:	e9 2e       	mov	r14, r25
     ae0:	8a 01       	movw	r16, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     ae2:	80 e4       	ldi	r24, 0x40	; 64
     ae4:	b0 df       	rcall	.-160    	; 0xa46 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     ae6:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     ae8:	6c 2f       	mov	r22, r28
     aea:	7d 2f       	mov	r23, r29
     aec:	8f 2d       	mov	r24, r15
     aee:	9e 2d       	mov	r25, r14
     af0:	d1 df       	rcall	.-94     	; 0xa94 <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	df 93       	push	r29
     af8:	cf 93       	push	r28
     afa:	86 e9       	ldi	r24, 0x96	; 150
     afc:	95 e0       	ldi	r25, 0x05	; 5
     afe:	9f 93       	push	r25
     b00:	8f 93       	push	r24
     b02:	37 d4       	rcall	.+2158   	; 0x1372 <printf>
	int i; 
	for(i=0; i<length; i++)
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	01 15       	cp	r16, r1
     b12:	11 05       	cpc	r17, r1
     b14:	51 f0       	breq	.+20     	; 0xb2a <RAMPrint+0x5e>
     b16:	c0 e0       	ldi	r28, 0x00	; 0
     b18:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("%c", SPI_ReadData());
     b1a:	d2 df       	rcall	.-92     	; 0xac0 <SPI_ReadData>
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	3a d4       	rcall	.+2164   	; 0x1394 <putchar>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     b20:	21 96       	adiw	r28, 0x01	; 1
     b22:	c0 17       	cp	r28, r16
     b24:	d1 07       	cpc	r29, r17
     b26:	c9 f7       	brne	.-14     	; 0xb1a <RAMPrint+0x4e>
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <RAMPrint+0x62>
     b2a:	00 e0       	ldi	r16, 0x00	; 0
     b2c:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("%c", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     b2e:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     b30:	1f 93       	push	r17
     b32:	0f 93       	push	r16
     b34:	87 ea       	ldi	r24, 0xA7	; 167
     b36:	95 e0       	ldi	r25, 0x05	; 5
     b38:	9f 93       	push	r25
     b3a:	8f 93       	push	r24
     b3c:	1a d4       	rcall	.+2100   	; 0x1372 <printf>
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	08 95       	ret

00000b54 <RAMWriteByte>:

void RAMWriteByte(char data, uint16_t address)
{
     b54:	cf 93       	push	r28
     b56:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     b58:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	7f df       	rcall	.-258    	; 0xa5e <SPI_WriteAddress>
	SPI_WriteData(data);
     b60:	8c 2f       	mov	r24, r28
     b62:	93 df       	rcall	.-218    	; 0xa8a <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     b64:	a3 9a       	sbi	0x14, 3	; 20
}
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS)|(1<<HOLD);
     b6a:	84 b1       	in	r24, 0x04	; 4
     b6c:	87 68       	ori	r24, 0x87	; 135
     b6e:	84 b9       	out	0x04, r24	; 4
	//Set MISO as Input 
	SPI_DDR &= ~(1<<MISO);
     b70:	23 98       	cbi	0x04, 3	; 4
	SPI_PORT |= (1<<HOLD);
     b72:	2f 9a       	sbi	0x05, 7	; 5
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     b74:	9b 9a       	sbi	0x13, 3	; 19
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
     b76:	83 e5       	ldi	r24, 0x53	; 83
     b78:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	82 e3       	ldi	r24, 0x32	; 50
     b80:	e9 cf       	rjmp	.-46     	; 0xb54 <RAMWriteByte>
     b82:	08 95       	ret

00000b84 <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint16_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     b84:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     b86:	bc 01       	movw	r22, r24
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	83 df       	rcall	.-250    	; 0xa94 <SPI_ReadAddress>
	char data = SPI_ReadData();
     b8e:	98 df       	rcall	.-208    	; 0xac0 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     b90:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     b92:	08 95       	ret

00000b94 <wifiInit>:
	
	//Overwrite the terminating byte with two new lines for the http request 
	RAMWrite(footer, WIFI_QSTRING_ADDRESS + j-1, strlen(footer));
	j+=strlen(footer)-1; 
	return j; 
}
     b94:	b8 c0       	rjmp	.+368    	; 0xd06 <wifiDriverInit>
     b96:	08 95       	ret

00000b98 <setMachineMode>:
     b98:	37 d1       	rcall	.+622    	; 0xe08 <disableReceiveINT>
     b9a:	43 e5       	ldi	r20, 0x53	; 83
     b9c:	52 e0       	ldi	r21, 0x02	; 2
     b9e:	62 eb       	ldi	r22, 0xB2	; 178
     ba0:	75 e0       	ldi	r23, 0x05	; 5
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	ea d1       	rcall	.+980    	; 0xf7a <sendCommand>
     ba6:	45 ec       	ldi	r20, 0xC5	; 197
     ba8:	55 e0       	ldi	r21, 0x05	; 5
     baa:	67 ec       	ldi	r22, 0xC7	; 199
     bac:	75 e0       	ldi	r23, 0x05	; 5
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	e4 d1       	rcall	.+968    	; 0xf7a <sendCommand>
     bb2:	43 e5       	ldi	r20, 0x53	; 83
     bb4:	52 e0       	ldi	r21, 0x02	; 2
     bb6:	61 ee       	ldi	r22, 0xE1	; 225
     bb8:	75 e0       	ldi	r23, 0x05	; 5
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	de d1       	rcall	.+956    	; 0xf7a <sendCommand>
     bbe:	4b ef       	ldi	r20, 0xFB	; 251
     bc0:	55 e0       	ldi	r21, 0x05	; 5
     bc2:	6f ef       	ldi	r22, 0xFF	; 255
     bc4:	75 e0       	ldi	r23, 0x05	; 5
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	d8 d1       	rcall	.+944    	; 0xf7a <sendCommand>
     bca:	15 c1       	rjmp	.+554    	; 0xdf6 <enableReceiveINT>
     bcc:	08 95       	ret

00000bce <networkScan>:
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	cb 01       	movw	r24, r22
     bd4:	c9 d1       	rcall	.+914    	; 0xf68 <updateRAMAddress>
     bd6:	0f d1       	rcall	.+542    	; 0xdf6 <enableReceiveINT>
     bd8:	47 e3       	ldi	r20, 0x37	; 55
     bda:	53 e0       	ldi	r21, 0x03	; 3
     bdc:	62 e1       	ldi	r22, 0x12	; 18
     bde:	76 e0       	ldi	r23, 0x06	; 6
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	cb d1       	rcall	.+918    	; 0xf7a <sendCommand>
     be4:	5d 98       	cbi	0x0b, 5	; 11
     be6:	18 d1       	rcall	.+560    	; 0xe18 <receiveStatus>
     be8:	87 e3       	ldi	r24, 0x37	; 55
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	08 95       	ret

00000bee <getFileWifi>:

char* getFileWifi(char* filepath, int externRAM, uint32_t RAMAddress, int multiReceive)
{ 
     bee:	2f 92       	push	r2
     bf0:	3f 92       	push	r3
     bf2:	4f 92       	push	r4
     bf4:	5f 92       	push	r5
     bf6:	6f 92       	push	r6
     bf8:	7f 92       	push	r7
     bfa:	8f 92       	push	r8
     bfc:	9f 92       	push	r9
     bfe:	af 92       	push	r10
     c00:	bf 92       	push	r11
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	ec 01       	movw	r28, r24
     c14:	6b 01       	movw	r12, r22
     c16:	49 01       	movw	r8, r18
     c18:	5a 01       	movw	r10, r20
	//printf("Filepath: %s\n", filepath);
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
     c1a:	ed d0       	rcall	.+474    	; 0xdf6 <enableReceiveINT>
	PORTD &= ~(1<<CTS);
     c1c:	5c 98       	cbi	0x0b, 4	; 11
	setReceiveCounter(0);
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	a0 d0       	rcall	.+320    	; 0xd64 <setReceiveCounter>
	uint16_t i = 0; 
	char* receiveHeader; 
	//setCompressFlag(1);
	PORTD |= (1<<CTS);
     c24:	5c 9a       	sbi	0x0b, 4	; 11
	sendCommand(NOPREFIX, HTTP_GET, filepath);
     c26:	ae 01       	movw	r20, r28
     c28:	65 e5       	ldi	r22, 0x55	; 85
     c2a:	72 e0       	ldi	r23, 0x02	; 2
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	a5 d1       	rcall	.+842    	; 0xf7a <sendCommand>
	receiveStatus();
     c30:	f3 d0       	rcall	.+486    	; 0xe18 <receiveStatus>
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
	PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
	uint16_t i = 0; 
     c32:	e1 2c       	mov	r14, r1
     c34:	f1 2c       	mov	r15, r1
			printf("RAM Address: %d\n", RAMAddress+i); 
		}
		sendCommand(NOPREFIX, STREAM_READ, "0 10000");
		receiveStatus();
		receiveHeader = getMessageHeader(); 
		printf("Tran Length: %d\n", receiveHeader); 
     c36:	0f 2e       	mov	r0, r31
     c38:	fe e5       	ldi	r31, 0x5E	; 94
     c3a:	2f 2e       	mov	r2, r31
     c3c:	f2 e0       	ldi	r31, 0x02	; 2
     c3e:	3f 2e       	mov	r3, r31
     c40:	f0 2d       	mov	r31, r0
	PORTD |= (1<<CTS);
	sendCommand(NOPREFIX, HTTP_GET, filepath);
	receiveStatus();
	do 
	{
		if(externRAM){
     c42:	c1 14       	cp	r12, r1
     c44:	d1 04       	cpc	r13, r1
     c46:	c1 f0       	breq	.+48     	; 0xc78 <getFileWifi+0x8a>
			updateRAMAddress(RAMAddress + i);
     c48:	24 01       	movw	r4, r8
     c4a:	35 01       	movw	r6, r10
     c4c:	4e 0c       	add	r4, r14
     c4e:	5f 1c       	adc	r5, r15
     c50:	61 1c       	adc	r6, r1
     c52:	71 1c       	adc	r7, r1
     c54:	c3 01       	movw	r24, r6
     c56:	b2 01       	movw	r22, r4
     c58:	87 d1       	rcall	.+782    	; 0xf68 <updateRAMAddress>
			printf("RAM Address: %d\n", RAMAddress+i); 
     c5a:	7f 92       	push	r7
     c5c:	6f 92       	push	r6
     c5e:	5f 92       	push	r5
     c60:	4f 92       	push	r4
     c62:	a9 e5       	ldi	r26, 0x59	; 89
     c64:	b6 e0       	ldi	r27, 0x06	; 6
     c66:	bf 93       	push	r27
     c68:	af 93       	push	r26
     c6a:	83 d3       	rcall	.+1798   	; 0x1372 <printf>
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
		}
		sendCommand(NOPREFIX, STREAM_READ, "0 10000");
     c78:	4a e6       	ldi	r20, 0x6A	; 106
     c7a:	56 e0       	ldi	r21, 0x06	; 6
     c7c:	62 e7       	ldi	r22, 0x72	; 114
     c7e:	76 e0       	ldi	r23, 0x06	; 6
     c80:	8f ef       	ldi	r24, 0xFF	; 255
     c82:	7b d1       	rcall	.+758    	; 0xf7a <sendCommand>
		receiveStatus();
     c84:	c9 d0       	rcall	.+402    	; 0xe18 <receiveStatus>
		receiveHeader = getMessageHeader(); 
     c86:	6d d1       	rcall	.+730    	; 0xf62 <getMessageHeader>
     c88:	ec 01       	movw	r28, r24
		printf("Tran Length: %d\n", receiveHeader); 
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	3f 92       	push	r3
     c90:	2f 92       	push	r2
     c92:	6f d3       	rcall	.+1758   	; 0x1372 <printf>
		if(receiveHeader[errorCode] == '1'){
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	81 33       	cpi	r24, 0x31	; 49
     ca0:	31 f0       	breq	.+12     	; 0xcae <getFileWifi+0xc0>
			break; 
		}
		i += getTransmissionLength(); 
     ca2:	5a d1       	rcall	.+692    	; 0xf58 <getTransmissionLength>
     ca4:	e8 0e       	add	r14, r24
     ca6:	f9 1e       	adc	r15, r25
	} while (multiReceive);
     ca8:	01 15       	cp	r16, r1
     caa:	11 05       	cpc	r17, r1
     cac:	51 f6       	brne	.-108    	; 0xc42 <getFileWifi+0x54>
	
	disableReceiveINT(); 
     cae:	ac d0       	rcall	.+344    	; 0xe08 <disableReceiveINT>
	//_delay_ms(3000);  
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
     cb0:	47 e3       	ldi	r20, 0x37	; 55
     cb2:	53 e0       	ldi	r21, 0x03	; 3
     cb4:	6e e7       	ldi	r22, 0x7E	; 126
     cb6:	76 e0       	ldi	r23, 0x06	; 6
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	5f d1       	rcall	.+702    	; 0xf7a <sendCommand>
	//receiveStatus(); 
}
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	bf 90       	pop	r11
     cce:	af 90       	pop	r10
     cd0:	9f 90       	pop	r9
     cd2:	8f 90       	pop	r8
     cd4:	7f 90       	pop	r7
     cd6:	6f 90       	pop	r6
     cd8:	5f 90       	pop	r5
     cda:	4f 90       	pop	r4
     cdc:	3f 90       	pop	r3
     cde:	2f 90       	pop	r2
     ce0:	08 95       	ret

00000ce2 <updateFileWifi>:

void updateFileWifi(char* filepath)
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
     ce8:	8f d0       	rcall	.+286    	; 0xe08 <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL);
     cea:	47 e3       	ldi	r20, 0x37	; 55
     cec:	53 e0       	ldi	r21, 0x03	; 3
     cee:	be 01       	movw	r22, r28
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	43 d1       	rcall	.+646    	; 0xf7a <sendCommand>
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL); 	
     cf4:	47 e3       	ldi	r20, 0x37	; 55
     cf6:	53 e0       	ldi	r21, 0x03	; 3
     cf8:	6e e7       	ldi	r22, 0x7E	; 126
     cfa:	76 e0       	ldi	r23, 0x06	; 6
     cfc:	8f ef       	ldi	r24, 0xFF	; 255
     cfe:	3d d1       	rcall	.+634    	; 0xf7a <sendCommand>
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <wifiDriverInit>:
	//0 denotes a successful command 
	if(header[errorCode] != '0')
		return 1; 
	else 
		return 0; 
}
     d06:	10 92 37 08 	sts	0x0837, r1
     d0a:	10 92 36 08 	sts	0x0836, r1
     d0e:	10 92 2b 08 	sts	0x082B, r1
     d12:	10 92 2a 08 	sts	0x082A, r1
     d16:	10 92 28 08 	sts	0x0828, r1
     d1a:	10 92 2d 08 	sts	0x082D, r1
     d1e:	10 92 2c 08 	sts	0x082C, r1
     d22:	10 92 38 08 	sts	0x0838, r1
     d26:	10 92 31 08 	sts	0x0831, r1
     d2a:	10 92 30 08 	sts	0x0830, r1
     d2e:	10 92 32 08 	sts	0x0832, r1
     d32:	10 92 33 08 	sts	0x0833, r1
     d36:	10 92 34 08 	sts	0x0834, r1
     d3a:	10 92 35 08 	sts	0x0835, r1
     d3e:	89 e0       	ldi	r24, 0x09	; 9
     d40:	ef e1       	ldi	r30, 0x1F	; 31
     d42:	f8 e0       	ldi	r31, 0x08	; 8
     d44:	df 01       	movw	r26, r30
     d46:	1d 92       	st	X+, r1
     d48:	8a 95       	dec	r24
     d4a:	e9 f7       	brne	.-6      	; 0xd46 <wifiDriverInit+0x40>
     d4c:	10 92 1d 08 	sts	0x081D, r1
     d50:	10 92 2f 08 	sts	0x082F, r1
     d54:	10 92 2e 08 	sts	0x082E, r1
     d58:	08 95       	ret

00000d5a <setCompressFlag>:
     d5a:	5c 98       	cbi	0x0b, 4	; 11
     d5c:	80 93 2f 08 	sts	0x082F, r24
     d60:	5c 9a       	sbi	0x0b, 4	; 11
     d62:	08 95       	ret

00000d64 <setReceiveCounter>:
     d64:	90 93 2d 08 	sts	0x082D, r25
     d68:	80 93 2c 08 	sts	0x082C, r24
     d6c:	08 95       	ret

00000d6e <uart_init>:
     d6e:	10 92 c5 00 	sts	0x00C5, r1
     d72:	87 e0       	ldi	r24, 0x07	; 7
     d74:	80 93 c4 00 	sts	0x00C4, r24
     d78:	e1 ec       	ldi	r30, 0xC1	; 193
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	88 e1       	ldi	r24, 0x18	; 24
     d7e:	80 83       	st	Z, r24
     d80:	86 e0       	ldi	r24, 0x06	; 6
     d82:	80 93 c2 00 	sts	0x00C2, r24
     d86:	80 81       	ld	r24, Z
     d88:	80 68       	ori	r24, 0x80	; 128
     d8a:	80 83       	st	Z, r24
     d8c:	08 95       	ret

00000d8e <uart_send>:
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	10 92 38 08 	sts	0x0838, r1
     d96:	29 e0       	ldi	r18, 0x09	; 9
     d98:	ef e1       	ldi	r30, 0x1F	; 31
     d9a:	f8 e0       	ldi	r31, 0x08	; 8
     d9c:	df 01       	movw	r26, r30
     d9e:	1d 92       	st	X+, r1
     da0:	2a 95       	dec	r18
     da2:	e9 f7       	brne	.-6      	; 0xd9e <uart_send+0x10>
     da4:	5d 9a       	sbi	0x0b, 5	; 11
     da6:	61 15       	cp	r22, r1
     da8:	71 05       	cpc	r23, r1
     daa:	a9 f0       	breq	.+42     	; 0xdd6 <uart_send+0x48>
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	e8 ec       	ldi	r30, 0xC8	; 200
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ae ec       	ldi	r26, 0xCE	; 206
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	40 81       	ld	r20, Z
     dbc:	45 ff       	sbrs	r20, 5
     dbe:	fd cf       	rjmp	.-6      	; 0xdba <uart_send+0x2c>
     dc0:	ec 01       	movw	r28, r24
     dc2:	c2 0f       	add	r28, r18
     dc4:	d3 1f       	adc	r29, r19
     dc6:	28 81       	ld	r18, Y
     dc8:	2c 93       	st	X, r18
     dca:	5f 5f       	subi	r21, 0xFF	; 255
     dcc:	25 2f       	mov	r18, r21
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	26 17       	cp	r18, r22
     dd2:	37 07       	cpc	r19, r23
     dd4:	90 f3       	brcs	.-28     	; 0xdba <uart_send+0x2c>
     dd6:	86 e9       	ldi	r24, 0x96	; 150
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	e1 d2       	rcall	.+1474   	; 0x139e <puts>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <uart_receiveChar>:
     de6:	e8 ec       	ldi	r30, 0xC8	; 200
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	88 23       	and	r24, r24
     dee:	ec f7       	brge	.-6      	; 0xdea <uart_receiveChar+0x4>
     df0:	80 91 ce 00 	lds	r24, 0x00CE
     df4:	08 95       	ret

00000df6 <enableReceiveINT>:
     df6:	e9 ec       	ldi	r30, 0xC9	; 201
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	80 68       	ori	r24, 0x80	; 128
     dfe:	80 83       	st	Z, r24
     e00:	78 94       	sei
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	08 95       	ret

00000e08 <disableReceiveINT>:
     e08:	e9 ec       	ldi	r30, 0xC9	; 201
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8f 77       	andi	r24, 0x7F	; 127
     e10:	80 83       	st	Z, r24
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	08 95       	ret

00000e18 <receiveStatus>:
     e18:	80 91 38 08 	lds	r24, 0x0838
     e1c:	81 11       	cpse	r24, r1
     e1e:	08 c0       	rjmp	.+16     	; 0xe30 <receiveStatus+0x18>
     e20:	81 e2       	ldi	r24, 0x21	; 33
     e22:	8a 95       	dec	r24
     e24:	f1 f7       	brne	.-4      	; 0xe22 <receiveStatus+0xa>
     e26:	00 00       	nop
     e28:	80 91 38 08 	lds	r24, 0x0838
     e2c:	88 23       	and	r24, r24
     e2e:	c1 f3       	breq	.-16     	; 0xe20 <receiveStatus+0x8>
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	08 95       	ret

00000e36 <buildTransmissionLength>:
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	80 91 2a 08 	lds	r24, 0x082A
     e42:	90 91 2b 08 	lds	r25, 0x082B
     e46:	89 2b       	or	r24, r25
     e48:	e1 f0       	breq	.+56     	; 0xe82 <buildTransmissionLength+0x4c>
     e4a:	c0 e0       	ldi	r28, 0x00	; 0
     e4c:	d0 e0       	ldi	r29, 0x00	; 0
     e4e:	0f e8       	ldi	r16, 0x8F	; 143
     e50:	16 e0       	ldi	r17, 0x06	; 6
     e52:	fe 01       	movw	r30, r28
     e54:	e1 5e       	subi	r30, 0xE1	; 225
     e56:	f7 4f       	sbci	r31, 0xF7	; 247
     e58:	80 81       	ld	r24, Z
     e5a:	ff 93       	push	r31
     e5c:	ef 93       	push	r30
     e5e:	1f 92       	push	r1
     e60:	8f 93       	push	r24
     e62:	1f 93       	push	r17
     e64:	0f 93       	push	r16
     e66:	85 d2       	rcall	.+1290   	; 0x1372 <printf>
     e68:	21 96       	adiw	r28, 0x01	; 1
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	c9 30       	cpi	r28, 0x09	; 9
     e78:	d1 05       	cpc	r29, r1
     e7a:	59 f7       	brne	.-42     	; 0xe52 <buildTransmissionLength+0x1c>
     e7c:	8a e0       	ldi	r24, 0x0A	; 10
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	89 d2       	rcall	.+1298   	; 0x1394 <putchar>
     e82:	10 92 31 08 	sts	0x0831, r1
     e86:	10 92 30 08 	sts	0x0830, r1
     e8a:	20 91 25 08 	lds	r18, 0x0825
     e8e:	80 91 30 08 	lds	r24, 0x0830
     e92:	90 91 31 08 	lds	r25, 0x0831
     e96:	2f 70       	andi	r18, 0x0F	; 15
     e98:	82 0f       	add	r24, r18
     e9a:	91 1d       	adc	r25, r1
     e9c:	90 93 31 08 	sts	0x0831, r25
     ea0:	80 93 30 08 	sts	0x0830, r24
     ea4:	80 91 24 08 	lds	r24, 0x0824
     ea8:	20 91 30 08 	lds	r18, 0x0830
     eac:	30 91 31 08 	lds	r19, 0x0831
     eb0:	8f 70       	andi	r24, 0x0F	; 15
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	ac 01       	movw	r20, r24
     eb6:	44 0f       	add	r20, r20
     eb8:	55 1f       	adc	r21, r21
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	84 0f       	add	r24, r20
     ec8:	95 1f       	adc	r25, r21
     eca:	82 0f       	add	r24, r18
     ecc:	93 1f       	adc	r25, r19
     ece:	90 93 31 08 	sts	0x0831, r25
     ed2:	80 93 30 08 	sts	0x0830, r24
     ed6:	20 91 23 08 	lds	r18, 0x0823
     eda:	80 91 30 08 	lds	r24, 0x0830
     ede:	90 91 31 08 	lds	r25, 0x0831
     ee2:	2f 70       	andi	r18, 0x0F	; 15
     ee4:	34 e6       	ldi	r19, 0x64	; 100
     ee6:	23 9f       	mul	r18, r19
     ee8:	80 0d       	add	r24, r0
     eea:	91 1d       	adc	r25, r1
     eec:	11 24       	eor	r1, r1
     eee:	90 93 31 08 	sts	0x0831, r25
     ef2:	80 93 30 08 	sts	0x0830, r24
     ef6:	60 91 22 08 	lds	r22, 0x0822
     efa:	80 91 30 08 	lds	r24, 0x0830
     efe:	90 91 31 08 	lds	r25, 0x0831
     f02:	6f 70       	andi	r22, 0x0F	; 15
     f04:	48 ee       	ldi	r20, 0xE8	; 232
     f06:	53 e0       	ldi	r21, 0x03	; 3
     f08:	64 9f       	mul	r22, r20
     f0a:	90 01       	movw	r18, r0
     f0c:	65 9f       	mul	r22, r21
     f0e:	30 0d       	add	r19, r0
     f10:	11 24       	eor	r1, r1
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	90 93 31 08 	sts	0x0831, r25
     f1a:	80 93 30 08 	sts	0x0830, r24
     f1e:	60 91 21 08 	lds	r22, 0x0821
     f22:	80 91 30 08 	lds	r24, 0x0830
     f26:	90 91 31 08 	lds	r25, 0x0831
     f2a:	6f 70       	andi	r22, 0x0F	; 15
     f2c:	40 e1       	ldi	r20, 0x10	; 16
     f2e:	57 e2       	ldi	r21, 0x27	; 39
     f30:	64 9f       	mul	r22, r20
     f32:	90 01       	movw	r18, r0
     f34:	65 9f       	mul	r22, r21
     f36:	30 0d       	add	r19, r0
     f38:	11 24       	eor	r1, r1
     f3a:	82 0f       	add	r24, r18
     f3c:	93 1f       	adc	r25, r19
     f3e:	90 93 31 08 	sts	0x0831, r25
     f42:	80 93 30 08 	sts	0x0830, r24
     f46:	80 91 30 08 	lds	r24, 0x0830
     f4a:	90 91 31 08 	lds	r25, 0x0831
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <getTransmissionLength>:
     f58:	80 91 30 08 	lds	r24, 0x0830
     f5c:	90 91 31 08 	lds	r25, 0x0831
     f60:	08 95       	ret

00000f62 <getMessageHeader>:
     f62:	8f e1       	ldi	r24, 0x1F	; 31
     f64:	98 e0       	ldi	r25, 0x08	; 8
     f66:	08 95       	ret

00000f68 <updateRAMAddress>:

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
     f68:	60 93 32 08 	sts	0x0832, r22
     f6c:	70 93 33 08 	sts	0x0833, r23
     f70:	80 93 34 08 	sts	0x0834, r24
     f74:	90 93 35 08 	sts	0x0835, r25
     f78:	08 95       	ret

00000f7a <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ea 01       	movw	r28, r20
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	31 f0       	breq	.+12     	; 0xf94 <sendCommand+0x1a>
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <sendCommand+0x2e>
     f8c:	8f 3f       	cpi	r24, 0xFF	; 255
     f8e:	09 f0       	breq	.+2      	; 0xf92 <sendCommand+0x18>
     f90:	66 c0       	rjmp	.+204    	; 0x105e <sendCommand+0xe4>
     f92:	17 c0       	rjmp	.+46     	; 0xfc2 <sendCommand+0x48>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
     f94:	85 e0       	ldi	r24, 0x05	; 5
     f96:	eb ea       	ldi	r30, 0xAB	; 171
     f98:	f6 e0       	ldi	r31, 0x06	; 6
     f9a:	a9 e3       	ldi	r26, 0x39	; 57
     f9c:	b8 e0       	ldi	r27, 0x08	; 8
     f9e:	01 90       	ld	r0, Z+
     fa0:	0d 92       	st	X+, r0
     fa2:	8a 95       	dec	r24
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <sendCommand+0x24>
			//strcat(fullCommand, "get ");
			break; 
     fa6:	0d c0       	rjmp	.+26     	; 0xfc2 <sendCommand+0x48>
		case SET: 
			strcat(fullCommand, "set ");
     fa8:	a9 e3       	ldi	r26, 0x39	; 57
     faa:	b8 e0       	ldi	r27, 0x08	; 8
     fac:	0d 90       	ld	r0, X+
     fae:	00 20       	and	r0, r0
     fb0:	e9 f7       	brne	.-6      	; 0xfac <sendCommand+0x32>
     fb2:	11 97       	sbiw	r26, 0x01	; 1
     fb4:	85 e0       	ldi	r24, 0x05	; 5
     fb6:	e0 eb       	ldi	r30, 0xB0	; 176
     fb8:	f6 e0       	ldi	r31, 0x06	; 6
     fba:	01 90       	ld	r0, Z+
     fbc:	0d 92       	st	X+, r0
     fbe:	8a 95       	dec	r24
     fc0:	e1 f7       	brne	.-8      	; 0xfba <sendCommand+0x40>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
     fc2:	89 e3       	ldi	r24, 0x39	; 57
     fc4:	98 e0       	ldi	r25, 0x08	; 8
     fc6:	91 d1       	rcall	.+802    	; 0x12ea <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	c7 33       	cpi	r28, 0x37	; 55
     fcc:	d8 07       	cpc	r29, r24
     fce:	71 f0       	breq	.+28     	; 0xfec <sendCommand+0x72>
	{
		strcat(fullCommand, " ");
     fd0:	e9 e3       	ldi	r30, 0x39	; 57
     fd2:	f8 e0       	ldi	r31, 0x08	; 8
     fd4:	01 90       	ld	r0, Z+
     fd6:	00 20       	and	r0, r0
     fd8:	e9 f7       	brne	.-6      	; 0xfd4 <sendCommand+0x5a>
     fda:	31 97       	sbiw	r30, 0x01	; 1
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	80 83       	st	Z, r24
		strcat(fullCommand, value);
     fe4:	be 01       	movw	r22, r28
     fe6:	89 e3       	ldi	r24, 0x39	; 57
     fe8:	98 e0       	ldi	r25, 0x08	; 8
     fea:	7f d1       	rcall	.+766    	; 0x12ea <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
     fec:	c9 e3       	ldi	r28, 0x39	; 57
     fee:	d8 e0       	ldi	r29, 0x08	; 8
     ff0:	fe 01       	movw	r30, r28
     ff2:	01 90       	ld	r0, Z+
     ff4:	00 20       	and	r0, r0
     ff6:	e9 f7       	brne	.-6      	; 0xff2 <sendCommand+0x78>
     ff8:	31 97       	sbiw	r30, 0x01	; 1
     ffa:	8d e0       	ldi	r24, 0x0D	; 13
     ffc:	9a e0       	ldi	r25, 0x0A	; 10
     ffe:	a0 e0       	ldi	r26, 0x00	; 0
    1000:	80 83       	st	Z, r24
    1002:	91 83       	std	Z+1, r25	; 0x01
    1004:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
    1006:	fe 01       	movw	r30, r28
    1008:	01 90       	ld	r0, Z+
    100a:	00 20       	and	r0, r0
    100c:	e9 f7       	brne	.-6      	; 0x1008 <sendCommand+0x8e>
    100e:	31 97       	sbiw	r30, 0x01	; 1
    1010:	8f 01       	movw	r16, r30
    1012:	09 53       	subi	r16, 0x39	; 57
    1014:	18 40       	sbci	r17, 0x08	; 8
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	1f 93       	push	r17
    101c:	0f 93       	push	r16
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	85 eb       	ldi	r24, 0xB5	; 181
    1024:	96 e0       	ldi	r25, 0x06	; 6
    1026:	9f 93       	push	r25
    1028:	8f 93       	push	r24
    102a:	a3 d1       	rcall	.+838    	; 0x1372 <printf>
	uart_send(fullCommand, length);
    102c:	b8 01       	movw	r22, r16
    102e:	ce 01       	movw	r24, r28
    1030:	ae de       	rcall	.-676    	; 0xd8e <uart_send>
	memset(fullCommand, 0x00, 100);
    1032:	84 e6       	ldi	r24, 0x64	; 100
    1034:	fe 01       	movw	r30, r28
    1036:	11 92       	st	Z+, r1
    1038:	8a 95       	dec	r24
    103a:	e9 f7       	brne	.-6      	; 0x1036 <sendCommand+0xbc>
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
    103c:	8a ed       	ldi	r24, 0xDA	; 218
    103e:	96 e0       	ldi	r25, 0x06	; 6
    1040:	ae d1       	rcall	.+860    	; 0x139e <puts>
	printf("Returning!\n");
    1042:	81 ee       	ldi	r24, 0xE1	; 225
    1044:	96 e0       	ldi	r25, 0x06	; 6
    1046:	ab d1       	rcall	.+854    	; 0x139e <puts>
	return 1; 
    1048:	8d b7       	in	r24, 0x3d	; 61
    104a:	9e b7       	in	r25, 0x3e	; 62
    104c:	08 96       	adiw	r24, 0x08	; 8
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	9e bf       	out	0x3e, r25	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	8d bf       	out	0x3d, r24	; 61
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <sendCommand+0xe8>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
	memset(fullCommand, 0x00, 100);
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	08 95       	ret

0000106c <__vector_36>:
	//PORTD |= (1<<CTS);
	//sei();
//}

ISR(USART1_RX_vect)
{
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	0b b6       	in	r0, 0x3b	; 59
    1078:	0f 92       	push	r0
    107a:	2f 93       	push	r18
    107c:	3f 93       	push	r19
    107e:	4f 93       	push	r20
    1080:	5f 93       	push	r21
    1082:	6f 93       	push	r22
    1084:	7f 93       	push	r23
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    108a:	af 93       	push	r26
    108c:	bf 93       	push	r27
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	ef 93       	push	r30
    1094:	ff 93       	push	r31
	cli();
    1096:	f8 94       	cli
	//if(testPrint)
		//printf("Interrupt!\n");
	if(!bufferStart)
    1098:	80 91 36 08 	lds	r24, 0x0836
    109c:	90 91 37 08 	lds	r25, 0x0837
    10a0:	89 2b       	or	r24, r25
    10a2:	f1 f4       	brne	.+60     	; 0x10e0 <__vector_36+0x74>
	{
		buff = uart_receiveChar();
    10a4:	a0 de       	rcall	.-704    	; 0xde6 <uart_receiveChar>
    10a6:	80 93 28 08 	sts	0x0828, r24
		//Header always begins with letter 'R'
		if(buff == headerStartVal)
    10aa:	80 91 28 08 	lds	r24, 0x0828
    10ae:	82 35       	cpi	r24, 0x52	; 82
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <__vector_36+0x48>
    10b2:	ec c0       	rjmp	.+472    	; 0x128c <__vector_36+0x220>
		{
			PORTD &= ~(1<<RTS);
    10b4:	5d 98       	cbi	0x0b, 5	; 11
			//if(testPrint)
				//printf("Beginning Found @ %d\n", i); 
				
			i = 0;
    10b6:	10 92 2d 08 	sts	0x082D, r1
    10ba:	10 92 2c 08 	sts	0x082C, r1
			headerBuffer[i] = buff; 
    10be:	e0 91 2c 08 	lds	r30, 0x082C
    10c2:	f0 91 2d 08 	lds	r31, 0x082D
    10c6:	80 91 28 08 	lds	r24, 0x0828
    10ca:	e1 5e       	subi	r30, 0xE1	; 225
    10cc:	f7 4f       	sbci	r31, 0xF7	; 247
    10ce:	80 83       	st	Z, r24
			
				//if(testPrint)
					//printf("Header: %c @ address %p", headerBuffer[i], headerBuffer); 
					
			bufferStart = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	90 93 37 08 	sts	0x0837, r25
    10d8:	80 93 36 08 	sts	0x0836, r24
			PORTD |= (1<<RTS); 
    10dc:	5d 9a       	sbi	0x0b, 5	; 11
    10de:	d6 c0       	rjmp	.+428    	; 0x128c <__vector_36+0x220>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
    10e0:	80 91 2c 08 	lds	r24, 0x082C
    10e4:	90 91 2d 08 	lds	r25, 0x082D
    10e8:	09 97       	sbiw	r24, 0x09	; 9
    10ea:	58 f4       	brcc	.+22     	; 0x1102 <__vector_36+0x96>
		{
			PORTD &= ~(1<<RTS);
    10ec:	5d 98       	cbi	0x0b, 5	; 11
			headerBuffer[i] = uart_receiveChar();
    10ee:	c0 91 2c 08 	lds	r28, 0x082C
    10f2:	d0 91 2d 08 	lds	r29, 0x082D
    10f6:	77 de       	rcall	.-786    	; 0xde6 <uart_receiveChar>
    10f8:	c1 5e       	subi	r28, 0xE1	; 225
    10fa:	d7 4f       	sbci	r29, 0xF7	; 247
    10fc:	88 83       	st	Y, r24
			//if(testPrint)
				//printf("Header: %c @ address %p\n", headerBuffer[i], headerBuffer + i);
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
			PORTD |= (1<<RTS); 
    10fe:	5d 9a       	sbi	0x0b, 5	; 11
    1100:	c5 c0       	rjmp	.+394    	; 0x128c <__vector_36+0x220>
		}
		else if(i == endHeader)
    1102:	80 91 2c 08 	lds	r24, 0x082C
    1106:	90 91 2d 08 	lds	r25, 0x082D
    110a:	09 97       	sbiw	r24, 0x09	; 9
    110c:	e1 f4       	brne	.+56     	; 0x1146 <__vector_36+0xda>
		{
			transLength = buildTransmissionLength();
    110e:	93 de       	rcall	.-730    	; 0xe36 <buildTransmissionLength>
    1110:	90 93 31 08 	sts	0x0831, r25
    1114:	80 93 30 08 	sts	0x0830, r24
			//i++; 
			if(testPrint)
    1118:	80 91 2a 08 	lds	r24, 0x082A
    111c:	90 91 2b 08 	lds	r25, 0x082B
    1120:	89 2b       	or	r24, r25
    1122:	09 f4       	brne	.+2      	; 0x1126 <__vector_36+0xba>
    1124:	b3 c0       	rjmp	.+358    	; 0x128c <__vector_36+0x220>
				printf("Transmission Length: %d\n", transLength);
    1126:	80 91 30 08 	lds	r24, 0x0830
    112a:	90 91 31 08 	lds	r25, 0x0831
    112e:	9f 93       	push	r25
    1130:	8f 93       	push	r24
    1132:	8c ee       	ldi	r24, 0xEC	; 236
    1134:	96 e0       	ldi	r25, 0x06	; 6
    1136:	9f 93       	push	r25
    1138:	8f 93       	push	r24
    113a:	1b d1       	rcall	.+566    	; 0x1372 <printf>
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	a3 c0       	rjmp	.+326    	; 0x128c <__vector_36+0x220>
		}
		else
		{
			if(i < transLength + endHeader)
    1146:	20 91 30 08 	lds	r18, 0x0830
    114a:	30 91 31 08 	lds	r19, 0x0831
    114e:	80 91 2c 08 	lds	r24, 0x082C
    1152:	90 91 2d 08 	lds	r25, 0x082D
    1156:	27 5f       	subi	r18, 0xF7	; 247
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	82 17       	cp	r24, r18
    115c:	93 07       	cpc	r25, r19
    115e:	08 f0       	brcs	.+2      	; 0x1162 <__vector_36+0xf6>
    1160:	62 c0       	rjmp	.+196    	; 0x1226 <__vector_36+0x1ba>
			{
				//printf("Translength: %d", transLength);
				buff = uart_receiveChar();
    1162:	41 de       	rcall	.-894    	; 0xde6 <uart_receiveChar>
    1164:	80 93 28 08 	sts	0x0828, r24
				if(compressFlag == 1)
    1168:	80 91 2f 08 	lds	r24, 0x082F
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	09 f0       	breq	.+2      	; 0x1172 <__vector_36+0x106>
    1170:	45 c0       	rjmp	.+138    	; 0x11fc <__vector_36+0x190>
				{
					//printf("Compressing!\n");
					PORTD &= ~(1<<CTS);
    1172:	5c 98       	cbi	0x0b, 4	; 11
					if(buff == ':')
    1174:	80 91 28 08 	lds	r24, 0x0828
    1178:	8a 33       	cpi	r24, 0x3A	; 58
    117a:	b1 f4       	brne	.+44     	; 0x11a8 <__vector_36+0x13c>
					{
						PORTD &= ~(1<<RTS);
    117c:	5d 98       	cbi	0x0b, 5	; 11
						RAMWriteByte(buff, RAMAddress + i - endHeader -1);
    117e:	40 91 32 08 	lds	r20, 0x0832
    1182:	50 91 33 08 	lds	r21, 0x0833
    1186:	60 91 34 08 	lds	r22, 0x0834
    118a:	70 91 35 08 	lds	r23, 0x0835
    118e:	20 91 2c 08 	lds	r18, 0x082C
    1192:	30 91 2d 08 	lds	r19, 0x082D
    1196:	80 91 28 08 	lds	r24, 0x0828
    119a:	2a 50       	subi	r18, 0x0A	; 10
    119c:	31 09       	sbc	r19, r1
    119e:	b9 01       	movw	r22, r18
    11a0:	64 0f       	add	r22, r20
    11a2:	75 1f       	adc	r23, r21
    11a4:	d7 dc       	rcall	.-1618   	; 0xb54 <RAMWriteByte>
    11a6:	72 c0       	rjmp	.+228    	; 0x128c <__vector_36+0x220>
					}
					else if(!secondNibble)
    11a8:	80 91 2e 08 	lds	r24, 0x082E
    11ac:	81 11       	cpse	r24, r1
    11ae:	0a c0       	rjmp	.+20     	; 0x11c4 <__vector_36+0x158>
					{
						//Mask the ASCII Nibble 
						compressBuff = (buff & 0x0F);
    11b0:	80 91 28 08 	lds	r24, 0x0828
						//Shift it into the upper nibble  
						compressBuff <<= 4; 
    11b4:	82 95       	swap	r24
    11b6:	80 7f       	andi	r24, 0xF0	; 240
    11b8:	80 93 29 08 	sts	0x0829, r24
						secondNibble =  1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 2e 08 	sts	0x082E, r24
    11c2:	64 c0       	rjmp	.+200    	; 0x128c <__vector_36+0x220>
					}
					else
					{
						compressBuff |= buff; 
    11c4:	90 91 28 08 	lds	r25, 0x0828
    11c8:	80 91 29 08 	lds	r24, 0x0829
    11cc:	89 2b       	or	r24, r25
    11ce:	80 93 29 08 	sts	0x0829, r24
						RAMWriteByte(compressBuff, RAMAddress + i - endHeader -1);
    11d2:	40 91 32 08 	lds	r20, 0x0832
    11d6:	50 91 33 08 	lds	r21, 0x0833
    11da:	60 91 34 08 	lds	r22, 0x0834
    11de:	70 91 35 08 	lds	r23, 0x0835
    11e2:	20 91 2c 08 	lds	r18, 0x082C
    11e6:	30 91 2d 08 	lds	r19, 0x082D
    11ea:	2a 50       	subi	r18, 0x0A	; 10
    11ec:	31 09       	sbc	r19, r1
    11ee:	b9 01       	movw	r22, r18
    11f0:	64 0f       	add	r22, r20
    11f2:	75 1f       	adc	r23, r21
    11f4:	af dc       	rcall	.-1698   	; 0xb54 <RAMWriteByte>
						secondNibble = 0; 
    11f6:	10 92 2e 08 	sts	0x082E, r1
    11fa:	48 c0       	rjmp	.+144    	; 0x128c <__vector_36+0x220>
					}
				}
				else
				{
					RAMWriteByte(buff, RAMAddress + i - endHeader -1);	
    11fc:	40 91 32 08 	lds	r20, 0x0832
    1200:	50 91 33 08 	lds	r21, 0x0833
    1204:	60 91 34 08 	lds	r22, 0x0834
    1208:	70 91 35 08 	lds	r23, 0x0835
    120c:	20 91 2c 08 	lds	r18, 0x082C
    1210:	30 91 2d 08 	lds	r19, 0x082D
    1214:	80 91 28 08 	lds	r24, 0x0828
    1218:	2a 50       	subi	r18, 0x0A	; 10
    121a:	31 09       	sbc	r19, r1
    121c:	b9 01       	movw	r22, r18
    121e:	64 0f       	add	r22, r20
    1220:	75 1f       	adc	r23, r21
    1222:	98 dc       	rcall	.-1744   	; 0xb54 <RAMWriteByte>
    1224:	33 c0       	rjmp	.+102    	; 0x128c <__vector_36+0x220>
			}

			else
			{
				//printf("End of String!\n");
				RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
    1226:	80 91 32 08 	lds	r24, 0x0832
    122a:	90 91 33 08 	lds	r25, 0x0833
    122e:	a0 91 34 08 	lds	r26, 0x0834
    1232:	b0 91 35 08 	lds	r27, 0x0835
    1236:	20 91 2c 08 	lds	r18, 0x082C
    123a:	30 91 2d 08 	lds	r19, 0x082D
    123e:	2a 50       	subi	r18, 0x0A	; 10
    1240:	31 09       	sbc	r19, r1
    1242:	b9 01       	movw	r22, r18
    1244:	68 0f       	add	r22, r24
    1246:	79 1f       	adc	r23, r25
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	84 dc       	rcall	.-1784   	; 0xb54 <RAMWriteByte>
				//cli();
				i = 0;
    124c:	10 92 2d 08 	sts	0x082D, r1
    1250:	10 92 2c 08 	sts	0x082C, r1
				bufferStart = 0;
    1254:	10 92 37 08 	sts	0x0837, r1
    1258:	10 92 36 08 	sts	0x0836, r1
				compressFlag = 0; 
    125c:	10 92 2f 08 	sts	0x082F, r1
				secondNibble = 0; 
    1260:	10 92 2e 08 	sts	0x082E, r1
				compressBuff = 0x00; 
    1264:	10 92 29 08 	sts	0x0829, r1
				//done receiving
				receiveWifiFlag = 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	80 93 38 08 	sts	0x0838, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
    126e:	e3 dd       	rcall	.-1082   	; 0xe36 <buildTransmissionLength>
    1270:	9f 93       	push	r25
    1272:	8f 93       	push	r24
    1274:	8c ee       	ldi	r24, 0xEC	; 236
    1276:	96 e0       	ldi	r25, 0x06	; 6
    1278:	9f 93       	push	r25
    127a:	8f 93       	push	r24
    127c:	7a d0       	rcall	.+244    	; 0x1372 <printf>
				printf("Done Receiving!\n");
    127e:	85 e0       	ldi	r24, 0x05	; 5
    1280:	97 e0       	ldi	r25, 0x07	; 7
    1282:	8d d0       	rcall	.+282    	; 0x139e <puts>
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
		}
		//printf("%d\n", i); 
		//i++; 
	}
	//if(bufferStart && !receiveWifiFlag)
	i++; 
    128c:	80 91 2c 08 	lds	r24, 0x082C
    1290:	90 91 2d 08 	lds	r25, 0x082D
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	90 93 2d 08 	sts	0x082D, r25
    129a:	80 93 2c 08 	sts	0x082C, r24
		
	PORTD |= (1<<CTS); 
    129e:	5c 9a       	sbi	0x0b, 4	; 11
	sei(); 
    12a0:	78 94       	sei
}
    12a2:	ff 91       	pop	r31
    12a4:	ef 91       	pop	r30
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	bf 91       	pop	r27
    12ac:	af 91       	pop	r26
    12ae:	9f 91       	pop	r25
    12b0:	8f 91       	pop	r24
    12b2:	7f 91       	pop	r23
    12b4:	6f 91       	pop	r22
    12b6:	5f 91       	pop	r21
    12b8:	4f 91       	pop	r20
    12ba:	3f 91       	pop	r19
    12bc:	2f 91       	pop	r18
    12be:	0f 90       	pop	r0
    12c0:	0b be       	out	0x3b, r0	; 59
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <__umulhisi3>:
    12cc:	a2 9f       	mul	r26, r18
    12ce:	b0 01       	movw	r22, r0
    12d0:	b3 9f       	mul	r27, r19
    12d2:	c0 01       	movw	r24, r0
    12d4:	a3 9f       	mul	r26, r19
    12d6:	70 0d       	add	r23, r0
    12d8:	81 1d       	adc	r24, r1
    12da:	11 24       	eor	r1, r1
    12dc:	91 1d       	adc	r25, r1
    12de:	b2 9f       	mul	r27, r18
    12e0:	70 0d       	add	r23, r0
    12e2:	81 1d       	adc	r24, r1
    12e4:	11 24       	eor	r1, r1
    12e6:	91 1d       	adc	r25, r1
    12e8:	08 95       	ret

000012ea <strcat>:
    12ea:	fb 01       	movw	r30, r22
    12ec:	dc 01       	movw	r26, r24
    12ee:	0d 90       	ld	r0, X+
    12f0:	00 20       	and	r0, r0
    12f2:	e9 f7       	brne	.-6      	; 0x12ee <strcat+0x4>
    12f4:	11 97       	sbiw	r26, 0x01	; 1
    12f6:	01 90       	ld	r0, Z+
    12f8:	0d 92       	st	X+, r0
    12fa:	00 20       	and	r0, r0
    12fc:	e1 f7       	brne	.-8      	; 0x12f6 <strcat+0xc>
    12fe:	08 95       	ret

00001300 <strcpy>:
    1300:	fb 01       	movw	r30, r22
    1302:	dc 01       	movw	r26, r24
    1304:	01 90       	ld	r0, Z+
    1306:	0d 92       	st	X+, r0
    1308:	00 20       	and	r0, r0
    130a:	e1 f7       	brne	.-8      	; 0x1304 <strcpy+0x4>
    130c:	08 95       	ret

0000130e <fputc>:
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	18 2f       	mov	r17, r24
    1318:	09 2f       	mov	r16, r25
    131a:	eb 01       	movw	r28, r22
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	81 fd       	sbrc	r24, 1
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <fputc+0x1a>
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	9f ef       	ldi	r25, 0xFF	; 255
    1326:	20 c0       	rjmp	.+64     	; 0x1368 <fputc+0x5a>
    1328:	82 ff       	sbrs	r24, 2
    132a:	10 c0       	rjmp	.+32     	; 0x134c <fputc+0x3e>
    132c:	4e 81       	ldd	r20, Y+6	; 0x06
    132e:	5f 81       	ldd	r21, Y+7	; 0x07
    1330:	2c 81       	ldd	r18, Y+4	; 0x04
    1332:	3d 81       	ldd	r19, Y+5	; 0x05
    1334:	42 17       	cp	r20, r18
    1336:	53 07       	cpc	r21, r19
    1338:	7c f4       	brge	.+30     	; 0x1358 <fputc+0x4a>
    133a:	e8 81       	ld	r30, Y
    133c:	f9 81       	ldd	r31, Y+1	; 0x01
    133e:	9f 01       	movw	r18, r30
    1340:	2f 5f       	subi	r18, 0xFF	; 255
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	39 83       	std	Y+1, r19	; 0x01
    1346:	28 83       	st	Y, r18
    1348:	10 83       	st	Z, r17
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <fputc+0x4a>
    134c:	e8 85       	ldd	r30, Y+8	; 0x08
    134e:	f9 85       	ldd	r31, Y+9	; 0x09
    1350:	81 2f       	mov	r24, r17
    1352:	09 95       	icall
    1354:	89 2b       	or	r24, r25
    1356:	29 f7       	brne	.-54     	; 0x1322 <fputc+0x14>
    1358:	2e 81       	ldd	r18, Y+6	; 0x06
    135a:	3f 81       	ldd	r19, Y+7	; 0x07
    135c:	2f 5f       	subi	r18, 0xFF	; 255
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	3f 83       	std	Y+7, r19	; 0x07
    1362:	2e 83       	std	Y+6, r18	; 0x06
    1364:	81 2f       	mov	r24, r17
    1366:	90 2f       	mov	r25, r16
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	08 95       	ret

00001372 <printf>:
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	fe 01       	movw	r30, r28
    137c:	35 96       	adiw	r30, 0x05	; 5
    137e:	61 91       	ld	r22, Z+
    1380:	71 91       	ld	r23, Z+
    1382:	af 01       	movw	r20, r30
    1384:	80 91 9f 08 	lds	r24, 0x089F
    1388:	90 91 a0 08 	lds	r25, 0x08A0
    138c:	35 d0       	rcall	.+106    	; 0x13f8 <vfprintf>
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <putchar>:
    1394:	60 91 9f 08 	lds	r22, 0x089F
    1398:	70 91 a0 08 	lds	r23, 0x08A0
    139c:	b8 cf       	rjmp	.-144    	; 0x130e <fputc>

0000139e <puts>:
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	e0 91 9f 08 	lds	r30, 0x089F
    13aa:	f0 91 a0 08 	lds	r31, 0x08A0
    13ae:	23 81       	ldd	r18, Z+3	; 0x03
    13b0:	21 ff       	sbrs	r18, 1
    13b2:	1b c0       	rjmp	.+54     	; 0x13ea <puts+0x4c>
    13b4:	ec 01       	movw	r28, r24
    13b6:	00 e0       	ldi	r16, 0x00	; 0
    13b8:	10 e0       	ldi	r17, 0x00	; 0
    13ba:	89 91       	ld	r24, Y+
    13bc:	60 91 9f 08 	lds	r22, 0x089F
    13c0:	70 91 a0 08 	lds	r23, 0x08A0
    13c4:	db 01       	movw	r26, r22
    13c6:	18 96       	adiw	r26, 0x08	; 8
    13c8:	ed 91       	ld	r30, X+
    13ca:	fc 91       	ld	r31, X
    13cc:	19 97       	sbiw	r26, 0x09	; 9
    13ce:	88 23       	and	r24, r24
    13d0:	31 f0       	breq	.+12     	; 0x13de <puts+0x40>
    13d2:	09 95       	icall
    13d4:	89 2b       	or	r24, r25
    13d6:	89 f3       	breq	.-30     	; 0x13ba <puts+0x1c>
    13d8:	0f ef       	ldi	r16, 0xFF	; 255
    13da:	1f ef       	ldi	r17, 0xFF	; 255
    13dc:	ee cf       	rjmp	.-36     	; 0x13ba <puts+0x1c>
    13de:	8a e0       	ldi	r24, 0x0A	; 10
    13e0:	09 95       	icall
    13e2:	89 2b       	or	r24, r25
    13e4:	11 f4       	brne	.+4      	; 0x13ea <puts+0x4c>
    13e6:	c8 01       	movw	r24, r16
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <puts+0x50>
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	9f ef       	ldi	r25, 0xFF	; 255
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	08 95       	ret

000013f8 <vfprintf>:
    13f8:	2f 92       	push	r2
    13fa:	3f 92       	push	r3
    13fc:	4f 92       	push	r4
    13fe:	5f 92       	push	r5
    1400:	6f 92       	push	r6
    1402:	7f 92       	push	r7
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	2c 97       	sbiw	r28, 0x0c	; 12
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	7c 01       	movw	r14, r24
    142e:	6b 01       	movw	r12, r22
    1430:	8a 01       	movw	r16, r20
    1432:	fc 01       	movw	r30, r24
    1434:	17 82       	std	Z+7, r1	; 0x07
    1436:	16 82       	std	Z+6, r1	; 0x06
    1438:	83 81       	ldd	r24, Z+3	; 0x03
    143a:	81 ff       	sbrs	r24, 1
    143c:	b0 c1       	rjmp	.+864    	; 0x179e <vfprintf+0x3a6>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	4c 01       	movw	r8, r24
    1444:	f7 01       	movw	r30, r14
    1446:	93 81       	ldd	r25, Z+3	; 0x03
    1448:	f6 01       	movw	r30, r12
    144a:	93 fd       	sbrc	r25, 3
    144c:	85 91       	lpm	r24, Z+
    144e:	93 ff       	sbrs	r25, 3
    1450:	81 91       	ld	r24, Z+
    1452:	6f 01       	movw	r12, r30
    1454:	88 23       	and	r24, r24
    1456:	09 f4       	brne	.+2      	; 0x145a <vfprintf+0x62>
    1458:	9e c1       	rjmp	.+828    	; 0x1796 <vfprintf+0x39e>
    145a:	85 32       	cpi	r24, 0x25	; 37
    145c:	39 f4       	brne	.+14     	; 0x146c <vfprintf+0x74>
    145e:	93 fd       	sbrc	r25, 3
    1460:	85 91       	lpm	r24, Z+
    1462:	93 ff       	sbrs	r25, 3
    1464:	81 91       	ld	r24, Z+
    1466:	6f 01       	movw	r12, r30
    1468:	85 32       	cpi	r24, 0x25	; 37
    146a:	21 f4       	brne	.+8      	; 0x1474 <vfprintf+0x7c>
    146c:	b7 01       	movw	r22, r14
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	4e df       	rcall	.-356    	; 0x130e <fputc>
    1472:	e8 cf       	rjmp	.-48     	; 0x1444 <vfprintf+0x4c>
    1474:	51 2c       	mov	r5, r1
    1476:	31 2c       	mov	r3, r1
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	20 32       	cpi	r18, 0x20	; 32
    147c:	a0 f4       	brcc	.+40     	; 0x14a6 <vfprintf+0xae>
    147e:	8b 32       	cpi	r24, 0x2B	; 43
    1480:	69 f0       	breq	.+26     	; 0x149c <vfprintf+0xa4>
    1482:	30 f4       	brcc	.+12     	; 0x1490 <vfprintf+0x98>
    1484:	80 32       	cpi	r24, 0x20	; 32
    1486:	59 f0       	breq	.+22     	; 0x149e <vfprintf+0xa6>
    1488:	83 32       	cpi	r24, 0x23	; 35
    148a:	69 f4       	brne	.+26     	; 0x14a6 <vfprintf+0xae>
    148c:	20 61       	ori	r18, 0x10	; 16
    148e:	2c c0       	rjmp	.+88     	; 0x14e8 <vfprintf+0xf0>
    1490:	8d 32       	cpi	r24, 0x2D	; 45
    1492:	39 f0       	breq	.+14     	; 0x14a2 <vfprintf+0xaa>
    1494:	80 33       	cpi	r24, 0x30	; 48
    1496:	39 f4       	brne	.+14     	; 0x14a6 <vfprintf+0xae>
    1498:	21 60       	ori	r18, 0x01	; 1
    149a:	26 c0       	rjmp	.+76     	; 0x14e8 <vfprintf+0xf0>
    149c:	22 60       	ori	r18, 0x02	; 2
    149e:	24 60       	ori	r18, 0x04	; 4
    14a0:	23 c0       	rjmp	.+70     	; 0x14e8 <vfprintf+0xf0>
    14a2:	28 60       	ori	r18, 0x08	; 8
    14a4:	21 c0       	rjmp	.+66     	; 0x14e8 <vfprintf+0xf0>
    14a6:	27 fd       	sbrc	r18, 7
    14a8:	27 c0       	rjmp	.+78     	; 0x14f8 <vfprintf+0x100>
    14aa:	30 ed       	ldi	r19, 0xD0	; 208
    14ac:	38 0f       	add	r19, r24
    14ae:	3a 30       	cpi	r19, 0x0A	; 10
    14b0:	78 f4       	brcc	.+30     	; 0x14d0 <vfprintf+0xd8>
    14b2:	26 ff       	sbrs	r18, 6
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <vfprintf+0xca>
    14b6:	fa e0       	ldi	r31, 0x0A	; 10
    14b8:	5f 9e       	mul	r5, r31
    14ba:	30 0d       	add	r19, r0
    14bc:	11 24       	eor	r1, r1
    14be:	53 2e       	mov	r5, r19
    14c0:	13 c0       	rjmp	.+38     	; 0x14e8 <vfprintf+0xf0>
    14c2:	8a e0       	ldi	r24, 0x0A	; 10
    14c4:	38 9e       	mul	r3, r24
    14c6:	30 0d       	add	r19, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	33 2e       	mov	r3, r19
    14cc:	20 62       	ori	r18, 0x20	; 32
    14ce:	0c c0       	rjmp	.+24     	; 0x14e8 <vfprintf+0xf0>
    14d0:	8e 32       	cpi	r24, 0x2E	; 46
    14d2:	21 f4       	brne	.+8      	; 0x14dc <vfprintf+0xe4>
    14d4:	26 fd       	sbrc	r18, 6
    14d6:	5f c1       	rjmp	.+702    	; 0x1796 <vfprintf+0x39e>
    14d8:	20 64       	ori	r18, 0x40	; 64
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <vfprintf+0xf0>
    14dc:	8c 36       	cpi	r24, 0x6C	; 108
    14de:	11 f4       	brne	.+4      	; 0x14e4 <vfprintf+0xec>
    14e0:	20 68       	ori	r18, 0x80	; 128
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <vfprintf+0xf0>
    14e4:	88 36       	cpi	r24, 0x68	; 104
    14e6:	41 f4       	brne	.+16     	; 0x14f8 <vfprintf+0x100>
    14e8:	f6 01       	movw	r30, r12
    14ea:	93 fd       	sbrc	r25, 3
    14ec:	85 91       	lpm	r24, Z+
    14ee:	93 ff       	sbrs	r25, 3
    14f0:	81 91       	ld	r24, Z+
    14f2:	6f 01       	movw	r12, r30
    14f4:	81 11       	cpse	r24, r1
    14f6:	c1 cf       	rjmp	.-126    	; 0x147a <vfprintf+0x82>
    14f8:	98 2f       	mov	r25, r24
    14fa:	9f 7d       	andi	r25, 0xDF	; 223
    14fc:	95 54       	subi	r25, 0x45	; 69
    14fe:	93 30       	cpi	r25, 0x03	; 3
    1500:	28 f4       	brcc	.+10     	; 0x150c <vfprintf+0x114>
    1502:	0c 5f       	subi	r16, 0xFC	; 252
    1504:	1f 4f       	sbci	r17, 0xFF	; 255
    1506:	ff e3       	ldi	r31, 0x3F	; 63
    1508:	f9 83       	std	Y+1, r31	; 0x01
    150a:	0d c0       	rjmp	.+26     	; 0x1526 <vfprintf+0x12e>
    150c:	83 36       	cpi	r24, 0x63	; 99
    150e:	31 f0       	breq	.+12     	; 0x151c <vfprintf+0x124>
    1510:	83 37       	cpi	r24, 0x73	; 115
    1512:	71 f0       	breq	.+28     	; 0x1530 <vfprintf+0x138>
    1514:	83 35       	cpi	r24, 0x53	; 83
    1516:	09 f0       	breq	.+2      	; 0x151a <vfprintf+0x122>
    1518:	57 c0       	rjmp	.+174    	; 0x15c8 <vfprintf+0x1d0>
    151a:	21 c0       	rjmp	.+66     	; 0x155e <vfprintf+0x166>
    151c:	f8 01       	movw	r30, r16
    151e:	80 81       	ld	r24, Z
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	0e 5f       	subi	r16, 0xFE	; 254
    1524:	1f 4f       	sbci	r17, 0xFF	; 255
    1526:	44 24       	eor	r4, r4
    1528:	43 94       	inc	r4
    152a:	51 2c       	mov	r5, r1
    152c:	54 01       	movw	r10, r8
    152e:	14 c0       	rjmp	.+40     	; 0x1558 <vfprintf+0x160>
    1530:	38 01       	movw	r6, r16
    1532:	f2 e0       	ldi	r31, 0x02	; 2
    1534:	6f 0e       	add	r6, r31
    1536:	71 1c       	adc	r7, r1
    1538:	f8 01       	movw	r30, r16
    153a:	a0 80       	ld	r10, Z
    153c:	b1 80       	ldd	r11, Z+1	; 0x01
    153e:	26 ff       	sbrs	r18, 6
    1540:	03 c0       	rjmp	.+6      	; 0x1548 <vfprintf+0x150>
    1542:	65 2d       	mov	r22, r5
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0x154>
    1548:	6f ef       	ldi	r22, 0xFF	; 255
    154a:	7f ef       	ldi	r23, 0xFF	; 255
    154c:	c5 01       	movw	r24, r10
    154e:	2c 87       	std	Y+12, r18	; 0x0c
    1550:	4c d1       	rcall	.+664    	; 0x17ea <strnlen>
    1552:	2c 01       	movw	r4, r24
    1554:	83 01       	movw	r16, r6
    1556:	2c 85       	ldd	r18, Y+12	; 0x0c
    1558:	2f 77       	andi	r18, 0x7F	; 127
    155a:	22 2e       	mov	r2, r18
    155c:	16 c0       	rjmp	.+44     	; 0x158a <vfprintf+0x192>
    155e:	38 01       	movw	r6, r16
    1560:	f2 e0       	ldi	r31, 0x02	; 2
    1562:	6f 0e       	add	r6, r31
    1564:	71 1c       	adc	r7, r1
    1566:	f8 01       	movw	r30, r16
    1568:	a0 80       	ld	r10, Z
    156a:	b1 80       	ldd	r11, Z+1	; 0x01
    156c:	26 ff       	sbrs	r18, 6
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <vfprintf+0x17e>
    1570:	65 2d       	mov	r22, r5
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	02 c0       	rjmp	.+4      	; 0x157a <vfprintf+0x182>
    1576:	6f ef       	ldi	r22, 0xFF	; 255
    1578:	7f ef       	ldi	r23, 0xFF	; 255
    157a:	c5 01       	movw	r24, r10
    157c:	2c 87       	std	Y+12, r18	; 0x0c
    157e:	2a d1       	rcall	.+596    	; 0x17d4 <strnlen_P>
    1580:	2c 01       	movw	r4, r24
    1582:	2c 85       	ldd	r18, Y+12	; 0x0c
    1584:	20 68       	ori	r18, 0x80	; 128
    1586:	22 2e       	mov	r2, r18
    1588:	83 01       	movw	r16, r6
    158a:	23 fc       	sbrc	r2, 3
    158c:	19 c0       	rjmp	.+50     	; 0x15c0 <vfprintf+0x1c8>
    158e:	83 2d       	mov	r24, r3
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	48 16       	cp	r4, r24
    1594:	59 06       	cpc	r5, r25
    1596:	a0 f4       	brcc	.+40     	; 0x15c0 <vfprintf+0x1c8>
    1598:	b7 01       	movw	r22, r14
    159a:	80 e2       	ldi	r24, 0x20	; 32
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	b7 de       	rcall	.-658    	; 0x130e <fputc>
    15a0:	3a 94       	dec	r3
    15a2:	f5 cf       	rjmp	.-22     	; 0x158e <vfprintf+0x196>
    15a4:	f5 01       	movw	r30, r10
    15a6:	27 fc       	sbrc	r2, 7
    15a8:	85 91       	lpm	r24, Z+
    15aa:	27 fe       	sbrs	r2, 7
    15ac:	81 91       	ld	r24, Z+
    15ae:	5f 01       	movw	r10, r30
    15b0:	b7 01       	movw	r22, r14
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	ac de       	rcall	.-680    	; 0x130e <fputc>
    15b6:	31 10       	cpse	r3, r1
    15b8:	3a 94       	dec	r3
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	4f 1a       	sub	r4, r31
    15be:	51 08       	sbc	r5, r1
    15c0:	41 14       	cp	r4, r1
    15c2:	51 04       	cpc	r5, r1
    15c4:	79 f7       	brne	.-34     	; 0x15a4 <vfprintf+0x1ac>
    15c6:	de c0       	rjmp	.+444    	; 0x1784 <vfprintf+0x38c>
    15c8:	84 36       	cpi	r24, 0x64	; 100
    15ca:	11 f0       	breq	.+4      	; 0x15d0 <vfprintf+0x1d8>
    15cc:	89 36       	cpi	r24, 0x69	; 105
    15ce:	31 f5       	brne	.+76     	; 0x161c <vfprintf+0x224>
    15d0:	f8 01       	movw	r30, r16
    15d2:	27 ff       	sbrs	r18, 7
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <vfprintf+0x1ec>
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	0c 5f       	subi	r16, 0xFC	; 252
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	08 c0       	rjmp	.+16     	; 0x15f4 <vfprintf+0x1fc>
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	88 27       	eor	r24, r24
    15ea:	77 fd       	sbrc	r23, 7
    15ec:	80 95       	com	r24
    15ee:	98 2f       	mov	r25, r24
    15f0:	0e 5f       	subi	r16, 0xFE	; 254
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	2f 76       	andi	r18, 0x6F	; 111
    15f6:	b2 2e       	mov	r11, r18
    15f8:	97 ff       	sbrs	r25, 7
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <vfprintf+0x216>
    15fc:	90 95       	com	r25
    15fe:	80 95       	com	r24
    1600:	70 95       	com	r23
    1602:	61 95       	neg	r22
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	8f 4f       	sbci	r24, 0xFF	; 255
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	20 68       	ori	r18, 0x80	; 128
    160c:	b2 2e       	mov	r11, r18
    160e:	2a e0       	ldi	r18, 0x0A	; 10
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	a4 01       	movw	r20, r8
    1614:	f5 d0       	rcall	.+490    	; 0x1800 <__ultoa_invert>
    1616:	a8 2e       	mov	r10, r24
    1618:	a8 18       	sub	r10, r8
    161a:	43 c0       	rjmp	.+134    	; 0x16a2 <vfprintf+0x2aa>
    161c:	85 37       	cpi	r24, 0x75	; 117
    161e:	29 f4       	brne	.+10     	; 0x162a <vfprintf+0x232>
    1620:	2f 7e       	andi	r18, 0xEF	; 239
    1622:	b2 2e       	mov	r11, r18
    1624:	2a e0       	ldi	r18, 0x0A	; 10
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	25 c0       	rjmp	.+74     	; 0x1674 <vfprintf+0x27c>
    162a:	f2 2f       	mov	r31, r18
    162c:	f9 7f       	andi	r31, 0xF9	; 249
    162e:	bf 2e       	mov	r11, r31
    1630:	8f 36       	cpi	r24, 0x6F	; 111
    1632:	c1 f0       	breq	.+48     	; 0x1664 <vfprintf+0x26c>
    1634:	18 f4       	brcc	.+6      	; 0x163c <vfprintf+0x244>
    1636:	88 35       	cpi	r24, 0x58	; 88
    1638:	79 f0       	breq	.+30     	; 0x1658 <vfprintf+0x260>
    163a:	ad c0       	rjmp	.+346    	; 0x1796 <vfprintf+0x39e>
    163c:	80 37       	cpi	r24, 0x70	; 112
    163e:	19 f0       	breq	.+6      	; 0x1646 <vfprintf+0x24e>
    1640:	88 37       	cpi	r24, 0x78	; 120
    1642:	21 f0       	breq	.+8      	; 0x164c <vfprintf+0x254>
    1644:	a8 c0       	rjmp	.+336    	; 0x1796 <vfprintf+0x39e>
    1646:	2f 2f       	mov	r18, r31
    1648:	20 61       	ori	r18, 0x10	; 16
    164a:	b2 2e       	mov	r11, r18
    164c:	b4 fe       	sbrs	r11, 4
    164e:	0d c0       	rjmp	.+26     	; 0x166a <vfprintf+0x272>
    1650:	8b 2d       	mov	r24, r11
    1652:	84 60       	ori	r24, 0x04	; 4
    1654:	b8 2e       	mov	r11, r24
    1656:	09 c0       	rjmp	.+18     	; 0x166a <vfprintf+0x272>
    1658:	24 ff       	sbrs	r18, 4
    165a:	0a c0       	rjmp	.+20     	; 0x1670 <vfprintf+0x278>
    165c:	9f 2f       	mov	r25, r31
    165e:	96 60       	ori	r25, 0x06	; 6
    1660:	b9 2e       	mov	r11, r25
    1662:	06 c0       	rjmp	.+12     	; 0x1670 <vfprintf+0x278>
    1664:	28 e0       	ldi	r18, 0x08	; 8
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <vfprintf+0x27c>
    166a:	20 e1       	ldi	r18, 0x10	; 16
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <vfprintf+0x27c>
    1670:	20 e1       	ldi	r18, 0x10	; 16
    1672:	32 e0       	ldi	r19, 0x02	; 2
    1674:	f8 01       	movw	r30, r16
    1676:	b7 fe       	sbrs	r11, 7
    1678:	07 c0       	rjmp	.+14     	; 0x1688 <vfprintf+0x290>
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	0c 5f       	subi	r16, 0xFC	; 252
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	06 c0       	rjmp	.+12     	; 0x1694 <vfprintf+0x29c>
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 5f       	subi	r16, 0xFE	; 254
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	a4 01       	movw	r20, r8
    1696:	b4 d0       	rcall	.+360    	; 0x1800 <__ultoa_invert>
    1698:	a8 2e       	mov	r10, r24
    169a:	a8 18       	sub	r10, r8
    169c:	fb 2d       	mov	r31, r11
    169e:	ff 77       	andi	r31, 0x7F	; 127
    16a0:	bf 2e       	mov	r11, r31
    16a2:	b6 fe       	sbrs	r11, 6
    16a4:	0b c0       	rjmp	.+22     	; 0x16bc <vfprintf+0x2c4>
    16a6:	2b 2d       	mov	r18, r11
    16a8:	2e 7f       	andi	r18, 0xFE	; 254
    16aa:	a5 14       	cp	r10, r5
    16ac:	50 f4       	brcc	.+20     	; 0x16c2 <vfprintf+0x2ca>
    16ae:	b4 fe       	sbrs	r11, 4
    16b0:	0a c0       	rjmp	.+20     	; 0x16c6 <vfprintf+0x2ce>
    16b2:	b2 fc       	sbrc	r11, 2
    16b4:	08 c0       	rjmp	.+16     	; 0x16c6 <vfprintf+0x2ce>
    16b6:	2b 2d       	mov	r18, r11
    16b8:	2e 7e       	andi	r18, 0xEE	; 238
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <vfprintf+0x2ce>
    16bc:	7a 2c       	mov	r7, r10
    16be:	2b 2d       	mov	r18, r11
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <vfprintf+0x2d0>
    16c2:	7a 2c       	mov	r7, r10
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <vfprintf+0x2d0>
    16c6:	75 2c       	mov	r7, r5
    16c8:	24 ff       	sbrs	r18, 4
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <vfprintf+0x2ee>
    16cc:	fe 01       	movw	r30, r28
    16ce:	ea 0d       	add	r30, r10
    16d0:	f1 1d       	adc	r31, r1
    16d2:	80 81       	ld	r24, Z
    16d4:	80 33       	cpi	r24, 0x30	; 48
    16d6:	11 f4       	brne	.+4      	; 0x16dc <vfprintf+0x2e4>
    16d8:	29 7e       	andi	r18, 0xE9	; 233
    16da:	09 c0       	rjmp	.+18     	; 0x16ee <vfprintf+0x2f6>
    16dc:	22 ff       	sbrs	r18, 2
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <vfprintf+0x2f4>
    16e0:	73 94       	inc	r7
    16e2:	73 94       	inc	r7
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <vfprintf+0x2f6>
    16e6:	82 2f       	mov	r24, r18
    16e8:	86 78       	andi	r24, 0x86	; 134
    16ea:	09 f0       	breq	.+2      	; 0x16ee <vfprintf+0x2f6>
    16ec:	73 94       	inc	r7
    16ee:	23 fd       	sbrc	r18, 3
    16f0:	12 c0       	rjmp	.+36     	; 0x1716 <vfprintf+0x31e>
    16f2:	20 ff       	sbrs	r18, 0
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <vfprintf+0x30a>
    16f6:	5a 2c       	mov	r5, r10
    16f8:	73 14       	cp	r7, r3
    16fa:	18 f4       	brcc	.+6      	; 0x1702 <vfprintf+0x30a>
    16fc:	53 0c       	add	r5, r3
    16fe:	57 18       	sub	r5, r7
    1700:	73 2c       	mov	r7, r3
    1702:	73 14       	cp	r7, r3
    1704:	60 f4       	brcc	.+24     	; 0x171e <vfprintf+0x326>
    1706:	b7 01       	movw	r22, r14
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	2c 87       	std	Y+12, r18	; 0x0c
    170e:	ff dd       	rcall	.-1026   	; 0x130e <fputc>
    1710:	73 94       	inc	r7
    1712:	2c 85       	ldd	r18, Y+12	; 0x0c
    1714:	f6 cf       	rjmp	.-20     	; 0x1702 <vfprintf+0x30a>
    1716:	73 14       	cp	r7, r3
    1718:	10 f4       	brcc	.+4      	; 0x171e <vfprintf+0x326>
    171a:	37 18       	sub	r3, r7
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <vfprintf+0x328>
    171e:	31 2c       	mov	r3, r1
    1720:	24 ff       	sbrs	r18, 4
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <vfprintf+0x34e>
    1724:	b7 01       	movw	r22, r14
    1726:	80 e3       	ldi	r24, 0x30	; 48
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	2c 87       	std	Y+12, r18	; 0x0c
    172c:	f0 dd       	rcall	.-1056   	; 0x130e <fputc>
    172e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1730:	22 ff       	sbrs	r18, 2
    1732:	16 c0       	rjmp	.+44     	; 0x1760 <vfprintf+0x368>
    1734:	21 ff       	sbrs	r18, 1
    1736:	03 c0       	rjmp	.+6      	; 0x173e <vfprintf+0x346>
    1738:	88 e5       	ldi	r24, 0x58	; 88
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <vfprintf+0x34a>
    173e:	88 e7       	ldi	r24, 0x78	; 120
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	b7 01       	movw	r22, r14
    1744:	0c c0       	rjmp	.+24     	; 0x175e <vfprintf+0x366>
    1746:	82 2f       	mov	r24, r18
    1748:	86 78       	andi	r24, 0x86	; 134
    174a:	51 f0       	breq	.+20     	; 0x1760 <vfprintf+0x368>
    174c:	21 fd       	sbrc	r18, 1
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <vfprintf+0x35c>
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <vfprintf+0x35e>
    1754:	8b e2       	ldi	r24, 0x2B	; 43
    1756:	27 fd       	sbrc	r18, 7
    1758:	8d e2       	ldi	r24, 0x2D	; 45
    175a:	b7 01       	movw	r22, r14
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	d7 dd       	rcall	.-1106   	; 0x130e <fputc>
    1760:	a5 14       	cp	r10, r5
    1762:	30 f4       	brcc	.+12     	; 0x1770 <vfprintf+0x378>
    1764:	b7 01       	movw	r22, r14
    1766:	80 e3       	ldi	r24, 0x30	; 48
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	d1 dd       	rcall	.-1118   	; 0x130e <fputc>
    176c:	5a 94       	dec	r5
    176e:	f8 cf       	rjmp	.-16     	; 0x1760 <vfprintf+0x368>
    1770:	aa 94       	dec	r10
    1772:	f4 01       	movw	r30, r8
    1774:	ea 0d       	add	r30, r10
    1776:	f1 1d       	adc	r31, r1
    1778:	80 81       	ld	r24, Z
    177a:	b7 01       	movw	r22, r14
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	c7 dd       	rcall	.-1138   	; 0x130e <fputc>
    1780:	a1 10       	cpse	r10, r1
    1782:	f6 cf       	rjmp	.-20     	; 0x1770 <vfprintf+0x378>
    1784:	33 20       	and	r3, r3
    1786:	09 f4       	brne	.+2      	; 0x178a <vfprintf+0x392>
    1788:	5d ce       	rjmp	.-838    	; 0x1444 <vfprintf+0x4c>
    178a:	b7 01       	movw	r22, r14
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	be dd       	rcall	.-1156   	; 0x130e <fputc>
    1792:	3a 94       	dec	r3
    1794:	f7 cf       	rjmp	.-18     	; 0x1784 <vfprintf+0x38c>
    1796:	f7 01       	movw	r30, r14
    1798:	86 81       	ldd	r24, Z+6	; 0x06
    179a:	97 81       	ldd	r25, Z+7	; 0x07
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <vfprintf+0x3aa>
    179e:	8f ef       	ldi	r24, 0xFF	; 255
    17a0:	9f ef       	ldi	r25, 0xFF	; 255
    17a2:	2c 96       	adiw	r28, 0x0c	; 12
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	bf 90       	pop	r11
    17c0:	af 90       	pop	r10
    17c2:	9f 90       	pop	r9
    17c4:	8f 90       	pop	r8
    17c6:	7f 90       	pop	r7
    17c8:	6f 90       	pop	r6
    17ca:	5f 90       	pop	r5
    17cc:	4f 90       	pop	r4
    17ce:	3f 90       	pop	r3
    17d0:	2f 90       	pop	r2
    17d2:	08 95       	ret

000017d4 <strnlen_P>:
    17d4:	fc 01       	movw	r30, r24
    17d6:	05 90       	lpm	r0, Z+
    17d8:	61 50       	subi	r22, 0x01	; 1
    17da:	70 40       	sbci	r23, 0x00	; 0
    17dc:	01 10       	cpse	r0, r1
    17de:	d8 f7       	brcc	.-10     	; 0x17d6 <strnlen_P+0x2>
    17e0:	80 95       	com	r24
    17e2:	90 95       	com	r25
    17e4:	8e 0f       	add	r24, r30
    17e6:	9f 1f       	adc	r25, r31
    17e8:	08 95       	ret

000017ea <strnlen>:
    17ea:	fc 01       	movw	r30, r24
    17ec:	61 50       	subi	r22, 0x01	; 1
    17ee:	70 40       	sbci	r23, 0x00	; 0
    17f0:	01 90       	ld	r0, Z+
    17f2:	01 10       	cpse	r0, r1
    17f4:	d8 f7       	brcc	.-10     	; 0x17ec <strnlen+0x2>
    17f6:	80 95       	com	r24
    17f8:	90 95       	com	r25
    17fa:	8e 0f       	add	r24, r30
    17fc:	9f 1f       	adc	r25, r31
    17fe:	08 95       	ret

00001800 <__ultoa_invert>:
    1800:	fa 01       	movw	r30, r20
    1802:	aa 27       	eor	r26, r26
    1804:	28 30       	cpi	r18, 0x08	; 8
    1806:	51 f1       	breq	.+84     	; 0x185c <__ultoa_invert+0x5c>
    1808:	20 31       	cpi	r18, 0x10	; 16
    180a:	81 f1       	breq	.+96     	; 0x186c <__ultoa_invert+0x6c>
    180c:	e8 94       	clt
    180e:	6f 93       	push	r22
    1810:	6e 7f       	andi	r22, 0xFE	; 254
    1812:	6e 5f       	subi	r22, 0xFE	; 254
    1814:	7f 4f       	sbci	r23, 0xFF	; 255
    1816:	8f 4f       	sbci	r24, 0xFF	; 255
    1818:	9f 4f       	sbci	r25, 0xFF	; 255
    181a:	af 4f       	sbci	r26, 0xFF	; 255
    181c:	b1 e0       	ldi	r27, 0x01	; 1
    181e:	3e d0       	rcall	.+124    	; 0x189c <__ultoa_invert+0x9c>
    1820:	b4 e0       	ldi	r27, 0x04	; 4
    1822:	3c d0       	rcall	.+120    	; 0x189c <__ultoa_invert+0x9c>
    1824:	67 0f       	add	r22, r23
    1826:	78 1f       	adc	r23, r24
    1828:	89 1f       	adc	r24, r25
    182a:	9a 1f       	adc	r25, r26
    182c:	a1 1d       	adc	r26, r1
    182e:	68 0f       	add	r22, r24
    1830:	79 1f       	adc	r23, r25
    1832:	8a 1f       	adc	r24, r26
    1834:	91 1d       	adc	r25, r1
    1836:	a1 1d       	adc	r26, r1
    1838:	6a 0f       	add	r22, r26
    183a:	71 1d       	adc	r23, r1
    183c:	81 1d       	adc	r24, r1
    183e:	91 1d       	adc	r25, r1
    1840:	a1 1d       	adc	r26, r1
    1842:	20 d0       	rcall	.+64     	; 0x1884 <__ultoa_invert+0x84>
    1844:	09 f4       	brne	.+2      	; 0x1848 <__ultoa_invert+0x48>
    1846:	68 94       	set
    1848:	3f 91       	pop	r19
    184a:	2a e0       	ldi	r18, 0x0A	; 10
    184c:	26 9f       	mul	r18, r22
    184e:	11 24       	eor	r1, r1
    1850:	30 19       	sub	r19, r0
    1852:	30 5d       	subi	r19, 0xD0	; 208
    1854:	31 93       	st	Z+, r19
    1856:	de f6       	brtc	.-74     	; 0x180e <__ultoa_invert+0xe>
    1858:	cf 01       	movw	r24, r30
    185a:	08 95       	ret
    185c:	46 2f       	mov	r20, r22
    185e:	47 70       	andi	r20, 0x07	; 7
    1860:	40 5d       	subi	r20, 0xD0	; 208
    1862:	41 93       	st	Z+, r20
    1864:	b3 e0       	ldi	r27, 0x03	; 3
    1866:	0f d0       	rcall	.+30     	; 0x1886 <__ultoa_invert+0x86>
    1868:	c9 f7       	brne	.-14     	; 0x185c <__ultoa_invert+0x5c>
    186a:	f6 cf       	rjmp	.-20     	; 0x1858 <__ultoa_invert+0x58>
    186c:	46 2f       	mov	r20, r22
    186e:	4f 70       	andi	r20, 0x0F	; 15
    1870:	40 5d       	subi	r20, 0xD0	; 208
    1872:	4a 33       	cpi	r20, 0x3A	; 58
    1874:	18 f0       	brcs	.+6      	; 0x187c <__ultoa_invert+0x7c>
    1876:	49 5d       	subi	r20, 0xD9	; 217
    1878:	31 fd       	sbrc	r19, 1
    187a:	40 52       	subi	r20, 0x20	; 32
    187c:	41 93       	st	Z+, r20
    187e:	02 d0       	rcall	.+4      	; 0x1884 <__ultoa_invert+0x84>
    1880:	a9 f7       	brne	.-22     	; 0x186c <__ultoa_invert+0x6c>
    1882:	ea cf       	rjmp	.-44     	; 0x1858 <__ultoa_invert+0x58>
    1884:	b4 e0       	ldi	r27, 0x04	; 4
    1886:	a6 95       	lsr	r26
    1888:	97 95       	ror	r25
    188a:	87 95       	ror	r24
    188c:	77 95       	ror	r23
    188e:	67 95       	ror	r22
    1890:	ba 95       	dec	r27
    1892:	c9 f7       	brne	.-14     	; 0x1886 <__ultoa_invert+0x86>
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	61 05       	cpc	r22, r1
    1898:	71 05       	cpc	r23, r1
    189a:	08 95       	ret
    189c:	9b 01       	movw	r18, r22
    189e:	ac 01       	movw	r20, r24
    18a0:	0a 2e       	mov	r0, r26
    18a2:	06 94       	lsr	r0
    18a4:	57 95       	ror	r21
    18a6:	47 95       	ror	r20
    18a8:	37 95       	ror	r19
    18aa:	27 95       	ror	r18
    18ac:	ba 95       	dec	r27
    18ae:	c9 f7       	brne	.-14     	; 0x18a2 <__ultoa_invert+0xa2>
    18b0:	62 0f       	add	r22, r18
    18b2:	73 1f       	adc	r23, r19
    18b4:	84 1f       	adc	r24, r20
    18b6:	95 1f       	adc	r25, r21
    18b8:	a0 1d       	adc	r26, r0
    18ba:	08 95       	ret

000018bc <_exit>:
    18bc:	f8 94       	cli

000018be <__stop_program>:
    18be:	ff cf       	rjmp	.-2      	; 0x18be <__stop_program>
