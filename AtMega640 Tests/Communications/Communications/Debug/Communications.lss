
Communications.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000526  00800200  00001cda  00001d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  00800726  00800726  00002294  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000381a  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f67  00000000  00000000  00005e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c49  00000000  00000000  00006d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b14  00000000  00000000  000089cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008f3  00000000  00000000  000094e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000286e  00000000  00000000  00009dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a8  00000000  00000000  0000c641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8d c0       	rjmp	.+282    	; 0x120 <__bad_interrupt>
       6:	00 00       	nop
       8:	8b c0       	rjmp	.+278    	; 0x120 <__bad_interrupt>
       a:	00 00       	nop
       c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c0       	rjmp	.+250    	; 0x120 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c0       	rjmp	.+246    	; 0x120 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c0       	rjmp	.+242    	; 0x120 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c0       	rjmp	.+238    	; 0x120 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c0       	rjmp	.+234    	; 0x120 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c0       	rjmp	.+230    	; 0x120 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c0       	rjmp	.+226    	; 0x120 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c0       	rjmp	.+222    	; 0x120 <__bad_interrupt>
      42:	00 00       	nop
      44:	6d c0       	rjmp	.+218    	; 0x120 <__bad_interrupt>
      46:	00 00       	nop
      48:	6b c0       	rjmp	.+214    	; 0x120 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c0       	rjmp	.+210    	; 0x120 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c1       	rjmp	.+884    	; 0x3c6 <__vector_20>
      52:	00 00       	nop
      54:	65 c0       	rjmp	.+202    	; 0x120 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c0       	rjmp	.+198    	; 0x120 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c0       	rjmp	.+194    	; 0x120 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c0       	rjmp	.+190    	; 0x120 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_25>
      68:	5b c0       	rjmp	.+182    	; 0x120 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	59 c0       	rjmp	.+178    	; 0x120 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c0       	rjmp	.+174    	; 0x120 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c0       	rjmp	.+170    	; 0x120 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c0       	rjmp	.+162    	; 0x120 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c0       	rjmp	.+158    	; 0x120 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c0       	rjmp	.+154    	; 0x120 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c0       	rjmp	.+150    	; 0x120 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	49 c0       	rjmp	.+146    	; 0x120 <__bad_interrupt>
      8e:	00 00       	nop
      90:	47 c0       	rjmp	.+142    	; 0x120 <__bad_interrupt>
      92:	00 00       	nop
      94:	45 c0       	rjmp	.+138    	; 0x120 <__bad_interrupt>
      96:	00 00       	nop
      98:	43 c0       	rjmp	.+134    	; 0x120 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	41 c0       	rjmp	.+130    	; 0x120 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3f c0       	rjmp	.+126    	; 0x120 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3d c0       	rjmp	.+122    	; 0x120 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3b c0       	rjmp	.+118    	; 0x120 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	39 c0       	rjmp	.+114    	; 0x120 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	37 c0       	rjmp	.+110    	; 0x120 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	35 c0       	rjmp	.+106    	; 0x120 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	33 c0       	rjmp	.+102    	; 0x120 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	31 c0       	rjmp	.+98     	; 0x120 <__bad_interrupt>
      be:	00 00       	nop
      c0:	2f c0       	rjmp	.+94     	; 0x120 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2d c0       	rjmp	.+90     	; 0x120 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2b c0       	rjmp	.+86     	; 0x120 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	29 c0       	rjmp	.+82     	; 0x120 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	27 c0       	rjmp	.+78     	; 0x120 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	25 c0       	rjmp	.+74     	; 0x120 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	23 c0       	rjmp	.+70     	; 0x120 <__bad_interrupt>
      da:	00 00       	nop
      dc:	21 c0       	rjmp	.+66     	; 0x120 <__bad_interrupt>
      de:	00 00       	nop
      e0:	1f c0       	rjmp	.+62     	; 0x120 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	17 e0       	ldi	r17, 0x07	; 7
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ea ed       	ldi	r30, 0xDA	; 218
      f8:	fc e1       	ldi	r31, 0x1C	; 28
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a6 32       	cpi	r26, 0x26	; 38
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	28 e0       	ldi	r18, 0x08	; 8
     10c:	a6 e2       	ldi	r26, 0x26	; 38
     10e:	b7 e0       	ldi	r27, 0x07	; 7
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	ae 3b       	cpi	r26, 0xBE	; 190
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	86 d1       	rcall	.+780    	; 0x428 <main>
     11c:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <_exit>

00000120 <__bad_interrupt>:
     120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <pollingInit>:
{
	if(Flags[WIFI])
	{
		
	}
}
     122:	e1 e8       	ldi	r30, 0x81	; 129
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	84 60       	ori	r24, 0x04	; 4
     12a:	80 83       	st	Z, r24
     12c:	10 92 84 00 	sts	0x0084, r1
     130:	10 92 85 00 	sts	0x0085, r1
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	80 93 6f 00 	sts	0x006F, r24
     13a:	08 95       	ret

0000013c <clearFlags>:
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	80 91 97 07 	lds	r24, 0x0797
     144:	88 23       	and	r24, r24
     146:	91 f1       	breq	.+100    	; 0x1ac <clearFlags+0x70>
     148:	c3 e3       	ldi	r28, 0x33	; 51
     14a:	d7 e0       	ldi	r29, 0x07	; 7
     14c:	85 e0       	ldi	r24, 0x05	; 5
     14e:	e0 e3       	ldi	r30, 0x30	; 48
     150:	f2 e0       	ldi	r31, 0x02	; 2
     152:	de 01       	movw	r26, r28
     154:	01 90       	ld	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	8a 95       	dec	r24
     15a:	e1 f7       	brne	.-8      	; 0x154 <clearFlags+0x18>
     15c:	de 01       	movw	r26, r28
     15e:	0d 90       	ld	r0, X+
     160:	00 20       	and	r0, r0
     162:	e9 f7       	brne	.-6      	; 0x15e <clearFlags+0x22>
     164:	11 97       	sbiw	r26, 0x01	; 1
     166:	85 e1       	ldi	r24, 0x15	; 21
     168:	e5 e3       	ldi	r30, 0x35	; 53
     16a:	f2 e0       	ldi	r31, 0x02	; 2
     16c:	01 90       	ld	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	8a 95       	dec	r24
     172:	e1 f7       	brne	.-8      	; 0x16c <clearFlags+0x30>
     174:	de 01       	movw	r26, r28
     176:	0d 90       	ld	r0, X+
     178:	00 20       	and	r0, r0
     17a:	e9 f7       	brne	.-6      	; 0x176 <clearFlags+0x3a>
     17c:	11 97       	sbiw	r26, 0x01	; 1
     17e:	82 e1       	ldi	r24, 0x12	; 18
     180:	ea e4       	ldi	r30, 0x4A	; 74
     182:	f2 e0       	ldi	r31, 0x02	; 2
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	8a 95       	dec	r24
     18a:	e1 f7       	brne	.-8      	; 0x184 <clearFlags+0x48>
     18c:	09 90       	ld	r0, Y+
     18e:	00 20       	and	r0, r0
     190:	e9 f7       	brne	.-6      	; 0x18c <clearFlags+0x50>
     192:	de 01       	movw	r26, r28
     194:	11 97       	sbiw	r26, 0x01	; 1
     196:	83 e1       	ldi	r24, 0x13	; 19
     198:	ec e5       	ldi	r30, 0x5C	; 92
     19a:	f2 e0       	ldi	r31, 0x02	; 2
     19c:	01 90       	ld	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	8a 95       	dec	r24
     1a2:	e1 f7       	brne	.-8      	; 0x19c <clearFlags+0x60>
     1a4:	83 e3       	ldi	r24, 0x33	; 51
     1a6:	97 e0       	ldi	r25, 0x07	; 7
     1a8:	f2 d1       	rcall	.+996    	; 0x58e <updateFileEthernet>
     1aa:	36 c0       	rjmp	.+108    	; 0x218 <clearFlags+0xdc>
     1ac:	80 91 98 07 	lds	r24, 0x0798
     1b0:	88 23       	and	r24, r24
     1b2:	91 f1       	breq	.+100    	; 0x218 <clearFlags+0xdc>
     1b4:	c3 e3       	ldi	r28, 0x33	; 51
     1b6:	d7 e0       	ldi	r29, 0x07	; 7
     1b8:	89 e0       	ldi	r24, 0x09	; 9
     1ba:	ef e6       	ldi	r30, 0x6F	; 111
     1bc:	f2 e0       	ldi	r31, 0x02	; 2
     1be:	de 01       	movw	r26, r28
     1c0:	01 90       	ld	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	8a 95       	dec	r24
     1c6:	e1 f7       	brne	.-8      	; 0x1c0 <clearFlags+0x84>
     1c8:	de 01       	movw	r26, r28
     1ca:	0d 90       	ld	r0, X+
     1cc:	00 20       	and	r0, r0
     1ce:	e9 f7       	brne	.-6      	; 0x1ca <clearFlags+0x8e>
     1d0:	11 97       	sbiw	r26, 0x01	; 1
     1d2:	85 e1       	ldi	r24, 0x15	; 21
     1d4:	e5 e3       	ldi	r30, 0x35	; 53
     1d6:	f2 e0       	ldi	r31, 0x02	; 2
     1d8:	01 90       	ld	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	8a 95       	dec	r24
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <clearFlags+0x9c>
     1e0:	de 01       	movw	r26, r28
     1e2:	0d 90       	ld	r0, X+
     1e4:	00 20       	and	r0, r0
     1e6:	e9 f7       	brne	.-6      	; 0x1e2 <clearFlags+0xa6>
     1e8:	11 97       	sbiw	r26, 0x01	; 1
     1ea:	82 e1       	ldi	r24, 0x12	; 18
     1ec:	ea e4       	ldi	r30, 0x4A	; 74
     1ee:	f2 e0       	ldi	r31, 0x02	; 2
     1f0:	01 90       	ld	r0, Z+
     1f2:	0d 92       	st	X+, r0
     1f4:	8a 95       	dec	r24
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <clearFlags+0xb4>
     1f8:	09 90       	ld	r0, Y+
     1fa:	00 20       	and	r0, r0
     1fc:	e9 f7       	brne	.-6      	; 0x1f8 <clearFlags+0xbc>
     1fe:	de 01       	movw	r26, r28
     200:	11 97       	sbiw	r26, 0x01	; 1
     202:	83 e1       	ldi	r24, 0x13	; 19
     204:	ec e5       	ldi	r30, 0x5C	; 92
     206:	f2 e0       	ldi	r31, 0x02	; 2
     208:	01 90       	ld	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	8a 95       	dec	r24
     20e:	e1 f7       	brne	.-8      	; 0x208 <clearFlags+0xcc>
     210:	83 e3       	ldi	r24, 0x33	; 51
     212:	97 e0       	ldi	r25, 0x07	; 7
     214:	0e 94 11 09 	call	0x1222	; 0x1222 <updateFileWifi>
     218:	84 e6       	ldi	r24, 0x64	; 100
     21a:	e3 e3       	ldi	r30, 0x33	; 51
     21c:	f7 e0       	ldi	r31, 0x07	; 7
     21e:	df 01       	movw	r26, r30
     220:	1d 92       	st	X+, r1
     222:	8a 95       	dec	r24
     224:	e9 f7       	brne	.-6      	; 0x220 <clearFlags+0xe4>
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <sendAvailableNetworks>:
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	64 d7       	rcall	.+3784   	; 0x10fe <networkScan>
     236:	0e 94 11 0a 	call	0x1422	; 0x1422 <getTransmissionLength>
     23a:	9f 93       	push	r25
     23c:	8f 93       	push	r24
     23e:	88 e7       	ldi	r24, 0x78	; 120
     240:	92 e0       	ldi	r25, 0x02	; 2
     242:	9f 93       	push	r25
     244:	8f 93       	push	r24
     246:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
     24a:	c3 e3       	ldi	r28, 0x33	; 51
     24c:	d7 e0       	ldi	r29, 0x07	; 7
     24e:	85 e0       	ldi	r24, 0x05	; 5
     250:	e0 e3       	ldi	r30, 0x30	; 48
     252:	f2 e0       	ldi	r31, 0x02	; 2
     254:	de 01       	movw	r26, r28
     256:	01 90       	ld	r0, Z+
     258:	0d 92       	st	X+, r0
     25a:	8a 95       	dec	r24
     25c:	e1 f7       	brne	.-8      	; 0x256 <sendAvailableNetworks+0x2a>
     25e:	de 01       	movw	r26, r28
     260:	0d 90       	ld	r0, X+
     262:	00 20       	and	r0, r0
     264:	e9 f7       	brne	.-6      	; 0x260 <sendAvailableNetworks+0x34>
     266:	11 97       	sbiw	r26, 0x01	; 1
     268:	85 e1       	ldi	r24, 0x15	; 21
     26a:	e5 e3       	ldi	r30, 0x35	; 53
     26c:	f2 e0       	ldi	r31, 0x02	; 2
     26e:	01 90       	ld	r0, Z+
     270:	0d 92       	st	X+, r0
     272:	8a 95       	dec	r24
     274:	e1 f7       	brne	.-8      	; 0x26e <sendAvailableNetworks+0x42>
     276:	de 01       	movw	r26, r28
     278:	0d 90       	ld	r0, X+
     27a:	00 20       	and	r0, r0
     27c:	e9 f7       	brne	.-6      	; 0x278 <sendAvailableNetworks+0x4c>
     27e:	11 97       	sbiw	r26, 0x01	; 1
     280:	83 e1       	ldi	r24, 0x13	; 19
     282:	e9 e8       	ldi	r30, 0x89	; 137
     284:	f2 e0       	ldi	r31, 0x02	; 2
     286:	01 90       	ld	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	8a 95       	dec	r24
     28c:	e1 f7       	brne	.-8      	; 0x286 <sendAvailableNetworks+0x5a>
     28e:	de 01       	movw	r26, r28
     290:	0d 90       	ld	r0, X+
     292:	00 20       	and	r0, r0
     294:	e9 f7       	brne	.-6      	; 0x290 <sendAvailableNetworks+0x64>
     296:	11 97       	sbiw	r26, 0x01	; 1
     298:	83 e1       	ldi	r24, 0x13	; 19
     29a:	ec e5       	ldi	r30, 0x5C	; 92
     29c:	f2 e0       	ldi	r31, 0x02	; 2
     29e:	01 90       	ld	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	8a 95       	dec	r24
     2a4:	e1 f7       	brne	.-8      	; 0x29e <sendAvailableNetworks+0x72>
     2a6:	de 01       	movw	r26, r28
     2a8:	0d 90       	ld	r0, X+
     2aa:	00 20       	and	r0, r0
     2ac:	e9 f7       	brne	.-6      	; 0x2a8 <sendAvailableNetworks+0x7c>
     2ae:	11 97       	sbiw	r26, 0x01	; 1
     2b0:	87 e0       	ldi	r24, 0x07	; 7
     2b2:	ec e9       	ldi	r30, 0x9C	; 156
     2b4:	f2 e0       	ldi	r31, 0x02	; 2
     2b6:	01 90       	ld	r0, Z+
     2b8:	0d 92       	st	X+, r0
     2ba:	8a 95       	dec	r24
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <sendAvailableNetworks+0x8a>
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	83 ea       	ldi	r24, 0xA3	; 163
     2c4:	92 e0       	ldi	r25, 0x02	; 2
     2c6:	9f 93       	push	r25
     2c8:	8f 93       	push	r24
     2ca:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
     2ce:	ce 01       	movw	r24, r28
     2d0:	44 d7       	rcall	.+3720   	; 0x115a <networkQueryString>
     2d2:	8c 01       	movw	r16, r24
     2d4:	ac 01       	movw	r20, r24
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	74 e0       	ldi	r23, 0x04	; 4
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	ab d6       	rcall	.+3414   	; 0x1036 <RAMPrint>
     2e0:	41 e0       	ldi	r20, 0x01	; 1
     2e2:	50 e0       	ldi	r21, 0x00	; 0
     2e4:	b8 01       	movw	r22, r16
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	94 e0       	ldi	r25, 0x04	; 4
     2ea:	0e d4       	rcall	.+2076   	; 0xb08 <SendData>
     2ec:	84 e6       	ldi	r24, 0x64	; 100
     2ee:	fe 01       	movw	r30, r28
     2f0:	11 92       	st	Z+, r1
     2f2:	8a 95       	dec	r24
     2f4:	e9 f7       	brne	.-6      	; 0x2f0 <sendAvailableNetworks+0xc4>
     2f6:	80 eb       	ldi	r24, 0xB0	; 176
     2f8:	92 e0       	ldi	r25, 0x02	; 2
     2fa:	9f 93       	push	r25
     2fc:	8f 93       	push	r24
     2fe:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
     302:	8d b7       	in	r24, 0x3d	; 61
     304:	9e b7       	in	r25, 0x3e	; 62
     306:	0a 96       	adiw	r24, 0x0a	; 10
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	9e bf       	out	0x3e, r25	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	8d bf       	out	0x3d, r24	; 61
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	08 95       	ret

0000031c <getFlagStatus>:
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	ef e6       	ldi	r30, 0x6F	; 111
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	8e 7f       	andi	r24, 0xFE	; 254
     32c:	80 83       	st	Z, r24
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 97 07 	sts	0x0797, r24
     334:	10 92 98 07 	sts	0x0798, r1
     338:	03 e0       	ldi	r16, 0x03	; 3
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e3       	ldi	r19, 0x30	; 48
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	86 eb       	ldi	r24, 0xB6	; 182
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	b6 d0       	rcall	.+364    	; 0x4ba <getFileEthernet>
     34e:	4f e0       	ldi	r20, 0x0F	; 15
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	70 e3       	ldi	r23, 0x30	; 48
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	6d d6       	rcall	.+3290   	; 0x1036 <RAMPrint>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e3       	ldi	r25, 0x30	; 48
     360:	c6 d6       	rcall	.+3468   	; 0x10ee <RAMReadByte>
     362:	c9 e9       	ldi	r28, 0x99	; 153
     364:	d7 e0       	ldi	r29, 0x07	; 7
     366:	8f 70       	andi	r24, 0x0F	; 15
     368:	88 83       	st	Y, r24
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	90 e3       	ldi	r25, 0x30	; 48
     36e:	bf d6       	rcall	.+3454   	; 0x10ee <RAMReadByte>
     370:	8f 70       	andi	r24, 0x0F	; 15
     372:	80 93 9a 07 	sts	0x079A, r24
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	90 e3       	ldi	r25, 0x30	; 48
     37a:	b9 d6       	rcall	.+3442   	; 0x10ee <RAMReadByte>
     37c:	8f 70       	andi	r24, 0x0F	; 15
     37e:	80 93 9b 07 	sts	0x079B, r24
     382:	94 e6       	ldi	r25, 0x64	; 100
     384:	e3 e3       	ldi	r30, 0x33	; 51
     386:	f7 e0       	ldi	r31, 0x07	; 7
     388:	df 01       	movw	r26, r30
     38a:	1d 92       	st	X+, r1
     38c:	9a 95       	dec	r25
     38e:	e9 f7       	brne	.-6      	; 0x38a <getFlagStatus+0x6e>
     390:	98 81       	ld	r25, Y
     392:	91 30       	cpi	r25, 0x01	; 1
     394:	69 f0       	breq	.+26     	; 0x3b0 <getFlagStatus+0x94>
     396:	90 91 9a 07 	lds	r25, 0x079A
     39a:	91 30       	cpi	r25, 0x01	; 1
     39c:	11 f4       	brne	.+4      	; 0x3a2 <getFlagStatus+0x86>
     39e:	46 df       	rcall	.-372    	; 0x22c <sendAvailableNetworks>
     3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <getFlagStatus+0x94>
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	29 f4       	brne	.+10     	; 0x3b0 <getFlagStatus+0x94>
     3a6:	6b ed       	ldi	r22, 0xDB	; 219
     3a8:	72 e0       	ldi	r23, 0x02	; 2
     3aa:	89 ee       	ldi	r24, 0xE9	; 233
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	b7 d6       	rcall	.+3438   	; 0x111e <networkConnect>
     3b0:	c5 de       	rcall	.-630    	; 0x13c <clearFlags>
     3b2:	ef e6       	ldi	r30, 0x6F	; 111
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	81 60       	ori	r24, 0x01	; 1
     3ba:	80 83       	st	Z, r24
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	08 95       	ret

000003c6 <__vector_20>:

//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	0b b6       	in	r0, 0x3b	; 59
     3d2:	0f 92       	push	r0
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	4f 93       	push	r20
     3da:	5f 93       	push	r21
     3dc:	6f 93       	push	r22
     3de:	7f 93       	push	r23
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
	cli(); 
     3ec:	f8 94       	cli
	printf("Flag Status\n");
     3ee:	80 ef       	ldi	r24, 0xF0	; 240
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <puts>
	getFlagStatus(); 
     3f6:	92 df       	rcall	.-220    	; 0x31c <getFlagStatus>
	TCNT1L = 0x00;
     3f8:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
     3fc:	10 92 85 00 	sts	0x0085, r1
	sei();  
     400:	78 94       	sei
}
     402:	ff 91       	pop	r31
     404:	ef 91       	pop	r30
     406:	bf 91       	pop	r27
     408:	af 91       	pop	r26
     40a:	9f 91       	pop	r25
     40c:	8f 91       	pop	r24
     40e:	7f 91       	pop	r23
     410:	6f 91       	pop	r22
     412:	5f 91       	pop	r21
     414:	4f 91       	pop	r20
     416:	3f 91       	pop	r19
     418:	2f 91       	pop	r18
     41a:	0f 90       	pop	r0
     41c:	0b be       	out	0x3b, r0	; 59
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <main>:
#include "Wifi/Wifi.h"
#include "RAM/MemoryMap.h"
#include "ClientController.h"

int main(void)
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	c4 56       	subi	r28, 0x64	; 100
     432:	d1 09       	sbc	r29, r1
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
	char buffer[100];
	char* message = "What the fuck is this shit";
	uart_init();
     43e:	fd d6       	rcall	.+3578   	; 0x123a <uart_init>
	uart0_init(); 
     440:	23 d5       	rcall	.+2630   	; 0xe88 <uart0_init>
	SPI_Init();  
     442:	48 d6       	rcall	.+3216   	; 0x10d4 <SPI_Init>
	sei(); 
     444:	78 94       	sei
	RAMWrite(message, 0, strlen(message));
     446:	4a e1       	ldi	r20, 0x1A	; 26
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	8c ef       	ldi	r24, 0xFC	; 252
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	81 d5       	rcall	.+2818   	; 0xf56 <RAMWrite>
	RAMPrint(0, strlen(message));
     454:	4a e1       	ldi	r20, 0x1A	; 26
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	cb 01       	movw	r24, r22
     45e:	eb d5       	rcall	.+3030   	; 0x1036 <RAMPrint>
	RAMRead(0, 30, buffer);
     460:	9e 01       	movw	r18, r28
     462:	2f 5f       	subi	r18, 0xFF	; 255
     464:	3f 4f       	sbci	r19, 0xFF	; 255
     466:	4e e1       	ldi	r20, 0x1E	; 30
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	cb 01       	movw	r24, r22
     470:	b1 d5       	rcall	.+2914   	; 0xfd4 <RAMRead>
	
	ethernetInit();
     472:	0e d0       	rcall	.+28     	; 0x490 <ethernetInit>
	printf("ethernetInit Done");
     474:	87 e1       	ldi	r24, 0x17	; 23
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	9f 93       	push	r25
     47a:	8f 93       	push	r24
     47c:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	pollingInit(); 
     480:	50 de       	rcall	.-864    	; 0x122 <pollingInit>
	

	printf("Done!\n");
     482:	89 e2       	ldi	r24, 0x29	; 41
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <puts>
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	ff cf       	rjmp	.-2      	; 0x48e <main+0x66>

00000490 <ethernetInit>:
//struct network currentNetwork; 


void ethernetInit()
{
	NetworkSetup(mac_addr, local_ip_addr, sub_mask, gtw_addr);
     490:	28 e0       	ldi	r18, 0x08	; 8
     492:	32 e0       	ldi	r19, 0x02	; 2
     494:	4c e0       	ldi	r20, 0x0C	; 12
     496:	52 e0       	ldi	r21, 0x02	; 2
     498:	60 e1       	ldi	r22, 0x10	; 16
     49a:	72 e0       	ldi	r23, 0x02	; 2
     49c:	84 e1       	ldi	r24, 0x14	; 20
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	d4 d0       	rcall	.+424    	; 0x64a <NetworkSetup>
	while(!Server_Connect(TCP_MODE, server_ip_addr, server_port, source_port));
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	32 e0       	ldi	r19, 0x02	; 2
     4a6:	42 e0       	ldi	r20, 0x02	; 2
     4a8:	52 e0       	ldi	r21, 0x02	; 2
     4aa:	64 e0       	ldi	r22, 0x04	; 4
     4ac:	72 e0       	ldi	r23, 0x02	; 2
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	59 d2       	rcall	.+1202   	; 0x964 <Server_Connect>
     4b2:	89 2b       	or	r24, r25
     4b4:	b1 f3       	breq	.-20     	; 0x4a2 <ethernetInit+0x12>
	//8KB Send and Receive Buffers 
	MemoryInit(); 
     4b6:	04 c3       	rjmp	.+1544   	; 0xac0 <MemoryInit>
     4b8:	08 95       	ret

000004ba <getFileEthernet>:
}

//Sends a filepath and retrieves the data contained in the file 
char* getFileEthernet(char* filepath, int externRAM, uint32_t RAMAddress, uint16_t receiveLength)
{ 
     4ba:	8f 92       	push	r8
     4bc:	9f 92       	push	r9
     4be:	af 92       	push	r10
     4c0:	bf 92       	push	r11
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	4b 01       	movw	r8, r22
     4d4:	69 01       	movw	r12, r18
     4d6:	7a 01       	movw	r14, r20
     4d8:	58 01       	movw	r10, r16
	char* receiveData; 
	strncpy(httpBuff, "GET ", 4);
     4da:	cc e9       	ldi	r28, 0x9C	; 156
     4dc:	d7 e0       	ldi	r29, 0x07	; 7
     4de:	47 e4       	ldi	r20, 0x47	; 71
     4e0:	55 e4       	ldi	r21, 0x45	; 69
     4e2:	64 e5       	ldi	r22, 0x54	; 84
     4e4:	70 e2       	ldi	r23, 0x20	; 32
     4e6:	48 83       	st	Y, r20
     4e8:	59 83       	std	Y+1, r21	; 0x01
     4ea:	6a 83       	std	Y+2, r22	; 0x02
     4ec:	7b 83       	std	Y+3, r23	; 0x03
	strcat(httpBuff, URL); 
     4ee:	de 01       	movw	r26, r28
     4f0:	0d 90       	ld	r0, X+
     4f2:	00 20       	and	r0, r0
     4f4:	e9 f7       	brne	.-6      	; 0x4f0 <getFileEthernet+0x36>
     4f6:	11 97       	sbiw	r26, 0x01	; 1
     4f8:	25 e1       	ldi	r18, 0x15	; 21
     4fa:	e5 e3       	ldi	r30, 0x35	; 53
     4fc:	f2 e0       	ldi	r31, 0x02	; 2
     4fe:	01 90       	ld	r0, Z+
     500:	0d 92       	st	X+, r0
     502:	2a 95       	dec	r18
     504:	e1 f7       	brne	.-8      	; 0x4fe <getFileEthernet+0x44>
	strcat(httpBuff, filepath);
     506:	bc 01       	movw	r22, r24
     508:	ce 01       	movw	r24, r28
     50a:	0e 94 82 0b 	call	0x1704	; 0x1704 <strcat>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     50e:	de 01       	movw	r26, r28
     510:	0d 90       	ld	r0, X+
     512:	00 20       	and	r0, r0
     514:	e9 f7       	brne	.-6      	; 0x510 <getFileEthernet+0x56>
     516:	11 97       	sbiw	r26, 0x01	; 1
     518:	82 e2       	ldi	r24, 0x22	; 34
     51a:	ef e2       	ldi	r30, 0x2F	; 47
     51c:	f3 e0       	ldi	r31, 0x03	; 3
     51e:	01 90       	ld	r0, Z+
     520:	0d 92       	st	X+, r0
     522:	8a 95       	dec	r24
     524:	e1 f7       	brne	.-8      	; 0x51e <getFileEthernet+0x64>
	printf("Sent: %s\n", httpBuff);
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	81 e5       	ldi	r24, 0x51	; 81
     52c:	93 e0       	ldi	r25, 0x03	; 3
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	//EnableEthernetInterrupt(); 
	SendData(httpBuff, strlen(httpBuff), 0);
     536:	fe 01       	movw	r30, r28
     538:	01 90       	ld	r0, Z+
     53a:	00 20       	and	r0, r0
     53c:	e9 f7       	brne	.-6      	; 0x538 <getFileEthernet+0x7e>
     53e:	31 97       	sbiw	r30, 0x01	; 1
     540:	bf 01       	movw	r22, r30
     542:	6c 59       	subi	r22, 0x9C	; 156
     544:	77 40       	sbci	r23, 0x07	; 7
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	ce 01       	movw	r24, r28
     54c:	dd d2       	rcall	.+1466   	; 0xb08 <SendData>
	ReceiveData(RAMAddress, receiveData, receiveLength, 1, externRAM);
     54e:	84 01       	movw	r16, r8
     550:	21 e0       	ldi	r18, 0x01	; 1
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	a5 01       	movw	r20, r10
     556:	a1 2c       	mov	r10, r1
     558:	b1 2c       	mov	r11, r1
     55a:	b5 01       	movw	r22, r10
     55c:	c6 01       	movw	r24, r12
     55e:	d6 d3       	rcall	.+1964   	; 0xd0c <ReceiveData>
	memset(httpBuff, 0x00, 100); 
     560:	84 e6       	ldi	r24, 0x64	; 100
     562:	fe 01       	movw	r30, r28
     564:	11 92       	st	Z+, r1
     566:	8a 95       	dec	r24
     568:	e9 f7       	brne	.-6      	; 0x564 <getFileEthernet+0xaa>
	return receiveData; 
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
}
     572:	c5 01       	movw	r24, r10
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	bf 90       	pop	r11
     586:	af 90       	pop	r10
     588:	9f 90       	pop	r9
     58a:	8f 90       	pop	r8
     58c:	08 95       	ret

0000058e <updateFileEthernet>:

void updateFileEthernet(char* filepath)
{
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
     592:	bc 01       	movw	r22, r24
     594:	8c e9       	ldi	r24, 0x9C	; 156
     596:	97 e0       	ldi	r25, 0x07	; 7
     598:	0e 94 8d 0b 	call	0x171a	; 0x171a <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     59c:	cc e9       	ldi	r28, 0x9C	; 156
     59e:	d7 e0       	ldi	r29, 0x07	; 7
     5a0:	de 01       	movw	r26, r28
     5a2:	0d 90       	ld	r0, X+
     5a4:	00 20       	and	r0, r0
     5a6:	e9 f7       	brne	.-6      	; 0x5a2 <updateFileEthernet+0x14>
     5a8:	11 97       	sbiw	r26, 0x01	; 1
     5aa:	82 e2       	ldi	r24, 0x22	; 34
     5ac:	ef e2       	ldi	r30, 0x2F	; 47
     5ae:	f3 e0       	ldi	r31, 0x03	; 3
     5b0:	01 90       	ld	r0, Z+
     5b2:	0d 92       	st	X+, r0
     5b4:	8a 95       	dec	r24
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <updateFileEthernet+0x22>
	printf("%s", httpBuff); 
     5b8:	df 93       	push	r29
     5ba:	cf 93       	push	r28
     5bc:	8d ea       	ldi	r24, 0xAD	; 173
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
     5c8:	fe 01       	movw	r30, r28
     5ca:	01 90       	ld	r0, Z+
     5cc:	00 20       	and	r0, r0
     5ce:	e9 f7       	brne	.-6      	; 0x5ca <updateFileEthernet+0x3c>
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	bf 01       	movw	r22, r30
     5d4:	6c 59       	subi	r22, 0x9C	; 156
     5d6:	77 40       	sbci	r23, 0x07	; 7
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	ce 01       	movw	r24, r28
     5de:	94 d2       	rcall	.+1320   	; 0xb08 <SendData>
	memset(httpBuff, 0x00, 100); 
     5e0:	84 e6       	ldi	r24, 0x64	; 100
     5e2:	fe 01       	movw	r30, r28
     5e4:	11 92       	st	Z+, r1
     5e6:	8a 95       	dec	r24
     5e8:	e9 f7       	brne	.-6      	; 0x5e4 <updateFileEthernet+0x56>
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <SPI_EthernetWrite>:
}

uint16_t ReceiveSize(void)
{
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}
     5f8:	74 98       	cbi	0x0e, 4	; 14
     5fa:	20 ef       	ldi	r18, 0xF0	; 240
     5fc:	2e bd       	out	0x2e, r18	; 46
     5fe:	0d b4       	in	r0, 0x2d	; 45
     600:	07 fe       	sbrs	r0, 7
     602:	fd cf       	rjmp	.-6      	; 0x5fe <SPI_EthernetWrite+0x6>
     604:	9e bd       	out	0x2e, r25	; 46
     606:	0d b4       	in	r0, 0x2d	; 45
     608:	07 fe       	sbrs	r0, 7
     60a:	fd cf       	rjmp	.-6      	; 0x606 <SPI_EthernetWrite+0xe>
     60c:	8e bd       	out	0x2e, r24	; 46
     60e:	0d b4       	in	r0, 0x2d	; 45
     610:	07 fe       	sbrs	r0, 7
     612:	fd cf       	rjmp	.-6      	; 0x60e <SPI_EthernetWrite+0x16>
     614:	6e bd       	out	0x2e, r22	; 46
     616:	0d b4       	in	r0, 0x2d	; 45
     618:	07 fe       	sbrs	r0, 7
     61a:	fd cf       	rjmp	.-6      	; 0x616 <SPI_EthernetWrite+0x1e>
     61c:	74 9a       	sbi	0x0e, 4	; 14
     61e:	08 95       	ret

00000620 <SPI_EthernetRead>:
     620:	74 98       	cbi	0x0e, 4	; 14
     622:	2f e0       	ldi	r18, 0x0F	; 15
     624:	2e bd       	out	0x2e, r18	; 46
     626:	0d b4       	in	r0, 0x2d	; 45
     628:	07 fe       	sbrs	r0, 7
     62a:	fd cf       	rjmp	.-6      	; 0x626 <SPI_EthernetRead+0x6>
     62c:	9e bd       	out	0x2e, r25	; 46
     62e:	0d b4       	in	r0, 0x2d	; 45
     630:	07 fe       	sbrs	r0, 7
     632:	fd cf       	rjmp	.-6      	; 0x62e <SPI_EthernetRead+0xe>
     634:	8e bd       	out	0x2e, r24	; 46
     636:	0d b4       	in	r0, 0x2d	; 45
     638:	07 fe       	sbrs	r0, 7
     63a:	fd cf       	rjmp	.-6      	; 0x636 <SPI_EthernetRead+0x16>
     63c:	1e bc       	out	0x2e, r1	; 46
     63e:	0d b4       	in	r0, 0x2d	; 45
     640:	07 fe       	sbrs	r0, 7
     642:	fd cf       	rjmp	.-6      	; 0x63e <SPI_EthernetRead+0x1e>
     644:	74 9a       	sbi	0x0e, 4	; 14
     646:	8e b5       	in	r24, 0x2e	; 46
     648:	08 95       	ret

0000064a <NetworkSetup>:
     64a:	bf 92       	push	r11
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	ec 01       	movw	r28, r24
     65e:	7b 01       	movw	r14, r22
     660:	6a 01       	movw	r12, r20
     662:	89 01       	movw	r16, r18
     664:	6c 9a       	sbi	0x0d, 4	; 13
     666:	87 e0       	ldi	r24, 0x07	; 7
     668:	84 b9       	out	0x04, r24	; 4
     66a:	74 9a       	sbi	0x0e, 4	; 14
     66c:	80 e5       	ldi	r24, 0x50	; 80
     66e:	8c bd       	out	0x2c, r24	; 44
     670:	8b e5       	ldi	r24, 0x5B	; 91
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <puts>
     678:	8d e6       	ldi	r24, 0x6D	; 109
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <puts>
     680:	60 e8       	ldi	r22, 0x80	; 128
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	b8 df       	rcall	.-144    	; 0x5f8 <SPI_EthernetWrite>
     688:	8f ec       	ldi	r24, 0xCF	; 207
     68a:	97 e0       	ldi	r25, 0x07	; 7
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <NetworkSetup+0x42>
     690:	00 c0       	rjmp	.+0      	; 0x692 <NetworkSetup+0x48>
     692:	00 00       	nop
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	c3 df       	rcall	.-122    	; 0x620 <SPI_EthernetRead>
     69a:	1f 92       	push	r1
     69c:	8f 93       	push	r24
     69e:	86 e8       	ldi	r24, 0x86	; 134
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
     6aa:	f8 01       	movw	r30, r16
     6ac:	83 81       	ldd	r24, Z+3	; 0x03
     6ae:	1f 92       	push	r1
     6b0:	8f 93       	push	r24
     6b2:	82 81       	ldd	r24, Z+2	; 0x02
     6b4:	1f 92       	push	r1
     6b6:	8f 93       	push	r24
     6b8:	81 81       	ldd	r24, Z+1	; 0x01
     6ba:	1f 92       	push	r1
     6bc:	8f 93       	push	r24
     6be:	80 81       	ld	r24, Z
     6c0:	1f 92       	push	r1
     6c2:	8f 93       	push	r24
     6c4:	87 e9       	ldi	r24, 0x97	; 151
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
     6d0:	f8 01       	movw	r30, r16
     6d2:	60 81       	ld	r22, Z
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	8f df       	rcall	.-226    	; 0x5f8 <SPI_EthernetWrite>
     6da:	f8 01       	movw	r30, r16
     6dc:	61 81       	ldd	r22, Z+1	; 0x01
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	8a df       	rcall	.-236    	; 0x5f8 <SPI_EthernetWrite>
     6e4:	f8 01       	movw	r30, r16
     6e6:	62 81       	ldd	r22, Z+2	; 0x02
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	85 df       	rcall	.-246    	; 0x5f8 <SPI_EthernetWrite>
     6ee:	f8 01       	movw	r30, r16
     6f0:	63 81       	ldd	r22, Z+3	; 0x03
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	80 df       	rcall	.-256    	; 0x5f8 <SPI_EthernetWrite>
     6f8:	8f ec       	ldi	r24, 0xCF	; 207
     6fa:	97 e0       	ldi	r25, 0x07	; 7
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <NetworkSetup+0xb2>
     700:	00 c0       	rjmp	.+0      	; 0x702 <NetworkSetup+0xb8>
     702:	00 00       	nop
     704:	84 e0       	ldi	r24, 0x04	; 4
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	8b df       	rcall	.-234    	; 0x620 <SPI_EthernetRead>
     70a:	b8 2e       	mov	r11, r24
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	87 df       	rcall	.-242    	; 0x620 <SPI_EthernetRead>
     712:	08 2f       	mov	r16, r24
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	83 df       	rcall	.-250    	; 0x620 <SPI_EthernetRead>
     71a:	18 2f       	mov	r17, r24
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	7f df       	rcall	.-258    	; 0x620 <SPI_EthernetRead>
     722:	1f 92       	push	r1
     724:	bf 92       	push	r11
     726:	1f 92       	push	r1
     728:	0f 93       	push	r16
     72a:	1f 92       	push	r1
     72c:	1f 93       	push	r17
     72e:	1f 92       	push	r1
     730:	8f 93       	push	r24
     732:	8c eb       	ldi	r24, 0xBC	; 188
     734:	93 e0       	ldi	r25, 0x03	; 3
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
     73e:	8d 81       	ldd	r24, Y+5	; 0x05
     740:	1f 92       	push	r1
     742:	8f 93       	push	r24
     744:	8c 81       	ldd	r24, Y+4	; 0x04
     746:	1f 92       	push	r1
     748:	8f 93       	push	r24
     74a:	8b 81       	ldd	r24, Y+3	; 0x03
     74c:	1f 92       	push	r1
     74e:	8f 93       	push	r24
     750:	8a 81       	ldd	r24, Y+2	; 0x02
     752:	1f 92       	push	r1
     754:	8f 93       	push	r24
     756:	89 81       	ldd	r24, Y+1	; 0x01
     758:	1f 92       	push	r1
     75a:	8f 93       	push	r24
     75c:	88 81       	ld	r24, Y
     75e:	1f 92       	push	r1
     760:	8f 93       	push	r24
     762:	87 ed       	ldi	r24, 0xD7	; 215
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	9f 93       	push	r25
     768:	8f 93       	push	r24
     76a:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
     76e:	ed b7       	in	r30, 0x3d	; 61
     770:	fe b7       	in	r31, 0x3e	; 62
     772:	b6 96       	adiw	r30, 0x26	; 38
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	fe bf       	out	0x3e, r31	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	ed bf       	out	0x3d, r30	; 61
     77e:	68 81       	ld	r22, Y
     780:	89 e0       	ldi	r24, 0x09	; 9
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	39 df       	rcall	.-398    	; 0x5f8 <SPI_EthernetWrite>
     786:	69 81       	ldd	r22, Y+1	; 0x01
     788:	8a e0       	ldi	r24, 0x0A	; 10
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	35 df       	rcall	.-406    	; 0x5f8 <SPI_EthernetWrite>
     78e:	6a 81       	ldd	r22, Y+2	; 0x02
     790:	8b e0       	ldi	r24, 0x0B	; 11
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	31 df       	rcall	.-414    	; 0x5f8 <SPI_EthernetWrite>
     796:	6b 81       	ldd	r22, Y+3	; 0x03
     798:	8c e0       	ldi	r24, 0x0C	; 12
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	2d df       	rcall	.-422    	; 0x5f8 <SPI_EthernetWrite>
     79e:	6c 81       	ldd	r22, Y+4	; 0x04
     7a0:	8d e0       	ldi	r24, 0x0D	; 13
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	29 df       	rcall	.-430    	; 0x5f8 <SPI_EthernetWrite>
     7a6:	6d 81       	ldd	r22, Y+5	; 0x05
     7a8:	8e e0       	ldi	r24, 0x0E	; 14
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	25 df       	rcall	.-438    	; 0x5f8 <SPI_EthernetWrite>
     7ae:	8f ec       	ldi	r24, 0xCF	; 207
     7b0:	97 e0       	ldi	r25, 0x07	; 7
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <NetworkSetup+0x168>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <NetworkSetup+0x16e>
     7b8:	00 00       	nop
     7ba:	8e e0       	ldi	r24, 0x0E	; 14
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	30 df       	rcall	.-416    	; 0x620 <SPI_EthernetRead>
     7c0:	b8 2e       	mov	r11, r24
     7c2:	8d e0       	ldi	r24, 0x0D	; 13
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	2c df       	rcall	.-424    	; 0x620 <SPI_EthernetRead>
     7c8:	08 2f       	mov	r16, r24
     7ca:	8c e0       	ldi	r24, 0x0C	; 12
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	28 df       	rcall	.-432    	; 0x620 <SPI_EthernetRead>
     7d0:	18 2f       	mov	r17, r24
     7d2:	8b e0       	ldi	r24, 0x0B	; 11
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	24 df       	rcall	.-440    	; 0x620 <SPI_EthernetRead>
     7d8:	d8 2f       	mov	r29, r24
     7da:	8a e0       	ldi	r24, 0x0A	; 10
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	20 df       	rcall	.-448    	; 0x620 <SPI_EthernetRead>
     7e0:	c8 2f       	mov	r28, r24
     7e2:	89 e0       	ldi	r24, 0x09	; 9
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	1c df       	rcall	.-456    	; 0x620 <SPI_EthernetRead>
     7e8:	1f 92       	push	r1
     7ea:	bf 92       	push	r11
     7ec:	1f 92       	push	r1
     7ee:	0f 93       	push	r16
     7f0:	1f 92       	push	r1
     7f2:	1f 93       	push	r17
     7f4:	1f 92       	push	r1
     7f6:	df 93       	push	r29
     7f8:	1f 92       	push	r1
     7fa:	cf 93       	push	r28
     7fc:	1f 92       	push	r1
     7fe:	8f 93       	push	r24
     800:	8d e0       	ldi	r24, 0x0D	; 13
     802:	94 e0       	ldi	r25, 0x04	; 4
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	c1 d7       	rcall	.+3970   	; 0x178c <printf>
     80a:	f6 01       	movw	r30, r12
     80c:	83 81       	ldd	r24, Z+3	; 0x03
     80e:	1f 92       	push	r1
     810:	8f 93       	push	r24
     812:	82 81       	ldd	r24, Z+2	; 0x02
     814:	1f 92       	push	r1
     816:	8f 93       	push	r24
     818:	81 81       	ldd	r24, Z+1	; 0x01
     81a:	1f 92       	push	r1
     81c:	8f 93       	push	r24
     81e:	80 81       	ld	r24, Z
     820:	1f 92       	push	r1
     822:	8f 93       	push	r24
     824:	8a e3       	ldi	r24, 0x3A	; 58
     826:	94 e0       	ldi	r25, 0x04	; 4
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	af d7       	rcall	.+3934   	; 0x178c <printf>
     82e:	f6 01       	movw	r30, r12
     830:	60 81       	ld	r22, Z
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	e0 de       	rcall	.-576    	; 0x5f8 <SPI_EthernetWrite>
     838:	f6 01       	movw	r30, r12
     83a:	61 81       	ldd	r22, Z+1	; 0x01
     83c:	86 e0       	ldi	r24, 0x06	; 6
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	db de       	rcall	.-586    	; 0x5f8 <SPI_EthernetWrite>
     842:	f6 01       	movw	r30, r12
     844:	62 81       	ldd	r22, Z+2	; 0x02
     846:	87 e0       	ldi	r24, 0x07	; 7
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	d6 de       	rcall	.-596    	; 0x5f8 <SPI_EthernetWrite>
     84c:	f6 01       	movw	r30, r12
     84e:	63 81       	ldd	r22, Z+3	; 0x03
     850:	88 e0       	ldi	r24, 0x08	; 8
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	d1 de       	rcall	.-606    	; 0x5f8 <SPI_EthernetWrite>
     856:	8f ec       	ldi	r24, 0xCF	; 207
     858:	97 e0       	ldi	r25, 0x07	; 7
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <NetworkSetup+0x210>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <NetworkSetup+0x216>
     860:	00 00       	nop
     862:	88 e0       	ldi	r24, 0x08	; 8
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	dc de       	rcall	.-584    	; 0x620 <SPI_EthernetRead>
     868:	18 2f       	mov	r17, r24
     86a:	87 e0       	ldi	r24, 0x07	; 7
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	d8 de       	rcall	.-592    	; 0x620 <SPI_EthernetRead>
     870:	d8 2f       	mov	r29, r24
     872:	86 e0       	ldi	r24, 0x06	; 6
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	d4 de       	rcall	.-600    	; 0x620 <SPI_EthernetRead>
     878:	c8 2f       	mov	r28, r24
     87a:	85 e0       	ldi	r24, 0x05	; 5
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	d0 de       	rcall	.-608    	; 0x620 <SPI_EthernetRead>
     880:	1f 92       	push	r1
     882:	1f 93       	push	r17
     884:	1f 92       	push	r1
     886:	df 93       	push	r29
     888:	1f 92       	push	r1
     88a:	cf 93       	push	r28
     88c:	1f 92       	push	r1
     88e:	8f 93       	push	r24
     890:	80 e6       	ldi	r24, 0x60	; 96
     892:	94 e0       	ldi	r25, 0x04	; 4
     894:	9f 93       	push	r25
     896:	8f 93       	push	r24
     898:	79 d7       	rcall	.+3826   	; 0x178c <printf>
     89a:	ed b7       	in	r30, 0x3d	; 61
     89c:	fe b7       	in	r31, 0x3e	; 62
     89e:	b2 96       	adiw	r30, 0x22	; 34
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	fe bf       	out	0x3e, r31	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	ed bf       	out	0x3d, r30	; 61
     8aa:	f7 01       	movw	r30, r14
     8ac:	83 81       	ldd	r24, Z+3	; 0x03
     8ae:	1f 92       	push	r1
     8b0:	8f 93       	push	r24
     8b2:	82 81       	ldd	r24, Z+2	; 0x02
     8b4:	1f 92       	push	r1
     8b6:	8f 93       	push	r24
     8b8:	81 81       	ldd	r24, Z+1	; 0x01
     8ba:	1f 92       	push	r1
     8bc:	8f 93       	push	r24
     8be:	80 81       	ld	r24, Z
     8c0:	1f 92       	push	r1
     8c2:	8f 93       	push	r24
     8c4:	8c e7       	ldi	r24, 0x7C	; 124
     8c6:	94 e0       	ldi	r25, 0x04	; 4
     8c8:	9f 93       	push	r25
     8ca:	8f 93       	push	r24
     8cc:	5f d7       	rcall	.+3774   	; 0x178c <printf>
     8ce:	f7 01       	movw	r30, r14
     8d0:	60 81       	ld	r22, Z
     8d2:	8f e0       	ldi	r24, 0x0F	; 15
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	90 de       	rcall	.-736    	; 0x5f8 <SPI_EthernetWrite>
     8d8:	f7 01       	movw	r30, r14
     8da:	61 81       	ldd	r22, Z+1	; 0x01
     8dc:	80 e1       	ldi	r24, 0x10	; 16
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	8b de       	rcall	.-746    	; 0x5f8 <SPI_EthernetWrite>
     8e2:	f7 01       	movw	r30, r14
     8e4:	62 81       	ldd	r22, Z+2	; 0x02
     8e6:	81 e1       	ldi	r24, 0x11	; 17
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	86 de       	rcall	.-756    	; 0x5f8 <SPI_EthernetWrite>
     8ec:	f7 01       	movw	r30, r14
     8ee:	63 81       	ldd	r22, Z+3	; 0x03
     8f0:	82 e1       	ldi	r24, 0x12	; 18
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	81 de       	rcall	.-766    	; 0x5f8 <SPI_EthernetWrite>
     8f6:	8f ec       	ldi	r24, 0xCF	; 207
     8f8:	97 e0       	ldi	r25, 0x07	; 7
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <NetworkSetup+0x2b0>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <NetworkSetup+0x2b6>
     900:	00 00       	nop
     902:	82 e1       	ldi	r24, 0x12	; 18
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	8c de       	rcall	.-744    	; 0x620 <SPI_EthernetRead>
     908:	18 2f       	mov	r17, r24
     90a:	81 e1       	ldi	r24, 0x11	; 17
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	88 de       	rcall	.-752    	; 0x620 <SPI_EthernetRead>
     910:	d8 2f       	mov	r29, r24
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	84 de       	rcall	.-760    	; 0x620 <SPI_EthernetRead>
     918:	c8 2f       	mov	r28, r24
     91a:	8f e0       	ldi	r24, 0x0F	; 15
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	80 de       	rcall	.-768    	; 0x620 <SPI_EthernetRead>
     920:	1f 92       	push	r1
     922:	1f 93       	push	r17
     924:	1f 92       	push	r1
     926:	df 93       	push	r29
     928:	1f 92       	push	r1
     92a:	cf 93       	push	r28
     92c:	1f 92       	push	r1
     92e:	8f 93       	push	r24
     930:	8c e9       	ldi	r24, 0x9C	; 156
     932:	94 e0       	ldi	r25, 0x04	; 4
     934:	9f 93       	push	r25
     936:	8f 93       	push	r24
     938:	29 d7       	rcall	.+3666   	; 0x178c <printf>
     93a:	88 eb       	ldi	r24, 0xB8	; 184
     93c:	94 e0       	ldi	r25, 0x04	; 4
     93e:	3c d7       	rcall	.+3704   	; 0x17b8 <puts>
     940:	ed b7       	in	r30, 0x3d	; 61
     942:	fe b7       	in	r31, 0x3e	; 62
     944:	74 96       	adiw	r30, 0x14	; 20
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	fe bf       	out	0x3e, r31	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	ed bf       	out	0x3d, r30	; 61
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	bf 90       	pop	r11
     962:	08 95       	ret

00000964 <Server_Connect>:
     964:	bf 92       	push	r11
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	b8 2e       	mov	r11, r24
     978:	7b 01       	movw	r14, r22
     97a:	6a 01       	movw	r12, r20
     97c:	89 01       	movw	r16, r18
     97e:	c7 ed       	ldi	r28, 0xD7	; 215
     980:	d4 e0       	ldi	r29, 0x04	; 4
     982:	83 e0       	ldi	r24, 0x03	; 3
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	4c de       	rcall	.-872    	; 0x620 <SPI_EthernetRead>
     988:	1f 92       	push	r1
     98a:	8f 93       	push	r24
     98c:	df 93       	push	r29
     98e:	cf 93       	push	r28
     990:	fd d6       	rcall	.+3578   	; 0x178c <printf>
     992:	60 e1       	ldi	r22, 0x10	; 16
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	94 e0       	ldi	r25, 0x04	; 4
     998:	2f de       	rcall	.-930    	; 0x5f8 <SPI_EthernetWrite>
     99a:	6b 2d       	mov	r22, r11
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	94 e0       	ldi	r25, 0x04	; 4
     9a0:	2b de       	rcall	.-938    	; 0x5f8 <SPI_EthernetWrite>
     9a2:	f8 01       	movw	r30, r16
     9a4:	60 81       	ld	r22, Z
     9a6:	84 e0       	ldi	r24, 0x04	; 4
     9a8:	94 e0       	ldi	r25, 0x04	; 4
     9aa:	26 de       	rcall	.-948    	; 0x5f8 <SPI_EthernetWrite>
     9ac:	f8 01       	movw	r30, r16
     9ae:	61 81       	ldd	r22, Z+1	; 0x01
     9b0:	85 e0       	ldi	r24, 0x05	; 5
     9b2:	94 e0       	ldi	r25, 0x04	; 4
     9b4:	21 de       	rcall	.-958    	; 0x5f8 <SPI_EthernetWrite>
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	94 e0       	ldi	r25, 0x04	; 4
     9bc:	1d de       	rcall	.-966    	; 0x5f8 <SPI_EthernetWrite>
     9be:	83 e0       	ldi	r24, 0x03	; 3
     9c0:	94 e0       	ldi	r25, 0x04	; 4
     9c2:	2e de       	rcall	.-932    	; 0x620 <SPI_EthernetRead>
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	83 31       	cpi	r24, 0x13	; 19
     9ce:	c9 f6       	brne	.-78     	; 0x982 <Server_Connect+0x1e>
     9d0:	f7 01       	movw	r30, r14
     9d2:	60 81       	ld	r22, Z
     9d4:	8c e0       	ldi	r24, 0x0C	; 12
     9d6:	94 e0       	ldi	r25, 0x04	; 4
     9d8:	0f de       	rcall	.-994    	; 0x5f8 <SPI_EthernetWrite>
     9da:	f7 01       	movw	r30, r14
     9dc:	61 81       	ldd	r22, Z+1	; 0x01
     9de:	8d e0       	ldi	r24, 0x0D	; 13
     9e0:	94 e0       	ldi	r25, 0x04	; 4
     9e2:	0a de       	rcall	.-1004   	; 0x5f8 <SPI_EthernetWrite>
     9e4:	f7 01       	movw	r30, r14
     9e6:	62 81       	ldd	r22, Z+2	; 0x02
     9e8:	8e e0       	ldi	r24, 0x0E	; 14
     9ea:	94 e0       	ldi	r25, 0x04	; 4
     9ec:	05 de       	rcall	.-1014   	; 0x5f8 <SPI_EthernetWrite>
     9ee:	f7 01       	movw	r30, r14
     9f0:	63 81       	ldd	r22, Z+3	; 0x03
     9f2:	8f e0       	ldi	r24, 0x0F	; 15
     9f4:	94 e0       	ldi	r25, 0x04	; 4
     9f6:	00 de       	rcall	.-1024   	; 0x5f8 <SPI_EthernetWrite>
     9f8:	f6 01       	movw	r30, r12
     9fa:	60 81       	ld	r22, Z
     9fc:	80 e1       	ldi	r24, 0x10	; 16
     9fe:	94 e0       	ldi	r25, 0x04	; 4
     a00:	fb dd       	rcall	.-1034   	; 0x5f8 <SPI_EthernetWrite>
     a02:	f6 01       	movw	r30, r12
     a04:	61 81       	ldd	r22, Z+1	; 0x01
     a06:	81 e1       	ldi	r24, 0x11	; 17
     a08:	94 e0       	ldi	r25, 0x04	; 4
     a0a:	f6 dd       	rcall	.-1044   	; 0x5f8 <SPI_EthernetWrite>
     a0c:	64 e0       	ldi	r22, 0x04	; 4
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	94 e0       	ldi	r25, 0x04	; 4
     a12:	f2 dd       	rcall	.-1052   	; 0x5f8 <SPI_EthernetWrite>
     a14:	c0 e0       	ldi	r28, 0x00	; 0
     a16:	d0 e0       	ldi	r29, 0x00	; 0
     a18:	00 e1       	ldi	r16, 0x10	; 16
     a1a:	17 e2       	ldi	r17, 0x27	; 39
     a1c:	32 c0       	rjmp	.+100    	; 0xa82 <Server_Connect+0x11e>
     a1e:	87 e5       	ldi	r24, 0x57	; 87
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <Server_Connect+0xbe>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <Server_Connect+0xc4>
     a28:	00 00       	nop
     a2a:	21 96       	adiw	r28, 0x01	; 1
     a2c:	9e 01       	movw	r18, r28
     a2e:	32 95       	swap	r19
     a30:	22 95       	swap	r18
     a32:	2f 70       	andi	r18, 0x0F	; 15
     a34:	23 27       	eor	r18, r19
     a36:	3f 70       	andi	r19, 0x0F	; 15
     a38:	23 27       	eor	r18, r19
     a3a:	a7 e4       	ldi	r26, 0x47	; 71
     a3c:	b3 e0       	ldi	r27, 0x03	; 3
     a3e:	53 d6       	rcall	.+3238   	; 0x16e6 <__umulhisi3>
     a40:	96 95       	lsr	r25
     a42:	87 95       	ror	r24
     a44:	96 95       	lsr	r25
     a46:	87 95       	ror	r24
     a48:	96 95       	lsr	r25
     a4a:	87 95       	ror	r24
     a4c:	80 9f       	mul	r24, r16
     a4e:	90 01       	movw	r18, r0
     a50:	81 9f       	mul	r24, r17
     a52:	30 0d       	add	r19, r0
     a54:	90 9f       	mul	r25, r16
     a56:	30 0d       	add	r19, r0
     a58:	11 24       	eor	r1, r1
     a5a:	c2 17       	cp	r28, r18
     a5c:	d3 07       	cpc	r29, r19
     a5e:	89 f4       	brne	.+34     	; 0xa82 <Server_Connect+0x11e>
     a60:	8a ee       	ldi	r24, 0xEA	; 234
     a62:	94 e0       	ldi	r25, 0x04	; 4
     a64:	a9 d6       	rcall	.+3410   	; 0x17b8 <puts>
     a66:	c1 35       	cpi	r28, 0x51	; 81
     a68:	93 ec       	ldi	r25, 0xC3	; 195
     a6a:	d9 07       	cpc	r29, r25
     a6c:	50 f0       	brcs	.+20     	; 0xa82 <Server_Connect+0x11e>
     a6e:	8c e0       	ldi	r24, 0x0C	; 12
     a70:	95 e0       	ldi	r25, 0x05	; 5
     a72:	a2 d6       	rcall	.+3396   	; 0x17b8 <puts>
     a74:	60 e1       	ldi	r22, 0x10	; 16
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	94 e0       	ldi	r25, 0x04	; 4
     a7a:	be dd       	rcall	.-1156   	; 0x5f8 <SPI_EthernetWrite>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	15 c0       	rjmp	.+42     	; 0xaac <Server_Connect+0x148>
     a82:	83 e0       	ldi	r24, 0x03	; 3
     a84:	94 e0       	ldi	r25, 0x04	; 4
     a86:	cc dd       	rcall	.-1128   	; 0x620 <SPI_EthernetRead>
     a88:	87 31       	cpi	r24, 0x17	; 23
     a8a:	49 f6       	brne	.-110    	; 0xa1e <Server_Connect+0xba>
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	94 e0       	ldi	r25, 0x04	; 4
     a90:	c7 dd       	rcall	.-1138   	; 0x620 <SPI_EthernetRead>
     a92:	87 31       	cpi	r24, 0x17	; 23
     a94:	31 f4       	brne	.+12     	; 0xaa2 <Server_Connect+0x13e>
     a96:	84 e2       	ldi	r24, 0x24	; 36
     a98:	95 e0       	ldi	r25, 0x05	; 5
     a9a:	8e d6       	rcall	.+3356   	; 0x17b8 <puts>
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	05 c0       	rjmp	.+10     	; 0xaac <Server_Connect+0x148>
     aa2:	8b e3       	ldi	r24, 0x3B	; 59
     aa4:	95 e0       	ldi	r25, 0x05	; 5
     aa6:	88 d6       	rcall	.+3344   	; 0x17b8 <puts>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	bf 90       	pop	r11
     abe:	08 95       	ret

00000ac0 <MemoryInit>:
     ac0:	63 e0       	ldi	r22, 0x03	; 3
     ac2:	8a e1       	ldi	r24, 0x1A	; 26
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	98 dd       	rcall	.-1232   	; 0x5f8 <SPI_EthernetWrite>
     ac8:	63 e0       	ldi	r22, 0x03	; 3
     aca:	8b e1       	ldi	r24, 0x1B	; 27
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	94 dd       	rcall	.-1240   	; 0x5f8 <SPI_EthernetWrite>
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	9f e1       	ldi	r25, 0x1F	; 31
     ad4:	90 93 33 08 	sts	0x0833, r25
     ad8:	80 93 32 08 	sts	0x0832, r24
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e4       	ldi	r19, 0x40	; 64
     ae0:	30 93 35 08 	sts	0x0835, r19
     ae4:	20 93 34 08 	sts	0x0834, r18
     ae8:	90 93 39 08 	sts	0x0839, r25
     aec:	80 93 38 08 	sts	0x0838, r24
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e6       	ldi	r25, 0x60	; 96
     af4:	90 93 37 08 	sts	0x0837, r25
     af8:	80 93 36 08 	sts	0x0836, r24
     afc:	08 95       	ret

00000afe <SocketCommand>:

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     afe:	68 2f       	mov	r22, r24
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	94 e0       	ldi	r25, 0x04	; 4
     b04:	79 cd       	rjmp	.-1294   	; 0x5f8 <SPI_EthernetWrite>
     b06:	08 95       	ret

00000b08 <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     b08:	4f 92       	push	r4
     b0a:	5f 92       	push	r5
     b0c:	6f 92       	push	r6
     b0e:	7f 92       	push	r7
     b10:	8f 92       	push	r8
     b12:	9f 92       	push	r9
     b14:	af 92       	push	r10
     b16:	bf 92       	push	r11
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	7c 01       	movw	r14, r24
     b2a:	6b 01       	movw	r12, r22
     b2c:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	94 e0       	ldi	r25, 0x04	; 4
     b32:	76 dd       	rcall	.-1300   	; 0x620 <SPI_EthernetRead>
     b34:	1f 92       	push	r1
     b36:	8f 93       	push	r24
     b38:	8a e5       	ldi	r24, 0x5A	; 90
     b3a:	95 e0       	ldi	r25, 0x05	; 5
     b3c:	9f 93       	push	r25
     b3e:	8f 93       	push	r24
     b40:	25 d6       	rcall	.+3146   	; 0x178c <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	94 e0       	ldi	r25, 0x04	; 4
     b46:	6c dd       	rcall	.-1320   	; 0x620 <SPI_EthernetRead>
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	87 31       	cpi	r24, 0x17	; 23
     b52:	51 f0       	breq	.+20     	; 0xb68 <SendData+0x60>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     b54:	2a e1       	ldi	r18, 0x1A	; 26
     b56:	32 e0       	ldi	r19, 0x02	; 2
     b58:	4c e1       	ldi	r20, 0x1C	; 28
     b5a:	52 e0       	ldi	r21, 0x02	; 2
     b5c:	6e e1       	ldi	r22, 0x1E	; 30
     b5e:	72 e0       	ldi	r23, 0x02	; 2
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	00 df       	rcall	.-512    	; 0x964 <Server_Connect>
     b64:	89 2b       	or	r24, r25
     b66:	b1 f3       	breq	.-20     	; 0xb54 <SendData+0x4c>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     b68:	80 e2       	ldi	r24, 0x20	; 32
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	59 dd       	rcall	.-1358   	; 0x620 <SPI_EthernetRead>
     b6e:	c8 2f       	mov	r28, r24
     b70:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     b72:	dc 2f       	mov	r29, r28
     b74:	cc 27       	eor	r28, r28
     b76:	81 e2       	ldi	r24, 0x21	; 33
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	52 dd       	rcall	.-1372   	; 0x620 <SPI_EthernetRead>
     b7c:	c8 0f       	add	r28, r24
     b7e:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     b80:	cc 15       	cp	r28, r12
     b82:	dd 05       	cpc	r29, r13
     b84:	08 f4       	brcc	.+2      	; 0xb88 <SendData+0x80>
     b86:	8b c0       	rjmp	.+278    	; 0xc9e <SendData+0x196>
     b88:	2b c0       	rjmp	.+86     	; 0xbe0 <SendData+0xd8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8a:	8f ec       	ldi	r24, 0xCF	; 207
     b8c:	97 e0       	ldi	r25, 0x07	; 7
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <SendData+0x86>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <SendData+0x8c>
     b94:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     b96:	80 e2       	ldi	r24, 0x20	; 32
     b98:	94 e0       	ldi	r25, 0x04	; 4
     b9a:	42 dd       	rcall	.-1404   	; 0x620 <SPI_EthernetRead>
     b9c:	c8 2f       	mov	r28, r24
     b9e:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     ba0:	dc 2f       	mov	r29, r28
     ba2:	cc 27       	eor	r28, r28
     ba4:	81 e2       	ldi	r24, 0x21	; 33
     ba6:	94 e0       	ldi	r25, 0x04	; 4
     ba8:	3b dd       	rcall	.-1418   	; 0x620 <SPI_EthernetRead>
     baa:	c8 0f       	add	r28, r24
     bac:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	9f 92       	push	r9
     bb4:	8f 92       	push	r8
     bb6:	ea d5       	rcall	.+3028   	; 0x178c <printf>
     bb8:	01 50       	subi	r16, 0x01	; 1
     bba:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	01 15       	cp	r16, r1
     bc6:	11 05       	cpc	r17, r1
     bc8:	41 f4       	brne	.+16     	; 0xbda <SendData+0xd2>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     bca:	88 e0       	ldi	r24, 0x08	; 8
     bcc:	98 df       	rcall	.-208    	; 0xafe <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	26 dd       	rcall	.-1460   	; 0x620 <SPI_EthernetRead>
     bd4:	81 11       	cpse	r24, r1
     bd6:	fb cf       	rjmp	.-10     	; 0xbce <SendData+0xc6>
     bd8:	5c c0       	rjmp	.+184    	; 0xc92 <SendData+0x18a>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     bda:	cc 15       	cp	r28, r12
     bdc:	dd 05       	cpc	r29, r13
     bde:	a8 f2       	brcs	.-86     	; 0xb8a <SendData+0x82>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     be0:	84 e2       	ldi	r24, 0x24	; 36
     be2:	94 e0       	ldi	r25, 0x04	; 4
     be4:	1d dd       	rcall	.-1478   	; 0x620 <SPI_EthernetRead>
     be6:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     be8:	85 e2       	ldi	r24, 0x25	; 37
     bea:	94 e0       	ldi	r25, 0x04	; 4
     bec:	19 dd       	rcall	.-1486   	; 0x620 <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     bee:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     bf0:	54 2c       	mov	r5, r4
     bf2:	44 24       	eor	r4, r4
     bf4:	48 0e       	add	r4, r24
     bf6:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     bf8:	82 e2       	ldi	r24, 0x22	; 34
     bfa:	94 e0       	ldi	r25, 0x04	; 4
     bfc:	11 dd       	rcall	.-1502   	; 0x620 <SPI_EthernetRead>
     bfe:	83 e2       	ldi	r24, 0x23	; 35
     c00:	94 e0       	ldi	r25, 0x04	; 4
     c02:	0e dd       	rcall	.-1508   	; 0x620 <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     c04:	82 e7       	ldi	r24, 0x72	; 114
     c06:	95 e0       	ldi	r25, 0x05	; 5
     c08:	d7 d5       	rcall	.+2990   	; 0x17b8 <puts>
	while(i < bufferLength) {
     c0a:	c1 14       	cp	r12, r1
     c0c:	d1 04       	cpc	r13, r1
     c0e:	51 f1       	breq	.+84     	; 0xc64 <SendData+0x15c>
     c10:	47 01       	movw	r8, r14
     c12:	8c 0c       	add	r8, r12
     c14:	9d 1c       	adc	r9, r13
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     c16:	82 01       	movw	r16, r4
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     c18:	c0 e0       	ldi	r28, 0x00	; 0
     c1a:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     c1c:	a0 90 32 08 	lds	r10, 0x0832
     c20:	b0 90 33 08 	lds	r11, 0x0833
     c24:	a0 22       	and	r10, r16
     c26:	b1 22       	and	r11, r17
     c28:	80 91 34 08 	lds	r24, 0x0834
     c2c:	90 91 35 08 	lds	r25, 0x0835
     c30:	a8 0e       	add	r10, r24
     c32:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     c34:	61 14       	cp	r6, r1
     c36:	71 04       	cpc	r7, r1
     c38:	31 f0       	breq	.+12     	; 0xc46 <SendData+0x13e>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     c3a:	ce 01       	movw	r24, r28
     c3c:	58 d2       	rcall	.+1200   	; 0x10ee <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     c3e:	68 2f       	mov	r22, r24
     c40:	c5 01       	movw	r24, r10
     c42:	da dc       	rcall	.-1612   	; 0x5f8 <SPI_EthernetWrite>
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <SendData+0x146>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     c46:	f7 01       	movw	r30, r14
     c48:	60 81       	ld	r22, Z
     c4a:	c5 01       	movw	r24, r10
     c4c:	d5 dc       	rcall	.-1622   	; 0x5f8 <SPI_EthernetWrite>
		}
		offaddr++;
     c4e:	0f 5f       	subi	r16, 0xFF	; 255
     c50:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     c52:	ff ef       	ldi	r31, 0xFF	; 255
     c54:	ef 1a       	sub	r14, r31
     c56:	ff 0a       	sbc	r15, r31
     c58:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     c5a:	e8 14       	cp	r14, r8
     c5c:	f9 04       	cpc	r15, r9
     c5e:	f1 f6       	brne	.-68     	; 0xc1c <SendData+0x114>
     c60:	4c 0c       	add	r4, r12
     c62:	5d 1c       	adc	r5, r13
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	c5 01       	movw	r24, r10
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	c6 dc       	rcall	.-1652   	; 0x5f8 <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     c6c:	84 e2       	ldi	r24, 0x24	; 36
     c6e:	94 e0       	ldi	r25, 0x04	; 4
     c70:	d7 dc       	rcall	.-1618   	; 0x620 <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     c72:	6f ef       	ldi	r22, 0xFF	; 255
     c74:	84 e2       	ldi	r24, 0x24	; 36
     c76:	94 e0       	ldi	r25, 0x04	; 4
     c78:	bf dc       	rcall	.-1666   	; 0x5f8 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     c7a:	64 2d       	mov	r22, r4
     c7c:	85 e2       	ldi	r24, 0x25	; 37
     c7e:	94 e0       	ldi	r25, 0x04	; 4
     c80:	bb dc       	rcall	.-1674   	; 0x5f8 <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     c82:	80 e2       	ldi	r24, 0x20	; 32
     c84:	3c df       	rcall	.-392    	; 0xafe <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	94 e0       	ldi	r25, 0x04	; 4
     c8a:	ca dc       	rcall	.-1644   	; 0x620 <SPI_EthernetRead>
     c8c:	81 11       	cpse	r24, r1
     c8e:	fb cf       	rjmp	.-10     	; 0xc86 <SendData+0x17e>
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <SendData+0x190>
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_EthernetRead(S0_CR));
			return 0;
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	29 c0       	rjmp	.+82     	; 0xcea <SendData+0x1e2>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	26 c0       	rjmp	.+76     	; 0xcea <SendData+0x1e2>
     c9e:	8f ec       	ldi	r24, 0xCF	; 207
     ca0:	97 e0       	ldi	r25, 0x07	; 7
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <SendData+0x19a>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <SendData+0x1a0>
     ca8:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     caa:	80 e2       	ldi	r24, 0x20	; 32
     cac:	94 e0       	ldi	r25, 0x04	; 4
     cae:	b8 dc       	rcall	.-1680   	; 0x620 <SPI_EthernetRead>
     cb0:	c8 2f       	mov	r28, r24
     cb2:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     cb4:	dc 2f       	mov	r29, r28
     cb6:	cc 27       	eor	r28, r28
     cb8:	81 e2       	ldi	r24, 0x21	; 33
     cba:	94 e0       	ldi	r25, 0x04	; 4
     cbc:	b1 dc       	rcall	.-1694   	; 0x620 <SPI_EthernetRead>
     cbe:	c8 0f       	add	r28, r24
     cc0:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	86 e6       	ldi	r24, 0x66	; 102
     cc8:	95 e0       	ldi	r25, 0x05	; 5
     cca:	9f 93       	push	r25
     ccc:	8f 93       	push	r24
     cce:	5e d5       	rcall	.+2748   	; 0x178c <printf>
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	09 ee       	ldi	r16, 0xE9	; 233
     cda:	13 e0       	ldi	r17, 0x03	; 3
     cdc:	0f 2e       	mov	r0, r31
     cde:	f6 e6       	ldi	r31, 0x66	; 102
     ce0:	8f 2e       	mov	r8, r31
     ce2:	f5 e0       	ldi	r31, 0x05	; 5
     ce4:	9f 2e       	mov	r9, r31
     ce6:	f0 2d       	mov	r31, r0
     ce8:	78 cf       	rjmp	.-272    	; 0xbda <SendData+0xd2>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	9f 90       	pop	r9
     d00:	8f 90       	pop	r8
     d02:	7f 90       	pop	r7
     d04:	6f 90       	pop	r6
     d06:	5f 90       	pop	r5
     d08:	4f 90       	pop	r4
     d0a:	08 95       	ret

00000d0c <ReceiveData>:

int ReceiveData(uint16_t RAMAddress, char* buffer, uint16_t dataLength, int header, int externRAM)
{
     d0c:	5f 92       	push	r5
     d0e:	6f 92       	push	r6
     d10:	7f 92       	push	r7
     d12:	8f 92       	push	r8
     d14:	9f 92       	push	r9
     d16:	af 92       	push	r10
     d18:	bf 92       	push	r11
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	4c 01       	movw	r8, r24
     d2c:	5b 01       	movw	r10, r22
     d2e:	6a 01       	movw	r12, r20
     d30:	79 01       	movw	r14, r18
     d32:	ca ee       	ldi	r28, 0xEA	; 234
     d34:	d3 e0       	ldi	r29, 0x03	; 3
	if (dataLength > MAX_BUFF)
		dataLength = MAX_BUFF - 2;
		
	while(1)
	{
		if(SPI_EthernetRead(S0_SR) == SOCK_ESTABLISHED)
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	94 e0       	ldi	r25, 0x04	; 4
     d3a:	72 dc       	rcall	.-1820   	; 0x620 <SPI_EthernetRead>
     d3c:	87 31       	cpi	r24, 0x17	; 23
     d3e:	09 f0       	breq	.+2      	; 0xd42 <ReceiveData+0x36>
     d40:	55 c0       	rjmp	.+170    	; 0xdec <ReceiveData+0xe0>
		{
			// Read the Rx Read Pointer
			ptr = SPI_EthernetRead(S0_RX_RD);
     d42:	88 e2       	ldi	r24, 0x28	; 40
     d44:	94 e0       	ldi	r25, 0x04	; 4
     d46:	6c dc       	rcall	.-1832   	; 0x620 <SPI_EthernetRead>
     d48:	c8 2f       	mov	r28, r24
			//printf("RX Read Pointer: %d\n", ptr);
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
     d4a:	89 e2       	ldi	r24, 0x29	; 41
     d4c:	94 e0       	ldi	r25, 0x04	; 4
     d4e:	68 dc       	rcall	.-1840   	; 0x620 <SPI_EthernetRead>
	while(1)
	{
		if(SPI_EthernetRead(S0_SR) == SOCK_ESTABLISHED)
		{
			// Read the Rx Read Pointer
			ptr = SPI_EthernetRead(S0_RX_RD);
     d50:	d0 e0       	ldi	r29, 0x00	; 0
			//printf("RX Read Pointer: %d\n", ptr);
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
     d52:	dc 2f       	mov	r29, r28
     d54:	cc 27       	eor	r28, r28
     d56:	c8 0f       	add	r28, r24
     d58:	d1 1d       	adc	r29, r1
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
     d5a:	c1 14       	cp	r12, r1
     d5c:	d1 04       	cpc	r13, r1
     d5e:	a9 f1       	breq	.+106    	; 0xdca <ReceiveData+0xbe>
{
	uint16_t ptr,offaddr,realaddr;
	//uint16_t RAMAddress = 0; 
	char tempvar; 
	//uint8_t header = 1; 
	uint8_t headerCount = 0; 
     d60:	51 2c       	mov	r5, r1
					else{
						//printf("Writing to Buffer\n"); 
						*buffer = tempvar; 
						buffer++; 
					}
					dataLength--;
     d62:	61 2c       	mov	r6, r1
     d64:	71 2c       	mov	r7, r1
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
				realaddr = S0_RX_BASE + (offaddr & S0_RX_MASK);
     d66:	80 91 38 08 	lds	r24, 0x0838
     d6a:	90 91 39 08 	lds	r25, 0x0839
     d6e:	8c 23       	and	r24, r28
     d70:	9d 23       	and	r25, r29
     d72:	20 91 36 08 	lds	r18, 0x0836
     d76:	30 91 37 08 	lds	r19, 0x0837
				//printf("Real Address: %d\n", realaddr);
				tempvar = SPI_EthernetRead(realaddr);
     d7a:	82 0f       	add	r24, r18
     d7c:	93 1f       	adc	r25, r19
     d7e:	50 dc       	rcall	.-1888   	; 0x620 <SPI_EthernetRead>
				//printf("Buffer: %c\n", tempvar);
				if(tempvar == '\n' && header)
     d80:	8a 30       	cpi	r24, 0x0A	; 10
     d82:	41 f4       	brne	.+16     	; 0xd94 <ReceiveData+0x88>
     d84:	e1 14       	cp	r14, r1
     d86:	f1 04       	cpc	r15, r1
     d88:	41 f0       	breq	.+16     	; 0xd9a <ReceiveData+0x8e>
				{
					//printf("Found New Line!\n");
					headerCount++; 
     d8a:	53 94       	inc	r5
					if(headerCount >= 10)
     d8c:	89 e0       	ldi	r24, 0x09	; 9
     d8e:	85 15       	cp	r24, r5
     d90:	b0 f0       	brcs	.+44     	; 0xdbe <ReceiveData+0xb2>
     d92:	17 c0       	rjmp	.+46     	; 0xdc2 <ReceiveData+0xb6>
						header = 0; 
				}
				else if(!header)
     d94:	e1 14       	cp	r14, r1
     d96:	f1 04       	cpc	r15, r1
     d98:	a1 f4       	brne	.+40     	; 0xdc2 <ReceiveData+0xb6>
				{
					//printf("Write to RAM!\n");
					//printf("Writing to RAM: %c @ address %d\n", tempvar, RAMAddress); 
					if(externRAM){
     d9a:	01 15       	cp	r16, r1
     d9c:	11 05       	cpc	r17, r1
     d9e:	31 f0       	breq	.+12     	; 0xdac <ReceiveData+0xa0>
						RAMWriteByte(tempvar, RAMAddress);	
     da0:	b4 01       	movw	r22, r8
     da2:	8d d1       	rcall	.+794    	; 0x10be <RAMWriteByte>
						RAMAddress++;
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	89 1a       	sub	r8, r25
     da8:	99 0a       	sbc	r9, r25
     daa:	03 c0       	rjmp	.+6      	; 0xdb2 <ReceiveData+0xa6>
					}
					else{
						//printf("Writing to Buffer\n"); 
						*buffer = tempvar; 
     dac:	f5 01       	movw	r30, r10
     dae:	81 93       	st	Z+, r24
     db0:	5f 01       	movw	r10, r30
						buffer++; 
					}
					dataLength--;
     db2:	f1 e0       	ldi	r31, 0x01	; 1
     db4:	cf 1a       	sub	r12, r31
     db6:	d1 08       	sbc	r13, r1
     db8:	e6 2c       	mov	r14, r6
     dba:	f7 2c       	mov	r15, r7
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <ReceiveData+0xb6>
				if(tempvar == '\n' && header)
				{
					//printf("Found New Line!\n");
					headerCount++; 
					if(headerCount >= 10)
						header = 0; 
     dbe:	e6 2c       	mov	r14, r6
     dc0:	f7 2c       	mov	r15, r7
						*buffer = tempvar; 
						buffer++; 
					}
					dataLength--;
				}
				offaddr++;
     dc2:	21 96       	adiw	r28, 0x01	; 1
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
     dc4:	c1 14       	cp	r12, r1
     dc6:	d1 04       	cpc	r13, r1
     dc8:	71 f6       	brne	.-100    	; 0xd66 <ReceiveData+0x5a>
					}
					dataLength--;
				}
				offaddr++;
			}
			*buffer='\0';        // String terminated character
     dca:	f5 01       	movw	r30, r10
     dcc:	10 82       	st	Z, r1
			//printf("%s", buffer);

			// Increase the S0_RX_RD value, so it point to the next receive
			SPI_EthernetWrite(S0_RX_RD,(offaddr & 0xFF00) >> 8 );
     dce:	6d 2f       	mov	r22, r29
     dd0:	88 e2       	ldi	r24, 0x28	; 40
     dd2:	94 e0       	ldi	r25, 0x04	; 4
     dd4:	11 dc       	rcall	.-2014   	; 0x5f8 <SPI_EthernetWrite>
			SPI_EthernetWrite(S0_RX_RD + 1,(offaddr & 0x00FF));
     dd6:	6c 2f       	mov	r22, r28
     dd8:	89 e2       	ldi	r24, 0x29	; 41
     dda:	94 e0       	ldi	r25, 0x04	; 4
     ddc:	0d dc       	rcall	.-2022   	; 0x5f8 <SPI_EthernetWrite>

			// Now Send the RECV command
			SocketCommand(RECV);
     dde:	80 e4       	ldi	r24, 0x40	; 64
     de0:	8e de       	rcall	.-740    	; 0xafe <SocketCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     de2:	fd e0       	ldi	r31, 0x0D	; 13
     de4:	fa 95       	dec	r31
     de6:	f1 f7       	brne	.-4      	; 0xde4 <ReceiveData+0xd8>
     de8:	00 00       	nop
     dea:	1c c0       	rjmp	.+56     	; 0xe24 <ReceiveData+0x118>
     dec:	21 97       	sbiw	r28, 0x01	; 1
			_delay_us(5);    // Wait for Receive Process
			break; 
		}
		else if(timeCount > MAX_TIME_COUNT)
     dee:	20 97       	sbiw	r28, 0x00	; 0
     df0:	91 f4       	brne	.+36     	; 0xe16 <ReceiveData+0x10a>
		{
			printf("Ethernet Receive Data Timeout!\n");
     df2:	8e e7       	ldi	r24, 0x7E	; 126
     df4:	95 e0       	ldi	r25, 0x05	; 5
     df6:	e0 d4       	rcall	.+2496   	; 0x17b8 <puts>
			printf("Stats Reg: 0x%02x", SPI_EthernetRead(S0_SR));
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	94 e0       	ldi	r25, 0x04	; 4
     dfc:	11 dc       	rcall	.-2014   	; 0x620 <SPI_EthernetRead>
     dfe:	1f 92       	push	r1
     e00:	8f 93       	push	r24
     e02:	8d e9       	ldi	r24, 0x9D	; 157
     e04:	95 e0       	ldi	r25, 0x05	; 5
     e06:	9f 93       	push	r25
     e08:	8f 93       	push	r24
     e0a:	c0 d4       	rcall	.+2432   	; 0x178c <printf>
			break; 
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	07 c0       	rjmp	.+14     	; 0xe24 <ReceiveData+0x118>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e16:	8f e1       	ldi	r24, 0x1F	; 31
     e18:	9e e4       	ldi	r25, 0x4E	; 78
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <ReceiveData+0x10e>
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <ReceiveData+0x114>
     e20:	00 00       	nop
     e22:	89 cf       	rjmp	.-238    	; 0xd36 <ReceiveData+0x2a>
		}
		
	}	

	return 1;
}
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	bf 90       	pop	r11
     e3a:	af 90       	pop	r10
     e3c:	9f 90       	pop	r9
     e3e:	8f 90       	pop	r8
     e40:	7f 90       	pop	r7
     e42:	6f 90       	pop	r6
     e44:	5f 90       	pop	r5
     e46:	08 95       	ret

00000e48 <uart_sendStream>:
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
	putchar('[');
	putchar('0');
	putchar('m');
}
     e48:	cf 93       	push	r28
     e4a:	c8 2f       	mov	r28, r24
     e4c:	8a 30       	cpi	r24, 0x0A	; 10
     e4e:	11 f4       	brne	.+4      	; 0xe54 <uart_sendStream+0xc>
     e50:	8d e0       	ldi	r24, 0x0D	; 13
     e52:	fa df       	rcall	.-12     	; 0xe48 <uart_sendStream>
     e54:	e0 ed       	ldi	r30, 0xD0	; 208
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	90 81       	ld	r25, Z
     e5a:	95 ff       	sbrs	r25, 5
     e5c:	fd cf       	rjmp	.-6      	; 0xe58 <uart_sendStream+0x10>
     e5e:	c0 93 d6 00 	sts	0x00D6, r28
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	cf 91       	pop	r28
     e68:	08 95       	ret

00000e6a <uart_receiveStream>:
     e6a:	cf 93       	push	r28
     e6c:	bc 01       	movw	r22, r24
     e6e:	e0 ed       	ldi	r30, 0xD0	; 208
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	88 23       	and	r24, r24
     e76:	ec f7       	brge	.-6      	; 0xe72 <uart_receiveStream+0x8>
     e78:	c0 91 d6 00 	lds	r28, 0x00D6
     e7c:	8c 2f       	mov	r24, r28
     e7e:	e4 df       	rcall	.-56     	; 0xe48 <uart_sendStream>
     e80:	8c 2f       	mov	r24, r28
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <uart0_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart0_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     e88:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     e8c:	83 e3       	ldi	r24, 0x33	; 51
     e8e:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     e92:	88 e1       	ldi	r24, 0x18	; 24
     e94:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     e98:	86 e0       	ldi	r24, 0x06	; 6
     e9a:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     e9e:	82 e2       	ldi	r24, 0x22	; 34
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	90 93 b9 08 	sts	0x08B9, r25
     ea6:	80 93 b8 08 	sts	0x08B8, r24
     eaa:	90 93 bb 08 	sts	0x08BB, r25
     eae:	80 93 ba 08 	sts	0x08BA, r24
     eb2:	08 95       	ret

00000eb4 <getRAMStatus>:
}

int getRAMStatus()
{
	//Enable RAM CS
	RAM_PORT &= ~(1<<RAM_CS);
     eb4:	a3 98       	cbi	0x14, 3	; 20
	SPDR = RDSR;
     eb6:	85 e0       	ldi	r24, 0x05	; 5
     eb8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     eba:	0d b4       	in	r0, 0x2d	; 45
     ebc:	07 fe       	sbrs	r0, 7
     ebe:	fd cf       	rjmp	.-6      	; 0xeba <getRAMStatus+0x6>
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     ec0:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     ec2:	0d b4       	in	r0, 0x2d	; 45
     ec4:	07 fe       	sbrs	r0, 7
     ec6:	fd cf       	rjmp	.-6      	; 0xec2 <getRAMStatus+0xe>
	//Disable RAM CS
	RAM_PORT |= (1<<RAM_CS);
     ec8:	a3 9a       	sbi	0x14, 3	; 20
	return(SPDR);
     eca:	8e b5       	in	r24, 0x2e	; 46
}
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	08 95       	ret

00000ed0 <setRAMStatus>:

void setRAMStatus(char mode)
{
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     ed0:	a3 98       	cbi	0x14, 3	; 20
	SPDR = WRSR;
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     ed6:	0d b4       	in	r0, 0x2d	; 45
     ed8:	07 fe       	sbrs	r0, 7
     eda:	fd cf       	rjmp	.-6      	; 0xed6 <setRAMStatus+0x6>
	// Start Data transmission
	SPDR = mode;
     edc:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     ede:	0d b4       	in	r0, 0x2d	; 45
     ee0:	07 fe       	sbrs	r0, 7
     ee2:	fd cf       	rjmp	.-6      	; 0xede <setRAMStatus+0xe>
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
     ee4:	a3 9a       	sbi	0x14, 3	; 20
     ee6:	08 95       	ret

00000ee8 <SPI_WriteAddress>:
}

void SPI_WriteAddress(uint32_t address)
{
     ee8:	26 2f       	mov	r18, r22
     eea:	97 2f       	mov	r25, r23
     eec:	48 2f       	mov	r20, r24
	SPDR = WRITE;
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     ef2:	0d b4       	in	r0, 0x2d	; 45
     ef4:	07 fe       	sbrs	r0, 7
     ef6:	fd cf       	rjmp	.-6      	; 0xef2 <SPI_WriteAddress+0xa>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (address & 0x00FF0000) >> 16;
     ef8:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     efa:	0d b4       	in	r0, 0x2d	; 45
     efc:	07 fe       	sbrs	r0, 7
     efe:	fd cf       	rjmp	.-6      	; 0xefa <SPI_WriteAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x0000FF00) >> 8;
     f00:	89 2f       	mov	r24, r25
     f02:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     f04:	0d b4       	in	r0, 0x2d	; 45
     f06:	07 fe       	sbrs	r0, 7
     f08:	fd cf       	rjmp	.-6      	; 0xf04 <SPI_WriteAddress+0x1c>
	SPDR = (address & 0x000000FF);
     f0a:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     f0c:	0d b4       	in	r0, 0x2d	; 45
     f0e:	07 fe       	sbrs	r0, 7
     f10:	fd cf       	rjmp	.-6      	; 0xf0c <SPI_WriteAddress+0x24>
}
     f12:	08 95       	ret

00000f14 <SPI_WriteData>:

void SPI_WriteData(char data)
{
	// Start Data transmission
	SPDR = data;
     f14:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     f16:	0d b4       	in	r0, 0x2d	; 45
     f18:	07 fe       	sbrs	r0, 7
     f1a:	fd cf       	rjmp	.-6      	; 0xf16 <SPI_WriteData+0x2>
}
     f1c:	08 95       	ret

00000f1e <SPI_ReadAddress>:

void SPI_ReadAddress(uint32_t address)
{
     f1e:	26 2f       	mov	r18, r22
     f20:	97 2f       	mov	r25, r23
     f22:	48 2f       	mov	r20, r24
	SPDR = READ;
     f24:	83 e0       	ldi	r24, 0x03	; 3
     f26:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     f28:	0d b4       	in	r0, 0x2d	; 45
     f2a:	07 fe       	sbrs	r0, 7
     f2c:	fd cf       	rjmp	.-6      	; 0xf28 <SPI_ReadAddress+0xa>
	SPDR = (address & 0x00FF0000) >> 16;
     f2e:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     f30:	0d b4       	in	r0, 0x2d	; 45
     f32:	07 fe       	sbrs	r0, 7
     f34:	fd cf       	rjmp	.-6      	; 0xf30 <SPI_ReadAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x0000FF00) >> 8;
     f36:	89 2f       	mov	r24, r25
     f38:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     f3a:	0d b4       	in	r0, 0x2d	; 45
     f3c:	07 fe       	sbrs	r0, 7
     f3e:	fd cf       	rjmp	.-6      	; 0xf3a <SPI_ReadAddress+0x1c>
	SPDR = (address & 0x000000FF);
     f40:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     f42:	0d b4       	in	r0, 0x2d	; 45
     f44:	07 fe       	sbrs	r0, 7
     f46:	fd cf       	rjmp	.-6      	; 0xf42 <SPI_ReadAddress+0x24>
}
     f48:	08 95       	ret

00000f4a <SPI_ReadData>:

char SPI_ReadData()
{
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     f4a:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     f4c:	0d b4       	in	r0, 0x2d	; 45
     f4e:	07 fe       	sbrs	r0, 7
     f50:	fd cf       	rjmp	.-6      	; 0xf4c <SPI_ReadData+0x2>
	return(SPDR);
     f52:	8e b5       	in	r24, 0x2e	; 46
}
     f54:	08 95       	ret

00000f56 <RAMWrite>:

uint16_t RAMWrite(char* data, uint16_t startAddress, uint16_t length)
{
     f56:	af 92       	push	r10
     f58:	bf 92       	push	r11
     f5a:	cf 92       	push	r12
     f5c:	df 92       	push	r13
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	ec 01       	movw	r28, r24
     f6c:	8b 01       	movw	r16, r22
     f6e:	5a 01       	movw	r10, r20
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     f70:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     f72:	6b 01       	movw	r12, r22
     f74:	e1 2c       	mov	r14, r1
     f76:	f1 2c       	mov	r15, r1
     f78:	c7 01       	movw	r24, r14
     f7a:	b6 01       	movw	r22, r12
     f7c:	b5 df       	rcall	.-150    	; 0xee8 <SPI_WriteAddress>
	SPI_WriteData(0x00);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	c9 df       	rcall	.-110    	; 0xf14 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     f82:	a3 9a       	sbi	0x14, 3	; 20
	setRAMStatus(SEQ);
     f84:	80 e4       	ldi	r24, 0x40	; 64
     f86:	a4 df       	rcall	.-184    	; 0xed0 <setRAMStatus>
	getRAMStatus();
     f88:	95 df       	rcall	.-214    	; 0xeb4 <getRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     f8a:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     f8c:	c7 01       	movw	r24, r14
     f8e:	b6 01       	movw	r22, r12
     f90:	ab df       	rcall	.-170    	; 0xee8 <SPI_WriteAddress>
	for(int i = 0; i < length; i++)
     f92:	a1 14       	cp	r10, r1
     f94:	b1 04       	cpc	r11, r1
     f96:	89 f0       	breq	.+34     	; 0xfba <RAMWrite+0x64>
     f98:	65 01       	movw	r12, r10
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	e1 2c       	mov	r14, r1
     fa0:	f1 2c       	mov	r15, r1
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
     fa2:	fe 01       	movw	r30, r28
     fa4:	e8 0f       	add	r30, r24
     fa6:	f9 1f       	adc	r31, r25
     fa8:	80 81       	ld	r24, Z
     faa:	b4 df       	rcall	.-152    	; 0xf14 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
	setRAMStatus(SEQ);
	getRAMStatus();
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_WriteAddress(startAddress);
	for(int i = 0; i < length; i++)
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	e8 1a       	sub	r14, r24
     fb0:	f8 0a       	sbc	r15, r24
     fb2:	c7 01       	movw	r24, r14
     fb4:	ec 14       	cp	r14, r12
     fb6:	fd 04       	cpc	r15, r13
     fb8:	a1 f7       	brne	.-24     	; 0xfa2 <RAMWrite+0x4c>
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
	}
	RAM_PORT |= (1<<RAM_CS);
     fba:	a3 9a       	sbi	0x14, 3	; 20
		

	return startAddress; 
}
     fbc:	c8 01       	movw	r24, r16
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	08 95       	ret

00000fd4 <RAMRead>:

char* RAMRead(uint32_t startAddress, uint16_t length, char* buffer)
{
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	6b 01       	movw	r12, r22
     fe6:	7c 01       	movw	r14, r24
     fe8:	8a 01       	movw	r16, r20
     fea:	e9 01       	movw	r28, r18
	setRAMStatus(SEQ);
     fec:	80 e4       	ldi	r24, 0x40	; 64
     fee:	70 df       	rcall	.-288    	; 0xed0 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     ff0:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     ff2:	c7 01       	movw	r24, r14
     ff4:	b6 01       	movw	r22, r12
     ff6:	93 df       	rcall	.-218    	; 0xf1e <SPI_ReadAddress>
	int i; 
	for(i=0; i<length; i++)
     ff8:	01 15       	cp	r16, r1
     ffa:	11 05       	cpc	r17, r1
     ffc:	89 f0       	breq	.+34     	; 0x1020 <RAMRead+0x4c>
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	e1 2c       	mov	r14, r1
    1004:	f1 2c       	mov	r15, r1
	{
		*(buffer + i) = SPI_ReadData();
    1006:	6e 01       	movw	r12, r28
    1008:	c6 0e       	add	r12, r22
    100a:	d7 1e       	adc	r13, r23
    100c:	9e df       	rcall	.-196    	; 0xf4a <SPI_ReadData>
    100e:	f6 01       	movw	r30, r12
    1010:	80 83       	st	Z, r24
{
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	int i; 
	for(i=0; i<length; i++)
    1012:	ff ef       	ldi	r31, 0xFF	; 255
    1014:	ef 1a       	sub	r14, r31
    1016:	ff 0a       	sbc	r15, r31
    1018:	b7 01       	movw	r22, r14
    101a:	e0 16       	cp	r14, r16
    101c:	f1 06       	cpc	r15, r17
    101e:	99 f7       	brne	.-26     	; 0x1006 <RAMRead+0x32>
	{
		*(buffer + i) = SPI_ReadData();
	}
	RAM_PORT |= (1<<RAM_CS); 
    1020:	a3 9a       	sbi	0x14, 3	; 20
	//printf("%d\n", buffer);
	return buffer; 
}
    1022:	ce 01       	movw	r24, r28
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	08 95       	ret

00001036 <RAMPrint>:

void RAMPrint(uint32_t startAddress, uint16_t length)
{
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	c6 2f       	mov	r28, r22
    1044:	d7 2f       	mov	r29, r23
    1046:	f8 2e       	mov	r15, r24
    1048:	e9 2e       	mov	r14, r25
    104a:	8a 01       	movw	r16, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
    104c:	80 e4       	ldi	r24, 0x40	; 64
    104e:	40 df       	rcall	.-384    	; 0xed0 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
    1050:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
    1052:	6c 2f       	mov	r22, r28
    1054:	7d 2f       	mov	r23, r29
    1056:	8f 2d       	mov	r24, r15
    1058:	9e 2d       	mov	r25, r14
    105a:	61 df       	rcall	.-318    	; 0xf1e <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	8f ea       	ldi	r24, 0xAF	; 175
    1066:	95 e0       	ldi	r25, 0x05	; 5
    1068:	9f 93       	push	r25
    106a:	8f 93       	push	r24
    106c:	8f d3       	rcall	.+1822   	; 0x178c <printf>
	int i; 
	for(i=0; i<length; i++)
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	01 15       	cp	r16, r1
    107c:	11 05       	cpc	r17, r1
    107e:	51 f0       	breq	.+20     	; 0x1094 <RAMPrint+0x5e>
    1080:	c0 e0       	ldi	r28, 0x00	; 0
    1082:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("%c", SPI_ReadData());
    1084:	62 df       	rcall	.-316    	; 0xf4a <SPI_ReadData>
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	92 d3       	rcall	.+1828   	; 0x17ae <putchar>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
    108a:	21 96       	adiw	r28, 0x01	; 1
    108c:	c0 17       	cp	r28, r16
    108e:	d1 07       	cpc	r29, r17
    1090:	c9 f7       	brne	.-14     	; 0x1084 <RAMPrint+0x4e>
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <RAMPrint+0x62>
    1094:	00 e0       	ldi	r16, 0x00	; 0
    1096:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("%c", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
    1098:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
    109a:	1f 93       	push	r17
    109c:	0f 93       	push	r16
    109e:	80 ec       	ldi	r24, 0xC0	; 192
    10a0:	95 e0       	ldi	r25, 0x05	; 5
    10a2:	9f 93       	push	r25
    10a4:	8f 93       	push	r24
    10a6:	72 d3       	rcall	.+1764   	; 0x178c <printf>
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	08 95       	ret

000010be <RAMWriteByte>:

void RAMWriteByte(char data, uint16_t address)
{
    10be:	cf 93       	push	r28
    10c0:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
    10c2:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0f df       	rcall	.-482    	; 0xee8 <SPI_WriteAddress>
	SPI_WriteData(data);
    10ca:	8c 2f       	mov	r24, r28
    10cc:	23 df       	rcall	.-442    	; 0xf14 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
    10ce:	a3 9a       	sbi	0x14, 3	; 20
}
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS)|(1<<HOLD);
    10d4:	84 b1       	in	r24, 0x04	; 4
    10d6:	87 68       	ori	r24, 0x87	; 135
    10d8:	84 b9       	out	0x04, r24	; 4
	//Set MISO as Input 
	SPI_DDR &= ~(1<<MISO);
    10da:	23 98       	cbi	0x04, 3	; 4
	SPI_PORT |= (1<<HOLD);
    10dc:	2f 9a       	sbi	0x05, 7	; 5
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
    10de:	9b 9a       	sbi	0x13, 3	; 19
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
    10e0:	83 e5       	ldi	r24, 0x53	; 83
    10e2:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	82 e3       	ldi	r24, 0x32	; 50
    10ea:	e9 cf       	rjmp	.-46     	; 0x10be <RAMWriteByte>
    10ec:	08 95       	ret

000010ee <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint16_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
    10ee:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
    10f0:	bc 01       	movw	r22, r24
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	13 df       	rcall	.-474    	; 0xf1e <SPI_ReadAddress>
	char data = SPI_ReadData();
    10f8:	28 df       	rcall	.-432    	; 0xf4a <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
    10fa:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
    10fc:	08 95       	ret

000010fe <networkScan>:
	receiveStatus(); 
	sendCommand(NOPREFIX, STREAM_READ, "0 8000");
	receiveStatus(); 
	disableReceiveINT(); 
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
}
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	cb 01       	movw	r24, r22
    1104:	ba d1       	rcall	.+884    	; 0x147a <updateRAMAddress>
    1106:	dc d0       	rcall	.+440    	; 0x12c0 <enableReceiveINT>
    1108:	40 e5       	ldi	r20, 0x50	; 80
    110a:	53 e0       	ldi	r21, 0x03	; 3
    110c:	6b e2       	ldi	r22, 0x2B	; 43
    110e:	76 e0       	ldi	r23, 0x06	; 6
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	bc d1       	rcall	.+888    	; 0x148c <sendCommand>
    1114:	5d 98       	cbi	0x0b, 5	; 11
    1116:	e5 d0       	rcall	.+458    	; 0x12e2 <receiveStatus>
    1118:	80 e5       	ldi	r24, 0x50	; 80
    111a:	93 e0       	ldi	r25, 0x03	; 3
    111c:	08 95       	ret

0000111e <networkConnect>:
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	eb 01       	movw	r28, r22
    1124:	ac 01       	movw	r20, r24
    1126:	60 e3       	ldi	r22, 0x30	; 48
    1128:	76 e0       	ldi	r23, 0x06	; 6
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	af d1       	rcall	.+862    	; 0x148c <sendCommand>
    112e:	ae 01       	movw	r20, r28
    1130:	6a e3       	ldi	r22, 0x3A	; 58
    1132:	76 e0       	ldi	r23, 0x06	; 6
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	aa d1       	rcall	.+852    	; 0x148c <sendCommand>
    1138:	4c e3       	ldi	r20, 0x3C	; 60
    113a:	52 e0       	ldi	r21, 0x02	; 2
    113c:	6f e6       	ldi	r22, 0x6F	; 111
    113e:	72 e0       	ldi	r23, 0x02	; 2
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	a4 d1       	rcall	.+840    	; 0x148c <sendCommand>
    1144:	83 d1       	rcall	.+774    	; 0x144c <errorCheck>
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	89 2b       	or	r24, r25
    114c:	11 f0       	breq	.+4      	; 0x1152 <networkConnect+0x34>
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	c9 01       	movw	r24, r18
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <networkQueryString>:
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
    1168:	fc 01       	movw	r30, r24
    116a:	01 90       	ld	r0, Z+
    116c:	00 20       	and	r0, r0
    116e:	e9 f7       	brne	.-6      	; 0x116a <networkQueryString+0x10>
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	af 01       	movw	r20, r30
    1174:	48 1b       	sub	r20, r24
    1176:	59 0b       	sbc	r21, r25
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	74 e0       	ldi	r23, 0x04	; 4
    117c:	ec de       	rcall	.-552    	; 0xf56 <RAMWrite>
    117e:	fe 01       	movw	r30, r28
    1180:	01 90       	ld	r0, Z+
    1182:	00 20       	and	r0, r0
    1184:	e9 f7       	brne	.-6      	; 0x1180 <networkQueryString+0x26>
    1186:	31 97       	sbiw	r30, 0x01	; 1
    1188:	6f 01       	movw	r12, r30
    118a:	cc 1a       	sub	r12, r28
    118c:	dd 0a       	sbc	r13, r29
    118e:	c1 e0       	ldi	r28, 0x01	; 1
    1190:	d0 e0       	ldi	r29, 0x00	; 0
    1192:	e1 2c       	mov	r14, r1
    1194:	ce 01       	movw	r24, r28
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	aa df       	rcall	.-172    	; 0x10ee <RAMReadByte>
    119a:	18 2f       	mov	r17, r24
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	8e 15       	cp	r24, r14
    11a0:	20 f0       	brcs	.+8      	; 0x11aa <networkQueryString+0x50>
    11a2:	1a 30       	cpi	r17, 0x0A	; 10
    11a4:	31 f5       	brne	.+76     	; 0x11f2 <networkQueryString+0x98>
    11a6:	e3 94       	inc	r14
    11a8:	24 c0       	rjmp	.+72     	; 0x11f2 <networkQueryString+0x98>
    11aa:	1d 30       	cpi	r17, 0x0D	; 13
    11ac:	21 f1       	breq	.+72     	; 0x11f6 <networkQueryString+0x9c>
    11ae:	18 f4       	brcc	.+6      	; 0x11b6 <networkQueryString+0x5c>
    11b0:	1a 30       	cpi	r17, 0x0A	; 10
    11b2:	09 f1       	breq	.+66     	; 0x11f6 <networkQueryString+0x9c>
    11b4:	17 c0       	rjmp	.+46     	; 0x11e4 <networkQueryString+0x8a>
    11b6:	10 32       	cpi	r17, 0x20	; 32
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <networkQueryString+0x66>
    11ba:	13 32       	cpi	r17, 0x23	; 35
    11bc:	e1 f0       	breq	.+56     	; 0x11f6 <networkQueryString+0x9c>
    11be:	12 c0       	rjmp	.+36     	; 0x11e4 <networkQueryString+0x8a>
    11c0:	b6 01       	movw	r22, r12
    11c2:	7c 5f       	subi	r23, 0xFC	; 252
    11c4:	85 e2       	ldi	r24, 0x25	; 37
    11c6:	7b df       	rcall	.-266    	; 0x10be <RAMWriteByte>
    11c8:	b6 01       	movw	r22, r12
    11ca:	6f 5f       	subi	r22, 0xFF	; 255
    11cc:	7b 4f       	sbci	r23, 0xFB	; 251
    11ce:	82 e3       	ldi	r24, 0x32	; 50
    11d0:	76 df       	rcall	.-276    	; 0x10be <RAMWriteByte>
    11d2:	b6 01       	movw	r22, r12
    11d4:	6e 5f       	subi	r22, 0xFE	; 254
    11d6:	7b 4f       	sbci	r23, 0xFB	; 251
    11d8:	80 e3       	ldi	r24, 0x30	; 48
    11da:	71 df       	rcall	.-286    	; 0x10be <RAMWriteByte>
    11dc:	83 e0       	ldi	r24, 0x03	; 3
    11de:	c8 0e       	add	r12, r24
    11e0:	d1 1c       	adc	r13, r1
    11e2:	09 c0       	rjmp	.+18     	; 0x11f6 <networkQueryString+0x9c>
    11e4:	b6 01       	movw	r22, r12
    11e6:	7c 5f       	subi	r23, 0xFC	; 252
    11e8:	81 2f       	mov	r24, r17
    11ea:	69 df       	rcall	.-302    	; 0x10be <RAMWriteByte>
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	c8 1a       	sub	r12, r24
    11f0:	d8 0a       	sbc	r13, r24
    11f2:	11 23       	and	r17, r17
    11f4:	29 f0       	breq	.+10     	; 0x1200 <networkQueryString+0xa6>
    11f6:	21 96       	adiw	r28, 0x01	; 1
    11f8:	cf 3f       	cpi	r28, 0xFF	; 255
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	d8 07       	cpc	r29, r24
    11fe:	51 f6       	brne	.-108    	; 0x1194 <networkQueryString+0x3a>
    1200:	b6 01       	movw	r22, r12
    1202:	61 50       	subi	r22, 0x01	; 1
    1204:	7c 4f       	sbci	r23, 0xFC	; 252
    1206:	4f e1       	ldi	r20, 0x1F	; 31
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	82 e5       	ldi	r24, 0x52	; 82
    120c:	96 e0       	ldi	r25, 0x06	; 6
    120e:	a3 de       	rcall	.-698    	; 0xf56 <RAMWrite>
    1210:	c6 01       	movw	r24, r12
    1212:	4e 96       	adiw	r24, 0x1e	; 30
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	ef 90       	pop	r14
    121c:	df 90       	pop	r13
    121e:	cf 90       	pop	r12
    1220:	08 95       	ret

00001222 <updateFileWifi>:

void updateFileWifi(char* filepath)
{
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
    1228:	54 d0       	rcall	.+168    	; 0x12d2 <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL); 	
    122a:	40 e5       	ldi	r20, 0x50	; 80
    122c:	53 e0       	ldi	r21, 0x03	; 3
    122e:	be 01       	movw	r22, r28
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	2c d1       	rcall	.+600    	; 0x148c <sendCommand>
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <uart_init>:
	}
	//_delay_ms(500);
	//begin receiving
	//printf("Received Data: %s\n", receiveBuffer);
	return ""; 
}
    123a:	10 92 c5 00 	sts	0x00C5, r1
    123e:	87 e0       	ldi	r24, 0x07	; 7
    1240:	80 93 c4 00 	sts	0x00C4, r24
    1244:	e1 ec       	ldi	r30, 0xC1	; 193
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	88 e1       	ldi	r24, 0x18	; 24
    124a:	80 83       	st	Z, r24
    124c:	86 e0       	ldi	r24, 0x06	; 6
    124e:	80 93 c2 00 	sts	0x00C2, r24
    1252:	80 81       	ld	r24, Z
    1254:	80 68       	ori	r24, 0x80	; 128
    1256:	80 83       	st	Z, r24
    1258:	08 95       	ret

0000125a <uart_send>:
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	10 92 2c 07 	sts	0x072C, r1
    1262:	29 e1       	ldi	r18, 0x19	; 25
    1264:	eb e3       	ldi	r30, 0x3B	; 59
    1266:	f8 e0       	ldi	r31, 0x08	; 8
    1268:	df 01       	movw	r26, r30
    126a:	1d 92       	st	X+, r1
    126c:	2a 95       	dec	r18
    126e:	e9 f7       	brne	.-6      	; 0x126a <uart_send+0x10>
    1270:	61 15       	cp	r22, r1
    1272:	71 05       	cpc	r23, r1
    1274:	a9 f0       	breq	.+42     	; 0x12a0 <uart_send+0x46>
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	e8 ec       	ldi	r30, 0xC8	; 200
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	ae ec       	ldi	r26, 0xCE	; 206
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	40 81       	ld	r20, Z
    1286:	45 ff       	sbrs	r20, 5
    1288:	fd cf       	rjmp	.-6      	; 0x1284 <uart_send+0x2a>
    128a:	ec 01       	movw	r28, r24
    128c:	c2 0f       	add	r28, r18
    128e:	d3 1f       	adc	r29, r19
    1290:	28 81       	ld	r18, Y
    1292:	2c 93       	st	X, r18
    1294:	5f 5f       	subi	r21, 0xFF	; 255
    1296:	25 2f       	mov	r18, r21
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	26 17       	cp	r18, r22
    129c:	37 07       	cpc	r19, r23
    129e:	90 f3       	brcs	.-28     	; 0x1284 <uart_send+0x2a>
    12a0:	80 eb       	ldi	r24, 0xB0	; 176
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	89 d2       	rcall	.+1298   	; 0x17b8 <puts>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <uart_receiveChar>:
    12b0:	e0 ec       	ldi	r30, 0xC0	; 192
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	88 23       	and	r24, r24
    12b8:	ec f7       	brge	.-6      	; 0x12b4 <uart_receiveChar+0x4>
    12ba:	80 91 c6 00 	lds	r24, 0x00C6
    12be:	08 95       	ret

000012c0 <enableReceiveINT>:
    12c0:	e1 ec       	ldi	r30, 0xC1	; 193
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	80 68       	ori	r24, 0x80	; 128
    12c8:	80 83       	st	Z, r24
    12ca:	78 94       	sei
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	08 95       	ret

000012d2 <disableReceiveINT>:
    12d2:	e1 ec       	ldi	r30, 0xC1	; 193
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 77       	andi	r24, 0x7F	; 127
    12da:	80 83       	st	Z, r24
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	08 95       	ret

000012e2 <receiveStatus>:

int receiveStatus()
{
	while(receiveWifiFlag == 0)
    12e2:	80 91 2c 07 	lds	r24, 0x072C
    12e6:	81 11       	cpse	r24, r1
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <receiveStatus+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ea:	81 e2       	ldi	r24, 0x21	; 33
    12ec:	8a 95       	dec	r24
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <receiveStatus+0xa>
    12f0:	00 00       	nop
    12f2:	80 91 2c 07 	lds	r24, 0x072C
    12f6:	88 23       	and	r24, r24
    12f8:	c1 f3       	breq	.-16     	; 0x12ea <receiveStatus+0x8>
		//printf("Receive Flag: %d\n", receiveWifiFlag);
		//printf("Loooop\n");
	}
	
	return 1; 
}
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	08 95       	ret

00001300 <buildTransmissionLength>:

unsigned int buildTransmissionLength()
{
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
	if(testPrint)
    1308:	80 91 2f 07 	lds	r24, 0x072F
    130c:	90 91 30 07 	lds	r25, 0x0730
    1310:	89 2b       	or	r24, r25
    1312:	e1 f0       	breq	.+56     	; 0x134c <buildTransmissionLength+0x4c>
    1314:	c0 e0       	ldi	r28, 0x00	; 0
    1316:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
		{
			printf("Value: %c, Address: %p\n", receiveBuffer[i], receiveBuffer + i);
    1318:	04 ea       	ldi	r16, 0xA4	; 164
    131a:	16 e0       	ldi	r17, 0x06	; 6
    131c:	fe 01       	movw	r30, r28
    131e:	e5 5c       	subi	r30, 0xC5	; 197
    1320:	f7 4f       	sbci	r31, 0xF7	; 247
    1322:	80 81       	ld	r24, Z
    1324:	ff 93       	push	r31
    1326:	ef 93       	push	r30
    1328:	1f 92       	push	r1
    132a:	8f 93       	push	r24
    132c:	1f 93       	push	r17
    132e:	0f 93       	push	r16
    1330:	2d d2       	rcall	.+1114   	; 0x178c <printf>
unsigned int buildTransmissionLength()
{
	if(testPrint)
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
    1332:	21 96       	adiw	r28, 0x01	; 1
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	c7 30       	cpi	r28, 0x07	; 7
    1342:	d1 05       	cpc	r29, r1
    1344:	59 f7       	brne	.-42     	; 0x131c <buildTransmissionLength+0x1c>
		{
			printf("Value: %c, Address: %p\n", receiveBuffer[i], receiveBuffer + i);
			//printf("0x%02x ", receiveBuffer[i]);
		}
		printf("\n");
    1346:	8a e0       	ldi	r24, 0x0A	; 10
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	31 d2       	rcall	.+1122   	; 0x17ae <putchar>
	}
	transLength = 0; 
    134c:	10 92 2b 07 	sts	0x072B, r1
    1350:	10 92 2a 07 	sts	0x072A, r1
	transLength += (receiveBuffer[ones] & 0x0F);
    1354:	20 91 41 08 	lds	r18, 0x0841
    1358:	80 91 2a 07 	lds	r24, 0x072A
    135c:	90 91 2b 07 	lds	r25, 0x072B
    1360:	2f 70       	andi	r18, 0x0F	; 15
    1362:	82 0f       	add	r24, r18
    1364:	91 1d       	adc	r25, r1
    1366:	90 93 2b 07 	sts	0x072B, r25
    136a:	80 93 2a 07 	sts	0x072A, r24
	transLength += (receiveBuffer[tens] & 0x0F) * 10; 
    136e:	80 91 40 08 	lds	r24, 0x0840
    1372:	20 91 2a 07 	lds	r18, 0x072A
    1376:	30 91 2b 07 	lds	r19, 0x072B
    137a:	8f 70       	andi	r24, 0x0F	; 15
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	ac 01       	movw	r20, r24
    1380:	44 0f       	add	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	84 0f       	add	r24, r20
    1392:	95 1f       	adc	r25, r21
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	90 93 2b 07 	sts	0x072B, r25
    139c:	80 93 2a 07 	sts	0x072A, r24
	transLength += (receiveBuffer[hundreds] & 0x0F) * 100; 
    13a0:	20 91 3f 08 	lds	r18, 0x083F
    13a4:	80 91 2a 07 	lds	r24, 0x072A
    13a8:	90 91 2b 07 	lds	r25, 0x072B
    13ac:	2f 70       	andi	r18, 0x0F	; 15
    13ae:	34 e6       	ldi	r19, 0x64	; 100
    13b0:	23 9f       	mul	r18, r19
    13b2:	80 0d       	add	r24, r0
    13b4:	91 1d       	adc	r25, r1
    13b6:	11 24       	eor	r1, r1
    13b8:	90 93 2b 07 	sts	0x072B, r25
    13bc:	80 93 2a 07 	sts	0x072A, r24
	transLength += (receiveBuffer[thousands] & 0x0F) * 1000; 
    13c0:	60 91 3e 08 	lds	r22, 0x083E
    13c4:	80 91 2a 07 	lds	r24, 0x072A
    13c8:	90 91 2b 07 	lds	r25, 0x072B
    13cc:	6f 70       	andi	r22, 0x0F	; 15
    13ce:	48 ee       	ldi	r20, 0xE8	; 232
    13d0:	53 e0       	ldi	r21, 0x03	; 3
    13d2:	64 9f       	mul	r22, r20
    13d4:	90 01       	movw	r18, r0
    13d6:	65 9f       	mul	r22, r21
    13d8:	30 0d       	add	r19, r0
    13da:	11 24       	eor	r1, r1
    13dc:	82 0f       	add	r24, r18
    13de:	93 1f       	adc	r25, r19
    13e0:	90 93 2b 07 	sts	0x072B, r25
    13e4:	80 93 2a 07 	sts	0x072A, r24
	transLength += (receiveBuffer[tenThousands] & 0x0F) * 10000; 
    13e8:	60 91 3d 08 	lds	r22, 0x083D
    13ec:	80 91 2a 07 	lds	r24, 0x072A
    13f0:	90 91 2b 07 	lds	r25, 0x072B
    13f4:	6f 70       	andi	r22, 0x0F	; 15
    13f6:	40 e1       	ldi	r20, 0x10	; 16
    13f8:	57 e2       	ldi	r21, 0x27	; 39
    13fa:	64 9f       	mul	r22, r20
    13fc:	90 01       	movw	r18, r0
    13fe:	65 9f       	mul	r22, r21
    1400:	30 0d       	add	r19, r0
    1402:	11 24       	eor	r1, r1
    1404:	82 0f       	add	r24, r18
    1406:	93 1f       	adc	r25, r19
    1408:	90 93 2b 07 	sts	0x072B, r25
    140c:	80 93 2a 07 	sts	0x072A, r24
	//if(transLength < MaxRecSize)
	return transLength; 
    1410:	80 91 2a 07 	lds	r24, 0x072A
    1414:	90 91 2b 07 	lds	r25, 0x072B
	//else
		////8 is the length of the header 
		//return MaxRecSize - 8; 
}
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	08 95       	ret

00001422 <getTransmissionLength>:

uint16_t getTransmissionLength()
{
	return transLength; 
    1422:	80 91 2a 07 	lds	r24, 0x072A
    1426:	90 91 2b 07 	lds	r25, 0x072B
}
    142a:	08 95       	ret

0000142c <getMessageHeader>:

char* getMessageHeader()
{
    142c:	e0 e5       	ldi	r30, 0x50	; 80
    142e:	f3 e0       	ldi	r31, 0x03	; 3
	char* header = ""; 
	
	for(int i = 0; i < endHeader; i++)
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
	{
		*(header + i) = receiveBuffer[i]; 
    1434:	dc 01       	movw	r26, r24
    1436:	a5 5c       	subi	r26, 0xC5	; 197
    1438:	b7 4f       	sbci	r27, 0xF7	; 247
    143a:	2c 91       	ld	r18, X
    143c:	21 93       	st	Z+, r18

char* getMessageHeader()
{
	char* header = ""; 
	
	for(int i = 0; i < endHeader; i++)
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	87 30       	cpi	r24, 0x07	; 7
    1442:	91 05       	cpc	r25, r1
    1444:	b9 f7       	brne	.-18     	; 0x1434 <getMessageHeader+0x8>
	{
		*(header + i) = receiveBuffer[i]; 
	}
	
	return header; 
}
    1446:	80 e5       	ldi	r24, 0x50	; 80
    1448:	93 e0       	ldi	r25, 0x03	; 3
    144a:	08 95       	ret

0000144c <errorCheck>:

int errorCheck() 
{
	while(!receiveWifiFlag & 1)
    144c:	80 91 2c 07 	lds	r24, 0x072C
    1450:	81 11       	cpse	r24, r1
    1452:	08 c0       	rjmp	.+16     	; 0x1464 <errorCheck+0x18>
    1454:	81 e2       	ldi	r24, 0x21	; 33
    1456:	8a 95       	dec	r24
    1458:	f1 f7       	brne	.-4      	; 0x1456 <errorCheck+0xa>
    145a:	00 00       	nop
    145c:	80 91 2c 07 	lds	r24, 0x072C
    1460:	88 23       	and	r24, r24
    1462:	c1 f3       	breq	.-16     	; 0x1454 <errorCheck+0x8>
		//While loop does not work correctly without a delay
		//An issue with the compiler or the stack pointer when invoking the interrupt
		_delay_us(100);
	}
	
	char* header = getMessageHeader();
    1464:	e3 df       	rcall	.-58     	; 0x142c <getMessageHeader>
	//0 denotes a successful command 
	if(header[errorCode] != '0')
    1466:	21 e0       	ldi	r18, 0x01	; 1
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	fc 01       	movw	r30, r24
    146c:	81 81       	ldd	r24, Z+1	; 0x01
    146e:	80 33       	cpi	r24, 0x30	; 48
    1470:	11 f4       	brne	.+4      	; 0x1476 <errorCheck+0x2a>
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
		return 1; 
	else 
		return 0; 
}
    1476:	c9 01       	movw	r24, r18
    1478:	08 95       	ret

0000147a <updateRAMAddress>:

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
    147a:	60 93 26 07 	sts	0x0726, r22
    147e:	70 93 27 07 	sts	0x0727, r23
    1482:	80 93 28 07 	sts	0x0728, r24
    1486:	90 93 29 07 	sts	0x0729, r25
    148a:	08 95       	ret

0000148c <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	ea 01       	movw	r28, r20
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	31 f0       	breq	.+12     	; 0x14a6 <sendCommand+0x1a>
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	71 f0       	breq	.+28     	; 0x14ba <sendCommand+0x2e>
    149e:	8f 3f       	cpi	r24, 0xFF	; 255
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <sendCommand+0x18>
    14a2:	66 c0       	rjmp	.+204    	; 0x1570 <sendCommand+0xe4>
    14a4:	17 c0       	rjmp	.+46     	; 0x14d4 <sendCommand+0x48>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
    14a6:	85 e0       	ldi	r24, 0x05	; 5
    14a8:	ec eb       	ldi	r30, 0xBC	; 188
    14aa:	f6 e0       	ldi	r31, 0x06	; 6
    14ac:	a4 e5       	ldi	r26, 0x54	; 84
    14ae:	b8 e0       	ldi	r27, 0x08	; 8
    14b0:	01 90       	ld	r0, Z+
    14b2:	0d 92       	st	X+, r0
    14b4:	8a 95       	dec	r24
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <sendCommand+0x24>
			//strcat(fullCommand, "get ");
			break; 
    14b8:	0d c0       	rjmp	.+26     	; 0x14d4 <sendCommand+0x48>
		case SET: 
			strcat(fullCommand, "set ");
    14ba:	a4 e5       	ldi	r26, 0x54	; 84
    14bc:	b8 e0       	ldi	r27, 0x08	; 8
    14be:	0d 90       	ld	r0, X+
    14c0:	00 20       	and	r0, r0
    14c2:	e9 f7       	brne	.-6      	; 0x14be <sendCommand+0x32>
    14c4:	11 97       	sbiw	r26, 0x01	; 1
    14c6:	85 e0       	ldi	r24, 0x05	; 5
    14c8:	e1 ec       	ldi	r30, 0xC1	; 193
    14ca:	f6 e0       	ldi	r31, 0x06	; 6
    14cc:	01 90       	ld	r0, Z+
    14ce:	0d 92       	st	X+, r0
    14d0:	8a 95       	dec	r24
    14d2:	e1 f7       	brne	.-8      	; 0x14cc <sendCommand+0x40>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
    14d4:	84 e5       	ldi	r24, 0x54	; 84
    14d6:	98 e0       	ldi	r25, 0x08	; 8
    14d8:	15 d1       	rcall	.+554    	; 0x1704 <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	c0 35       	cpi	r28, 0x50	; 80
    14de:	d8 07       	cpc	r29, r24
    14e0:	71 f0       	breq	.+28     	; 0x14fe <sendCommand+0x72>
	{
		strcat(fullCommand, " ");
    14e2:	e4 e5       	ldi	r30, 0x54	; 84
    14e4:	f8 e0       	ldi	r31, 0x08	; 8
    14e6:	01 90       	ld	r0, Z+
    14e8:	00 20       	and	r0, r0
    14ea:	e9 f7       	brne	.-6      	; 0x14e6 <sendCommand+0x5a>
    14ec:	31 97       	sbiw	r30, 0x01	; 1
    14ee:	80 e2       	ldi	r24, 0x20	; 32
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	80 83       	st	Z, r24
		strcat(fullCommand, value);
    14f6:	be 01       	movw	r22, r28
    14f8:	84 e5       	ldi	r24, 0x54	; 84
    14fa:	98 e0       	ldi	r25, 0x08	; 8
    14fc:	03 d1       	rcall	.+518    	; 0x1704 <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
    14fe:	c4 e5       	ldi	r28, 0x54	; 84
    1500:	d8 e0       	ldi	r29, 0x08	; 8
    1502:	fe 01       	movw	r30, r28
    1504:	01 90       	ld	r0, Z+
    1506:	00 20       	and	r0, r0
    1508:	e9 f7       	brne	.-6      	; 0x1504 <sendCommand+0x78>
    150a:	31 97       	sbiw	r30, 0x01	; 1
    150c:	8d e0       	ldi	r24, 0x0D	; 13
    150e:	9a e0       	ldi	r25, 0x0A	; 10
    1510:	a0 e0       	ldi	r26, 0x00	; 0
    1512:	80 83       	st	Z, r24
    1514:	91 83       	std	Z+1, r25	; 0x01
    1516:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
    1518:	fe 01       	movw	r30, r28
    151a:	01 90       	ld	r0, Z+
    151c:	00 20       	and	r0, r0
    151e:	e9 f7       	brne	.-6      	; 0x151a <sendCommand+0x8e>
    1520:	31 97       	sbiw	r30, 0x01	; 1
    1522:	8f 01       	movw	r16, r30
    1524:	04 55       	subi	r16, 0x54	; 84
    1526:	18 40       	sbci	r17, 0x08	; 8
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	1f 93       	push	r17
    152e:	0f 93       	push	r16
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	86 ec       	ldi	r24, 0xC6	; 198
    1536:	96 e0       	ldi	r25, 0x06	; 6
    1538:	9f 93       	push	r25
    153a:	8f 93       	push	r24
    153c:	27 d1       	rcall	.+590    	; 0x178c <printf>
	uart_send(fullCommand, length);
    153e:	b8 01       	movw	r22, r16
    1540:	ce 01       	movw	r24, r28
    1542:	8b de       	rcall	.-746    	; 0x125a <uart_send>
	memset(fullCommand, 0x00, 100);
    1544:	84 e6       	ldi	r24, 0x64	; 100
    1546:	fe 01       	movw	r30, r28
    1548:	11 92       	st	Z+, r1
    154a:	8a 95       	dec	r24
    154c:	e9 f7       	brne	.-6      	; 0x1548 <sendCommand+0xbc>
		//printf("Loop\n");
	//}
	//free(fullCommand);
	//printf("Freed!\n");
	//free(command);
	printf("Freed!\n");
    154e:	8b ee       	ldi	r24, 0xEB	; 235
    1550:	96 e0       	ldi	r25, 0x06	; 6
    1552:	32 d1       	rcall	.+612    	; 0x17b8 <puts>
	printf("Returning!\n");
    1554:	82 ef       	ldi	r24, 0xF2	; 242
    1556:	96 e0       	ldi	r25, 0x06	; 6
    1558:	2f d1       	rcall	.+606    	; 0x17b8 <puts>
	return 1; 
    155a:	8d b7       	in	r24, 0x3d	; 61
    155c:	9e b7       	in	r25, 0x3e	; 62
    155e:	08 96       	adiw	r24, 0x08	; 8
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	9e bf       	out	0x3e, r25	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	8d bf       	out	0x3d, r24	; 61
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <sendCommand+0xe8>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
	//printf("Freed!\n");
	//free(command);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	08 95       	ret

0000157e <__vector_25>:

ISR(USART0_RX_vect)
{
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	0b b6       	in	r0, 0x3b	; 59
    158a:	0f 92       	push	r0
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
	//printf("Receive Interrupt!\n");
	cli();
    15a8:	f8 94       	cli
	//PORTD &= ~(1<<CTS);
	if(!bufferStart)
    15aa:	80 91 31 07 	lds	r24, 0x0731
    15ae:	90 91 32 07 	lds	r25, 0x0732
    15b2:	89 2b       	or	r24, r25
    15b4:	c9 f4       	brne	.+50     	; 0x15e8 <__vector_25+0x6a>
	{
		receiveBuffer[i] = uart_receiveChar();
    15b6:	c0 91 2d 07 	lds	r28, 0x072D
    15ba:	d0 91 2e 07 	lds	r29, 0x072E
    15be:	78 de       	rcall	.-784    	; 0x12b0 <uart_receiveChar>
    15c0:	c5 5c       	subi	r28, 0xC5	; 197
    15c2:	d7 4f       	sbci	r29, 0xF7	; 247
    15c4:	88 83       	st	Y, r24
		if(receiveBuffer[i] == 'R')
    15c6:	e0 91 2d 07 	lds	r30, 0x072D
    15ca:	f0 91 2e 07 	lds	r31, 0x072E
    15ce:	e5 5c       	subi	r30, 0xC5	; 197
    15d0:	f7 4f       	sbci	r31, 0xF7	; 247
    15d2:	80 81       	ld	r24, Z
    15d4:	82 35       	cpi	r24, 0x52	; 82
    15d6:	09 f0       	breq	.+2      	; 0x15da <__vector_25+0x5c>
    15d8:	67 c0       	rjmp	.+206    	; 0x16a8 <__vector_25+0x12a>
		{
			//printf("Found Beginning!\n");
			bufferStart = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	90 93 32 07 	sts	0x0732, r25
    15e2:	80 93 31 07 	sts	0x0731, r24
    15e6:	60 c0       	rjmp	.+192    	; 0x16a8 <__vector_25+0x12a>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
    15e8:	80 91 2d 07 	lds	r24, 0x072D
    15ec:	90 91 2e 07 	lds	r25, 0x072E
    15f0:	07 97       	sbiw	r24, 0x07	; 7
    15f2:	48 f4       	brcc	.+18     	; 0x1606 <__vector_25+0x88>
		{
			receiveBuffer[i] = uart_receiveChar();
    15f4:	c0 91 2d 07 	lds	r28, 0x072D
    15f8:	d0 91 2e 07 	lds	r29, 0x072E
    15fc:	59 de       	rcall	.-846    	; 0x12b0 <uart_receiveChar>
    15fe:	c5 5c       	subi	r28, 0xC5	; 197
    1600:	d7 4f       	sbci	r29, 0xF7	; 247
    1602:	88 83       	st	Y, r24
    1604:	51 c0       	rjmp	.+162    	; 0x16a8 <__vector_25+0x12a>
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
		}
		else if(i == endHeader)
    1606:	80 91 2d 07 	lds	r24, 0x072D
    160a:	90 91 2e 07 	lds	r25, 0x072E
    160e:	07 97       	sbiw	r24, 0x07	; 7
    1610:	31 f4       	brne	.+12     	; 0x161e <__vector_25+0xa0>
		{
			transLength = buildTransmissionLength();
    1612:	76 de       	rcall	.-788    	; 0x1300 <buildTransmissionLength>
    1614:	90 93 2b 07 	sts	0x072B, r25
    1618:	80 93 2a 07 	sts	0x072A, r24
    161c:	45 c0       	rjmp	.+138    	; 0x16a8 <__vector_25+0x12a>
			//printf("Transmission Length: %d\n", transLength);
		}
		else
		{
			if(i < transLength + endHeader)
    161e:	20 91 2a 07 	lds	r18, 0x072A
    1622:	30 91 2b 07 	lds	r19, 0x072B
    1626:	80 91 2d 07 	lds	r24, 0x072D
    162a:	90 91 2e 07 	lds	r25, 0x072E
    162e:	29 5f       	subi	r18, 0xF9	; 249
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	82 17       	cp	r24, r18
    1634:	93 07       	cpc	r25, r19
    1636:	20 f4       	brcc	.+8      	; 0x1640 <__vector_25+0xc2>
			{
				//printf("Translength: %d", transLength);
				//_delay_ms(5);
				buff = uart_receiveChar();
    1638:	3b de       	rcall	.-906    	; 0x12b0 <uart_receiveChar>
    163a:	80 93 3a 08 	sts	0x083A, r24
    163e:	34 c0       	rjmp	.+104    	; 0x16a8 <__vector_25+0x12a>
			}

			else
			{
				//printf("End of String!\n");
				receiveBuffer[i] = 0;
    1640:	e0 91 2d 07 	lds	r30, 0x072D
    1644:	f0 91 2e 07 	lds	r31, 0x072E
    1648:	e5 5c       	subi	r30, 0xC5	; 197
    164a:	f7 4f       	sbci	r31, 0xF7	; 247
    164c:	10 82       	st	Z, r1
				RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
    164e:	80 91 26 07 	lds	r24, 0x0726
    1652:	90 91 27 07 	lds	r25, 0x0727
    1656:	a0 91 28 07 	lds	r26, 0x0728
    165a:	b0 91 29 07 	lds	r27, 0x0729
    165e:	20 91 2d 07 	lds	r18, 0x072D
    1662:	30 91 2e 07 	lds	r19, 0x072E
    1666:	28 50       	subi	r18, 0x08	; 8
    1668:	31 09       	sbc	r19, r1
    166a:	b9 01       	movw	r22, r18
    166c:	68 0f       	add	r22, r24
    166e:	79 1f       	adc	r23, r25
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	25 dd       	rcall	.-1462   	; 0x10be <RAMWriteByte>
				//UCSR1B &= ~(1<<RXCIE1);
				//cli();
				i = 0;
    1674:	10 92 2e 07 	sts	0x072E, r1
    1678:	10 92 2d 07 	sts	0x072D, r1
				bufferStart = 0;
    167c:	10 92 32 07 	sts	0x0732, r1
    1680:	10 92 31 07 	sts	0x0731, r1
				//done receiving
				receiveWifiFlag = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 93 2c 07 	sts	0x072C, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
    168a:	3a de       	rcall	.-908    	; 0x1300 <buildTransmissionLength>
    168c:	9f 93       	push	r25
    168e:	8f 93       	push	r24
    1690:	8d ef       	ldi	r24, 0xFD	; 253
    1692:	96 e0       	ldi	r25, 0x06	; 6
    1694:	9f 93       	push	r25
    1696:	8f 93       	push	r24
    1698:	79 d0       	rcall	.+242    	; 0x178c <printf>
				printf("Done Receiving!\n");
    169a:	86 e1       	ldi	r24, 0x16	; 22
    169c:	97 e0       	ldi	r25, 0x07	; 7
    169e:	8c d0       	rcall	.+280    	; 0x17b8 <puts>
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
			}
		}
		//printf("%d\n", i);
	}
	i++; 
    16a8:	80 91 2d 07 	lds	r24, 0x072D
    16ac:	90 91 2e 07 	lds	r25, 0x072E
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	90 93 2e 07 	sts	0x072E, r25
    16b6:	80 93 2d 07 	sts	0x072D, r24
	//PORTD |= (1<<CTS); 
	sei(); 
    16ba:	78 94       	sei
}
    16bc:	ff 91       	pop	r31
    16be:	ef 91       	pop	r30
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	bf 91       	pop	r27
    16c6:	af 91       	pop	r26
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	7f 91       	pop	r23
    16ce:	6f 91       	pop	r22
    16d0:	5f 91       	pop	r21
    16d2:	4f 91       	pop	r20
    16d4:	3f 91       	pop	r19
    16d6:	2f 91       	pop	r18
    16d8:	0f 90       	pop	r0
    16da:	0b be       	out	0x3b, r0	; 59
    16dc:	0f 90       	pop	r0
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	0f 90       	pop	r0
    16e2:	1f 90       	pop	r1
    16e4:	18 95       	reti

000016e6 <__umulhisi3>:
    16e6:	a2 9f       	mul	r26, r18
    16e8:	b0 01       	movw	r22, r0
    16ea:	b3 9f       	mul	r27, r19
    16ec:	c0 01       	movw	r24, r0
    16ee:	a3 9f       	mul	r26, r19
    16f0:	70 0d       	add	r23, r0
    16f2:	81 1d       	adc	r24, r1
    16f4:	11 24       	eor	r1, r1
    16f6:	91 1d       	adc	r25, r1
    16f8:	b2 9f       	mul	r27, r18
    16fa:	70 0d       	add	r23, r0
    16fc:	81 1d       	adc	r24, r1
    16fe:	11 24       	eor	r1, r1
    1700:	91 1d       	adc	r25, r1
    1702:	08 95       	ret

00001704 <strcat>:
    1704:	fb 01       	movw	r30, r22
    1706:	dc 01       	movw	r26, r24
    1708:	0d 90       	ld	r0, X+
    170a:	00 20       	and	r0, r0
    170c:	e9 f7       	brne	.-6      	; 0x1708 <strcat+0x4>
    170e:	11 97       	sbiw	r26, 0x01	; 1
    1710:	01 90       	ld	r0, Z+
    1712:	0d 92       	st	X+, r0
    1714:	00 20       	and	r0, r0
    1716:	e1 f7       	brne	.-8      	; 0x1710 <strcat+0xc>
    1718:	08 95       	ret

0000171a <strcpy>:
    171a:	fb 01       	movw	r30, r22
    171c:	dc 01       	movw	r26, r24
    171e:	01 90       	ld	r0, Z+
    1720:	0d 92       	st	X+, r0
    1722:	00 20       	and	r0, r0
    1724:	e1 f7       	brne	.-8      	; 0x171e <strcpy+0x4>
    1726:	08 95       	ret

00001728 <fputc>:
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	18 2f       	mov	r17, r24
    1732:	09 2f       	mov	r16, r25
    1734:	eb 01       	movw	r28, r22
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	81 fd       	sbrc	r24, 1
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <fputc+0x1a>
    173c:	8f ef       	ldi	r24, 0xFF	; 255
    173e:	9f ef       	ldi	r25, 0xFF	; 255
    1740:	20 c0       	rjmp	.+64     	; 0x1782 <fputc+0x5a>
    1742:	82 ff       	sbrs	r24, 2
    1744:	10 c0       	rjmp	.+32     	; 0x1766 <fputc+0x3e>
    1746:	4e 81       	ldd	r20, Y+6	; 0x06
    1748:	5f 81       	ldd	r21, Y+7	; 0x07
    174a:	2c 81       	ldd	r18, Y+4	; 0x04
    174c:	3d 81       	ldd	r19, Y+5	; 0x05
    174e:	42 17       	cp	r20, r18
    1750:	53 07       	cpc	r21, r19
    1752:	7c f4       	brge	.+30     	; 0x1772 <fputc+0x4a>
    1754:	e8 81       	ld	r30, Y
    1756:	f9 81       	ldd	r31, Y+1	; 0x01
    1758:	9f 01       	movw	r18, r30
    175a:	2f 5f       	subi	r18, 0xFF	; 255
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	39 83       	std	Y+1, r19	; 0x01
    1760:	28 83       	st	Y, r18
    1762:	10 83       	st	Z, r17
    1764:	06 c0       	rjmp	.+12     	; 0x1772 <fputc+0x4a>
    1766:	e8 85       	ldd	r30, Y+8	; 0x08
    1768:	f9 85       	ldd	r31, Y+9	; 0x09
    176a:	81 2f       	mov	r24, r17
    176c:	09 95       	icall
    176e:	89 2b       	or	r24, r25
    1770:	29 f7       	brne	.-54     	; 0x173c <fputc+0x14>
    1772:	2e 81       	ldd	r18, Y+6	; 0x06
    1774:	3f 81       	ldd	r19, Y+7	; 0x07
    1776:	2f 5f       	subi	r18, 0xFF	; 255
    1778:	3f 4f       	sbci	r19, 0xFF	; 255
    177a:	3f 83       	std	Y+7, r19	; 0x07
    177c:	2e 83       	std	Y+6, r18	; 0x06
    177e:	81 2f       	mov	r24, r17
    1780:	90 2f       	mov	r25, r16
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <printf>:
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	fe 01       	movw	r30, r28
    1796:	35 96       	adiw	r30, 0x05	; 5
    1798:	61 91       	ld	r22, Z+
    179a:	71 91       	ld	r23, Z+
    179c:	af 01       	movw	r20, r30
    179e:	80 91 ba 08 	lds	r24, 0x08BA
    17a2:	90 91 bb 08 	lds	r25, 0x08BB
    17a6:	35 d0       	rcall	.+106    	; 0x1812 <vfprintf>
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	08 95       	ret

000017ae <putchar>:
    17ae:	60 91 ba 08 	lds	r22, 0x08BA
    17b2:	70 91 bb 08 	lds	r23, 0x08BB
    17b6:	b8 cf       	rjmp	.-144    	; 0x1728 <fputc>

000017b8 <puts>:
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	e0 91 ba 08 	lds	r30, 0x08BA
    17c4:	f0 91 bb 08 	lds	r31, 0x08BB
    17c8:	23 81       	ldd	r18, Z+3	; 0x03
    17ca:	21 ff       	sbrs	r18, 1
    17cc:	1b c0       	rjmp	.+54     	; 0x1804 <puts+0x4c>
    17ce:	ec 01       	movw	r28, r24
    17d0:	00 e0       	ldi	r16, 0x00	; 0
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	89 91       	ld	r24, Y+
    17d6:	60 91 ba 08 	lds	r22, 0x08BA
    17da:	70 91 bb 08 	lds	r23, 0x08BB
    17de:	db 01       	movw	r26, r22
    17e0:	18 96       	adiw	r26, 0x08	; 8
    17e2:	ed 91       	ld	r30, X+
    17e4:	fc 91       	ld	r31, X
    17e6:	19 97       	sbiw	r26, 0x09	; 9
    17e8:	88 23       	and	r24, r24
    17ea:	31 f0       	breq	.+12     	; 0x17f8 <puts+0x40>
    17ec:	09 95       	icall
    17ee:	89 2b       	or	r24, r25
    17f0:	89 f3       	breq	.-30     	; 0x17d4 <puts+0x1c>
    17f2:	0f ef       	ldi	r16, 0xFF	; 255
    17f4:	1f ef       	ldi	r17, 0xFF	; 255
    17f6:	ee cf       	rjmp	.-36     	; 0x17d4 <puts+0x1c>
    17f8:	8a e0       	ldi	r24, 0x0A	; 10
    17fa:	09 95       	icall
    17fc:	89 2b       	or	r24, r25
    17fe:	11 f4       	brne	.+4      	; 0x1804 <puts+0x4c>
    1800:	c8 01       	movw	r24, r16
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <puts+0x50>
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	9f ef       	ldi	r25, 0xFF	; 255
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <vfprintf>:
    1812:	2f 92       	push	r2
    1814:	3f 92       	push	r3
    1816:	4f 92       	push	r4
    1818:	5f 92       	push	r5
    181a:	6f 92       	push	r6
    181c:	7f 92       	push	r7
    181e:	8f 92       	push	r8
    1820:	9f 92       	push	r9
    1822:	af 92       	push	r10
    1824:	bf 92       	push	r11
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	2c 97       	sbiw	r28, 0x0c	; 12
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	7c 01       	movw	r14, r24
    1848:	6b 01       	movw	r12, r22
    184a:	8a 01       	movw	r16, r20
    184c:	fc 01       	movw	r30, r24
    184e:	17 82       	std	Z+7, r1	; 0x07
    1850:	16 82       	std	Z+6, r1	; 0x06
    1852:	83 81       	ldd	r24, Z+3	; 0x03
    1854:	81 ff       	sbrs	r24, 1
    1856:	b0 c1       	rjmp	.+864    	; 0x1bb8 <vfprintf+0x3a6>
    1858:	ce 01       	movw	r24, r28
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	4c 01       	movw	r8, r24
    185e:	f7 01       	movw	r30, r14
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	f6 01       	movw	r30, r12
    1864:	93 fd       	sbrc	r25, 3
    1866:	85 91       	lpm	r24, Z+
    1868:	93 ff       	sbrs	r25, 3
    186a:	81 91       	ld	r24, Z+
    186c:	6f 01       	movw	r12, r30
    186e:	88 23       	and	r24, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <vfprintf+0x62>
    1872:	9e c1       	rjmp	.+828    	; 0x1bb0 <vfprintf+0x39e>
    1874:	85 32       	cpi	r24, 0x25	; 37
    1876:	39 f4       	brne	.+14     	; 0x1886 <vfprintf+0x74>
    1878:	93 fd       	sbrc	r25, 3
    187a:	85 91       	lpm	r24, Z+
    187c:	93 ff       	sbrs	r25, 3
    187e:	81 91       	ld	r24, Z+
    1880:	6f 01       	movw	r12, r30
    1882:	85 32       	cpi	r24, 0x25	; 37
    1884:	21 f4       	brne	.+8      	; 0x188e <vfprintf+0x7c>
    1886:	b7 01       	movw	r22, r14
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	4e df       	rcall	.-356    	; 0x1728 <fputc>
    188c:	e8 cf       	rjmp	.-48     	; 0x185e <vfprintf+0x4c>
    188e:	51 2c       	mov	r5, r1
    1890:	31 2c       	mov	r3, r1
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	20 32       	cpi	r18, 0x20	; 32
    1896:	a0 f4       	brcc	.+40     	; 0x18c0 <vfprintf+0xae>
    1898:	8b 32       	cpi	r24, 0x2B	; 43
    189a:	69 f0       	breq	.+26     	; 0x18b6 <vfprintf+0xa4>
    189c:	30 f4       	brcc	.+12     	; 0x18aa <vfprintf+0x98>
    189e:	80 32       	cpi	r24, 0x20	; 32
    18a0:	59 f0       	breq	.+22     	; 0x18b8 <vfprintf+0xa6>
    18a2:	83 32       	cpi	r24, 0x23	; 35
    18a4:	69 f4       	brne	.+26     	; 0x18c0 <vfprintf+0xae>
    18a6:	20 61       	ori	r18, 0x10	; 16
    18a8:	2c c0       	rjmp	.+88     	; 0x1902 <vfprintf+0xf0>
    18aa:	8d 32       	cpi	r24, 0x2D	; 45
    18ac:	39 f0       	breq	.+14     	; 0x18bc <vfprintf+0xaa>
    18ae:	80 33       	cpi	r24, 0x30	; 48
    18b0:	39 f4       	brne	.+14     	; 0x18c0 <vfprintf+0xae>
    18b2:	21 60       	ori	r18, 0x01	; 1
    18b4:	26 c0       	rjmp	.+76     	; 0x1902 <vfprintf+0xf0>
    18b6:	22 60       	ori	r18, 0x02	; 2
    18b8:	24 60       	ori	r18, 0x04	; 4
    18ba:	23 c0       	rjmp	.+70     	; 0x1902 <vfprintf+0xf0>
    18bc:	28 60       	ori	r18, 0x08	; 8
    18be:	21 c0       	rjmp	.+66     	; 0x1902 <vfprintf+0xf0>
    18c0:	27 fd       	sbrc	r18, 7
    18c2:	27 c0       	rjmp	.+78     	; 0x1912 <vfprintf+0x100>
    18c4:	30 ed       	ldi	r19, 0xD0	; 208
    18c6:	38 0f       	add	r19, r24
    18c8:	3a 30       	cpi	r19, 0x0A	; 10
    18ca:	78 f4       	brcc	.+30     	; 0x18ea <vfprintf+0xd8>
    18cc:	26 ff       	sbrs	r18, 6
    18ce:	06 c0       	rjmp	.+12     	; 0x18dc <vfprintf+0xca>
    18d0:	fa e0       	ldi	r31, 0x0A	; 10
    18d2:	5f 9e       	mul	r5, r31
    18d4:	30 0d       	add	r19, r0
    18d6:	11 24       	eor	r1, r1
    18d8:	53 2e       	mov	r5, r19
    18da:	13 c0       	rjmp	.+38     	; 0x1902 <vfprintf+0xf0>
    18dc:	8a e0       	ldi	r24, 0x0A	; 10
    18de:	38 9e       	mul	r3, r24
    18e0:	30 0d       	add	r19, r0
    18e2:	11 24       	eor	r1, r1
    18e4:	33 2e       	mov	r3, r19
    18e6:	20 62       	ori	r18, 0x20	; 32
    18e8:	0c c0       	rjmp	.+24     	; 0x1902 <vfprintf+0xf0>
    18ea:	8e 32       	cpi	r24, 0x2E	; 46
    18ec:	21 f4       	brne	.+8      	; 0x18f6 <vfprintf+0xe4>
    18ee:	26 fd       	sbrc	r18, 6
    18f0:	5f c1       	rjmp	.+702    	; 0x1bb0 <vfprintf+0x39e>
    18f2:	20 64       	ori	r18, 0x40	; 64
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <vfprintf+0xf0>
    18f6:	8c 36       	cpi	r24, 0x6C	; 108
    18f8:	11 f4       	brne	.+4      	; 0x18fe <vfprintf+0xec>
    18fa:	20 68       	ori	r18, 0x80	; 128
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <vfprintf+0xf0>
    18fe:	88 36       	cpi	r24, 0x68	; 104
    1900:	41 f4       	brne	.+16     	; 0x1912 <vfprintf+0x100>
    1902:	f6 01       	movw	r30, r12
    1904:	93 fd       	sbrc	r25, 3
    1906:	85 91       	lpm	r24, Z+
    1908:	93 ff       	sbrs	r25, 3
    190a:	81 91       	ld	r24, Z+
    190c:	6f 01       	movw	r12, r30
    190e:	81 11       	cpse	r24, r1
    1910:	c1 cf       	rjmp	.-126    	; 0x1894 <vfprintf+0x82>
    1912:	98 2f       	mov	r25, r24
    1914:	9f 7d       	andi	r25, 0xDF	; 223
    1916:	95 54       	subi	r25, 0x45	; 69
    1918:	93 30       	cpi	r25, 0x03	; 3
    191a:	28 f4       	brcc	.+10     	; 0x1926 <vfprintf+0x114>
    191c:	0c 5f       	subi	r16, 0xFC	; 252
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	ff e3       	ldi	r31, 0x3F	; 63
    1922:	f9 83       	std	Y+1, r31	; 0x01
    1924:	0d c0       	rjmp	.+26     	; 0x1940 <vfprintf+0x12e>
    1926:	83 36       	cpi	r24, 0x63	; 99
    1928:	31 f0       	breq	.+12     	; 0x1936 <vfprintf+0x124>
    192a:	83 37       	cpi	r24, 0x73	; 115
    192c:	71 f0       	breq	.+28     	; 0x194a <vfprintf+0x138>
    192e:	83 35       	cpi	r24, 0x53	; 83
    1930:	09 f0       	breq	.+2      	; 0x1934 <vfprintf+0x122>
    1932:	57 c0       	rjmp	.+174    	; 0x19e2 <vfprintf+0x1d0>
    1934:	21 c0       	rjmp	.+66     	; 0x1978 <vfprintf+0x166>
    1936:	f8 01       	movw	r30, r16
    1938:	80 81       	ld	r24, Z
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	0e 5f       	subi	r16, 0xFE	; 254
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	44 24       	eor	r4, r4
    1942:	43 94       	inc	r4
    1944:	51 2c       	mov	r5, r1
    1946:	54 01       	movw	r10, r8
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <vfprintf+0x160>
    194a:	38 01       	movw	r6, r16
    194c:	f2 e0       	ldi	r31, 0x02	; 2
    194e:	6f 0e       	add	r6, r31
    1950:	71 1c       	adc	r7, r1
    1952:	f8 01       	movw	r30, r16
    1954:	a0 80       	ld	r10, Z
    1956:	b1 80       	ldd	r11, Z+1	; 0x01
    1958:	26 ff       	sbrs	r18, 6
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x150>
    195c:	65 2d       	mov	r22, r5
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <vfprintf+0x154>
    1962:	6f ef       	ldi	r22, 0xFF	; 255
    1964:	7f ef       	ldi	r23, 0xFF	; 255
    1966:	c5 01       	movw	r24, r10
    1968:	2c 87       	std	Y+12, r18	; 0x0c
    196a:	4c d1       	rcall	.+664    	; 0x1c04 <strnlen>
    196c:	2c 01       	movw	r4, r24
    196e:	83 01       	movw	r16, r6
    1970:	2c 85       	ldd	r18, Y+12	; 0x0c
    1972:	2f 77       	andi	r18, 0x7F	; 127
    1974:	22 2e       	mov	r2, r18
    1976:	16 c0       	rjmp	.+44     	; 0x19a4 <vfprintf+0x192>
    1978:	38 01       	movw	r6, r16
    197a:	f2 e0       	ldi	r31, 0x02	; 2
    197c:	6f 0e       	add	r6, r31
    197e:	71 1c       	adc	r7, r1
    1980:	f8 01       	movw	r30, r16
    1982:	a0 80       	ld	r10, Z
    1984:	b1 80       	ldd	r11, Z+1	; 0x01
    1986:	26 ff       	sbrs	r18, 6
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <vfprintf+0x17e>
    198a:	65 2d       	mov	r22, r5
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <vfprintf+0x182>
    1990:	6f ef       	ldi	r22, 0xFF	; 255
    1992:	7f ef       	ldi	r23, 0xFF	; 255
    1994:	c5 01       	movw	r24, r10
    1996:	2c 87       	std	Y+12, r18	; 0x0c
    1998:	2a d1       	rcall	.+596    	; 0x1bee <strnlen_P>
    199a:	2c 01       	movw	r4, r24
    199c:	2c 85       	ldd	r18, Y+12	; 0x0c
    199e:	20 68       	ori	r18, 0x80	; 128
    19a0:	22 2e       	mov	r2, r18
    19a2:	83 01       	movw	r16, r6
    19a4:	23 fc       	sbrc	r2, 3
    19a6:	19 c0       	rjmp	.+50     	; 0x19da <vfprintf+0x1c8>
    19a8:	83 2d       	mov	r24, r3
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	48 16       	cp	r4, r24
    19ae:	59 06       	cpc	r5, r25
    19b0:	a0 f4       	brcc	.+40     	; 0x19da <vfprintf+0x1c8>
    19b2:	b7 01       	movw	r22, r14
    19b4:	80 e2       	ldi	r24, 0x20	; 32
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	b7 de       	rcall	.-658    	; 0x1728 <fputc>
    19ba:	3a 94       	dec	r3
    19bc:	f5 cf       	rjmp	.-22     	; 0x19a8 <vfprintf+0x196>
    19be:	f5 01       	movw	r30, r10
    19c0:	27 fc       	sbrc	r2, 7
    19c2:	85 91       	lpm	r24, Z+
    19c4:	27 fe       	sbrs	r2, 7
    19c6:	81 91       	ld	r24, Z+
    19c8:	5f 01       	movw	r10, r30
    19ca:	b7 01       	movw	r22, r14
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	ac de       	rcall	.-680    	; 0x1728 <fputc>
    19d0:	31 10       	cpse	r3, r1
    19d2:	3a 94       	dec	r3
    19d4:	f1 e0       	ldi	r31, 0x01	; 1
    19d6:	4f 1a       	sub	r4, r31
    19d8:	51 08       	sbc	r5, r1
    19da:	41 14       	cp	r4, r1
    19dc:	51 04       	cpc	r5, r1
    19de:	79 f7       	brne	.-34     	; 0x19be <vfprintf+0x1ac>
    19e0:	de c0       	rjmp	.+444    	; 0x1b9e <vfprintf+0x38c>
    19e2:	84 36       	cpi	r24, 0x64	; 100
    19e4:	11 f0       	breq	.+4      	; 0x19ea <vfprintf+0x1d8>
    19e6:	89 36       	cpi	r24, 0x69	; 105
    19e8:	31 f5       	brne	.+76     	; 0x1a36 <vfprintf+0x224>
    19ea:	f8 01       	movw	r30, r16
    19ec:	27 ff       	sbrs	r18, 7
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <vfprintf+0x1ec>
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	0c 5f       	subi	r16, 0xFC	; 252
    19fa:	1f 4f       	sbci	r17, 0xFF	; 255
    19fc:	08 c0       	rjmp	.+16     	; 0x1a0e <vfprintf+0x1fc>
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	88 27       	eor	r24, r24
    1a04:	77 fd       	sbrc	r23, 7
    1a06:	80 95       	com	r24
    1a08:	98 2f       	mov	r25, r24
    1a0a:	0e 5f       	subi	r16, 0xFE	; 254
    1a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0e:	2f 76       	andi	r18, 0x6F	; 111
    1a10:	b2 2e       	mov	r11, r18
    1a12:	97 ff       	sbrs	r25, 7
    1a14:	09 c0       	rjmp	.+18     	; 0x1a28 <vfprintf+0x216>
    1a16:	90 95       	com	r25
    1a18:	80 95       	com	r24
    1a1a:	70 95       	com	r23
    1a1c:	61 95       	neg	r22
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	8f 4f       	sbci	r24, 0xFF	; 255
    1a22:	9f 4f       	sbci	r25, 0xFF	; 255
    1a24:	20 68       	ori	r18, 0x80	; 128
    1a26:	b2 2e       	mov	r11, r18
    1a28:	2a e0       	ldi	r18, 0x0A	; 10
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	a4 01       	movw	r20, r8
    1a2e:	f5 d0       	rcall	.+490    	; 0x1c1a <__ultoa_invert>
    1a30:	a8 2e       	mov	r10, r24
    1a32:	a8 18       	sub	r10, r8
    1a34:	43 c0       	rjmp	.+134    	; 0x1abc <vfprintf+0x2aa>
    1a36:	85 37       	cpi	r24, 0x75	; 117
    1a38:	29 f4       	brne	.+10     	; 0x1a44 <vfprintf+0x232>
    1a3a:	2f 7e       	andi	r18, 0xEF	; 239
    1a3c:	b2 2e       	mov	r11, r18
    1a3e:	2a e0       	ldi	r18, 0x0A	; 10
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	25 c0       	rjmp	.+74     	; 0x1a8e <vfprintf+0x27c>
    1a44:	f2 2f       	mov	r31, r18
    1a46:	f9 7f       	andi	r31, 0xF9	; 249
    1a48:	bf 2e       	mov	r11, r31
    1a4a:	8f 36       	cpi	r24, 0x6F	; 111
    1a4c:	c1 f0       	breq	.+48     	; 0x1a7e <vfprintf+0x26c>
    1a4e:	18 f4       	brcc	.+6      	; 0x1a56 <vfprintf+0x244>
    1a50:	88 35       	cpi	r24, 0x58	; 88
    1a52:	79 f0       	breq	.+30     	; 0x1a72 <vfprintf+0x260>
    1a54:	ad c0       	rjmp	.+346    	; 0x1bb0 <vfprintf+0x39e>
    1a56:	80 37       	cpi	r24, 0x70	; 112
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <vfprintf+0x24e>
    1a5a:	88 37       	cpi	r24, 0x78	; 120
    1a5c:	21 f0       	breq	.+8      	; 0x1a66 <vfprintf+0x254>
    1a5e:	a8 c0       	rjmp	.+336    	; 0x1bb0 <vfprintf+0x39e>
    1a60:	2f 2f       	mov	r18, r31
    1a62:	20 61       	ori	r18, 0x10	; 16
    1a64:	b2 2e       	mov	r11, r18
    1a66:	b4 fe       	sbrs	r11, 4
    1a68:	0d c0       	rjmp	.+26     	; 0x1a84 <vfprintf+0x272>
    1a6a:	8b 2d       	mov	r24, r11
    1a6c:	84 60       	ori	r24, 0x04	; 4
    1a6e:	b8 2e       	mov	r11, r24
    1a70:	09 c0       	rjmp	.+18     	; 0x1a84 <vfprintf+0x272>
    1a72:	24 ff       	sbrs	r18, 4
    1a74:	0a c0       	rjmp	.+20     	; 0x1a8a <vfprintf+0x278>
    1a76:	9f 2f       	mov	r25, r31
    1a78:	96 60       	ori	r25, 0x06	; 6
    1a7a:	b9 2e       	mov	r11, r25
    1a7c:	06 c0       	rjmp	.+12     	; 0x1a8a <vfprintf+0x278>
    1a7e:	28 e0       	ldi	r18, 0x08	; 8
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	05 c0       	rjmp	.+10     	; 0x1a8e <vfprintf+0x27c>
    1a84:	20 e1       	ldi	r18, 0x10	; 16
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <vfprintf+0x27c>
    1a8a:	20 e1       	ldi	r18, 0x10	; 16
    1a8c:	32 e0       	ldi	r19, 0x02	; 2
    1a8e:	f8 01       	movw	r30, r16
    1a90:	b7 fe       	sbrs	r11, 7
    1a92:	07 c0       	rjmp	.+14     	; 0x1aa2 <vfprintf+0x290>
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	0c 5f       	subi	r16, 0xFC	; 252
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <vfprintf+0x29c>
    1aa2:	60 81       	ld	r22, Z
    1aa4:	71 81       	ldd	r23, Z+1	; 0x01
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 5f       	subi	r16, 0xFE	; 254
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	a4 01       	movw	r20, r8
    1ab0:	b4 d0       	rcall	.+360    	; 0x1c1a <__ultoa_invert>
    1ab2:	a8 2e       	mov	r10, r24
    1ab4:	a8 18       	sub	r10, r8
    1ab6:	fb 2d       	mov	r31, r11
    1ab8:	ff 77       	andi	r31, 0x7F	; 127
    1aba:	bf 2e       	mov	r11, r31
    1abc:	b6 fe       	sbrs	r11, 6
    1abe:	0b c0       	rjmp	.+22     	; 0x1ad6 <vfprintf+0x2c4>
    1ac0:	2b 2d       	mov	r18, r11
    1ac2:	2e 7f       	andi	r18, 0xFE	; 254
    1ac4:	a5 14       	cp	r10, r5
    1ac6:	50 f4       	brcc	.+20     	; 0x1adc <vfprintf+0x2ca>
    1ac8:	b4 fe       	sbrs	r11, 4
    1aca:	0a c0       	rjmp	.+20     	; 0x1ae0 <vfprintf+0x2ce>
    1acc:	b2 fc       	sbrc	r11, 2
    1ace:	08 c0       	rjmp	.+16     	; 0x1ae0 <vfprintf+0x2ce>
    1ad0:	2b 2d       	mov	r18, r11
    1ad2:	2e 7e       	andi	r18, 0xEE	; 238
    1ad4:	05 c0       	rjmp	.+10     	; 0x1ae0 <vfprintf+0x2ce>
    1ad6:	7a 2c       	mov	r7, r10
    1ad8:	2b 2d       	mov	r18, r11
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <vfprintf+0x2d0>
    1adc:	7a 2c       	mov	r7, r10
    1ade:	01 c0       	rjmp	.+2      	; 0x1ae2 <vfprintf+0x2d0>
    1ae0:	75 2c       	mov	r7, r5
    1ae2:	24 ff       	sbrs	r18, 4
    1ae4:	0d c0       	rjmp	.+26     	; 0x1b00 <vfprintf+0x2ee>
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	ea 0d       	add	r30, r10
    1aea:	f1 1d       	adc	r31, r1
    1aec:	80 81       	ld	r24, Z
    1aee:	80 33       	cpi	r24, 0x30	; 48
    1af0:	11 f4       	brne	.+4      	; 0x1af6 <vfprintf+0x2e4>
    1af2:	29 7e       	andi	r18, 0xE9	; 233
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <vfprintf+0x2f6>
    1af6:	22 ff       	sbrs	r18, 2
    1af8:	06 c0       	rjmp	.+12     	; 0x1b06 <vfprintf+0x2f4>
    1afa:	73 94       	inc	r7
    1afc:	73 94       	inc	r7
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <vfprintf+0x2f6>
    1b00:	82 2f       	mov	r24, r18
    1b02:	86 78       	andi	r24, 0x86	; 134
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <vfprintf+0x2f6>
    1b06:	73 94       	inc	r7
    1b08:	23 fd       	sbrc	r18, 3
    1b0a:	12 c0       	rjmp	.+36     	; 0x1b30 <vfprintf+0x31e>
    1b0c:	20 ff       	sbrs	r18, 0
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <vfprintf+0x30a>
    1b10:	5a 2c       	mov	r5, r10
    1b12:	73 14       	cp	r7, r3
    1b14:	18 f4       	brcc	.+6      	; 0x1b1c <vfprintf+0x30a>
    1b16:	53 0c       	add	r5, r3
    1b18:	57 18       	sub	r5, r7
    1b1a:	73 2c       	mov	r7, r3
    1b1c:	73 14       	cp	r7, r3
    1b1e:	60 f4       	brcc	.+24     	; 0x1b38 <vfprintf+0x326>
    1b20:	b7 01       	movw	r22, r14
    1b22:	80 e2       	ldi	r24, 0x20	; 32
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	2c 87       	std	Y+12, r18	; 0x0c
    1b28:	ff dd       	rcall	.-1026   	; 0x1728 <fputc>
    1b2a:	73 94       	inc	r7
    1b2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b2e:	f6 cf       	rjmp	.-20     	; 0x1b1c <vfprintf+0x30a>
    1b30:	73 14       	cp	r7, r3
    1b32:	10 f4       	brcc	.+4      	; 0x1b38 <vfprintf+0x326>
    1b34:	37 18       	sub	r3, r7
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <vfprintf+0x328>
    1b38:	31 2c       	mov	r3, r1
    1b3a:	24 ff       	sbrs	r18, 4
    1b3c:	11 c0       	rjmp	.+34     	; 0x1b60 <vfprintf+0x34e>
    1b3e:	b7 01       	movw	r22, r14
    1b40:	80 e3       	ldi	r24, 0x30	; 48
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	2c 87       	std	Y+12, r18	; 0x0c
    1b46:	f0 dd       	rcall	.-1056   	; 0x1728 <fputc>
    1b48:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b4a:	22 ff       	sbrs	r18, 2
    1b4c:	16 c0       	rjmp	.+44     	; 0x1b7a <vfprintf+0x368>
    1b4e:	21 ff       	sbrs	r18, 1
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <vfprintf+0x346>
    1b52:	88 e5       	ldi	r24, 0x58	; 88
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <vfprintf+0x34a>
    1b58:	88 e7       	ldi	r24, 0x78	; 120
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	0c c0       	rjmp	.+24     	; 0x1b78 <vfprintf+0x366>
    1b60:	82 2f       	mov	r24, r18
    1b62:	86 78       	andi	r24, 0x86	; 134
    1b64:	51 f0       	breq	.+20     	; 0x1b7a <vfprintf+0x368>
    1b66:	21 fd       	sbrc	r18, 1
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <vfprintf+0x35c>
    1b6a:	80 e2       	ldi	r24, 0x20	; 32
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <vfprintf+0x35e>
    1b6e:	8b e2       	ldi	r24, 0x2B	; 43
    1b70:	27 fd       	sbrc	r18, 7
    1b72:	8d e2       	ldi	r24, 0x2D	; 45
    1b74:	b7 01       	movw	r22, r14
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	d7 dd       	rcall	.-1106   	; 0x1728 <fputc>
    1b7a:	a5 14       	cp	r10, r5
    1b7c:	30 f4       	brcc	.+12     	; 0x1b8a <vfprintf+0x378>
    1b7e:	b7 01       	movw	r22, r14
    1b80:	80 e3       	ldi	r24, 0x30	; 48
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	d1 dd       	rcall	.-1118   	; 0x1728 <fputc>
    1b86:	5a 94       	dec	r5
    1b88:	f8 cf       	rjmp	.-16     	; 0x1b7a <vfprintf+0x368>
    1b8a:	aa 94       	dec	r10
    1b8c:	f4 01       	movw	r30, r8
    1b8e:	ea 0d       	add	r30, r10
    1b90:	f1 1d       	adc	r31, r1
    1b92:	80 81       	ld	r24, Z
    1b94:	b7 01       	movw	r22, r14
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	c7 dd       	rcall	.-1138   	; 0x1728 <fputc>
    1b9a:	a1 10       	cpse	r10, r1
    1b9c:	f6 cf       	rjmp	.-20     	; 0x1b8a <vfprintf+0x378>
    1b9e:	33 20       	and	r3, r3
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <vfprintf+0x392>
    1ba2:	5d ce       	rjmp	.-838    	; 0x185e <vfprintf+0x4c>
    1ba4:	b7 01       	movw	r22, r14
    1ba6:	80 e2       	ldi	r24, 0x20	; 32
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	be dd       	rcall	.-1156   	; 0x1728 <fputc>
    1bac:	3a 94       	dec	r3
    1bae:	f7 cf       	rjmp	.-18     	; 0x1b9e <vfprintf+0x38c>
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	86 81       	ldd	r24, Z+6	; 0x06
    1bb4:	97 81       	ldd	r25, Z+7	; 0x07
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <vfprintf+0x3aa>
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	9f ef       	ldi	r25, 0xFF	; 255
    1bbc:	2c 96       	adiw	r28, 0x0c	; 12
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	df 90       	pop	r13
    1bd6:	cf 90       	pop	r12
    1bd8:	bf 90       	pop	r11
    1bda:	af 90       	pop	r10
    1bdc:	9f 90       	pop	r9
    1bde:	8f 90       	pop	r8
    1be0:	7f 90       	pop	r7
    1be2:	6f 90       	pop	r6
    1be4:	5f 90       	pop	r5
    1be6:	4f 90       	pop	r4
    1be8:	3f 90       	pop	r3
    1bea:	2f 90       	pop	r2
    1bec:	08 95       	ret

00001bee <strnlen_P>:
    1bee:	fc 01       	movw	r30, r24
    1bf0:	05 90       	lpm	r0, Z+
    1bf2:	61 50       	subi	r22, 0x01	; 1
    1bf4:	70 40       	sbci	r23, 0x00	; 0
    1bf6:	01 10       	cpse	r0, r1
    1bf8:	d8 f7       	brcc	.-10     	; 0x1bf0 <strnlen_P+0x2>
    1bfa:	80 95       	com	r24
    1bfc:	90 95       	com	r25
    1bfe:	8e 0f       	add	r24, r30
    1c00:	9f 1f       	adc	r25, r31
    1c02:	08 95       	ret

00001c04 <strnlen>:
    1c04:	fc 01       	movw	r30, r24
    1c06:	61 50       	subi	r22, 0x01	; 1
    1c08:	70 40       	sbci	r23, 0x00	; 0
    1c0a:	01 90       	ld	r0, Z+
    1c0c:	01 10       	cpse	r0, r1
    1c0e:	d8 f7       	brcc	.-10     	; 0x1c06 <strnlen+0x2>
    1c10:	80 95       	com	r24
    1c12:	90 95       	com	r25
    1c14:	8e 0f       	add	r24, r30
    1c16:	9f 1f       	adc	r25, r31
    1c18:	08 95       	ret

00001c1a <__ultoa_invert>:
    1c1a:	fa 01       	movw	r30, r20
    1c1c:	aa 27       	eor	r26, r26
    1c1e:	28 30       	cpi	r18, 0x08	; 8
    1c20:	51 f1       	breq	.+84     	; 0x1c76 <__ultoa_invert+0x5c>
    1c22:	20 31       	cpi	r18, 0x10	; 16
    1c24:	81 f1       	breq	.+96     	; 0x1c86 <__ultoa_invert+0x6c>
    1c26:	e8 94       	clt
    1c28:	6f 93       	push	r22
    1c2a:	6e 7f       	andi	r22, 0xFE	; 254
    1c2c:	6e 5f       	subi	r22, 0xFE	; 254
    1c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c30:	8f 4f       	sbci	r24, 0xFF	; 255
    1c32:	9f 4f       	sbci	r25, 0xFF	; 255
    1c34:	af 4f       	sbci	r26, 0xFF	; 255
    1c36:	b1 e0       	ldi	r27, 0x01	; 1
    1c38:	3e d0       	rcall	.+124    	; 0x1cb6 <__ultoa_invert+0x9c>
    1c3a:	b4 e0       	ldi	r27, 0x04	; 4
    1c3c:	3c d0       	rcall	.+120    	; 0x1cb6 <__ultoa_invert+0x9c>
    1c3e:	67 0f       	add	r22, r23
    1c40:	78 1f       	adc	r23, r24
    1c42:	89 1f       	adc	r24, r25
    1c44:	9a 1f       	adc	r25, r26
    1c46:	a1 1d       	adc	r26, r1
    1c48:	68 0f       	add	r22, r24
    1c4a:	79 1f       	adc	r23, r25
    1c4c:	8a 1f       	adc	r24, r26
    1c4e:	91 1d       	adc	r25, r1
    1c50:	a1 1d       	adc	r26, r1
    1c52:	6a 0f       	add	r22, r26
    1c54:	71 1d       	adc	r23, r1
    1c56:	81 1d       	adc	r24, r1
    1c58:	91 1d       	adc	r25, r1
    1c5a:	a1 1d       	adc	r26, r1
    1c5c:	20 d0       	rcall	.+64     	; 0x1c9e <__ultoa_invert+0x84>
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <__ultoa_invert+0x48>
    1c60:	68 94       	set
    1c62:	3f 91       	pop	r19
    1c64:	2a e0       	ldi	r18, 0x0A	; 10
    1c66:	26 9f       	mul	r18, r22
    1c68:	11 24       	eor	r1, r1
    1c6a:	30 19       	sub	r19, r0
    1c6c:	30 5d       	subi	r19, 0xD0	; 208
    1c6e:	31 93       	st	Z+, r19
    1c70:	de f6       	brtc	.-74     	; 0x1c28 <__ultoa_invert+0xe>
    1c72:	cf 01       	movw	r24, r30
    1c74:	08 95       	ret
    1c76:	46 2f       	mov	r20, r22
    1c78:	47 70       	andi	r20, 0x07	; 7
    1c7a:	40 5d       	subi	r20, 0xD0	; 208
    1c7c:	41 93       	st	Z+, r20
    1c7e:	b3 e0       	ldi	r27, 0x03	; 3
    1c80:	0f d0       	rcall	.+30     	; 0x1ca0 <__ultoa_invert+0x86>
    1c82:	c9 f7       	brne	.-14     	; 0x1c76 <__ultoa_invert+0x5c>
    1c84:	f6 cf       	rjmp	.-20     	; 0x1c72 <__ultoa_invert+0x58>
    1c86:	46 2f       	mov	r20, r22
    1c88:	4f 70       	andi	r20, 0x0F	; 15
    1c8a:	40 5d       	subi	r20, 0xD0	; 208
    1c8c:	4a 33       	cpi	r20, 0x3A	; 58
    1c8e:	18 f0       	brcs	.+6      	; 0x1c96 <__ultoa_invert+0x7c>
    1c90:	49 5d       	subi	r20, 0xD9	; 217
    1c92:	31 fd       	sbrc	r19, 1
    1c94:	40 52       	subi	r20, 0x20	; 32
    1c96:	41 93       	st	Z+, r20
    1c98:	02 d0       	rcall	.+4      	; 0x1c9e <__ultoa_invert+0x84>
    1c9a:	a9 f7       	brne	.-22     	; 0x1c86 <__ultoa_invert+0x6c>
    1c9c:	ea cf       	rjmp	.-44     	; 0x1c72 <__ultoa_invert+0x58>
    1c9e:	b4 e0       	ldi	r27, 0x04	; 4
    1ca0:	a6 95       	lsr	r26
    1ca2:	97 95       	ror	r25
    1ca4:	87 95       	ror	r24
    1ca6:	77 95       	ror	r23
    1ca8:	67 95       	ror	r22
    1caa:	ba 95       	dec	r27
    1cac:	c9 f7       	brne	.-14     	; 0x1ca0 <__ultoa_invert+0x86>
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	61 05       	cpc	r22, r1
    1cb2:	71 05       	cpc	r23, r1
    1cb4:	08 95       	ret
    1cb6:	9b 01       	movw	r18, r22
    1cb8:	ac 01       	movw	r20, r24
    1cba:	0a 2e       	mov	r0, r26
    1cbc:	06 94       	lsr	r0
    1cbe:	57 95       	ror	r21
    1cc0:	47 95       	ror	r20
    1cc2:	37 95       	ror	r19
    1cc4:	27 95       	ror	r18
    1cc6:	ba 95       	dec	r27
    1cc8:	c9 f7       	brne	.-14     	; 0x1cbc <__ultoa_invert+0xa2>
    1cca:	62 0f       	add	r22, r18
    1ccc:	73 1f       	adc	r23, r19
    1cce:	84 1f       	adc	r24, r20
    1cd0:	95 1f       	adc	r25, r21
    1cd2:	a0 1d       	adc	r26, r0
    1cd4:	08 95       	ret

00001cd6 <_exit>:
    1cd6:	f8 94       	cli

00001cd8 <__stop_program>:
    1cd8:	ff cf       	rjmp	.-2      	; 0x1cd8 <__stop_program>
