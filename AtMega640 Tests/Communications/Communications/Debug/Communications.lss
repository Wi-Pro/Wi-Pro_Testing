
Communications.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003be  00800200  00001c40  00001cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  008005be  008005be  00002092  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002092  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  000020ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003567  00000000  00000000  000023fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f54  00000000  00000000  00005965  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001074  00000000  00000000  000068b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a18  00000000  00000000  00007930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ea  00000000  00000000  00008348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000242a  00000000  00000000  00008c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a8  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_20>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_25>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	15 e0       	ldi	r17, 0x05	; 5
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e0 e4       	ldi	r30, 0x40	; 64
      f8:	fc e1       	ldi	r31, 0x1C	; 28
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ae 3b       	cpi	r26, 0xBE	; 190
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	27 e0       	ldi	r18, 0x07	; 7
     108:	ae eb       	ldi	r26, 0xBE	; 190
     10a:	b5 e0       	ldi	r27, 0x05	; 5
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a6 35       	cpi	r26, 0x56	; 86
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 11 02 	call	0x422	; 0x422 <main>
     11a:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <clearFlags>:
{
	
}

int clearFlags()
{
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
	if(Flags[ETHERNET])
     126:	80 91 2f 06 	lds	r24, 0x062F
     12a:	88 23       	and	r24, r24
     12c:	99 f1       	breq	.+102    	; 0x194 <clearFlags+0x72>
	{
		strcpy(filepath, GET);
     12e:	cb ec       	ldi	r28, 0xCB	; 203
     130:	d5 e0       	ldi	r29, 0x05	; 5
     132:	85 e0       	ldi	r24, 0x05	; 5
     134:	e8 e2       	ldi	r30, 0x28	; 40
     136:	f2 e0       	ldi	r31, 0x02	; 2
     138:	de 01       	movw	r26, r28
     13a:	01 90       	ld	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	8a 95       	dec	r24
     140:	e1 f7       	brne	.-8      	; 0x13a <clearFlags+0x18>
		strcat(filepath, URL);
     142:	de 01       	movw	r26, r28
     144:	0d 90       	ld	r0, X+
     146:	00 20       	and	r0, r0
     148:	e9 f7       	brne	.-6      	; 0x144 <clearFlags+0x22>
     14a:	11 97       	sbiw	r26, 0x01	; 1
     14c:	85 e1       	ldi	r24, 0x15	; 21
     14e:	ed e2       	ldi	r30, 0x2D	; 45
     150:	f2 e0       	ldi	r31, 0x02	; 2
     152:	01 90       	ld	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	8a 95       	dec	r24
     158:	e1 f7       	brne	.-8      	; 0x152 <clearFlags+0x30>
		strcat(filepath, CLEAR_FLAG);
     15a:	de 01       	movw	r26, r28
     15c:	0d 90       	ld	r0, X+
     15e:	00 20       	and	r0, r0
     160:	e9 f7       	brne	.-6      	; 0x15c <clearFlags+0x3a>
     162:	11 97       	sbiw	r26, 0x01	; 1
     164:	82 e1       	ldi	r24, 0x12	; 18
     166:	e2 e4       	ldi	r30, 0x42	; 66
     168:	f2 e0       	ldi	r31, 0x02	; 2
     16a:	01 90       	ld	r0, Z+
     16c:	0d 92       	st	X+, r0
     16e:	8a 95       	dec	r24
     170:	e1 f7       	brne	.-8      	; 0x16a <clearFlags+0x48>
		strcat(filepath, WIPRO_ID);
     172:	09 90       	ld	r0, Y+
     174:	00 20       	and	r0, r0
     176:	e9 f7       	brne	.-6      	; 0x172 <clearFlags+0x50>
     178:	de 01       	movw	r26, r28
     17a:	11 97       	sbiw	r26, 0x01	; 1
     17c:	83 e1       	ldi	r24, 0x13	; 19
     17e:	e4 e5       	ldi	r30, 0x54	; 84
     180:	f2 e0       	ldi	r31, 0x02	; 2
     182:	01 90       	ld	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	8a 95       	dec	r24
     188:	e1 f7       	brne	.-8      	; 0x182 <clearFlags+0x60>
		//printf("Clear: %s\n", filepath);
		updateFileEthernet(filepath);
     18a:	8b ec       	ldi	r24, 0xCB	; 203
     18c:	95 e0       	ldi	r25, 0x05	; 5
     18e:	0e 94 c2 02 	call	0x584	; 0x584 <updateFileEthernet>
     192:	36 c0       	rjmp	.+108    	; 0x200 <clearFlags+0xde>
	}
	else if(Flags[WIFI])
     194:	80 91 30 06 	lds	r24, 0x0630
     198:	88 23       	and	r24, r24
     19a:	91 f1       	breq	.+100    	; 0x200 <clearFlags+0xde>
	{
		strcpy(filepath, HTTP_GET);
     19c:	cb ec       	ldi	r28, 0xCB	; 203
     19e:	d5 e0       	ldi	r29, 0x05	; 5
     1a0:	89 e0       	ldi	r24, 0x09	; 9
     1a2:	e7 e6       	ldi	r30, 0x67	; 103
     1a4:	f2 e0       	ldi	r31, 0x02	; 2
     1a6:	de 01       	movw	r26, r28
     1a8:	01 90       	ld	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	8a 95       	dec	r24
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <clearFlags+0x86>
		strcat(filepath, URL); 
     1b0:	de 01       	movw	r26, r28
     1b2:	0d 90       	ld	r0, X+
     1b4:	00 20       	and	r0, r0
     1b6:	e9 f7       	brne	.-6      	; 0x1b2 <clearFlags+0x90>
     1b8:	11 97       	sbiw	r26, 0x01	; 1
     1ba:	85 e1       	ldi	r24, 0x15	; 21
     1bc:	ed e2       	ldi	r30, 0x2D	; 45
     1be:	f2 e0       	ldi	r31, 0x02	; 2
     1c0:	01 90       	ld	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	8a 95       	dec	r24
     1c6:	e1 f7       	brne	.-8      	; 0x1c0 <clearFlags+0x9e>
		strcat(filepath, CLEAR_FLAG);
     1c8:	de 01       	movw	r26, r28
     1ca:	0d 90       	ld	r0, X+
     1cc:	00 20       	and	r0, r0
     1ce:	e9 f7       	brne	.-6      	; 0x1ca <clearFlags+0xa8>
     1d0:	11 97       	sbiw	r26, 0x01	; 1
     1d2:	82 e1       	ldi	r24, 0x12	; 18
     1d4:	e2 e4       	ldi	r30, 0x42	; 66
     1d6:	f2 e0       	ldi	r31, 0x02	; 2
     1d8:	01 90       	ld	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	8a 95       	dec	r24
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <clearFlags+0xb6>
		strcat(filepath, WIPRO_ID);
     1e0:	09 90       	ld	r0, Y+
     1e2:	00 20       	and	r0, r0
     1e4:	e9 f7       	brne	.-6      	; 0x1e0 <clearFlags+0xbe>
     1e6:	de 01       	movw	r26, r28
     1e8:	11 97       	sbiw	r26, 0x01	; 1
     1ea:	83 e1       	ldi	r24, 0x13	; 19
     1ec:	e4 e5       	ldi	r30, 0x54	; 84
     1ee:	f2 e0       	ldi	r31, 0x02	; 2
     1f0:	01 90       	ld	r0, Z+
     1f2:	0d 92       	st	X+, r0
     1f4:	8a 95       	dec	r24
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <clearFlags+0xce>
		updateFileWifi(filepath);	
     1f8:	8b ec       	ldi	r24, 0xCB	; 203
     1fa:	95 e0       	ldi	r25, 0x05	; 5
     1fc:	0e 94 94 08 	call	0x1128	; 0x1128 <updateFileWifi>
	}
	
	memset(filepath, 0x00, 100);
     200:	84 e6       	ldi	r24, 0x64	; 100
     202:	eb ec       	ldi	r30, 0xCB	; 203
     204:	f5 e0       	ldi	r31, 0x05	; 5
     206:	df 01       	movw	r26, r30
     208:	1d 92       	st	X+, r1
     20a:	8a 95       	dec	r24
     20c:	e9 f7       	brne	.-6      	; 0x208 <clearFlags+0xe6>

}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <sendAvailableNetworks>:

void sendAvailableNetworks()
{
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
	networkScan();
     21c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <networkScan>
	uint16_t tranLength = getTransmissionLength();
     220:	0e 94 99 09 	call	0x1332	; 0x1332 <getTransmissionLength>
	printf("Tran Length: %d\n", tranLength);
     224:	9f 93       	push	r25
     226:	8f 93       	push	r24
     228:	80 e7       	ldi	r24, 0x70	; 112
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	9f 93       	push	r25
     22e:	8f 93       	push	r24
     230:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
	//RAMPrint(WIFI_RAW_ADDRESS, tranLength);
	//_delay_ms(1000);
	//Build file path
	strcpy(filepath, GET);
     234:	cb ec       	ldi	r28, 0xCB	; 203
     236:	d5 e0       	ldi	r29, 0x05	; 5
     238:	85 e0       	ldi	r24, 0x05	; 5
     23a:	e8 e2       	ldi	r30, 0x28	; 40
     23c:	f2 e0       	ldi	r31, 0x02	; 2
     23e:	de 01       	movw	r26, r28
     240:	01 90       	ld	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	8a 95       	dec	r24
     246:	e1 f7       	brne	.-8      	; 0x240 <sendAvailableNetworks+0x2c>
	strcat(filepath, URL);
     248:	de 01       	movw	r26, r28
     24a:	0d 90       	ld	r0, X+
     24c:	00 20       	and	r0, r0
     24e:	e9 f7       	brne	.-6      	; 0x24a <sendAvailableNetworks+0x36>
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	85 e1       	ldi	r24, 0x15	; 21
     254:	ed e2       	ldi	r30, 0x2D	; 45
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	01 90       	ld	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	8a 95       	dec	r24
     25e:	e1 f7       	brne	.-8      	; 0x258 <sendAvailableNetworks+0x44>
	strcat(filepath, SSID_UPDATE);
     260:	de 01       	movw	r26, r28
     262:	0d 90       	ld	r0, X+
     264:	00 20       	and	r0, r0
     266:	e9 f7       	brne	.-6      	; 0x262 <sendAvailableNetworks+0x4e>
     268:	11 97       	sbiw	r26, 0x01	; 1
     26a:	83 e1       	ldi	r24, 0x13	; 19
     26c:	e1 e8       	ldi	r30, 0x81	; 129
     26e:	f2 e0       	ldi	r31, 0x02	; 2
     270:	01 90       	ld	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	8a 95       	dec	r24
     276:	e1 f7       	brne	.-8      	; 0x270 <sendAvailableNetworks+0x5c>
	strcat(filepath, WIPRO_ID);
     278:	de 01       	movw	r26, r28
     27a:	0d 90       	ld	r0, X+
     27c:	00 20       	and	r0, r0
     27e:	e9 f7       	brne	.-6      	; 0x27a <sendAvailableNetworks+0x66>
     280:	11 97       	sbiw	r26, 0x01	; 1
     282:	83 e1       	ldi	r24, 0x13	; 19
     284:	e4 e5       	ldi	r30, 0x54	; 84
     286:	f2 e0       	ldi	r31, 0x02	; 2
     288:	01 90       	ld	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	8a 95       	dec	r24
     28e:	e1 f7       	brne	.-8      	; 0x288 <sendAvailableNetworks+0x74>
	strcat(filepath, SSID_ID);
     290:	de 01       	movw	r26, r28
     292:	0d 90       	ld	r0, X+
     294:	00 20       	and	r0, r0
     296:	e9 f7       	brne	.-6      	; 0x292 <sendAvailableNetworks+0x7e>
     298:	11 97       	sbiw	r26, 0x01	; 1
     29a:	87 e0       	ldi	r24, 0x07	; 7
     29c:	e4 e9       	ldi	r30, 0x94	; 148
     29e:	f2 e0       	ldi	r31, 0x02	; 2
     2a0:	01 90       	ld	r0, Z+
     2a2:	0d 92       	st	X+, r0
     2a4:	8a 95       	dec	r24
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <sendAvailableNetworks+0x8c>
	printf("filepath: %s", filepath); 
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	8b e9       	ldi	r24, 0x9B	; 155
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	9f 93       	push	r25
     2b2:	8f 93       	push	r24
     2b4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
	//Convert List of Networks to Query String
	uint16_t qLength = networkQueryString(filepath);
     2b8:	ce 01       	movw	r24, r28
     2ba:	0e 94 29 08 	call	0x1052	; 0x1052 <networkQueryString>
     2be:	8c 01       	movw	r16, r24
	//printf("Query Length: %d\n", qLength);
	RAMPrint(WIFI_QSTRING_ADDRESS, qLength);
     2c0:	ac 01       	movw	r20, r24
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	74 e0       	ldi	r23, 0x04	; 4
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 84 07 	call	0xf08	; 0xf08 <RAMPrint>
	//RAMRead(WIFI_QSTRING_ADDRESS, qLength, buffer);
	SendData(WIFI_QSTRING_ADDRESS, qLength, 1);
     2ce:	41 e0       	ldi	r20, 0x01	; 1
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	b8 01       	movw	r22, r16
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	94 e0       	ldi	r25, 0x04	; 4
     2d8:	0e 94 bb 04 	call	0x976	; 0x976 <SendData>
	memset(filepath, 0x00, 100);
     2dc:	84 e6       	ldi	r24, 0x64	; 100
     2de:	fe 01       	movw	r30, r28
     2e0:	11 92       	st	Z+, r1
     2e2:	8a 95       	dec	r24
     2e4:	e9 f7       	brne	.-6      	; 0x2e0 <sendAvailableNetworks+0xcc>
	printf("Sent!");
     2e6:	88 ea       	ldi	r24, 0xA8	; 168
     2e8:	92 e0       	ldi	r25, 0x02	; 2
     2ea:	9f 93       	push	r25
     2ec:	8f 93       	push	r24
     2ee:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
     2f2:	8d b7       	in	r24, 0x3d	; 61
     2f4:	9e b7       	in	r25, 0x3e	; 62
     2f6:	0a 96       	adiw	r24, 0x0a	; 10
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	9e bf       	out	0x3e, r25	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	8d bf       	out	0x3d, r24	; 61
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	08 95       	ret

0000030c <getFlagStatus>:

int getFlagStatus()
{
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
	//Testing 
	TIMSK1 &= ~(1 << TOIE1);
     314:	ef e6       	ldi	r30, 0x6F	; 111
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	8e 7f       	andi	r24, 0xFE	; 254
     31c:	80 83       	st	Z, r24
	Flags[ETHERNET] = 1; 
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 2f 06 	sts	0x062F, r24
	Flags[WIFI] = 0; 
     324:	10 92 30 06 	sts	0x0630, r1
	if(Flags[ETHERNET]){
		getFileEthernet(FLAG_FILE, 1, STATUS_FLAG_ADDRESS, 3); 
     328:	03 e0       	ldi	r16, 0x03	; 3
     32a:	10 e0       	ldi	r17, 0x00	; 0
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e3       	ldi	r19, 0x30	; 48
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	8e ea       	ldi	r24, 0xAE	; 174
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	0e 94 56 02 	call	0x4ac	; 0x4ac <getFileEthernet>
		RAMPrint(STATUS_FLAG_ADDRESS, 15);
     340:	4f e0       	ldi	r20, 0x0F	; 15
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e3       	ldi	r23, 0x30	; 48
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 84 07 	call	0xf08	; 0xf08 <RAMPrint>
		//RAMRead(STATUS_FLAG_ADDRESS, 1, Flags[PROGRAM]); 
		//RAMRead(STATUS_FLAG_ADDRESS + 1, 1, Flags[PROGRAM + 1]); 
		//RAMRead(STATUS_FLAG_ADDRESS + 2, 1, Flags[PROGRAM + 2]); 
		
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e3       	ldi	r25, 0x30	; 48
     354:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <RAMReadByte>
     358:	c1 e3       	ldi	r28, 0x31	; 49
     35a:	d6 e0       	ldi	r29, 0x06	; 6
     35c:	8f 70       	andi	r24, 0x0F	; 15
     35e:	88 83       	st	Y, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e3       	ldi	r25, 0x30	; 48
     364:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <RAMReadByte>
     368:	8f 70       	andi	r24, 0x0F	; 15
     36a:	80 93 32 06 	sts	0x0632, r24
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F); 
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	90 e3       	ldi	r25, 0x30	; 48
     372:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <RAMReadByte>
     376:	8f 70       	andi	r24, 0x0F	; 15
     378:	80 93 33 06 	sts	0x0633, r24
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F);
		
	}
	memset(filepath, 0x00, 100); 
     37c:	94 e6       	ldi	r25, 0x64	; 100
     37e:	eb ec       	ldi	r30, 0xCB	; 203
     380:	f5 e0       	ldi	r31, 0x05	; 5
     382:	df 01       	movw	r26, r30
     384:	1d 92       	st	X+, r1
     386:	9a 95       	dec	r25
     388:	e9 f7       	brne	.-6      	; 0x384 <getFlagStatus+0x78>
	//Perform actions based on flags 
	if(Flags[PROGRAM] == 0x01)
     38a:	98 81       	ld	r25, Y
     38c:	91 30       	cpi	r25, 0x01	; 1
     38e:	79 f0       	breq	.+30     	; 0x3ae <getFlagStatus+0xa2>
	{
		//Program Function 
	}
	else if(Flags[NETWORK_SCAN] == 0x01)
     390:	90 91 32 06 	lds	r25, 0x0632
     394:	91 30       	cpi	r25, 0x01	; 1
     396:	19 f4       	brne	.+6      	; 0x39e <getFlagStatus+0x92>
	{
		//printf("Network Scan!!\n"); 
		sendAvailableNetworks(); 
     398:	0e 94 0a 01 	call	0x214	; 0x214 <sendAvailableNetworks>
     39c:	08 c0       	rjmp	.+16     	; 0x3ae <getFlagStatus+0xa2>
	}
	else if(Flags[NETWORK_CONNECT] == 0x01)
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	31 f4       	brne	.+12     	; 0x3ae <getFlagStatus+0xa2>
	{
		//printf("Network Connect!\n");
		networkConnect("Wi-Pro", "brightshoe902"); 
     3a2:	63 ed       	ldi	r22, 0xD3	; 211
     3a4:	72 e0       	ldi	r23, 0x02	; 2
     3a6:	81 ee       	ldi	r24, 0xE1	; 225
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	0e 94 07 08 	call	0x100e	; 0x100e <networkConnect>
		//getFileEthernet()
	}
	//_delay_ms(500);
	clearFlags(); 
     3ae:	0e 94 91 00 	call	0x122	; 0x122 <clearFlags>
	TIMSK1 |= (1 << TOIE1);
     3b2:	ef e6       	ldi	r30, 0x6F	; 111
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	81 60       	ori	r24, 0x01	; 1
     3ba:	80 83       	st	Z, r24
}
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	08 95       	ret

000003c6 <__vector_20>:
	}
}

//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	2f 93       	push	r18
     3d2:	3f 93       	push	r19
     3d4:	4f 93       	push	r20
     3d6:	5f 93       	push	r21
     3d8:	6f 93       	push	r22
     3da:	7f 93       	push	r23
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31
	cli(); 
     3e8:	f8 94       	cli
	printf("Flag Status\n");
     3ea:	88 ee       	ldi	r24, 0xE8	; 232
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
	getFlagStatus(); 
     3f2:	0e 94 86 01 	call	0x30c	; 0x30c <getFlagStatus>
	TCNT1L = 0x00;
     3f6:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
     3fa:	10 92 85 00 	sts	0x0085, r1
	sei();  
     3fe:	78 94       	sei
}
     400:	ff 91       	pop	r31
     402:	ef 91       	pop	r30
     404:	bf 91       	pop	r27
     406:	af 91       	pop	r26
     408:	9f 91       	pop	r25
     40a:	8f 91       	pop	r24
     40c:	7f 91       	pop	r23
     40e:	6f 91       	pop	r22
     410:	5f 91       	pop	r21
     412:	4f 91       	pop	r20
     414:	3f 91       	pop	r19
     416:	2f 91       	pop	r18
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <main>:
#include "Wifi/Wifi.h"
#include "RAM/MemoryMap.h"
#include "ClientController.h"

int main(void)
{
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	c4 56       	subi	r28, 0x64	; 100
     42c:	d1 09       	sbc	r29, r1
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
	char buffer[100];
	char* message = "What the fuck is this shit";
	uart_init();
     438:	0e 94 a2 08 	call	0x1144	; 0x1144 <uart_init>
	uart0_init(); 
     43c:	0e 94 a4 06 	call	0xd48	; 0xd48 <uart0_init>
	SPI_Init();  
     440:	0e 94 db 07 	call	0xfb6	; 0xfb6 <SPI_Init>
	sei(); 
     444:	78 94       	sei
	RAMWrite(message, 0, strlen(message));
     446:	4a e1       	ldi	r20, 0x1A	; 26
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	84 ef       	ldi	r24, 0xF4	; 244
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	0e 94 0b 07 	call	0xe16	; 0xe16 <RAMWrite>
	RAMPrint(0, strlen(message));
     456:	4a e1       	ldi	r20, 0x1A	; 26
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	cb 01       	movw	r24, r22
     460:	0e 94 84 07 	call	0xf08	; 0xf08 <RAMPrint>
	RAMRead(0, 30, buffer);
     464:	9e 01       	movw	r18, r28
     466:	2f 5f       	subi	r18, 0xFF	; 255
     468:	3f 4f       	sbci	r19, 0xFF	; 255
     46a:	4e e1       	ldi	r20, 0x1E	; 30
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	cb 01       	movw	r24, r22
     474:	0e 94 50 07 	call	0xea0	; 0xea0 <RAMRead>
	
	ethernetInit();
     478:	0e 94 4b 02 	call	0x496	; 0x496 <ethernetInit>
	printf("ethernetInit Done");
     47c:	8f e0       	ldi	r24, 0x0F	; 15
     47e:	93 e0       	ldi	r25, 0x03	; 3
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
	//pollingInit(); 
	

	printf("Done!\n");
     488:	81 e2       	ldi	r24, 0x21	; 33
     48a:	93 e0       	ldi	r25, 0x03	; 3
     48c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	ff cf       	rjmp	.-2      	; 0x494 <main+0x72>

00000496 <ethernetInit>:
//struct network currentNetwork; 


void ethernetInit()
{
	NetworkSetup(mac_addr, local_ip_addr, sub_mask, gtw_addr);
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	32 e0       	ldi	r19, 0x02	; 2
     49a:	44 e0       	ldi	r20, 0x04	; 4
     49c:	52 e0       	ldi	r21, 0x02	; 2
     49e:	68 e0       	ldi	r22, 0x08	; 8
     4a0:	72 e0       	ldi	r23, 0x02	; 2
     4a2:	8c e0       	ldi	r24, 0x0C	; 12
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	0e 94 21 03 	call	0x642	; 0x642 <NetworkSetup>
     4aa:	08 95       	ret

000004ac <getFileEthernet>:
	//MemoryInit(); 
}

//Sends a filepath and retrieves the data contained in the file 
char* getFileEthernet(char* filepath, int externRAM, uint32_t RAMAddress, uint16_t receiveLength)
{ 
     4ac:	8f 92       	push	r8
     4ae:	9f 92       	push	r9
     4b0:	af 92       	push	r10
     4b2:	bf 92       	push	r11
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	4b 01       	movw	r8, r22
     4c6:	69 01       	movw	r12, r18
     4c8:	7a 01       	movw	r14, r20
     4ca:	58 01       	movw	r10, r16
	char* receiveData; 
	strncpy(httpBuff, "GET ", 4);
     4cc:	c4 e3       	ldi	r28, 0x34	; 52
     4ce:	d6 e0       	ldi	r29, 0x06	; 6
     4d0:	47 e4       	ldi	r20, 0x47	; 71
     4d2:	55 e4       	ldi	r21, 0x45	; 69
     4d4:	64 e5       	ldi	r22, 0x54	; 84
     4d6:	70 e2       	ldi	r23, 0x20	; 32
     4d8:	48 83       	st	Y, r20
     4da:	59 83       	std	Y+1, r21	; 0x01
     4dc:	6a 83       	std	Y+2, r22	; 0x02
     4de:	7b 83       	std	Y+3, r23	; 0x03
	strcat(httpBuff, URL); 
     4e0:	de 01       	movw	r26, r28
     4e2:	0d 90       	ld	r0, X+
     4e4:	00 20       	and	r0, r0
     4e6:	e9 f7       	brne	.-6      	; 0x4e2 <getFileEthernet+0x36>
     4e8:	11 97       	sbiw	r26, 0x01	; 1
     4ea:	25 e1       	ldi	r18, 0x15	; 21
     4ec:	ed e2       	ldi	r30, 0x2D	; 45
     4ee:	f2 e0       	ldi	r31, 0x02	; 2
     4f0:	01 90       	ld	r0, Z+
     4f2:	0d 92       	st	X+, r0
     4f4:	2a 95       	dec	r18
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <getFileEthernet+0x44>
	strcat(httpBuff, filepath);
     4f8:	bc 01       	movw	r22, r24
     4fa:	ce 01       	movw	r24, r28
     4fc:	0e 94 15 0b 	call	0x162a	; 0x162a <strcat>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     500:	de 01       	movw	r26, r28
     502:	0d 90       	ld	r0, X+
     504:	00 20       	and	r0, r0
     506:	e9 f7       	brne	.-6      	; 0x502 <getFileEthernet+0x56>
     508:	11 97       	sbiw	r26, 0x01	; 1
     50a:	82 e2       	ldi	r24, 0x22	; 34
     50c:	e7 e2       	ldi	r30, 0x27	; 39
     50e:	f3 e0       	ldi	r31, 0x03	; 3
     510:	01 90       	ld	r0, Z+
     512:	0d 92       	st	X+, r0
     514:	8a 95       	dec	r24
     516:	e1 f7       	brne	.-8      	; 0x510 <getFileEthernet+0x64>
	printf("Sent: %s\n", httpBuff);
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	89 e4       	ldi	r24, 0x49	; 73
     51e:	93 e0       	ldi	r25, 0x03	; 3
     520:	9f 93       	push	r25
     522:	8f 93       	push	r24
     524:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
	//EnableEthernetInterrupt(); 
	SendData(httpBuff, strlen(httpBuff), 0);
     528:	fe 01       	movw	r30, r28
     52a:	01 90       	ld	r0, Z+
     52c:	00 20       	and	r0, r0
     52e:	e9 f7       	brne	.-6      	; 0x52a <getFileEthernet+0x7e>
     530:	31 97       	sbiw	r30, 0x01	; 1
     532:	bf 01       	movw	r22, r30
     534:	64 53       	subi	r22, 0x34	; 52
     536:	76 40       	sbci	r23, 0x06	; 6
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	ce 01       	movw	r24, r28
     53e:	0e 94 bb 04 	call	0x976	; 0x976 <SendData>
	ReceiveData(RAMAddress, receiveData, receiveLength, 1, externRAM);
     542:	84 01       	movw	r16, r8
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	a5 01       	movw	r20, r10
     54a:	a1 2c       	mov	r10, r1
     54c:	b1 2c       	mov	r11, r1
     54e:	b5 01       	movw	r22, r10
     550:	c6 01       	movw	r24, r12
     552:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <ReceiveData>
	memset(httpBuff, 0x00, 100); 
     556:	84 e6       	ldi	r24, 0x64	; 100
     558:	fe 01       	movw	r30, r28
     55a:	11 92       	st	Z+, r1
     55c:	8a 95       	dec	r24
     55e:	e9 f7       	brne	.-6      	; 0x55a <getFileEthernet+0xae>
	return receiveData; 
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
}
     568:	c5 01       	movw	r24, r10
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	df 90       	pop	r13
     578:	cf 90       	pop	r12
     57a:	bf 90       	pop	r11
     57c:	af 90       	pop	r10
     57e:	9f 90       	pop	r9
     580:	8f 90       	pop	r8
     582:	08 95       	ret

00000584 <updateFileEthernet>:

void updateFileEthernet(char* filepath)
{
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
     588:	bc 01       	movw	r22, r24
     58a:	84 e3       	ldi	r24, 0x34	; 52
     58c:	96 e0       	ldi	r25, 0x06	; 6
     58e:	0e 94 20 0b 	call	0x1640	; 0x1640 <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     592:	c4 e3       	ldi	r28, 0x34	; 52
     594:	d6 e0       	ldi	r29, 0x06	; 6
     596:	de 01       	movw	r26, r28
     598:	0d 90       	ld	r0, X+
     59a:	00 20       	and	r0, r0
     59c:	e9 f7       	brne	.-6      	; 0x598 <updateFileEthernet+0x14>
     59e:	11 97       	sbiw	r26, 0x01	; 1
     5a0:	82 e2       	ldi	r24, 0x22	; 34
     5a2:	e7 e2       	ldi	r30, 0x27	; 39
     5a4:	f3 e0       	ldi	r31, 0x03	; 3
     5a6:	01 90       	ld	r0, Z+
     5a8:	0d 92       	st	X+, r0
     5aa:	8a 95       	dec	r24
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <updateFileEthernet+0x22>
	printf("%s", httpBuff); 
     5ae:	df 93       	push	r29
     5b0:	cf 93       	push	r28
     5b2:	85 ea       	ldi	r24, 0xA5	; 165
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
     5be:	fe 01       	movw	r30, r28
     5c0:	01 90       	ld	r0, Z+
     5c2:	00 20       	and	r0, r0
     5c4:	e9 f7       	brne	.-6      	; 0x5c0 <updateFileEthernet+0x3c>
     5c6:	31 97       	sbiw	r30, 0x01	; 1
     5c8:	bf 01       	movw	r22, r30
     5ca:	64 53       	subi	r22, 0x34	; 52
     5cc:	76 40       	sbci	r23, 0x06	; 6
     5ce:	40 e0       	ldi	r20, 0x00	; 0
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	ce 01       	movw	r24, r28
     5d4:	0e 94 bb 04 	call	0x976	; 0x976 <SendData>
	memset(httpBuff, 0x00, 100); 
     5d8:	84 e6       	ldi	r24, 0x64	; 100
     5da:	fe 01       	movw	r30, r28
     5dc:	11 92       	st	Z+, r1
     5de:	8a 95       	dec	r24
     5e0:	e9 f7       	brne	.-6      	; 0x5dc <updateFileEthernet+0x58>
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
}
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <SPI_EthernetWrite>:
//}

void SPI_EthernetWrite(unsigned int addr,unsigned char data)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<ETH_CS);
     5f0:	74 98       	cbi	0x0e, 4	; 14
	// Start Wiznet W5100 Write OpCode transmission
	SPDR = WIZNET_WRITE_OPCODE;
     5f2:	20 ef       	ldi	r18, 0xF0	; 240
     5f4:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     5f6:	0d b4       	in	r0, 0x2d	; 45
     5f8:	07 fe       	sbrs	r0, 7
     5fa:	fd cf       	rjmp	.-6      	; 0x5f6 <SPI_EthernetWrite+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
     5fc:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     5fe:	0d b4       	in	r0, 0x2d	; 45
     600:	07 fe       	sbrs	r0, 7
     602:	fd cf       	rjmp	.-6      	; 0x5fe <SPI_EthernetWrite+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
     604:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     606:	0d b4       	in	r0, 0x2d	; 45
     608:	07 fe       	sbrs	r0, 7
     60a:	fd cf       	rjmp	.-6      	; 0x606 <SPI_EthernetWrite+0x16>

	// Start Data transmission
	SPDR = data;
     60c:	6e bd       	out	0x2e, r22	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     60e:	0d b4       	in	r0, 0x2d	; 45
     610:	07 fe       	sbrs	r0, 7
     612:	fd cf       	rjmp	.-6      	; 0x60e <SPI_EthernetWrite+0x1e>
	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     614:	74 9a       	sbi	0x0e, 4	; 14
     616:	08 95       	ret

00000618 <SPI_EthernetRead>:
}

unsigned char SPI_EthernetRead(unsigned int addr)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<ETH_CS);
     618:	74 98       	cbi	0x0e, 4	; 14
	// Start Wiznet W5100 Read OpCode transmission
	SPDR = WIZNET_READ_OPCODE;
     61a:	2f e0       	ldi	r18, 0x0F	; 15
     61c:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     61e:	0d b4       	in	r0, 0x2d	; 45
     620:	07 fe       	sbrs	r0, 7
     622:	fd cf       	rjmp	.-6      	; 0x61e <SPI_EthernetRead+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
     624:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     626:	0d b4       	in	r0, 0x2d	; 45
     628:	07 fe       	sbrs	r0, 7
     62a:	fd cf       	rjmp	.-6      	; 0x626 <SPI_EthernetRead+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
     62c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     62e:	0d b4       	in	r0, 0x2d	; 45
     630:	07 fe       	sbrs	r0, 7
     632:	fd cf       	rjmp	.-6      	; 0x62e <SPI_EthernetRead+0x16>

	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     634:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     636:	0d b4       	in	r0, 0x2d	; 45
     638:	07 fe       	sbrs	r0, 7
     63a:	fd cf       	rjmp	.-6      	; 0x636 <SPI_EthernetRead+0x1e>

	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     63c:	74 9a       	sbi	0x0e, 4	; 14
	return(SPDR);
     63e:	8e b5       	in	r24, 0x2e	; 46
}
     640:	08 95       	ret

00000642 <NetworkSetup>:

void NetworkSetup(uint8_t *mac_addr, uint8_t *local_ip_addr, uint8_t *sub_mask, uint8_t *gtw_addr)
{
     642:	bf 92       	push	r11
     644:	cf 92       	push	r12
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
     656:	7b 01       	movw	r14, r22
     658:	6a 01       	movw	r12, r20
     65a:	89 01       	movw	r16, r18
	
	CS_DDR |= (1<<ETH_CS);
     65c:	6c 9a       	sbi	0x0d, 4	; 13
	// Set MOSI, SCK and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
     65e:	87 e0       	ldi	r24, 0x07	; 7
     660:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     662:	74 9a       	sbi	0x0e, 4	; 14
	// Enable SPI, Master Mode 0, set the clock rate fck/2
	SPCR = (1<<SPE)|(1<<MSTR);
     664:	80 e5       	ldi	r24, 0x50	; 80
     666:	8c bd       	out	0x2c, r24	; 44
	// Initial the Wiznet W5100
	//printf("Wiznet W5100 Init\n");
	// Ethernet Setup
	//printf("Enterting Ethernet Setup\n");
	// Setting the Wiznet W5100 Mode Register: 0x0000
	SPI_EthernetWrite(MR,0x80); 
     668:	60 e8       	ldi	r22, 0x80	; 128
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     672:	8f ec       	ldi	r24, 0xCF	; 207
     674:	97 e0       	ldi	r25, 0x07	; 7
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <NetworkSetup+0x34>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <NetworkSetup+0x3a>
     67c:	00 00       	nop
	_delay_ms(1);
	/*printf("Reading MR: %d\n\n",SPI_EthernetRead(MR));
	// Setting the Wiznet W5100 Gateway Address
	//printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],\
	gtw_addr[2],gtw_addr[3]);*/
	SPI_EthernetWrite(GAR + 0,gtw_addr[0]);
     67e:	f8 01       	movw	r30, r16
     680:	60 81       	ld	r22, Z
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(GAR + 1,gtw_addr[1]);
     68a:	f8 01       	movw	r30, r16
     68c:	61 81       	ldd	r22, Z+1	; 0x01
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(GAR + 2,gtw_addr[2]);
     696:	f8 01       	movw	r30, r16
     698:	62 81       	ldd	r22, Z+2	; 0x02
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(GAR + 3,gtw_addr[3]);
     6a2:	f8 01       	movw	r30, r16
     6a4:	63 81       	ldd	r22, Z+3	; 0x03
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
     6ae:	8f ec       	ldi	r24, 0xCF	; 207
     6b0:	97 e0       	ldi	r25, 0x07	; 7
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <NetworkSetup+0x70>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <NetworkSetup+0x76>
     6b8:	00 00       	nop
	_delay_ms(1);
	printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_EthernetRead(GAR + 0),SPI_EthernetRead(GAR + 1),\
	SPI_EthernetRead(GAR + 2),SPI_EthernetRead(GAR + 3));
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     6c2:	b8 2e       	mov	r11, r24
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     6cc:	08 2f       	mov	r16, r24
	SPI_EthernetWrite(GAR + 0,gtw_addr[0]);
	SPI_EthernetWrite(GAR + 1,gtw_addr[1]);
	SPI_EthernetWrite(GAR + 2,gtw_addr[2]);
	SPI_EthernetWrite(GAR + 3,gtw_addr[3]);
	_delay_ms(1);
	printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_EthernetRead(GAR + 0),SPI_EthernetRead(GAR + 1),\
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     6d6:	18 2f       	mov	r17, r24
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     6e0:	1f 92       	push	r1
     6e2:	bf 92       	push	r11
     6e4:	1f 92       	push	r1
     6e6:	0f 93       	push	r16
     6e8:	1f 92       	push	r1
     6ea:	1f 93       	push	r17
     6ec:	1f 92       	push	r1
     6ee:	8f 93       	push	r24
     6f0:	83 e5       	ldi	r24, 0x53	; 83
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
	SPI_EthernetRead(GAR + 2),SPI_EthernetRead(GAR + 3));
	
	// Setting the Wiznet W5100 Source Address Register
	//printf("Setting Source Address %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n",mac_addr[0],mac_addr[1],\
	mac_addr[2],mac_addr[3],mac_addr[4],mac_addr[5]);
	SPI_EthernetWrite(SAR + 0,mac_addr[0]);
     6fc:	68 81       	ld	r22, Y
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SAR + 1,mac_addr[1]);
     706:	69 81       	ldd	r22, Y+1	; 0x01
     708:	8a e0       	ldi	r24, 0x0A	; 10
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SAR + 2,mac_addr[2]);
     710:	6a 81       	ldd	r22, Y+2	; 0x02
     712:	8b e0       	ldi	r24, 0x0B	; 11
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SAR + 3,mac_addr[3]);
     71a:	6b 81       	ldd	r22, Y+3	; 0x03
     71c:	8c e0       	ldi	r24, 0x0C	; 12
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SAR + 4,mac_addr[4]);
     724:	6c 81       	ldd	r22, Y+4	; 0x04
     726:	8d e0       	ldi	r24, 0x0D	; 13
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SAR + 5,mac_addr[5]);
     72e:	6d 81       	ldd	r22, Y+5	; 0x05
     730:	8e e0       	ldi	r24, 0x0E	; 14
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
     738:	ef ec       	ldi	r30, 0xCF	; 207
     73a:	f7 e0       	ldi	r31, 0x07	; 7
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <NetworkSetup+0xfa>
     740:	00 c0       	rjmp	.+0      	; 0x742 <NetworkSetup+0x100>
     742:	00 00       	nop
	SPI_EthernetRead(SAR + 2),SPI_EthernetRead(SAR + 3),SPI_EthernetRead(SAR + 4),SPI_EthernetRead(SAR + 5));
	
	// Setting the Wiznet W5100 Sub Mask Address
	//printf("Setting Sub Mask Address %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],\
	sub_mask[2],sub_mask[3]);
	SPI_EthernetWrite(SUBR + 0,sub_mask[0]);
     744:	f6 01       	movw	r30, r12
     746:	60 81       	ld	r22, Z
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SUBR + 1,sub_mask[1]);
     750:	f6 01       	movw	r30, r12
     752:	61 81       	ldd	r22, Z+1	; 0x01
     754:	86 e0       	ldi	r24, 0x06	; 6
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SUBR + 2,sub_mask[2]);
     75c:	f6 01       	movw	r30, r12
     75e:	62 81       	ldd	r22, Z+2	; 0x02
     760:	87 e0       	ldi	r24, 0x07	; 7
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SUBR + 3,sub_mask[3]);
     768:	f6 01       	movw	r30, r12
     76a:	63 81       	ldd	r22, Z+3	; 0x03
     76c:	88 e0       	ldi	r24, 0x08	; 8
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
     774:	8f ec       	ldi	r24, 0xCF	; 207
     776:	97 e0       	ldi	r25, 0x07	; 7
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <NetworkSetup+0x136>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <NetworkSetup+0x13c>
     77e:	00 00       	nop
	SPI_EthernetRead(SUBR + 2),SPI_EthernetRead(SUBR + 3));
	
	// Setting the Wiznet W5100 IP Address (SIPR): 0x000F to 0x0012
	//printf("Setting IP Address %d.%d.%d.%d\n",local_ip_addr[0],local_ip_addr[1],\
	local_ip_addr[2],local_ip_addr[3]);
	SPI_EthernetWrite(SIPR + 0,local_ip_addr[0]);
     780:	f7 01       	movw	r30, r14
     782:	60 81       	ld	r22, Z
     784:	8f e0       	ldi	r24, 0x0F	; 15
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SIPR + 1,local_ip_addr[1]);
     78c:	f7 01       	movw	r30, r14
     78e:	61 81       	ldd	r22, Z+1	; 0x01
     790:	80 e1       	ldi	r24, 0x10	; 16
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SIPR + 2,local_ip_addr[2]);
     798:	f7 01       	movw	r30, r14
     79a:	62 81       	ldd	r22, Z+2	; 0x02
     79c:	81 e1       	ldi	r24, 0x11	; 17
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(SIPR + 3,local_ip_addr[3]);
     7a4:	f7 01       	movw	r30, r14
     7a6:	63 81       	ldd	r22, Z+3	; 0x03
     7a8:	82 e1       	ldi	r24, 0x12	; 18
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
     7b0:	8f ec       	ldi	r24, 0xCF	; 207
     7b2:	97 e0       	ldi	r25, 0x07	; 7
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <NetworkSetup+0x172>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <NetworkSetup+0x178>
     7ba:	00 00       	nop
     7bc:	ed b7       	in	r30, 0x3d	; 61
     7be:	fe b7       	in	r31, 0x3e	; 62
     7c0:	3a 96       	adiw	r30, 0x0a	; 10
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	fe bf       	out	0x3e, r31	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	ed bf       	out	0x3d, r30	; 61
	
	//printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_EthernetRead(SIPR + 0),SPI_EthernetRead(SIPR + 1),\
	SPI_EthernetRead(SIPR + 2),SPI_EthernetRead(SIPR + 3));
	//printf("Done Wiznet W5100 Initialized!\n");
	//Memory_Init(); 
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	bf 90       	pop	r11
     7de:	08 95       	ret

000007e0 <Server_Connect>:

int Server_Connect(uint8_t socketMode, uint8_t *server_ip_addr, uint8_t *server_port, uint8_t *source_port)
{
     7e0:	bf 92       	push	r11
     7e2:	cf 92       	push	r12
     7e4:	df 92       	push	r13
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	b8 2e       	mov	r11, r24
     7f4:	7b 01       	movw	r14, r22
     7f6:	6a 01       	movw	r12, r20
     7f8:	89 01       	movw	r16, r18
	do 
	{
		printf("SPI SR Status: %d\n", SPI_EthernetRead(S0_SR));
     7fa:	ce e6       	ldi	r28, 0x6E	; 110
     7fc:	d3 e0       	ldi	r29, 0x03	; 3
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	94 e0       	ldi	r25, 0x04	; 4
     802:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     806:	1f 92       	push	r1
     808:	8f 93       	push	r24
     80a:	df 93       	push	r29
     80c:	cf 93       	push	r28
     80e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
		SPI_EthernetWrite(S0_CR, CLOSE);
     812:	60 e1       	ldi	r22, 0x10	; 16
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	94 e0       	ldi	r25, 0x04	; 4
     818:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
		//SPI_Write(S0_MR, TCP_MODE);
		SPI_EthernetWrite(S0_MR, socketMode);
     81c:	6b 2d       	mov	r22, r11
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	94 e0       	ldi	r25, 0x04	; 4
     822:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
		//printf("Setting Source Port on Socket 0 %d%d\n",source_port[0],source_port[1]);
		SPI_EthernetWrite(S0_SPORT + 0, source_port[0]);
     826:	f8 01       	movw	r30, r16
     828:	60 81       	ld	r22, Z
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	94 e0       	ldi	r25, 0x04	; 4
     82e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
		SPI_EthernetWrite(S0_SPORT + 1, source_port[1]);
     832:	f8 01       	movw	r30, r16
     834:	61 81       	ldd	r22, Z+1	; 0x01
     836:	85 e0       	ldi	r24, 0x05	; 5
     838:	94 e0       	ldi	r25, 0x04	; 4
     83a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
		//printf("Reading Source Port on Socket 0 %d%d\n\n",SPI_EthernetRead(S0_SPORT),SPI_EthernetRead(S0_SPORT + 1));
		
		//printf("Setting Socket 0 to Open\n\n");
		SPI_EthernetWrite(S0_CR, OPEN);
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	94 e0       	ldi	r25, 0x04	; 4
     844:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
		//printf("SPI SR Status: %d\n", SPI_EthernetRead(S0_SR));
		
	} while (SPI_EthernetRead(S0_SR) != SOCK_INIT);
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	94 e0       	ldi	r25, 0x04	; 4
     84c:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	83 31       	cpi	r24, 0x13	; 19
     85a:	89 f6       	brne	.-94     	; 0x7fe <Server_Connect+0x1e>
	
	//Write Server IP to Socket 0 IP Register
	//printf("Setting Server IP Address %d.%d.%d.%d\n",server_ip_addr[0],server_ip_addr[1],\
	server_ip_addr[2],server_ip_addr[3]); 
	SPI_EthernetWrite(S0_DIPR + 0,server_ip_addr[0]);
     85c:	f7 01       	movw	r30, r14
     85e:	60 81       	ld	r22, Z
     860:	8c e0       	ldi	r24, 0x0C	; 12
     862:	94 e0       	ldi	r25, 0x04	; 4
     864:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 1, server_ip_addr[1]);
     868:	f7 01       	movw	r30, r14
     86a:	61 81       	ldd	r22, Z+1	; 0x01
     86c:	8d e0       	ldi	r24, 0x0D	; 13
     86e:	94 e0       	ldi	r25, 0x04	; 4
     870:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 2,server_ip_addr[2]);
     874:	f7 01       	movw	r30, r14
     876:	62 81       	ldd	r22, Z+2	; 0x02
     878:	8e e0       	ldi	r24, 0x0E	; 14
     87a:	94 e0       	ldi	r25, 0x04	; 4
     87c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 3, server_ip_addr[3]);
     880:	f7 01       	movw	r30, r14
     882:	63 81       	ldd	r22, Z+3	; 0x03
     884:	8f e0       	ldi	r24, 0x0F	; 15
     886:	94 e0       	ldi	r25, 0x04	; 4
     888:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetRead(S0_DIPR + 2),SPI_EthernetRead(S0_DIPR + 3));
	//printf("SPI SR Status: 0x%02x\n", SPI_EthernetRead(S0_SR));
	
	//Write Server Port to Socket 0 IP Register 
	//printf("Setting Server Port\n");
	SPI_EthernetWrite(S0_DPORT + 0, server_port[0]); 
     88c:	f6 01       	movw	r30, r12
     88e:	60 81       	ld	r22, Z
     890:	80 e1       	ldi	r24, 0x10	; 16
     892:	94 e0       	ldi	r25, 0x04	; 4
     894:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DPORT + 1, server_port[1]);
     898:	f6 01       	movw	r30, r12
     89a:	61 81       	ldd	r22, Z+1	; 0x01
     89c:	81 e1       	ldi	r24, 0x11	; 17
     89e:	94 e0       	ldi	r25, 0x04	; 4
     8a0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	//printf("Reading S0_DPORT: %d%d\n\n",SPI_EthernetRead(S0_DPORT + 0),SPI_EthernetRead(S0_DPORT + 1)); 
	//printf("SPI SR Status: 0x%02x\n", SPI_EthernetRead(S0_SR));
	
	//Try to connect 
	SPI_EthernetWrite(S0_CR, CONNECT);
     8a4:	64 e0       	ldi	r22, 0x04	; 4
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	94 e0       	ldi	r25, 0x04	; 4
     8aa:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
     8ae:	c0 e0       	ldi	r28, 0x00	; 0
     8b0:	d0 e0       	ldi	r29, 0x00	; 0
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
	{
		_delay_us(300); 
		delayCount += 1; 
		//Every 3 seconds
		if(delayCount%10000 == 0)
     8b2:	00 e1       	ldi	r16, 0x10	; 16
     8b4:	17 e2       	ldi	r17, 0x27	; 39
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
     8b6:	36 c0       	rjmp	.+108    	; 0x924 <Server_Connect+0x144>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b8:	87 e5       	ldi	r24, 0x57	; 87
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <Server_Connect+0xdc>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <Server_Connect+0xe2>
     8c2:	00 00       	nop
	{
		_delay_us(300); 
		delayCount += 1; 
     8c4:	21 96       	adiw	r28, 0x01	; 1
		//Every 3 seconds
		if(delayCount%10000 == 0)
     8c6:	9e 01       	movw	r18, r28
     8c8:	32 95       	swap	r19
     8ca:	22 95       	swap	r18
     8cc:	2f 70       	andi	r18, 0x0F	; 15
     8ce:	23 27       	eor	r18, r19
     8d0:	3f 70       	andi	r19, 0x0F	; 15
     8d2:	23 27       	eor	r18, r19
     8d4:	a7 e4       	ldi	r26, 0x47	; 71
     8d6:	b3 e0       	ldi	r27, 0x03	; 3
     8d8:	0e 94 06 0b 	call	0x160c	; 0x160c <__umulhisi3>
     8dc:	96 95       	lsr	r25
     8de:	87 95       	ror	r24
     8e0:	96 95       	lsr	r25
     8e2:	87 95       	ror	r24
     8e4:	96 95       	lsr	r25
     8e6:	87 95       	ror	r24
     8e8:	80 9f       	mul	r24, r16
     8ea:	90 01       	movw	r18, r0
     8ec:	81 9f       	mul	r24, r17
     8ee:	30 0d       	add	r19, r0
     8f0:	90 9f       	mul	r25, r16
     8f2:	30 0d       	add	r19, r0
     8f4:	11 24       	eor	r1, r1
     8f6:	c2 17       	cp	r28, r18
     8f8:	d3 07       	cpc	r29, r19
     8fa:	a1 f4       	brne	.+40     	; 0x924 <Server_Connect+0x144>
		{
			printf("Trying to Establish Connection...\n");
     8fc:	81 e8       	ldi	r24, 0x81	; 129
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
			//delayCount = 0; 
			//15 seconds
			if(delayCount > 50000)
     904:	c1 35       	cpi	r28, 0x51	; 81
     906:	93 ec       	ldi	r25, 0xC3	; 195
     908:	d9 07       	cpc	r29, r25
     90a:	60 f0       	brcs	.+24     	; 0x924 <Server_Connect+0x144>
			{
				printf("Timeout, disconnecting!\n"); 
     90c:	83 ea       	ldi	r24, 0xA3	; 163
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
				SPI_EthernetWrite(S0_CR, CLOSE); 
     914:	60 e1       	ldi	r22, 0x10	; 16
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	94 e0       	ldi	r25, 0x04	; 4
     91a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
				return 0; 
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	19 c0       	rjmp	.+50     	; 0x956 <Server_Connect+0x176>
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
     924:	83 e0       	ldi	r24, 0x03	; 3
     926:	94 e0       	ldi	r25, 0x04	; 4
     928:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     92c:	87 31       	cpi	r24, 0x17	; 23
     92e:	21 f6       	brne	.-120    	; 0x8b8 <Server_Connect+0xd8>
				return 0; 
			}
		}
	}
	
	uint8_t sr_status = SPI_EthernetRead(S0_SR);
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	94 e0       	ldi	r25, 0x04	; 4
     934:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
	if(sr_status == SOCK_ESTABLISHED)
     938:	87 31       	cpi	r24, 0x17	; 23
     93a:	39 f4       	brne	.+14     	; 0x94a <Server_Connect+0x16a>
	{
		//printf("SPI SR Status: 0x%02x\n", sr_status);
		printf("Connection Succeeded!\n\n");
     93c:	8b eb       	ldi	r24, 0xBB	; 187
     93e:	93 e0       	ldi	r25, 0x03	; 3
     940:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
		return 1; 
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	06 c0       	rjmp	.+12     	; 0x956 <Server_Connect+0x176>
	}
	//Connection Failed 
	else
	{
		//printf("SPI SR Status: 0x%02x\n", sr_status);
		printf("Could not connect. Exiting...\n\n");
     94a:	82 ed       	ldi	r24, 0xD2	; 210
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
		return 0; 
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	08 95       	ret

0000096a <SocketCommand>:
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     96a:	68 2f       	mov	r22, r24
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	94 e0       	ldi	r25, 0x04	; 4
     970:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
     974:	08 95       	ret

00000976 <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     976:	4f 92       	push	r4
     978:	5f 92       	push	r5
     97a:	6f 92       	push	r6
     97c:	7f 92       	push	r7
     97e:	8f 92       	push	r8
     980:	9f 92       	push	r9
     982:	af 92       	push	r10
     984:	bf 92       	push	r11
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	7c 01       	movw	r14, r24
     998:	6b 01       	movw	r12, r22
     99a:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	94 e0       	ldi	r25, 0x04	; 4
     9a0:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     9a4:	1f 92       	push	r1
     9a6:	8f 93       	push	r24
     9a8:	81 ef       	ldi	r24, 0xF1	; 241
     9aa:	93 e0       	ldi	r25, 0x03	; 3
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	94 e0       	ldi	r25, 0x04	; 4
     9b8:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	87 31       	cpi	r24, 0x17	; 23
     9c6:	59 f0       	breq	.+22     	; 0x9de <SendData+0x68>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     9c8:	22 e1       	ldi	r18, 0x12	; 18
     9ca:	32 e0       	ldi	r19, 0x02	; 2
     9cc:	44 e1       	ldi	r20, 0x14	; 20
     9ce:	52 e0       	ldi	r21, 0x02	; 2
     9d0:	66 e1       	ldi	r22, 0x16	; 22
     9d2:	72 e0       	ldi	r23, 0x02	; 2
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <Server_Connect>
     9da:	89 2b       	or	r24, r25
     9dc:	a9 f3       	breq	.-22     	; 0x9c8 <SendData+0x52>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     9de:	80 e2       	ldi	r24, 0x20	; 32
     9e0:	94 e0       	ldi	r25, 0x04	; 4
     9e2:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     9e6:	c8 2f       	mov	r28, r24
     9e8:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     9ea:	dc 2f       	mov	r29, r28
     9ec:	cc 27       	eor	r28, r28
     9ee:	81 e2       	ldi	r24, 0x21	; 33
     9f0:	94 e0       	ldi	r25, 0x04	; 4
     9f2:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     9f6:	c8 0f       	add	r28, r24
     9f8:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     9fa:	cc 15       	cp	r28, r12
     9fc:	dd 05       	cpc	r29, r13
     9fe:	08 f4       	brcc	.+2      	; 0xa02 <SendData+0x8c>
     a00:	9e c0       	rjmp	.+316    	; 0xb3e <SendData+0x1c8>
     a02:	30 c0       	rjmp	.+96     	; 0xa64 <SendData+0xee>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a04:	8f ec       	ldi	r24, 0xCF	; 207
     a06:	97 e0       	ldi	r25, 0x07	; 7
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <SendData+0x92>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <SendData+0x98>
     a0e:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     a10:	80 e2       	ldi	r24, 0x20	; 32
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     a18:	c8 2f       	mov	r28, r24
     a1a:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     a1c:	dc 2f       	mov	r29, r28
     a1e:	cc 27       	eor	r28, r28
     a20:	81 e2       	ldi	r24, 0x21	; 33
     a22:	94 e0       	ldi	r25, 0x04	; 4
     a24:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     a28:	c8 0f       	add	r28, r24
     a2a:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	9f 92       	push	r9
     a32:	8f 92       	push	r8
     a34:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
     a38:	01 50       	subi	r16, 0x01	; 1
     a3a:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	01 15       	cp	r16, r1
     a46:	11 05       	cpc	r17, r1
     a48:	51 f4       	brne	.+20     	; 0xa5e <SendData+0xe8>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     a4a:	88 e0       	ldi	r24, 0x08	; 8
     a4c:	0e 94 b5 04 	call	0x96a	; 0x96a <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	94 e0       	ldi	r25, 0x04	; 4
     a54:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     a58:	81 11       	cpse	r24, r1
     a5a:	fa cf       	rjmp	.-12     	; 0xa50 <SendData+0xda>
     a5c:	6a c0       	rjmp	.+212    	; 0xb32 <SendData+0x1bc>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     a5e:	cc 15       	cp	r28, r12
     a60:	dd 05       	cpc	r29, r13
     a62:	80 f2       	brcs	.-96     	; 0xa04 <SendData+0x8e>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     a64:	84 e2       	ldi	r24, 0x24	; 36
     a66:	94 e0       	ldi	r25, 0x04	; 4
     a68:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     a6c:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     a6e:	85 e2       	ldi	r24, 0x25	; 37
     a70:	94 e0       	ldi	r25, 0x04	; 4
     a72:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     a76:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     a78:	54 2c       	mov	r5, r4
     a7a:	44 24       	eor	r4, r4
     a7c:	48 0e       	add	r4, r24
     a7e:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     a80:	82 e2       	ldi	r24, 0x22	; 34
     a82:	94 e0       	ldi	r25, 0x04	; 4
     a84:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     a88:	83 e2       	ldi	r24, 0x23	; 35
     a8a:	94 e0       	ldi	r25, 0x04	; 4
     a8c:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     a90:	89 e0       	ldi	r24, 0x09	; 9
     a92:	94 e0       	ldi	r25, 0x04	; 4
     a94:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
	while(i < bufferLength) {
     a98:	c1 14       	cp	r12, r1
     a9a:	d1 04       	cpc	r13, r1
     a9c:	69 f1       	breq	.+90     	; 0xaf8 <SendData+0x182>
     a9e:	47 01       	movw	r8, r14
     aa0:	8c 0c       	add	r8, r12
     aa2:	9d 1c       	adc	r9, r13
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     aa4:	82 01       	movw	r16, r4
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     aa6:	c0 e0       	ldi	r28, 0x00	; 0
     aa8:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     aaa:	a0 90 ca 06 	lds	r10, 0x06CA
     aae:	b0 90 cb 06 	lds	r11, 0x06CB
     ab2:	a0 22       	and	r10, r16
     ab4:	b1 22       	and	r11, r17
     ab6:	80 91 cc 06 	lds	r24, 0x06CC
     aba:	90 91 cd 06 	lds	r25, 0x06CD
     abe:	a8 0e       	add	r10, r24
     ac0:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     ac2:	61 14       	cp	r6, r1
     ac4:	71 04       	cpc	r7, r1
     ac6:	41 f0       	breq	.+16     	; 0xad8 <SendData+0x162>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     ac8:	ce 01       	movw	r24, r28
     aca:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     ace:	68 2f       	mov	r22, r24
     ad0:	c5 01       	movw	r24, r10
     ad2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
     ad6:	05 c0       	rjmp	.+10     	; 0xae2 <SendData+0x16c>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     ad8:	f7 01       	movw	r30, r14
     ada:	60 81       	ld	r22, Z
     adc:	c5 01       	movw	r24, r10
     ade:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
		}
		offaddr++;
     ae2:	0f 5f       	subi	r16, 0xFF	; 255
     ae4:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     ae6:	ff ef       	ldi	r31, 0xFF	; 255
     ae8:	ef 1a       	sub	r14, r31
     aea:	ff 0a       	sbc	r15, r31
     aec:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     aee:	e8 14       	cp	r14, r8
     af0:	f9 04       	cpc	r15, r9
     af2:	d9 f6       	brne	.-74     	; 0xaaa <SendData+0x134>
     af4:	4c 0c       	add	r4, r12
     af6:	5d 1c       	adc	r5, r13
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	c5 01       	movw	r24, r10
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     b02:	84 e2       	ldi	r24, 0x24	; 36
     b04:	94 e0       	ldi	r25, 0x04	; 4
     b06:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     b0a:	6f ef       	ldi	r22, 0xFF	; 255
     b0c:	84 e2       	ldi	r24, 0x24	; 36
     b0e:	94 e0       	ldi	r25, 0x04	; 4
     b10:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     b14:	64 2d       	mov	r22, r4
     b16:	85 e2       	ldi	r24, 0x25	; 37
     b18:	94 e0       	ldi	r25, 0x04	; 4
     b1a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     b1e:	80 e2       	ldi	r24, 0x20	; 32
     b20:	0e 94 b5 04 	call	0x96a	; 0x96a <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	94 e0       	ldi	r25, 0x04	; 4
     b28:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     b2c:	81 11       	cpse	r24, r1
     b2e:	fa cf       	rjmp	.-12     	; 0xb24 <SendData+0x1ae>
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <SendData+0x1c2>
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_EthernetRead(S0_CR));
			return 0;
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	2c c0       	rjmp	.+88     	; 0xb90 <SendData+0x21a>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	29 c0       	rjmp	.+82     	; 0xb90 <SendData+0x21a>
     b3e:	8f ec       	ldi	r24, 0xCF	; 207
     b40:	97 e0       	ldi	r25, 0x07	; 7
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <SendData+0x1cc>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <SendData+0x1d2>
     b48:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     b4a:	80 e2       	ldi	r24, 0x20	; 32
     b4c:	94 e0       	ldi	r25, 0x04	; 4
     b4e:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     b52:	c8 2f       	mov	r28, r24
     b54:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     b56:	dc 2f       	mov	r29, r28
     b58:	cc 27       	eor	r28, r28
     b5a:	81 e2       	ldi	r24, 0x21	; 33
     b5c:	94 e0       	ldi	r25, 0x04	; 4
     b5e:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     b62:	c8 0f       	add	r28, r24
     b64:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	8d ef       	ldi	r24, 0xFD	; 253
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	9f 93       	push	r25
     b70:	8f 93       	push	r24
     b72:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	09 ee       	ldi	r16, 0xE9	; 233
     b80:	13 e0       	ldi	r17, 0x03	; 3
     b82:	0f 2e       	mov	r0, r31
     b84:	fd ef       	ldi	r31, 0xFD	; 253
     b86:	8f 2e       	mov	r8, r31
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	9f 2e       	mov	r9, r31
     b8c:	f0 2d       	mov	r31, r0
     b8e:	67 cf       	rjmp	.-306    	; 0xa5e <SendData+0xe8>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	bf 90       	pop	r11
     ba2:	af 90       	pop	r10
     ba4:	9f 90       	pop	r9
     ba6:	8f 90       	pop	r8
     ba8:	7f 90       	pop	r7
     baa:	6f 90       	pop	r6
     bac:	5f 90       	pop	r5
     bae:	4f 90       	pop	r4
     bb0:	08 95       	ret

00000bb2 <ReceiveData>:

int ReceiveData(uint16_t RAMAddress, char* buffer, uint16_t dataLength, int header, int externRAM)
{
     bb2:	5f 92       	push	r5
     bb4:	6f 92       	push	r6
     bb6:	7f 92       	push	r7
     bb8:	8f 92       	push	r8
     bba:	9f 92       	push	r9
     bbc:	af 92       	push	r10
     bbe:	bf 92       	push	r11
     bc0:	cf 92       	push	r12
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	4c 01       	movw	r8, r24
     bd2:	5b 01       	movw	r10, r22
     bd4:	6a 01       	movw	r12, r20
     bd6:	79 01       	movw	r14, r18
     bd8:	ca ee       	ldi	r28, 0xEA	; 234
     bda:	d3 e0       	ldi	r29, 0x03	; 3
	if (dataLength > MAX_BUFF)
		dataLength = MAX_BUFF - 2;
		
	while(1)
	{
		if(SPI_EthernetRead(S0_SR) == SOCK_ESTABLISHED)
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	94 e0       	ldi	r25, 0x04	; 4
     be0:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     be4:	87 31       	cpi	r24, 0x17	; 23
     be6:	09 f0       	breq	.+2      	; 0xbea <ReceiveData+0x38>
     be8:	5c c0       	rjmp	.+184    	; 0xca2 <ReceiveData+0xf0>
		{
			// Read the Rx Read Pointer
			ptr = SPI_EthernetRead(S0_RX_RD);
     bea:	88 e2       	ldi	r24, 0x28	; 40
     bec:	94 e0       	ldi	r25, 0x04	; 4
     bee:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     bf2:	c8 2f       	mov	r28, r24
			//printf("RX Read Pointer: %d\n", ptr);
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
     bf4:	89 e2       	ldi	r24, 0x29	; 41
     bf6:	94 e0       	ldi	r25, 0x04	; 4
     bf8:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
	while(1)
	{
		if(SPI_EthernetRead(S0_SR) == SOCK_ESTABLISHED)
		{
			// Read the Rx Read Pointer
			ptr = SPI_EthernetRead(S0_RX_RD);
     bfc:	d0 e0       	ldi	r29, 0x00	; 0
			//printf("RX Read Pointer: %d\n", ptr);
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
     bfe:	dc 2f       	mov	r29, r28
     c00:	cc 27       	eor	r28, r28
     c02:	c8 0f       	add	r28, r24
     c04:	d1 1d       	adc	r29, r1
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
     c06:	c1 14       	cp	r12, r1
     c08:	d1 04       	cpc	r13, r1
     c0a:	b9 f1       	breq	.+110    	; 0xc7a <ReceiveData+0xc8>
{
	uint16_t ptr,offaddr,realaddr;
	//uint16_t RAMAddress = 0; 
	char tempvar; 
	//uint8_t header = 1; 
	uint8_t headerCount = 0; 
     c0c:	51 2c       	mov	r5, r1
					else{
						//printf("Writing to Buffer\n"); 
						*buffer = tempvar; 
						buffer++; 
					}
					dataLength--;
     c0e:	61 2c       	mov	r6, r1
     c10:	71 2c       	mov	r7, r1
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
				realaddr = S0_RX_BASE + (offaddr & S0_RX_MASK);
     c12:	80 91 d0 06 	lds	r24, 0x06D0
     c16:	90 91 d1 06 	lds	r25, 0x06D1
     c1a:	8c 23       	and	r24, r28
     c1c:	9d 23       	and	r25, r29
     c1e:	20 91 ce 06 	lds	r18, 0x06CE
     c22:	30 91 cf 06 	lds	r19, 0x06CF
				//printf("Real Address: %d\n", realaddr);
				tempvar = SPI_EthernetRead(realaddr);
     c26:	82 0f       	add	r24, r18
     c28:	93 1f       	adc	r25, r19
     c2a:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
				//printf("Buffer: %c\n", tempvar);
				if(tempvar == '\n' && header)
     c2e:	8a 30       	cpi	r24, 0x0A	; 10
     c30:	41 f4       	brne	.+16     	; 0xc42 <ReceiveData+0x90>
     c32:	e1 14       	cp	r14, r1
     c34:	f1 04       	cpc	r15, r1
     c36:	41 f0       	breq	.+16     	; 0xc48 <ReceiveData+0x96>
				{
					//printf("Found New Line!\n");
					headerCount++; 
     c38:	53 94       	inc	r5
					if(headerCount >= 10)
     c3a:	89 e0       	ldi	r24, 0x09	; 9
     c3c:	85 15       	cp	r24, r5
     c3e:	b8 f0       	brcs	.+46     	; 0xc6e <ReceiveData+0xbc>
     c40:	18 c0       	rjmp	.+48     	; 0xc72 <ReceiveData+0xc0>
						header = 0; 
				}
				else if(!header)
     c42:	e1 14       	cp	r14, r1
     c44:	f1 04       	cpc	r15, r1
     c46:	a9 f4       	brne	.+42     	; 0xc72 <ReceiveData+0xc0>
				{
					//printf("Write to RAM!\n");
					//printf("Writing to RAM: %c @ address %d\n", tempvar, RAMAddress); 
					if(externRAM){
     c48:	01 15       	cp	r16, r1
     c4a:	11 05       	cpc	r17, r1
     c4c:	39 f0       	breq	.+14     	; 0xc5c <ReceiveData+0xaa>
						RAMWriteByte(tempvar, RAMAddress);	
     c4e:	b4 01       	movw	r22, r8
     c50:	0e 94 ce 07 	call	0xf9c	; 0xf9c <RAMWriteByte>
						RAMAddress++;
     c54:	9f ef       	ldi	r25, 0xFF	; 255
     c56:	89 1a       	sub	r8, r25
     c58:	99 0a       	sbc	r9, r25
     c5a:	03 c0       	rjmp	.+6      	; 0xc62 <ReceiveData+0xb0>
					}
					else{
						//printf("Writing to Buffer\n"); 
						*buffer = tempvar; 
     c5c:	f5 01       	movw	r30, r10
     c5e:	81 93       	st	Z+, r24
     c60:	5f 01       	movw	r10, r30
						buffer++; 
					}
					dataLength--;
     c62:	f1 e0       	ldi	r31, 0x01	; 1
     c64:	cf 1a       	sub	r12, r31
     c66:	d1 08       	sbc	r13, r1
     c68:	e6 2c       	mov	r14, r6
     c6a:	f7 2c       	mov	r15, r7
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <ReceiveData+0xc0>
				if(tempvar == '\n' && header)
				{
					//printf("Found New Line!\n");
					headerCount++; 
					if(headerCount >= 10)
						header = 0; 
     c6e:	e6 2c       	mov	r14, r6
     c70:	f7 2c       	mov	r15, r7
						*buffer = tempvar; 
						buffer++; 
					}
					dataLength--;
				}
				offaddr++;
     c72:	21 96       	adiw	r28, 0x01	; 1
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
     c74:	c1 14       	cp	r12, r1
     c76:	d1 04       	cpc	r13, r1
     c78:	61 f6       	brne	.-104    	; 0xc12 <ReceiveData+0x60>
					}
					dataLength--;
				}
				offaddr++;
			}
			*buffer='\0';        // String terminated character
     c7a:	f5 01       	movw	r30, r10
     c7c:	10 82       	st	Z, r1
			//printf("%s", buffer);

			// Increase the S0_RX_RD value, so it point to the next receive
			SPI_EthernetWrite(S0_RX_RD,(offaddr & 0xFF00) >> 8 );
     c7e:	6d 2f       	mov	r22, r29
     c80:	88 e2       	ldi	r24, 0x28	; 40
     c82:	94 e0       	ldi	r25, 0x04	; 4
     c84:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>
			SPI_EthernetWrite(S0_RX_RD + 1,(offaddr & 0x00FF));
     c88:	6c 2f       	mov	r22, r28
     c8a:	89 e2       	ldi	r24, 0x29	; 41
     c8c:	94 e0       	ldi	r25, 0x04	; 4
     c8e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_EthernetWrite>

			// Now Send the RECV command
			SocketCommand(RECV);
     c92:	80 e4       	ldi	r24, 0x40	; 64
     c94:	0e 94 b5 04 	call	0x96a	; 0x96a <SocketCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c98:	fd e0       	ldi	r31, 0x0D	; 13
     c9a:	fa 95       	dec	r31
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <ReceiveData+0xe8>
     c9e:	00 00       	nop
     ca0:	1f c0       	rjmp	.+62     	; 0xce0 <ReceiveData+0x12e>
     ca2:	21 97       	sbiw	r28, 0x01	; 1
			_delay_us(5);    // Wait for Receive Process
			break; 
		}
		else if(timeCount > MAX_TIME_COUNT)
     ca4:	20 97       	sbiw	r28, 0x00	; 0
     ca6:	a9 f4       	brne	.+42     	; 0xcd2 <ReceiveData+0x120>
		{
			printf("Ethernet Receive Data Timeout!\n");
     ca8:	85 e1       	ldi	r24, 0x15	; 21
     caa:	94 e0       	ldi	r25, 0x04	; 4
     cac:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
			printf("Stats Reg: 0x%02x", SPI_EthernetRead(S0_SR));
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	94 e0       	ldi	r25, 0x04	; 4
     cb4:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_EthernetRead>
     cb8:	1f 92       	push	r1
     cba:	8f 93       	push	r24
     cbc:	84 e3       	ldi	r24, 0x34	; 52
     cbe:	94 e0       	ldi	r25, 0x04	; 4
     cc0:	9f 93       	push	r25
     cc2:	8f 93       	push	r24
     cc4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
			break; 
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	07 c0       	rjmp	.+14     	; 0xce0 <ReceiveData+0x12e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd2:	8f e1       	ldi	r24, 0x1F	; 31
     cd4:	9e e4       	ldi	r25, 0x4E	; 78
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <ReceiveData+0x124>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <ReceiveData+0x12a>
     cdc:	00 00       	nop
     cde:	7e cf       	rjmp	.-260    	; 0xbdc <ReceiveData+0x2a>
		}
		
	}	

	return 1;
}
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	bf 90       	pop	r11
     cf6:	af 90       	pop	r10
     cf8:	9f 90       	pop	r9
     cfa:	8f 90       	pop	r8
     cfc:	7f 90       	pop	r7
     cfe:	6f 90       	pop	r6
     d00:	5f 90       	pop	r5
     d02:	08 95       	ret

00000d04 <uart_sendStream>:
	putchar('m');
}


int uart_sendStream(char ch,FILE *stream)
{
     d04:	cf 93       	push	r28
     d06:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     d08:	8a 30       	cpi	r24, 0x0A	; 10
     d0a:	19 f4       	brne	.+6      	; 0xd12 <uart_sendStream+0xe>
	uart_sendStream('\r', stream);
     d0c:	8d e0       	ldi	r24, 0x0D	; 13
     d0e:	0e 94 82 06 	call	0xd04	; 0xd04 <uart_sendStream>
	while (!(UCSR2A & (1<<UDRE2)));
     d12:	e0 ed       	ldi	r30, 0xD0	; 208
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	90 81       	ld	r25, Z
     d18:	95 ff       	sbrs	r25, 5
     d1a:	fd cf       	rjmp	.-6      	; 0xd16 <uart_sendStream+0x12>
	UDR2=ch;
     d1c:	c0 93 d6 00 	sts	0x00D6, r28
	return 0;
}
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <uart_receiveStream>:

int uart_receiveStream(FILE *stream)
{
     d28:	cf 93       	push	r28
     d2a:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR2A & (1<<RXC2)));
     d2c:	e0 ed       	ldi	r30, 0xD0	; 208
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	ec f7       	brge	.-6      	; 0xd30 <uart_receiveStream+0x8>
	ch=UDR2;
     d36:	c0 91 d6 00 	lds	r28, 0x00D6

	/* Echo the Output Back to terminal */
	uart_sendStream(ch,stream);
     d3a:	8c 2f       	mov	r24, r28
     d3c:	0e 94 82 06 	call	0xd04	; 0xd04 <uart_sendStream>

	return ch;
}
     d40:	8c 2f       	mov	r24, r28
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <uart0_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart0_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     d48:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     d4c:	83 e3       	ldi	r24, 0x33	; 51
     d4e:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     d52:	88 e1       	ldi	r24, 0x18	; 24
     d54:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     d58:	86 e0       	ldi	r24, 0x06	; 6
     d5a:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     d5e:	8a e1       	ldi	r24, 0x1A	; 26
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	90 93 51 07 	sts	0x0751, r25
     d66:	80 93 50 07 	sts	0x0750, r24
     d6a:	90 93 53 07 	sts	0x0753, r25
     d6e:	80 93 52 07 	sts	0x0752, r24
     d72:	08 95       	ret

00000d74 <getRAMStatus>:
}

int getRAMStatus()
{
	//Enable RAM CS
	RAM_PORT &= ~(1<<RAM_CS);
     d74:	a3 98       	cbi	0x14, 3	; 20
	SPDR = RDSR;
     d76:	85 e0       	ldi	r24, 0x05	; 5
     d78:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     d7a:	0d b4       	in	r0, 0x2d	; 45
     d7c:	07 fe       	sbrs	r0, 7
     d7e:	fd cf       	rjmp	.-6      	; 0xd7a <getRAMStatus+0x6>
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     d80:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     d82:	0d b4       	in	r0, 0x2d	; 45
     d84:	07 fe       	sbrs	r0, 7
     d86:	fd cf       	rjmp	.-6      	; 0xd82 <getRAMStatus+0xe>
	//Disable RAM CS
	RAM_PORT |= (1<<RAM_CS);
     d88:	a3 9a       	sbi	0x14, 3	; 20
	return(SPDR);
     d8a:	8e b5       	in	r24, 0x2e	; 46
}
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	08 95       	ret

00000d90 <setRAMStatus>:

void setRAMStatus(char mode)
{
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     d90:	a3 98       	cbi	0x14, 3	; 20
	SPDR = WRSR;
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     d96:	0d b4       	in	r0, 0x2d	; 45
     d98:	07 fe       	sbrs	r0, 7
     d9a:	fd cf       	rjmp	.-6      	; 0xd96 <setRAMStatus+0x6>
	// Start Data transmission
	SPDR = mode;
     d9c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     d9e:	0d b4       	in	r0, 0x2d	; 45
     da0:	07 fe       	sbrs	r0, 7
     da2:	fd cf       	rjmp	.-6      	; 0xd9e <setRAMStatus+0xe>
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
     da4:	a3 9a       	sbi	0x14, 3	; 20
     da6:	08 95       	ret

00000da8 <SPI_WriteAddress>:
}

void SPI_WriteAddress(uint32_t address)
{
     da8:	26 2f       	mov	r18, r22
     daa:	97 2f       	mov	r25, r23
     dac:	48 2f       	mov	r20, r24
	SPDR = WRITE;
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     db2:	0d b4       	in	r0, 0x2d	; 45
     db4:	07 fe       	sbrs	r0, 7
     db6:	fd cf       	rjmp	.-6      	; 0xdb2 <SPI_WriteAddress+0xa>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (address & 0x00FF0000) >> 16;
     db8:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     dba:	0d b4       	in	r0, 0x2d	; 45
     dbc:	07 fe       	sbrs	r0, 7
     dbe:	fd cf       	rjmp	.-6      	; 0xdba <SPI_WriteAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x0000FF00) >> 8;
     dc0:	89 2f       	mov	r24, r25
     dc2:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     dc4:	0d b4       	in	r0, 0x2d	; 45
     dc6:	07 fe       	sbrs	r0, 7
     dc8:	fd cf       	rjmp	.-6      	; 0xdc4 <SPI_WriteAddress+0x1c>
	SPDR = (address & 0x000000FF);
     dca:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     dcc:	0d b4       	in	r0, 0x2d	; 45
     dce:	07 fe       	sbrs	r0, 7
     dd0:	fd cf       	rjmp	.-6      	; 0xdcc <SPI_WriteAddress+0x24>
}
     dd2:	08 95       	ret

00000dd4 <SPI_WriteData>:

void SPI_WriteData(char data)
{
	// Start Data transmission
	SPDR = data;
     dd4:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     dd6:	0d b4       	in	r0, 0x2d	; 45
     dd8:	07 fe       	sbrs	r0, 7
     dda:	fd cf       	rjmp	.-6      	; 0xdd6 <SPI_WriteData+0x2>
}
     ddc:	08 95       	ret

00000dde <SPI_ReadAddress>:

void SPI_ReadAddress(uint32_t address)
{
     dde:	26 2f       	mov	r18, r22
     de0:	97 2f       	mov	r25, r23
     de2:	48 2f       	mov	r20, r24
	SPDR = READ;
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     de8:	0d b4       	in	r0, 0x2d	; 45
     dea:	07 fe       	sbrs	r0, 7
     dec:	fd cf       	rjmp	.-6      	; 0xde8 <SPI_ReadAddress+0xa>
	SPDR = (address & 0x00FF0000) >> 16;
     dee:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     df0:	0d b4       	in	r0, 0x2d	; 45
     df2:	07 fe       	sbrs	r0, 7
     df4:	fd cf       	rjmp	.-6      	; 0xdf0 <SPI_ReadAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x0000FF00) >> 8;
     df6:	89 2f       	mov	r24, r25
     df8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     dfa:	0d b4       	in	r0, 0x2d	; 45
     dfc:	07 fe       	sbrs	r0, 7
     dfe:	fd cf       	rjmp	.-6      	; 0xdfa <SPI_ReadAddress+0x1c>
	SPDR = (address & 0x000000FF);
     e00:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e02:	0d b4       	in	r0, 0x2d	; 45
     e04:	07 fe       	sbrs	r0, 7
     e06:	fd cf       	rjmp	.-6      	; 0xe02 <SPI_ReadAddress+0x24>
}
     e08:	08 95       	ret

00000e0a <SPI_ReadData>:

char SPI_ReadData()
{
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     e0a:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e0c:	0d b4       	in	r0, 0x2d	; 45
     e0e:	07 fe       	sbrs	r0, 7
     e10:	fd cf       	rjmp	.-6      	; 0xe0c <SPI_ReadData+0x2>
	return(SPDR);
     e12:	8e b5       	in	r24, 0x2e	; 46
}
     e14:	08 95       	ret

00000e16 <RAMWrite>:

uint16_t RAMWrite(char* data, uint16_t startAddress, uint16_t length)
{
     e16:	af 92       	push	r10
     e18:	bf 92       	push	r11
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	ec 01       	movw	r28, r24
     e2c:	8b 01       	movw	r16, r22
     e2e:	5a 01       	movw	r10, r20
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     e30:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     e32:	6b 01       	movw	r12, r22
     e34:	e1 2c       	mov	r14, r1
     e36:	f1 2c       	mov	r15, r1
     e38:	c7 01       	movw	r24, r14
     e3a:	b6 01       	movw	r22, r12
     e3c:	0e 94 d4 06 	call	0xda8	; 0xda8 <SPI_WriteAddress>
	SPI_WriteData(0x00);
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     e46:	a3 9a       	sbi	0x14, 3	; 20
	setRAMStatus(SEQ);
     e48:	80 e4       	ldi	r24, 0x40	; 64
     e4a:	0e 94 c8 06 	call	0xd90	; 0xd90 <setRAMStatus>
	getRAMStatus();
     e4e:	0e 94 ba 06 	call	0xd74	; 0xd74 <getRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     e52:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     e54:	c7 01       	movw	r24, r14
     e56:	b6 01       	movw	r22, r12
     e58:	0e 94 d4 06 	call	0xda8	; 0xda8 <SPI_WriteAddress>
	for(int i = 0; i < length; i++)
     e5c:	a1 14       	cp	r10, r1
     e5e:	b1 04       	cpc	r11, r1
     e60:	91 f0       	breq	.+36     	; 0xe86 <RAMWrite+0x70>
     e62:	65 01       	movw	r12, r10
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	e1 2c       	mov	r14, r1
     e6a:	f1 2c       	mov	r15, r1
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
     e6c:	fe 01       	movw	r30, r28
     e6e:	e8 0f       	add	r30, r24
     e70:	f9 1f       	adc	r31, r25
     e72:	80 81       	ld	r24, Z
     e74:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
	setRAMStatus(SEQ);
	getRAMStatus();
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_WriteAddress(startAddress);
	for(int i = 0; i < length; i++)
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	e8 1a       	sub	r14, r24
     e7c:	f8 0a       	sbc	r15, r24
     e7e:	c7 01       	movw	r24, r14
     e80:	ec 14       	cp	r14, r12
     e82:	fd 04       	cpc	r15, r13
     e84:	99 f7       	brne	.-26     	; 0xe6c <RAMWrite+0x56>
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
	}
	RAM_PORT |= (1<<RAM_CS);
     e86:	a3 9a       	sbi	0x14, 3	; 20
		

	return startAddress; 
}
     e88:	c8 01       	movw	r24, r16
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	08 95       	ret

00000ea0 <RAMRead>:

char* RAMRead(uint32_t startAddress, uint16_t length, char* buffer)
{
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	6b 01       	movw	r12, r22
     eb2:	7c 01       	movw	r14, r24
     eb4:	8a 01       	movw	r16, r20
     eb6:	e9 01       	movw	r28, r18
	setRAMStatus(SEQ);
     eb8:	80 e4       	ldi	r24, 0x40	; 64
     eba:	0e 94 c8 06 	call	0xd90	; 0xd90 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     ebe:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 ef 06 	call	0xdde	; 0xdde <SPI_ReadAddress>
	int i; 
	for(i=0; i<length; i++)
     ec8:	01 15       	cp	r16, r1
     eca:	11 05       	cpc	r17, r1
     ecc:	91 f0       	breq	.+36     	; 0xef2 <RAMRead+0x52>
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	e1 2c       	mov	r14, r1
     ed4:	f1 2c       	mov	r15, r1
	{
		*(buffer + i) = SPI_ReadData();
     ed6:	6e 01       	movw	r12, r28
     ed8:	c6 0e       	add	r12, r22
     eda:	d7 1e       	adc	r13, r23
     edc:	0e 94 05 07 	call	0xe0a	; 0xe0a <SPI_ReadData>
     ee0:	f6 01       	movw	r30, r12
     ee2:	80 83       	st	Z, r24
{
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	int i; 
	for(i=0; i<length; i++)
     ee4:	ff ef       	ldi	r31, 0xFF	; 255
     ee6:	ef 1a       	sub	r14, r31
     ee8:	ff 0a       	sbc	r15, r31
     eea:	b7 01       	movw	r22, r14
     eec:	e0 16       	cp	r14, r16
     eee:	f1 06       	cpc	r15, r17
     ef0:	91 f7       	brne	.-28     	; 0xed6 <RAMRead+0x36>
	{
		*(buffer + i) = SPI_ReadData();
	}
	RAM_PORT |= (1<<RAM_CS); 
     ef2:	a3 9a       	sbi	0x14, 3	; 20
	//printf("%d\n", buffer);
	return buffer; 
}
     ef4:	ce 01       	movw	r24, r28
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	08 95       	ret

00000f08 <RAMPrint>:

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	c6 2f       	mov	r28, r22
     f16:	d7 2f       	mov	r29, r23
     f18:	f8 2e       	mov	r15, r24
     f1a:	e9 2e       	mov	r14, r25
     f1c:	8a 01       	movw	r16, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     f1e:	80 e4       	ldi	r24, 0x40	; 64
     f20:	0e 94 c8 06 	call	0xd90	; 0xd90 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     f24:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     f26:	6c 2f       	mov	r22, r28
     f28:	7d 2f       	mov	r23, r29
     f2a:	8f 2d       	mov	r24, r15
     f2c:	9e 2d       	mov	r25, r14
     f2e:	0e 94 ef 06 	call	0xdde	; 0xdde <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	86 e4       	ldi	r24, 0x46	; 70
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	9f 93       	push	r25
     f40:	8f 93       	push	r24
     f42:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
	int i; 
	for(i=0; i<length; i++)
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	01 15       	cp	r16, r1
     f54:	11 05       	cpc	r17, r1
     f56:	61 f0       	breq	.+24     	; 0xf70 <RAMPrint+0x68>
     f58:	c0 e0       	ldi	r28, 0x00	; 0
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("%c", SPI_ReadData());
     f5c:	0e 94 05 07 	call	0xe0a	; 0xe0a <SPI_ReadData>
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 6d 0b 	call	0x16da	; 0x16da <putchar>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     f66:	21 96       	adiw	r28, 0x01	; 1
     f68:	c0 17       	cp	r28, r16
     f6a:	d1 07       	cpc	r29, r17
     f6c:	b9 f7       	brne	.-18     	; 0xf5c <RAMPrint+0x54>
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <RAMPrint+0x6c>
     f70:	00 e0       	ldi	r16, 0x00	; 0
     f72:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("%c", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     f74:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     f76:	1f 93       	push	r17
     f78:	0f 93       	push	r16
     f7a:	87 e5       	ldi	r24, 0x57	; 87
     f7c:	94 e0       	ldi	r25, 0x04	; 4
     f7e:	9f 93       	push	r25
     f80:	8f 93       	push	r24
     f82:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
}
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	08 95       	ret

00000f9c <RAMWriteByte>:

void RAMWriteByte(char data, uint16_t address)
{
     f9c:	cf 93       	push	r28
     f9e:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     fa0:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 d4 06 	call	0xda8	; 0xda8 <SPI_WriteAddress>
	SPI_WriteData(data);
     faa:	8c 2f       	mov	r24, r28
     fac:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     fb0:	a3 9a       	sbi	0x14, 3	; 20
}
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS)|(1<<HOLD);
     fb6:	84 b1       	in	r24, 0x04	; 4
     fb8:	87 68       	ori	r24, 0x87	; 135
     fba:	84 b9       	out	0x04, r24	; 4
	//Set MISO as Input 
	SPI_DDR &= ~(1<<MISO);
     fbc:	23 98       	cbi	0x04, 3	; 4
	SPI_PORT |= (1<<HOLD);
     fbe:	2f 9a       	sbi	0x05, 7	; 5
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     fc0:	9b 9a       	sbi	0x13, 3	; 19
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
     fc2:	83 e5       	ldi	r24, 0x53	; 83
     fc4:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	82 e3       	ldi	r24, 0x32	; 50
     fcc:	0e 94 ce 07 	call	0xf9c	; 0xf9c <RAMWriteByte>
     fd0:	08 95       	ret

00000fd2 <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint16_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     fd2:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     fd4:	bc 01       	movw	r22, r24
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 ef 06 	call	0xdde	; 0xdde <SPI_ReadAddress>
	char data = SPI_ReadData();
     fde:	0e 94 05 07 	call	0xe0a	; 0xe0a <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     fe2:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     fe4:	08 95       	ret

00000fe6 <networkScan>:
	sendCommand(SET, SYSTEM_PRINT_LEVEL, ONE);
}

char* networkScan()
{
	updateRAMAddress(WIFI_RAW_ADDRESS);
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	cb 01       	movw	r24, r22
     fec:	0e 94 c6 09 	call	0x138c	; 0x138c <updateRAMAddress>
	enableReceiveINT(); 
     ff0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <enableReceiveINT>
	sendCommand(NOPREFIX, SCAN, NOVAL);
     ff4:	48 e4       	ldi	r20, 0x48	; 72
     ff6:	53 e0       	ldi	r21, 0x03	; 3
     ff8:	62 ec       	ldi	r22, 0xC2	; 194
     ffa:	74 e0       	ldi	r23, 0x04	; 4
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	0e 94 cf 09 	call	0x139e	; 0x139e <sendCommand>
	//_delay_ms(3000);
	PORTD &= ~(1<<RTS);
    1002:	5d 98       	cbi	0x0b, 5	; 11
	receiveStatus(); 
    1004:	0e 94 f7 08 	call	0x11ee	; 0x11ee <receiveStatus>
	//{
		//printf("%c", networks[i]);
	//}
	//printf("\n");
	return ""; 
}
    1008:	88 e4       	ldi	r24, 0x48	; 72
    100a:	93 e0       	ldi	r25, 0x03	; 3
    100c:	08 95       	ret

0000100e <networkConnect>:

int networkConnect(char* SSID, char* password)
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	eb 01       	movw	r28, r22
	//printf("Begin Network Connection.\n");
	sendCommand(SET, WLAN_SSID, SSID);
    1014:	ac 01       	movw	r20, r24
    1016:	67 ec       	ldi	r22, 0xC7	; 199
    1018:	74 e0       	ldi	r23, 0x04	; 4
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	0e 94 cf 09 	call	0x139e	; 0x139e <sendCommand>
	//printf("Set Password\n");
	sendCommand(SET, WLAN_PWD, password);
    1020:	ae 01       	movw	r20, r28
    1022:	61 ed       	ldi	r22, 0xD1	; 209
    1024:	74 e0       	ldi	r23, 0x04	; 4
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	0e 94 cf 09 	call	0x139e	; 0x139e <sendCommand>
	sendCommand(NOPREFIX, HTTP_GET, "www.wi-pro.us"); 
    102c:	44 e3       	ldi	r20, 0x34	; 52
    102e:	52 e0       	ldi	r21, 0x02	; 2
    1030:	67 e6       	ldi	r22, 0x67	; 103
    1032:	72 e0       	ldi	r23, 0x02	; 2
    1034:	8f ef       	ldi	r24, 0xFF	; 255
    1036:	0e 94 cf 09 	call	0x139e	; 0x139e <sendCommand>
	if(errorCheck())
    103a:	0e 94 ae 09 	call	0x135c	; 0x135c <errorCheck>
    103e:	21 e0       	ldi	r18, 0x01	; 1
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	89 2b       	or	r24, r25
    1044:	11 f0       	breq	.+4      	; 0x104a <networkConnect+0x3c>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
		return 0; 
	else
		return 1; 
}
    104a:	c9 01       	movw	r24, r18
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <networkQueryString>:
	else
		return 1; 
}

uint16_t networkQueryString(char* filepath)
{
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	ec 01       	movw	r28, r24
	char* footer = " HTTP/1.1\nhost: www.wi-pro.us\n\n";
	char data; 
	uint16_t i = 0;
	uint16_t j = 0;  
	uint8_t lineNum = 0; 
	RAMWrite(filepath, WIFI_QSTRING_ADDRESS + j, strlen(filepath));
    1060:	fc 01       	movw	r30, r24
    1062:	01 90       	ld	r0, Z+
    1064:	00 20       	and	r0, r0
    1066:	e9 f7       	brne	.-6      	; 0x1062 <networkQueryString+0x10>
    1068:	31 97       	sbiw	r30, 0x01	; 1
    106a:	af 01       	movw	r20, r30
    106c:	48 1b       	sub	r20, r24
    106e:	59 0b       	sbc	r21, r25
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	74 e0       	ldi	r23, 0x04	; 4
    1074:	0e 94 0b 07 	call	0xe16	; 0xe16 <RAMWrite>
	j+=strlen(filepath); 
    1078:	fe 01       	movw	r30, r28
    107a:	01 90       	ld	r0, Z+
    107c:	00 20       	and	r0, r0
    107e:	e9 f7       	brne	.-6      	; 0x107a <networkQueryString+0x28>
    1080:	31 97       	sbiw	r30, 0x01	; 1
    1082:	6f 01       	movw	r12, r30
    1084:	cc 1a       	sub	r12, r28
    1086:	dd 0a       	sbc	r13, r29
    1088:	c1 e0       	ldi	r28, 0x01	; 1
    108a:	d0 e0       	ldi	r29, 0x00	; 0
	//printf("Network Query String!\n");
	char* footer = " HTTP/1.1\nhost: www.wi-pro.us\n\n";
	char data; 
	uint16_t i = 0;
	uint16_t j = 0;  
	uint8_t lineNum = 0; 
    108c:	e1 2c       	mov	r14, r1
	RAMWrite(filepath, WIFI_QSTRING_ADDRESS + j, strlen(filepath));
	j+=strlen(filepath); 
	
	do 
	{
		data = RAMReadByte(WIFI_RAW_ADDRESS + i);
    108e:	ce 01       	movw	r24, r28
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <RAMReadByte>
    1096:	18 2f       	mov	r17, r24
		//throw out a specified number of lines before recording 
		//printf("RAW: %c, 0x%02x Add: 0x%04x\n", data, data, WIFI_RAW_ADDRESS + i);
		if(lineNum <= 2)
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	8e 15       	cp	r24, r14
    109c:	20 f0       	brcs	.+8      	; 0x10a6 <networkQueryString+0x54>
		{
			if(data == '\n')
    109e:	1a 30       	cpi	r17, 0x0A	; 10
    10a0:	51 f5       	brne	.+84     	; 0x10f6 <networkQueryString+0xa4>
				lineNum++;
    10a2:	e3 94       	inc	r14
    10a4:	28 c0       	rjmp	.+80     	; 0x10f6 <networkQueryString+0xa4>
			i++;  
		}
		
		else
		{
			switch(data)
    10a6:	1d 30       	cpi	r17, 0x0D	; 13
    10a8:	41 f1       	breq	.+80     	; 0x10fa <networkQueryString+0xa8>
    10aa:	18 f4       	brcc	.+6      	; 0x10b2 <networkQueryString+0x60>
    10ac:	1a 30       	cpi	r17, 0x0A	; 10
    10ae:	29 f1       	breq	.+74     	; 0x10fa <networkQueryString+0xa8>
    10b0:	1a c0       	rjmp	.+52     	; 0x10e6 <networkQueryString+0x94>
    10b2:	10 32       	cpi	r17, 0x20	; 32
    10b4:	19 f0       	breq	.+6      	; 0x10bc <networkQueryString+0x6a>
    10b6:	13 32       	cpi	r17, 0x23	; 35
    10b8:	01 f1       	breq	.+64     	; 0x10fa <networkQueryString+0xa8>
    10ba:	15 c0       	rjmp	.+42     	; 0x10e6 <networkQueryString+0x94>
			{
				case ' ':
					//printf("Found a space!\n");
					RAMWriteByte('%', WIFI_QSTRING_ADDRESS + j);
    10bc:	b6 01       	movw	r22, r12
    10be:	7c 5f       	subi	r23, 0xFC	; 252
    10c0:	85 e2       	ldi	r24, 0x25	; 37
    10c2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <RAMWriteByte>
					RAMWriteByte('2', WIFI_QSTRING_ADDRESS + j+1);
    10c6:	b6 01       	movw	r22, r12
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7b 4f       	sbci	r23, 0xFB	; 251
    10cc:	82 e3       	ldi	r24, 0x32	; 50
    10ce:	0e 94 ce 07 	call	0xf9c	; 0xf9c <RAMWriteByte>
					RAMWriteByte('0', WIFI_QSTRING_ADDRESS + j+2);
    10d2:	b6 01       	movw	r22, r12
    10d4:	6e 5f       	subi	r22, 0xFE	; 254
    10d6:	7b 4f       	sbci	r23, 0xFB	; 251
    10d8:	80 e3       	ldi	r24, 0x30	; 48
    10da:	0e 94 ce 07 	call	0xf9c	; 0xf9c <RAMWriteByte>
					i++;
					j+=3;
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	c8 0e       	add	r12, r24
    10e2:	d1 1c       	adc	r13, r1
					break;
    10e4:	0a c0       	rjmp	.+20     	; 0x10fa <networkQueryString+0xa8>
				case '\r':
					//printf("Found a carriage return!\n");
					i++;
				break;
				default:
					RAMWriteByte(data, WIFI_QSTRING_ADDRESS + j);
    10e6:	b6 01       	movw	r22, r12
    10e8:	7c 5f       	subi	r23, 0xFC	; 252
    10ea:	81 2f       	mov	r24, r17
    10ec:	0e 94 ce 07 	call	0xf9c	; 0xf9c <RAMWriteByte>
					//printf("Query: %c, 0x%02x Add: 0x%04x\n", RAMReadByte(WIFI_QSTRING_ADDRESS + j), RAMReadByte(WIFI_QSTRING_ADDRESS + j), WIFI_QSTRING_ADDRESS +j);
					i++;
					j++;
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	c8 1a       	sub	r12, r24
    10f4:	d8 0a       	sbc	r13, r24
				break;
			}	
		}

	} while (data != 0x00 && i < WIFI_QSTRING_SIZE - 2);
    10f6:	11 23       	and	r17, r17
    10f8:	29 f0       	breq	.+10     	; 0x1104 <networkQueryString+0xb2>
    10fa:	21 96       	adiw	r28, 0x01	; 1
    10fc:	cf 3f       	cpi	r28, 0xFF	; 255
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	d8 07       	cpc	r29, r24
    1102:	29 f6       	brne	.-118    	; 0x108e <networkQueryString+0x3c>
	
	//Overwrite the terminating byte with two new lines for the http request 
	RAMWrite(footer, WIFI_QSTRING_ADDRESS + j-1, strlen(footer));
    1104:	b6 01       	movw	r22, r12
    1106:	61 50       	subi	r22, 0x01	; 1
    1108:	7c 4f       	sbci	r23, 0xFC	; 252
    110a:	4f e1       	ldi	r20, 0x1F	; 31
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	89 ee       	ldi	r24, 0xE9	; 233
    1110:	94 e0       	ldi	r25, 0x04	; 4
    1112:	0e 94 0b 07 	call	0xe16	; 0xe16 <RAMWrite>
	j+=strlen(footer)-1; 
	
	return j; 
}
    1116:	c6 01       	movw	r24, r12
    1118:	4e 96       	adiw	r24, 0x1e	; 30
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	ef 90       	pop	r14
    1122:	df 90       	pop	r13
    1124:	cf 90       	pop	r12
    1126:	08 95       	ret

00001128 <updateFileWifi>:
	disableReceiveINT(); 
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
}

void updateFileWifi(char* filepath)
{
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
    112e:	0e 94 ef 08 	call	0x11de	; 0x11de <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL); 	
    1132:	48 e4       	ldi	r20, 0x48	; 72
    1134:	53 e0       	ldi	r21, 0x03	; 3
    1136:	be 01       	movw	r22, r28
    1138:	8f ef       	ldi	r24, 0xFF	; 255
    113a:	0e 94 cf 09 	call	0x139e	; 0x139e <sendCommand>
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <uart_init>:
	testPrint = 1; 
}

void uart_init()
{
	UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
    1144:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
    1148:	87 e0       	ldi	r24, 0x07	; 7
    114a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); // enable Rx & Tx
    114e:	e1 ec       	ldi	r30, 0xC1	; 193
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	88 e1       	ldi	r24, 0x18	; 24
    1154:	80 83       	st	Z, r24
	UCSR0C =  (1<<UCSZ01)|(1<<UCSZ00); // config USART; 8N1
    1156:	86 e0       	ldi	r24, 0x06	; 6
    1158:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B |= (1<<RXCIE0);	//Enable Receive Interrupt 
    115c:	80 81       	ld	r24, Z
    115e:	80 68       	ori	r24, 0x80	; 128
    1160:	80 83       	st	Z, r24
    1162:	08 95       	ret

00001164 <uart_send>:
	}
	return count; 
}

int uart_send(char* data, unsigned int length)
{
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
	//UCSR1B |= (1<<RXCIE1);
	receiveWifiFlag = 0;
    1168:	10 92 c4 05 	sts	0x05C4, r1
	memset(receiveBuffer, 0x00, MaxRecSize);
    116c:	29 e1       	ldi	r18, 0x19	; 25
    116e:	e3 ed       	ldi	r30, 0xD3	; 211
    1170:	f6 e0       	ldi	r31, 0x06	; 6
    1172:	df 01       	movw	r26, r30
    1174:	1d 92       	st	X+, r1
    1176:	2a 95       	dec	r18
    1178:	e9 f7       	brne	.-6      	; 0x1174 <uart_send+0x10>
	//PORTD |= (1<<RTS);
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
    117a:	61 15       	cp	r22, r1
    117c:	71 05       	cpc	r23, r1
    117e:	a9 f0       	breq	.+42     	; 0x11aa <uart_send+0x46>
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
}

int uart_send(char* data, unsigned int length)
{
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
    1184:	50 e0       	ldi	r21, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR1A & (1<<UDRE1)));
    1186:	e8 ec       	ldi	r30, 0xC8	; 200
    1188:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = data[i];
    118a:	ae ec       	ldi	r26, 0xCE	; 206
    118c:	b0 e0       	ldi	r27, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR1A & (1<<UDRE1)));
    118e:	40 81       	ld	r20, Z
    1190:	45 ff       	sbrs	r20, 5
    1192:	fd cf       	rjmp	.-6      	; 0x118e <uart_send+0x2a>
		UDR1 = data[i];
    1194:	ec 01       	movw	r28, r24
    1196:	c2 0f       	add	r28, r18
    1198:	d3 1f       	adc	r29, r19
    119a:	28 81       	ld	r18, Y
    119c:	2c 93       	st	X, r18
		i++;
    119e:	5f 5f       	subi	r21, 0xFF	; 255
	//PORTD |= (1<<RTS);
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
    11a0:	25 2f       	mov	r18, r21
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	26 17       	cp	r18, r22
    11a6:	37 07       	cpc	r19, r23
    11a8:	90 f3       	brcs	.-28     	; 0x118e <uart_send+0x2a>
		while(!(UCSR1A & (1<<UDRE1)));
		UDR1 = data[i];
		i++;
	}
	//while(!(PIND & (1<<CTS))){_delay_us(100);}
	printf("Sent!\n");
    11aa:	88 ea       	ldi	r24, 0xA8	; 168
    11ac:	92 e0       	ldi	r25, 0x02	; 2
    11ae:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
	return 0;
}
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <uart_receiveChar>:
}

unsigned char uart_receiveChar()
{
	//printf("Receiving...\n");
	while (!(UCSR0A & (1<<RXC0)));
    11bc:	e0 ec       	ldi	r30, 0xC0	; 192
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	88 23       	and	r24, r24
    11c4:	ec f7       	brge	.-6      	; 0x11c0 <uart_receiveChar+0x4>
	return UDR0; 
    11c6:	80 91 c6 00 	lds	r24, 0x00C6
}
    11ca:	08 95       	ret

000011cc <enableReceiveINT>:

int enableReceiveINT()
{
	UCSR0B |= (1<<RXCIE0);
    11cc:	e1 ec       	ldi	r30, 0xC1	; 193
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	80 68       	ori	r24, 0x80	; 128
    11d4:	80 83       	st	Z, r24
	sei(); 
    11d6:	78 94       	sei
	return 1; 
}
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	08 95       	ret

000011de <disableReceiveINT>:

int disableReceiveINT()
{
	UCSR0B &= ~(1<<RXCIE0);
    11de:	e1 ec       	ldi	r30, 0xC1	; 193
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8f 77       	andi	r24, 0x7F	; 127
    11e6:	80 83       	st	Z, r24
	return 1; 
}
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	08 95       	ret

000011ee <receiveStatus>:
	return ""; 
}

int receiveStatus()
{
	while(receiveWifiFlag == 0)
    11ee:	80 91 c4 05 	lds	r24, 0x05C4
    11f2:	81 11       	cpse	r24, r1
    11f4:	08 c0       	rjmp	.+16     	; 0x1206 <receiveStatus+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11f6:	81 e2       	ldi	r24, 0x21	; 33
    11f8:	8a 95       	dec	r24
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <receiveStatus+0xa>
    11fc:	00 00       	nop
    11fe:	80 91 c4 05 	lds	r24, 0x05C4
    1202:	88 23       	and	r24, r24
    1204:	c1 f3       	breq	.-16     	; 0x11f6 <receiveStatus+0x8>
		//printf("Receive Flag: %d\n", receiveWifiFlag);
		//printf("Loooop\n");
	}
	
	return 1; 
}
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	08 95       	ret

0000120c <buildTransmissionLength>:

unsigned int buildTransmissionLength()
{
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
	if(testPrint)
    1214:	80 91 c7 05 	lds	r24, 0x05C7
    1218:	90 91 c8 05 	lds	r25, 0x05C8
    121c:	89 2b       	or	r24, r25
    121e:	f1 f0       	breq	.+60     	; 0x125c <buildTransmissionLength+0x50>
    1220:	c0 e0       	ldi	r28, 0x00	; 0
    1222:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
		{
			printf("Value: %c, Address: %p\n", receiveBuffer[i], receiveBuffer + i);
    1224:	0b e3       	ldi	r16, 0x3B	; 59
    1226:	15 e0       	ldi	r17, 0x05	; 5
    1228:	fe 01       	movw	r30, r28
    122a:	ed 52       	subi	r30, 0x2D	; 45
    122c:	f9 4f       	sbci	r31, 0xF9	; 249
    122e:	80 81       	ld	r24, Z
    1230:	ff 93       	push	r31
    1232:	ef 93       	push	r30
    1234:	1f 92       	push	r1
    1236:	8f 93       	push	r24
    1238:	1f 93       	push	r17
    123a:	0f 93       	push	r16
    123c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
unsigned int buildTransmissionLength()
{
	if(testPrint)
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
    1240:	21 96       	adiw	r28, 0x01	; 1
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	c7 30       	cpi	r28, 0x07	; 7
    1250:	d1 05       	cpc	r29, r1
    1252:	51 f7       	brne	.-44     	; 0x1228 <buildTransmissionLength+0x1c>
		{
			printf("Value: %c, Address: %p\n", receiveBuffer[i], receiveBuffer + i);
			//printf("0x%02x ", receiveBuffer[i]);
		}
		printf("\n");
    1254:	8a e0       	ldi	r24, 0x0A	; 10
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 6d 0b 	call	0x16da	; 0x16da <putchar>
	}
	transLength = 0; 
    125c:	10 92 c3 05 	sts	0x05C3, r1
    1260:	10 92 c2 05 	sts	0x05C2, r1
	transLength += (receiveBuffer[ones] & 0x0F);
    1264:	20 91 d9 06 	lds	r18, 0x06D9
    1268:	80 91 c2 05 	lds	r24, 0x05C2
    126c:	90 91 c3 05 	lds	r25, 0x05C3
    1270:	2f 70       	andi	r18, 0x0F	; 15
    1272:	82 0f       	add	r24, r18
    1274:	91 1d       	adc	r25, r1
    1276:	90 93 c3 05 	sts	0x05C3, r25
    127a:	80 93 c2 05 	sts	0x05C2, r24
	transLength += (receiveBuffer[tens] & 0x0F) * 10; 
    127e:	80 91 d8 06 	lds	r24, 0x06D8
    1282:	20 91 c2 05 	lds	r18, 0x05C2
    1286:	30 91 c3 05 	lds	r19, 0x05C3
    128a:	8f 70       	andi	r24, 0x0F	; 15
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	ac 01       	movw	r20, r24
    1290:	44 0f       	add	r20, r20
    1292:	55 1f       	adc	r21, r21
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	84 0f       	add	r24, r20
    12a2:	95 1f       	adc	r25, r21
    12a4:	82 0f       	add	r24, r18
    12a6:	93 1f       	adc	r25, r19
    12a8:	90 93 c3 05 	sts	0x05C3, r25
    12ac:	80 93 c2 05 	sts	0x05C2, r24
	transLength += (receiveBuffer[hundreds] & 0x0F) * 100; 
    12b0:	20 91 d7 06 	lds	r18, 0x06D7
    12b4:	80 91 c2 05 	lds	r24, 0x05C2
    12b8:	90 91 c3 05 	lds	r25, 0x05C3
    12bc:	2f 70       	andi	r18, 0x0F	; 15
    12be:	34 e6       	ldi	r19, 0x64	; 100
    12c0:	23 9f       	mul	r18, r19
    12c2:	80 0d       	add	r24, r0
    12c4:	91 1d       	adc	r25, r1
    12c6:	11 24       	eor	r1, r1
    12c8:	90 93 c3 05 	sts	0x05C3, r25
    12cc:	80 93 c2 05 	sts	0x05C2, r24
	transLength += (receiveBuffer[thousands] & 0x0F) * 1000; 
    12d0:	60 91 d6 06 	lds	r22, 0x06D6
    12d4:	80 91 c2 05 	lds	r24, 0x05C2
    12d8:	90 91 c3 05 	lds	r25, 0x05C3
    12dc:	6f 70       	andi	r22, 0x0F	; 15
    12de:	48 ee       	ldi	r20, 0xE8	; 232
    12e0:	53 e0       	ldi	r21, 0x03	; 3
    12e2:	64 9f       	mul	r22, r20
    12e4:	90 01       	movw	r18, r0
    12e6:	65 9f       	mul	r22, r21
    12e8:	30 0d       	add	r19, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
    12f0:	90 93 c3 05 	sts	0x05C3, r25
    12f4:	80 93 c2 05 	sts	0x05C2, r24
	transLength += (receiveBuffer[tenThousands] & 0x0F) * 10000; 
    12f8:	60 91 d5 06 	lds	r22, 0x06D5
    12fc:	80 91 c2 05 	lds	r24, 0x05C2
    1300:	90 91 c3 05 	lds	r25, 0x05C3
    1304:	6f 70       	andi	r22, 0x0F	; 15
    1306:	40 e1       	ldi	r20, 0x10	; 16
    1308:	57 e2       	ldi	r21, 0x27	; 39
    130a:	64 9f       	mul	r22, r20
    130c:	90 01       	movw	r18, r0
    130e:	65 9f       	mul	r22, r21
    1310:	30 0d       	add	r19, r0
    1312:	11 24       	eor	r1, r1
    1314:	82 0f       	add	r24, r18
    1316:	93 1f       	adc	r25, r19
    1318:	90 93 c3 05 	sts	0x05C3, r25
    131c:	80 93 c2 05 	sts	0x05C2, r24
	//if(transLength < MaxRecSize)
	return transLength; 
    1320:	80 91 c2 05 	lds	r24, 0x05C2
    1324:	90 91 c3 05 	lds	r25, 0x05C3
	//else
		////8 is the length of the header 
		//return MaxRecSize - 8; 
}
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <getTransmissionLength>:

uint16_t getTransmissionLength()
{
	return transLength; 
    1332:	80 91 c2 05 	lds	r24, 0x05C2
    1336:	90 91 c3 05 	lds	r25, 0x05C3
}
    133a:	08 95       	ret

0000133c <getMessageHeader>:

char* getMessageHeader()
{
    133c:	e8 e4       	ldi	r30, 0x48	; 72
    133e:	f3 e0       	ldi	r31, 0x03	; 3
	char* header = ""; 
	
	for(int i = 0; i < endHeader; i++)
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
	{
		*(header + i) = receiveBuffer[i]; 
    1344:	dc 01       	movw	r26, r24
    1346:	ad 52       	subi	r26, 0x2D	; 45
    1348:	b9 4f       	sbci	r27, 0xF9	; 249
    134a:	2c 91       	ld	r18, X
    134c:	21 93       	st	Z+, r18

char* getMessageHeader()
{
	char* header = ""; 
	
	for(int i = 0; i < endHeader; i++)
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	87 30       	cpi	r24, 0x07	; 7
    1352:	91 05       	cpc	r25, r1
    1354:	b9 f7       	brne	.-18     	; 0x1344 <getMessageHeader+0x8>
	{
		*(header + i) = receiveBuffer[i]; 
	}
	
	return header; 
}
    1356:	88 e4       	ldi	r24, 0x48	; 72
    1358:	93 e0       	ldi	r25, 0x03	; 3
    135a:	08 95       	ret

0000135c <errorCheck>:

int errorCheck() 
{
	while(!receiveWifiFlag & 1)
    135c:	80 91 c4 05 	lds	r24, 0x05C4
    1360:	81 11       	cpse	r24, r1
    1362:	08 c0       	rjmp	.+16     	; 0x1374 <errorCheck+0x18>
    1364:	81 e2       	ldi	r24, 0x21	; 33
    1366:	8a 95       	dec	r24
    1368:	f1 f7       	brne	.-4      	; 0x1366 <errorCheck+0xa>
    136a:	00 00       	nop
    136c:	80 91 c4 05 	lds	r24, 0x05C4
    1370:	88 23       	and	r24, r24
    1372:	c1 f3       	breq	.-16     	; 0x1364 <errorCheck+0x8>
		//While loop does not work correctly without a delay
		//An issue with the compiler or the stack pointer when invoking the interrupt
		_delay_us(100);
	}
	
	char* header = getMessageHeader();
    1374:	0e 94 9e 09 	call	0x133c	; 0x133c <getMessageHeader>
	//0 denotes a successful command 
	if(header[errorCode] != '0')
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	fc 01       	movw	r30, r24
    137e:	81 81       	ldd	r24, Z+1	; 0x01
    1380:	80 33       	cpi	r24, 0x30	; 48
    1382:	11 f4       	brne	.+4      	; 0x1388 <errorCheck+0x2c>
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
		return 1; 
	else 
		return 0; 
}
    1388:	c9 01       	movw	r24, r18
    138a:	08 95       	ret

0000138c <updateRAMAddress>:

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
    138c:	60 93 be 05 	sts	0x05BE, r22
    1390:	70 93 bf 05 	sts	0x05BF, r23
    1394:	80 93 c0 05 	sts	0x05C0, r24
    1398:	90 93 c1 05 	sts	0x05C1, r25
    139c:	08 95       	ret

0000139e <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	ea 01       	movw	r28, r20
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	31 f0       	breq	.+12     	; 0x13b8 <sendCommand+0x1a>
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	71 f0       	breq	.+28     	; 0x13cc <sendCommand+0x2e>
    13b0:	8f 3f       	cpi	r24, 0xFF	; 255
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <sendCommand+0x18>
    13b4:	6c c0       	rjmp	.+216    	; 0x148e <sendCommand+0xf0>
    13b6:	17 c0       	rjmp	.+46     	; 0x13e6 <sendCommand+0x48>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
    13b8:	85 e0       	ldi	r24, 0x05	; 5
    13ba:	e3 e5       	ldi	r30, 0x53	; 83
    13bc:	f5 e0       	ldi	r31, 0x05	; 5
    13be:	ac ee       	ldi	r26, 0xEC	; 236
    13c0:	b6 e0       	ldi	r27, 0x06	; 6
    13c2:	01 90       	ld	r0, Z+
    13c4:	0d 92       	st	X+, r0
    13c6:	8a 95       	dec	r24
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <sendCommand+0x24>
			//strcat(fullCommand, "get ");
			break; 
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <sendCommand+0x48>
		case SET: 
			strcat(fullCommand, "set ");
    13cc:	ac ee       	ldi	r26, 0xEC	; 236
    13ce:	b6 e0       	ldi	r27, 0x06	; 6
    13d0:	0d 90       	ld	r0, X+
    13d2:	00 20       	and	r0, r0
    13d4:	e9 f7       	brne	.-6      	; 0x13d0 <sendCommand+0x32>
    13d6:	11 97       	sbiw	r26, 0x01	; 1
    13d8:	85 e0       	ldi	r24, 0x05	; 5
    13da:	e8 e5       	ldi	r30, 0x58	; 88
    13dc:	f5 e0       	ldi	r31, 0x05	; 5
    13de:	01 90       	ld	r0, Z+
    13e0:	0d 92       	st	X+, r0
    13e2:	8a 95       	dec	r24
    13e4:	e1 f7       	brne	.-8      	; 0x13de <sendCommand+0x40>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
    13e6:	8c ee       	ldi	r24, 0xEC	; 236
    13e8:	96 e0       	ldi	r25, 0x06	; 6
    13ea:	0e 94 15 0b 	call	0x162a	; 0x162a <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	c8 34       	cpi	r28, 0x48	; 72
    13f2:	d8 07       	cpc	r29, r24
    13f4:	79 f0       	breq	.+30     	; 0x1414 <sendCommand+0x76>
	{
		strcat(fullCommand, " ");
    13f6:	ec ee       	ldi	r30, 0xEC	; 236
    13f8:	f6 e0       	ldi	r31, 0x06	; 6
    13fa:	01 90       	ld	r0, Z+
    13fc:	00 20       	and	r0, r0
    13fe:	e9 f7       	brne	.-6      	; 0x13fa <sendCommand+0x5c>
    1400:	31 97       	sbiw	r30, 0x01	; 1
    1402:	80 e2       	ldi	r24, 0x20	; 32
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
		strcat(fullCommand, value);
    140a:	be 01       	movw	r22, r28
    140c:	8c ee       	ldi	r24, 0xEC	; 236
    140e:	96 e0       	ldi	r25, 0x06	; 6
    1410:	0e 94 15 0b 	call	0x162a	; 0x162a <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
    1414:	cc ee       	ldi	r28, 0xEC	; 236
    1416:	d6 e0       	ldi	r29, 0x06	; 6
    1418:	fe 01       	movw	r30, r28
    141a:	01 90       	ld	r0, Z+
    141c:	00 20       	and	r0, r0
    141e:	e9 f7       	brne	.-6      	; 0x141a <sendCommand+0x7c>
    1420:	31 97       	sbiw	r30, 0x01	; 1
    1422:	8d e0       	ldi	r24, 0x0D	; 13
    1424:	9a e0       	ldi	r25, 0x0A	; 10
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	80 83       	st	Z, r24
    142a:	91 83       	std	Z+1, r25	; 0x01
    142c:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
    142e:	fe 01       	movw	r30, r28
    1430:	01 90       	ld	r0, Z+
    1432:	00 20       	and	r0, r0
    1434:	e9 f7       	brne	.-6      	; 0x1430 <sendCommand+0x92>
    1436:	31 97       	sbiw	r30, 0x01	; 1
    1438:	8f 01       	movw	r16, r30
    143a:	0c 5e       	subi	r16, 0xEC	; 236
    143c:	16 40       	sbci	r17, 0x06	; 6
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	1f 93       	push	r17
    1444:	0f 93       	push	r16
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	8d e5       	ldi	r24, 0x5D	; 93
    144c:	95 e0       	ldi	r25, 0x05	; 5
    144e:	9f 93       	push	r25
    1450:	8f 93       	push	r24
    1452:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
	uart_send(fullCommand, length);
    1456:	b8 01       	movw	r22, r16
    1458:	ce 01       	movw	r24, r28
    145a:	0e 94 b2 08 	call	0x1164	; 0x1164 <uart_send>
	memset(fullCommand, 0x00, 100);
    145e:	84 e6       	ldi	r24, 0x64	; 100
    1460:	fe 01       	movw	r30, r28
    1462:	11 92       	st	Z+, r1
    1464:	8a 95       	dec	r24
    1466:	e9 f7       	brne	.-6      	; 0x1462 <sendCommand+0xc4>
		//printf("Loop\n");
	//}
	//free(fullCommand);
	//printf("Freed!\n");
	//free(command);
	printf("Freed!\n");
    1468:	82 e8       	ldi	r24, 0x82	; 130
    146a:	95 e0       	ldi	r25, 0x05	; 5
    146c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
	printf("Returning!\n");
    1470:	89 e8       	ldi	r24, 0x89	; 137
    1472:	95 e0       	ldi	r25, 0x05	; 5
    1474:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
	return 1; 
    1478:	8d b7       	in	r24, 0x3d	; 61
    147a:	9e b7       	in	r25, 0x3e	; 62
    147c:	08 96       	adiw	r24, 0x08	; 8
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	9e bf       	out	0x3e, r25	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	8d bf       	out	0x3d, r24	; 61
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <sendCommand+0xf4>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
	//printf("Freed!\n");
	//free(command);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <__vector_25>:

ISR(USART0_RX_vect)
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	ef 93       	push	r30
    14c0:	ff 93       	push	r31
	//printf("Receive Interrupt!\n");
	cli();
    14c2:	f8 94       	cli
	//PORTD &= ~(1<<CTS);
	if(!bufferStart)
    14c4:	80 91 c9 05 	lds	r24, 0x05C9
    14c8:	90 91 ca 05 	lds	r25, 0x05CA
    14cc:	89 2b       	or	r24, r25
    14ce:	d1 f4       	brne	.+52     	; 0x1504 <__vector_25+0x68>
	{
		receiveBuffer[i] = uart_receiveChar();
    14d0:	c0 91 c5 05 	lds	r28, 0x05C5
    14d4:	d0 91 c6 05 	lds	r29, 0x05C6
    14d8:	0e 94 de 08 	call	0x11bc	; 0x11bc <uart_receiveChar>
    14dc:	cd 52       	subi	r28, 0x2D	; 45
    14de:	d9 4f       	sbci	r29, 0xF9	; 249
    14e0:	88 83       	st	Y, r24
		if(receiveBuffer[i] == 'R')
    14e2:	e0 91 c5 05 	lds	r30, 0x05C5
    14e6:	f0 91 c6 05 	lds	r31, 0x05C6
    14ea:	ed 52       	subi	r30, 0x2D	; 45
    14ec:	f9 4f       	sbci	r31, 0xF9	; 249
    14ee:	80 81       	ld	r24, Z
    14f0:	82 35       	cpi	r24, 0x52	; 82
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <__vector_25+0x5a>
    14f4:	6e c0       	rjmp	.+220    	; 0x15d2 <__vector_25+0x136>
		{
			//printf("Found Beginning!\n");
			bufferStart = 1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	90 93 ca 05 	sts	0x05CA, r25
    14fe:	80 93 c9 05 	sts	0x05C9, r24
    1502:	67 c0       	rjmp	.+206    	; 0x15d2 <__vector_25+0x136>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
    1504:	80 91 c5 05 	lds	r24, 0x05C5
    1508:	90 91 c6 05 	lds	r25, 0x05C6
    150c:	07 97       	sbiw	r24, 0x07	; 7
    150e:	50 f4       	brcc	.+20     	; 0x1524 <__vector_25+0x88>
		{
			receiveBuffer[i] = uart_receiveChar();
    1510:	c0 91 c5 05 	lds	r28, 0x05C5
    1514:	d0 91 c6 05 	lds	r29, 0x05C6
    1518:	0e 94 de 08 	call	0x11bc	; 0x11bc <uart_receiveChar>
    151c:	cd 52       	subi	r28, 0x2D	; 45
    151e:	d9 4f       	sbci	r29, 0xF9	; 249
    1520:	88 83       	st	Y, r24
    1522:	57 c0       	rjmp	.+174    	; 0x15d2 <__vector_25+0x136>
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
		}
		else if(i == endHeader)
    1524:	80 91 c5 05 	lds	r24, 0x05C5
    1528:	90 91 c6 05 	lds	r25, 0x05C6
    152c:	07 97       	sbiw	r24, 0x07	; 7
    152e:	39 f4       	brne	.+14     	; 0x153e <__vector_25+0xa2>
		{
			transLength = buildTransmissionLength();
    1530:	0e 94 06 09 	call	0x120c	; 0x120c <buildTransmissionLength>
    1534:	90 93 c3 05 	sts	0x05C3, r25
    1538:	80 93 c2 05 	sts	0x05C2, r24
    153c:	4a c0       	rjmp	.+148    	; 0x15d2 <__vector_25+0x136>
			//printf("Transmission Length: %d\n", transLength);
		}
		else
		{
			if(i < transLength + endHeader)
    153e:	20 91 c2 05 	lds	r18, 0x05C2
    1542:	30 91 c3 05 	lds	r19, 0x05C3
    1546:	80 91 c5 05 	lds	r24, 0x05C5
    154a:	90 91 c6 05 	lds	r25, 0x05C6
    154e:	29 5f       	subi	r18, 0xF9	; 249
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	82 17       	cp	r24, r18
    1554:	93 07       	cpc	r25, r19
    1556:	28 f4       	brcc	.+10     	; 0x1562 <__vector_25+0xc6>
			{
				//printf("Translength: %d", transLength);
				//_delay_ms(5);
				buff = uart_receiveChar();
    1558:	0e 94 de 08 	call	0x11bc	; 0x11bc <uart_receiveChar>
    155c:	80 93 d2 06 	sts	0x06D2, r24
    1560:	38 c0       	rjmp	.+112    	; 0x15d2 <__vector_25+0x136>
			}

			else
			{
				//printf("End of String!\n");
				receiveBuffer[i] = 0;
    1562:	e0 91 c5 05 	lds	r30, 0x05C5
    1566:	f0 91 c6 05 	lds	r31, 0x05C6
    156a:	ed 52       	subi	r30, 0x2D	; 45
    156c:	f9 4f       	sbci	r31, 0xF9	; 249
    156e:	10 82       	st	Z, r1
				RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
    1570:	80 91 be 05 	lds	r24, 0x05BE
    1574:	90 91 bf 05 	lds	r25, 0x05BF
    1578:	a0 91 c0 05 	lds	r26, 0x05C0
    157c:	b0 91 c1 05 	lds	r27, 0x05C1
    1580:	20 91 c5 05 	lds	r18, 0x05C5
    1584:	30 91 c6 05 	lds	r19, 0x05C6
    1588:	28 50       	subi	r18, 0x08	; 8
    158a:	31 09       	sbc	r19, r1
    158c:	b9 01       	movw	r22, r18
    158e:	68 0f       	add	r22, r24
    1590:	79 1f       	adc	r23, r25
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	0e 94 ce 07 	call	0xf9c	; 0xf9c <RAMWriteByte>
				//UCSR1B &= ~(1<<RXCIE1);
				//cli();
				i = 0;
    1598:	10 92 c6 05 	sts	0x05C6, r1
    159c:	10 92 c5 05 	sts	0x05C5, r1
				bufferStart = 0;
    15a0:	10 92 ca 05 	sts	0x05CA, r1
    15a4:	10 92 c9 05 	sts	0x05C9, r1
				//done receiving
				receiveWifiFlag = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	80 93 c4 05 	sts	0x05C4, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
    15ae:	0e 94 06 09 	call	0x120c	; 0x120c <buildTransmissionLength>
    15b2:	9f 93       	push	r25
    15b4:	8f 93       	push	r24
    15b6:	84 e9       	ldi	r24, 0x94	; 148
    15b8:	95 e0       	ldi	r25, 0x05	; 5
    15ba:	9f 93       	push	r25
    15bc:	8f 93       	push	r24
    15be:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <printf>
				printf("Done Receiving!\n");
    15c2:	8d ea       	ldi	r24, 0xAD	; 173
    15c4:	95 e0       	ldi	r25, 0x05	; 5
    15c6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <puts>
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
			}
		}
		//printf("%d\n", i);
	}
	i++; 
    15d2:	80 91 c5 05 	lds	r24, 0x05C5
    15d6:	90 91 c6 05 	lds	r25, 0x05C6
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	90 93 c6 05 	sts	0x05C6, r25
    15e0:	80 93 c5 05 	sts	0x05C5, r24
	//PORTD |= (1<<CTS); 
	sei(); 
    15e4:	78 94       	sei
}
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <__umulhisi3>:
    160c:	a2 9f       	mul	r26, r18
    160e:	b0 01       	movw	r22, r0
    1610:	b3 9f       	mul	r27, r19
    1612:	c0 01       	movw	r24, r0
    1614:	a3 9f       	mul	r26, r19
    1616:	70 0d       	add	r23, r0
    1618:	81 1d       	adc	r24, r1
    161a:	11 24       	eor	r1, r1
    161c:	91 1d       	adc	r25, r1
    161e:	b2 9f       	mul	r27, r18
    1620:	70 0d       	add	r23, r0
    1622:	81 1d       	adc	r24, r1
    1624:	11 24       	eor	r1, r1
    1626:	91 1d       	adc	r25, r1
    1628:	08 95       	ret

0000162a <strcat>:
    162a:	fb 01       	movw	r30, r22
    162c:	dc 01       	movw	r26, r24
    162e:	0d 90       	ld	r0, X+
    1630:	00 20       	and	r0, r0
    1632:	e9 f7       	brne	.-6      	; 0x162e <strcat+0x4>
    1634:	11 97       	sbiw	r26, 0x01	; 1
    1636:	01 90       	ld	r0, Z+
    1638:	0d 92       	st	X+, r0
    163a:	00 20       	and	r0, r0
    163c:	e1 f7       	brne	.-8      	; 0x1636 <strcat+0xc>
    163e:	08 95       	ret

00001640 <strcpy>:
    1640:	fb 01       	movw	r30, r22
    1642:	dc 01       	movw	r26, r24
    1644:	01 90       	ld	r0, Z+
    1646:	0d 92       	st	X+, r0
    1648:	00 20       	and	r0, r0
    164a:	e1 f7       	brne	.-8      	; 0x1644 <strcpy+0x4>
    164c:	08 95       	ret

0000164e <fputc>:
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	18 2f       	mov	r17, r24
    1658:	09 2f       	mov	r16, r25
    165a:	eb 01       	movw	r28, r22
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	81 fd       	sbrc	r24, 1
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <fputc+0x1a>
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	9f ef       	ldi	r25, 0xFF	; 255
    1666:	20 c0       	rjmp	.+64     	; 0x16a8 <fputc+0x5a>
    1668:	82 ff       	sbrs	r24, 2
    166a:	10 c0       	rjmp	.+32     	; 0x168c <fputc+0x3e>
    166c:	4e 81       	ldd	r20, Y+6	; 0x06
    166e:	5f 81       	ldd	r21, Y+7	; 0x07
    1670:	2c 81       	ldd	r18, Y+4	; 0x04
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	42 17       	cp	r20, r18
    1676:	53 07       	cpc	r21, r19
    1678:	7c f4       	brge	.+30     	; 0x1698 <fputc+0x4a>
    167a:	e8 81       	ld	r30, Y
    167c:	f9 81       	ldd	r31, Y+1	; 0x01
    167e:	9f 01       	movw	r18, r30
    1680:	2f 5f       	subi	r18, 0xFF	; 255
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	39 83       	std	Y+1, r19	; 0x01
    1686:	28 83       	st	Y, r18
    1688:	10 83       	st	Z, r17
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <fputc+0x4a>
    168c:	e8 85       	ldd	r30, Y+8	; 0x08
    168e:	f9 85       	ldd	r31, Y+9	; 0x09
    1690:	81 2f       	mov	r24, r17
    1692:	09 95       	icall
    1694:	89 2b       	or	r24, r25
    1696:	29 f7       	brne	.-54     	; 0x1662 <fputc+0x14>
    1698:	2e 81       	ldd	r18, Y+6	; 0x06
    169a:	3f 81       	ldd	r19, Y+7	; 0x07
    169c:	2f 5f       	subi	r18, 0xFF	; 255
    169e:	3f 4f       	sbci	r19, 0xFF	; 255
    16a0:	3f 83       	std	Y+7, r19	; 0x07
    16a2:	2e 83       	std	Y+6, r18	; 0x06
    16a4:	81 2f       	mov	r24, r17
    16a6:	90 2f       	mov	r25, r16
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	08 95       	ret

000016b2 <printf>:
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	ef e5       	ldi	r30, 0x5F	; 95
    16b8:	fb e0       	ldi	r31, 0x0B	; 11
    16ba:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__prologue_saves__+0x20>
    16be:	fe 01       	movw	r30, r28
    16c0:	35 96       	adiw	r30, 0x05	; 5
    16c2:	61 91       	ld	r22, Z+
    16c4:	71 91       	ld	r23, Z+
    16c6:	af 01       	movw	r20, r30
    16c8:	80 91 52 07 	lds	r24, 0x0752
    16cc:	90 91 53 07 	lds	r25, 0x0753
    16d0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <vfprintf>
    16d4:	e2 e0       	ldi	r30, 0x02	; 2
    16d6:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__epilogue_restores__+0x20>

000016da <putchar>:
    16da:	60 91 52 07 	lds	r22, 0x0752
    16de:	70 91 53 07 	lds	r23, 0x0753
    16e2:	0e 94 27 0b 	call	0x164e	; 0x164e <fputc>
    16e6:	08 95       	ret

000016e8 <puts>:
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	e0 91 52 07 	lds	r30, 0x0752
    16f4:	f0 91 53 07 	lds	r31, 0x0753
    16f8:	23 81       	ldd	r18, Z+3	; 0x03
    16fa:	21 ff       	sbrs	r18, 1
    16fc:	1b c0       	rjmp	.+54     	; 0x1734 <puts+0x4c>
    16fe:	ec 01       	movw	r28, r24
    1700:	00 e0       	ldi	r16, 0x00	; 0
    1702:	10 e0       	ldi	r17, 0x00	; 0
    1704:	89 91       	ld	r24, Y+
    1706:	60 91 52 07 	lds	r22, 0x0752
    170a:	70 91 53 07 	lds	r23, 0x0753
    170e:	db 01       	movw	r26, r22
    1710:	18 96       	adiw	r26, 0x08	; 8
    1712:	ed 91       	ld	r30, X+
    1714:	fc 91       	ld	r31, X
    1716:	19 97       	sbiw	r26, 0x09	; 9
    1718:	88 23       	and	r24, r24
    171a:	31 f0       	breq	.+12     	; 0x1728 <puts+0x40>
    171c:	09 95       	icall
    171e:	89 2b       	or	r24, r25
    1720:	89 f3       	breq	.-30     	; 0x1704 <puts+0x1c>
    1722:	0f ef       	ldi	r16, 0xFF	; 255
    1724:	1f ef       	ldi	r17, 0xFF	; 255
    1726:	ee cf       	rjmp	.-36     	; 0x1704 <puts+0x1c>
    1728:	8a e0       	ldi	r24, 0x0A	; 10
    172a:	09 95       	icall
    172c:	89 2b       	or	r24, r25
    172e:	11 f4       	brne	.+4      	; 0x1734 <puts+0x4c>
    1730:	c8 01       	movw	r24, r16
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <puts+0x50>
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	9f ef       	ldi	r25, 0xFF	; 255
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <vfprintf>:
    1742:	ac e0       	ldi	r26, 0x0C	; 12
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e7 ea       	ldi	r30, 0xA7	; 167
    1748:	fb e0       	ldi	r31, 0x0B	; 11
    174a:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__prologue_saves__>
    174e:	7c 01       	movw	r14, r24
    1750:	6b 01       	movw	r12, r22
    1752:	8a 01       	movw	r16, r20
    1754:	fc 01       	movw	r30, r24
    1756:	17 82       	std	Z+7, r1	; 0x07
    1758:	16 82       	std	Z+6, r1	; 0x06
    175a:	83 81       	ldd	r24, Z+3	; 0x03
    175c:	81 ff       	sbrs	r24, 1
    175e:	bd c1       	rjmp	.+890    	; 0x1ada <vfprintf+0x398>
    1760:	ce 01       	movw	r24, r28
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	4c 01       	movw	r8, r24
    1766:	f7 01       	movw	r30, r14
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	f6 01       	movw	r30, r12
    176c:	93 fd       	sbrc	r25, 3
    176e:	85 91       	lpm	r24, Z+
    1770:	93 ff       	sbrs	r25, 3
    1772:	81 91       	ld	r24, Z+
    1774:	6f 01       	movw	r12, r30
    1776:	88 23       	and	r24, r24
    1778:	09 f4       	brne	.+2      	; 0x177c <vfprintf+0x3a>
    177a:	ab c1       	rjmp	.+854    	; 0x1ad2 <vfprintf+0x390>
    177c:	85 32       	cpi	r24, 0x25	; 37
    177e:	39 f4       	brne	.+14     	; 0x178e <vfprintf+0x4c>
    1780:	93 fd       	sbrc	r25, 3
    1782:	85 91       	lpm	r24, Z+
    1784:	93 ff       	sbrs	r25, 3
    1786:	81 91       	ld	r24, Z+
    1788:	6f 01       	movw	r12, r30
    178a:	85 32       	cpi	r24, 0x25	; 37
    178c:	29 f4       	brne	.+10     	; 0x1798 <vfprintf+0x56>
    178e:	b7 01       	movw	r22, r14
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 27 0b 	call	0x164e	; 0x164e <fputc>
    1796:	e7 cf       	rjmp	.-50     	; 0x1766 <vfprintf+0x24>
    1798:	51 2c       	mov	r5, r1
    179a:	31 2c       	mov	r3, r1
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	20 32       	cpi	r18, 0x20	; 32
    17a0:	a0 f4       	brcc	.+40     	; 0x17ca <vfprintf+0x88>
    17a2:	8b 32       	cpi	r24, 0x2B	; 43
    17a4:	69 f0       	breq	.+26     	; 0x17c0 <vfprintf+0x7e>
    17a6:	30 f4       	brcc	.+12     	; 0x17b4 <vfprintf+0x72>
    17a8:	80 32       	cpi	r24, 0x20	; 32
    17aa:	59 f0       	breq	.+22     	; 0x17c2 <vfprintf+0x80>
    17ac:	83 32       	cpi	r24, 0x23	; 35
    17ae:	69 f4       	brne	.+26     	; 0x17ca <vfprintf+0x88>
    17b0:	20 61       	ori	r18, 0x10	; 16
    17b2:	2c c0       	rjmp	.+88     	; 0x180c <vfprintf+0xca>
    17b4:	8d 32       	cpi	r24, 0x2D	; 45
    17b6:	39 f0       	breq	.+14     	; 0x17c6 <vfprintf+0x84>
    17b8:	80 33       	cpi	r24, 0x30	; 48
    17ba:	39 f4       	brne	.+14     	; 0x17ca <vfprintf+0x88>
    17bc:	21 60       	ori	r18, 0x01	; 1
    17be:	26 c0       	rjmp	.+76     	; 0x180c <vfprintf+0xca>
    17c0:	22 60       	ori	r18, 0x02	; 2
    17c2:	24 60       	ori	r18, 0x04	; 4
    17c4:	23 c0       	rjmp	.+70     	; 0x180c <vfprintf+0xca>
    17c6:	28 60       	ori	r18, 0x08	; 8
    17c8:	21 c0       	rjmp	.+66     	; 0x180c <vfprintf+0xca>
    17ca:	27 fd       	sbrc	r18, 7
    17cc:	27 c0       	rjmp	.+78     	; 0x181c <vfprintf+0xda>
    17ce:	30 ed       	ldi	r19, 0xD0	; 208
    17d0:	38 0f       	add	r19, r24
    17d2:	3a 30       	cpi	r19, 0x0A	; 10
    17d4:	78 f4       	brcc	.+30     	; 0x17f4 <vfprintf+0xb2>
    17d6:	26 ff       	sbrs	r18, 6
    17d8:	06 c0       	rjmp	.+12     	; 0x17e6 <vfprintf+0xa4>
    17da:	fa e0       	ldi	r31, 0x0A	; 10
    17dc:	5f 9e       	mul	r5, r31
    17de:	30 0d       	add	r19, r0
    17e0:	11 24       	eor	r1, r1
    17e2:	53 2e       	mov	r5, r19
    17e4:	13 c0       	rjmp	.+38     	; 0x180c <vfprintf+0xca>
    17e6:	8a e0       	ldi	r24, 0x0A	; 10
    17e8:	38 9e       	mul	r3, r24
    17ea:	30 0d       	add	r19, r0
    17ec:	11 24       	eor	r1, r1
    17ee:	33 2e       	mov	r3, r19
    17f0:	20 62       	ori	r18, 0x20	; 32
    17f2:	0c c0       	rjmp	.+24     	; 0x180c <vfprintf+0xca>
    17f4:	8e 32       	cpi	r24, 0x2E	; 46
    17f6:	21 f4       	brne	.+8      	; 0x1800 <vfprintf+0xbe>
    17f8:	26 fd       	sbrc	r18, 6
    17fa:	6b c1       	rjmp	.+726    	; 0x1ad2 <vfprintf+0x390>
    17fc:	20 64       	ori	r18, 0x40	; 64
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <vfprintf+0xca>
    1800:	8c 36       	cpi	r24, 0x6C	; 108
    1802:	11 f4       	brne	.+4      	; 0x1808 <vfprintf+0xc6>
    1804:	20 68       	ori	r18, 0x80	; 128
    1806:	02 c0       	rjmp	.+4      	; 0x180c <vfprintf+0xca>
    1808:	88 36       	cpi	r24, 0x68	; 104
    180a:	41 f4       	brne	.+16     	; 0x181c <vfprintf+0xda>
    180c:	f6 01       	movw	r30, r12
    180e:	93 fd       	sbrc	r25, 3
    1810:	85 91       	lpm	r24, Z+
    1812:	93 ff       	sbrs	r25, 3
    1814:	81 91       	ld	r24, Z+
    1816:	6f 01       	movw	r12, r30
    1818:	81 11       	cpse	r24, r1
    181a:	c1 cf       	rjmp	.-126    	; 0x179e <vfprintf+0x5c>
    181c:	98 2f       	mov	r25, r24
    181e:	9f 7d       	andi	r25, 0xDF	; 223
    1820:	95 54       	subi	r25, 0x45	; 69
    1822:	93 30       	cpi	r25, 0x03	; 3
    1824:	28 f4       	brcc	.+10     	; 0x1830 <vfprintf+0xee>
    1826:	0c 5f       	subi	r16, 0xFC	; 252
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	ff e3       	ldi	r31, 0x3F	; 63
    182c:	f9 83       	std	Y+1, r31	; 0x01
    182e:	0d c0       	rjmp	.+26     	; 0x184a <vfprintf+0x108>
    1830:	83 36       	cpi	r24, 0x63	; 99
    1832:	31 f0       	breq	.+12     	; 0x1840 <vfprintf+0xfe>
    1834:	83 37       	cpi	r24, 0x73	; 115
    1836:	71 f0       	breq	.+28     	; 0x1854 <vfprintf+0x112>
    1838:	83 35       	cpi	r24, 0x53	; 83
    183a:	09 f0       	breq	.+2      	; 0x183e <vfprintf+0xfc>
    183c:	5b c0       	rjmp	.+182    	; 0x18f4 <vfprintf+0x1b2>
    183e:	22 c0       	rjmp	.+68     	; 0x1884 <vfprintf+0x142>
    1840:	f8 01       	movw	r30, r16
    1842:	80 81       	ld	r24, Z
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	0e 5f       	subi	r16, 0xFE	; 254
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	44 24       	eor	r4, r4
    184c:	43 94       	inc	r4
    184e:	51 2c       	mov	r5, r1
    1850:	54 01       	movw	r10, r8
    1852:	15 c0       	rjmp	.+42     	; 0x187e <vfprintf+0x13c>
    1854:	38 01       	movw	r6, r16
    1856:	f2 e0       	ldi	r31, 0x02	; 2
    1858:	6f 0e       	add	r6, r31
    185a:	71 1c       	adc	r7, r1
    185c:	f8 01       	movw	r30, r16
    185e:	a0 80       	ld	r10, Z
    1860:	b1 80       	ldd	r11, Z+1	; 0x01
    1862:	26 ff       	sbrs	r18, 6
    1864:	03 c0       	rjmp	.+6      	; 0x186c <vfprintf+0x12a>
    1866:	65 2d       	mov	r22, r5
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <vfprintf+0x12e>
    186c:	6f ef       	ldi	r22, 0xFF	; 255
    186e:	7f ef       	ldi	r23, 0xFF	; 255
    1870:	c5 01       	movw	r24, r10
    1872:	2c 87       	std	Y+12, r18	; 0x0c
    1874:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strnlen>
    1878:	2c 01       	movw	r4, r24
    187a:	83 01       	movw	r16, r6
    187c:	2c 85       	ldd	r18, Y+12	; 0x0c
    187e:	2f 77       	andi	r18, 0x7F	; 127
    1880:	22 2e       	mov	r2, r18
    1882:	17 c0       	rjmp	.+46     	; 0x18b2 <vfprintf+0x170>
    1884:	38 01       	movw	r6, r16
    1886:	f2 e0       	ldi	r31, 0x02	; 2
    1888:	6f 0e       	add	r6, r31
    188a:	71 1c       	adc	r7, r1
    188c:	f8 01       	movw	r30, r16
    188e:	a0 80       	ld	r10, Z
    1890:	b1 80       	ldd	r11, Z+1	; 0x01
    1892:	26 ff       	sbrs	r18, 6
    1894:	03 c0       	rjmp	.+6      	; 0x189c <vfprintf+0x15a>
    1896:	65 2d       	mov	r22, r5
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <vfprintf+0x15e>
    189c:	6f ef       	ldi	r22, 0xFF	; 255
    189e:	7f ef       	ldi	r23, 0xFF	; 255
    18a0:	c5 01       	movw	r24, r10
    18a2:	2c 87       	std	Y+12, r18	; 0x0c
    18a4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <strnlen_P>
    18a8:	2c 01       	movw	r4, r24
    18aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ac:	20 68       	ori	r18, 0x80	; 128
    18ae:	22 2e       	mov	r2, r18
    18b0:	83 01       	movw	r16, r6
    18b2:	23 fc       	sbrc	r2, 3
    18b4:	1b c0       	rjmp	.+54     	; 0x18ec <vfprintf+0x1aa>
    18b6:	83 2d       	mov	r24, r3
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	48 16       	cp	r4, r24
    18bc:	59 06       	cpc	r5, r25
    18be:	b0 f4       	brcc	.+44     	; 0x18ec <vfprintf+0x1aa>
    18c0:	b7 01       	movw	r22, r14
    18c2:	80 e2       	ldi	r24, 0x20	; 32
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 27 0b 	call	0x164e	; 0x164e <fputc>
    18ca:	3a 94       	dec	r3
    18cc:	f4 cf       	rjmp	.-24     	; 0x18b6 <vfprintf+0x174>
    18ce:	f5 01       	movw	r30, r10
    18d0:	27 fc       	sbrc	r2, 7
    18d2:	85 91       	lpm	r24, Z+
    18d4:	27 fe       	sbrs	r2, 7
    18d6:	81 91       	ld	r24, Z+
    18d8:	5f 01       	movw	r10, r30
    18da:	b7 01       	movw	r22, r14
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 27 0b 	call	0x164e	; 0x164e <fputc>
    18e2:	31 10       	cpse	r3, r1
    18e4:	3a 94       	dec	r3
    18e6:	f1 e0       	ldi	r31, 0x01	; 1
    18e8:	4f 1a       	sub	r4, r31
    18ea:	51 08       	sbc	r5, r1
    18ec:	41 14       	cp	r4, r1
    18ee:	51 04       	cpc	r5, r1
    18f0:	71 f7       	brne	.-36     	; 0x18ce <vfprintf+0x18c>
    18f2:	e5 c0       	rjmp	.+458    	; 0x1abe <vfprintf+0x37c>
    18f4:	84 36       	cpi	r24, 0x64	; 100
    18f6:	11 f0       	breq	.+4      	; 0x18fc <vfprintf+0x1ba>
    18f8:	89 36       	cpi	r24, 0x69	; 105
    18fa:	39 f5       	brne	.+78     	; 0x194a <vfprintf+0x208>
    18fc:	f8 01       	movw	r30, r16
    18fe:	27 ff       	sbrs	r18, 7
    1900:	07 c0       	rjmp	.+14     	; 0x1910 <vfprintf+0x1ce>
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	0c 5f       	subi	r16, 0xFC	; 252
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	08 c0       	rjmp	.+16     	; 0x1920 <vfprintf+0x1de>
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	88 27       	eor	r24, r24
    1916:	77 fd       	sbrc	r23, 7
    1918:	80 95       	com	r24
    191a:	98 2f       	mov	r25, r24
    191c:	0e 5f       	subi	r16, 0xFE	; 254
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	2f 76       	andi	r18, 0x6F	; 111
    1922:	b2 2e       	mov	r11, r18
    1924:	97 ff       	sbrs	r25, 7
    1926:	09 c0       	rjmp	.+18     	; 0x193a <vfprintf+0x1f8>
    1928:	90 95       	com	r25
    192a:	80 95       	com	r24
    192c:	70 95       	com	r23
    192e:	61 95       	neg	r22
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	8f 4f       	sbci	r24, 0xFF	; 255
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	20 68       	ori	r18, 0x80	; 128
    1938:	b2 2e       	mov	r11, r18
    193a:	2a e0       	ldi	r18, 0x0A	; 10
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	a4 01       	movw	r20, r8
    1940:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__ultoa_invert>
    1944:	a8 2e       	mov	r10, r24
    1946:	a8 18       	sub	r10, r8
    1948:	44 c0       	rjmp	.+136    	; 0x19d2 <vfprintf+0x290>
    194a:	85 37       	cpi	r24, 0x75	; 117
    194c:	29 f4       	brne	.+10     	; 0x1958 <vfprintf+0x216>
    194e:	2f 7e       	andi	r18, 0xEF	; 239
    1950:	b2 2e       	mov	r11, r18
    1952:	2a e0       	ldi	r18, 0x0A	; 10
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	25 c0       	rjmp	.+74     	; 0x19a2 <vfprintf+0x260>
    1958:	f2 2f       	mov	r31, r18
    195a:	f9 7f       	andi	r31, 0xF9	; 249
    195c:	bf 2e       	mov	r11, r31
    195e:	8f 36       	cpi	r24, 0x6F	; 111
    1960:	c1 f0       	breq	.+48     	; 0x1992 <vfprintf+0x250>
    1962:	18 f4       	brcc	.+6      	; 0x196a <vfprintf+0x228>
    1964:	88 35       	cpi	r24, 0x58	; 88
    1966:	79 f0       	breq	.+30     	; 0x1986 <vfprintf+0x244>
    1968:	b4 c0       	rjmp	.+360    	; 0x1ad2 <vfprintf+0x390>
    196a:	80 37       	cpi	r24, 0x70	; 112
    196c:	19 f0       	breq	.+6      	; 0x1974 <vfprintf+0x232>
    196e:	88 37       	cpi	r24, 0x78	; 120
    1970:	21 f0       	breq	.+8      	; 0x197a <vfprintf+0x238>
    1972:	af c0       	rjmp	.+350    	; 0x1ad2 <vfprintf+0x390>
    1974:	2f 2f       	mov	r18, r31
    1976:	20 61       	ori	r18, 0x10	; 16
    1978:	b2 2e       	mov	r11, r18
    197a:	b4 fe       	sbrs	r11, 4
    197c:	0d c0       	rjmp	.+26     	; 0x1998 <vfprintf+0x256>
    197e:	8b 2d       	mov	r24, r11
    1980:	84 60       	ori	r24, 0x04	; 4
    1982:	b8 2e       	mov	r11, r24
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <vfprintf+0x256>
    1986:	24 ff       	sbrs	r18, 4
    1988:	0a c0       	rjmp	.+20     	; 0x199e <vfprintf+0x25c>
    198a:	9f 2f       	mov	r25, r31
    198c:	96 60       	ori	r25, 0x06	; 6
    198e:	b9 2e       	mov	r11, r25
    1990:	06 c0       	rjmp	.+12     	; 0x199e <vfprintf+0x25c>
    1992:	28 e0       	ldi	r18, 0x08	; 8
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <vfprintf+0x260>
    1998:	20 e1       	ldi	r18, 0x10	; 16
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <vfprintf+0x260>
    199e:	20 e1       	ldi	r18, 0x10	; 16
    19a0:	32 e0       	ldi	r19, 0x02	; 2
    19a2:	f8 01       	movw	r30, r16
    19a4:	b7 fe       	sbrs	r11, 7
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <vfprintf+0x274>
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	0c 5f       	subi	r16, 0xFC	; 252
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	06 c0       	rjmp	.+12     	; 0x19c2 <vfprintf+0x280>
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 5f       	subi	r16, 0xFE	; 254
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	a4 01       	movw	r20, r8
    19c4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__ultoa_invert>
    19c8:	a8 2e       	mov	r10, r24
    19ca:	a8 18       	sub	r10, r8
    19cc:	fb 2d       	mov	r31, r11
    19ce:	ff 77       	andi	r31, 0x7F	; 127
    19d0:	bf 2e       	mov	r11, r31
    19d2:	b6 fe       	sbrs	r11, 6
    19d4:	0b c0       	rjmp	.+22     	; 0x19ec <vfprintf+0x2aa>
    19d6:	2b 2d       	mov	r18, r11
    19d8:	2e 7f       	andi	r18, 0xFE	; 254
    19da:	a5 14       	cp	r10, r5
    19dc:	50 f4       	brcc	.+20     	; 0x19f2 <vfprintf+0x2b0>
    19de:	b4 fe       	sbrs	r11, 4
    19e0:	0a c0       	rjmp	.+20     	; 0x19f6 <vfprintf+0x2b4>
    19e2:	b2 fc       	sbrc	r11, 2
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <vfprintf+0x2b4>
    19e6:	2b 2d       	mov	r18, r11
    19e8:	2e 7e       	andi	r18, 0xEE	; 238
    19ea:	05 c0       	rjmp	.+10     	; 0x19f6 <vfprintf+0x2b4>
    19ec:	7a 2c       	mov	r7, r10
    19ee:	2b 2d       	mov	r18, r11
    19f0:	03 c0       	rjmp	.+6      	; 0x19f8 <vfprintf+0x2b6>
    19f2:	7a 2c       	mov	r7, r10
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <vfprintf+0x2b6>
    19f6:	75 2c       	mov	r7, r5
    19f8:	24 ff       	sbrs	r18, 4
    19fa:	0d c0       	rjmp	.+26     	; 0x1a16 <vfprintf+0x2d4>
    19fc:	fe 01       	movw	r30, r28
    19fe:	ea 0d       	add	r30, r10
    1a00:	f1 1d       	adc	r31, r1
    1a02:	80 81       	ld	r24, Z
    1a04:	80 33       	cpi	r24, 0x30	; 48
    1a06:	11 f4       	brne	.+4      	; 0x1a0c <vfprintf+0x2ca>
    1a08:	29 7e       	andi	r18, 0xE9	; 233
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <vfprintf+0x2dc>
    1a0c:	22 ff       	sbrs	r18, 2
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <vfprintf+0x2da>
    1a10:	73 94       	inc	r7
    1a12:	73 94       	inc	r7
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <vfprintf+0x2dc>
    1a16:	82 2f       	mov	r24, r18
    1a18:	86 78       	andi	r24, 0x86	; 134
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <vfprintf+0x2dc>
    1a1c:	73 94       	inc	r7
    1a1e:	23 fd       	sbrc	r18, 3
    1a20:	13 c0       	rjmp	.+38     	; 0x1a48 <vfprintf+0x306>
    1a22:	20 ff       	sbrs	r18, 0
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <vfprintf+0x2f0>
    1a26:	5a 2c       	mov	r5, r10
    1a28:	73 14       	cp	r7, r3
    1a2a:	18 f4       	brcc	.+6      	; 0x1a32 <vfprintf+0x2f0>
    1a2c:	53 0c       	add	r5, r3
    1a2e:	57 18       	sub	r5, r7
    1a30:	73 2c       	mov	r7, r3
    1a32:	73 14       	cp	r7, r3
    1a34:	68 f4       	brcc	.+26     	; 0x1a50 <vfprintf+0x30e>
    1a36:	b7 01       	movw	r22, r14
    1a38:	80 e2       	ldi	r24, 0x20	; 32
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	2c 87       	std	Y+12, r18	; 0x0c
    1a3e:	0e 94 27 0b 	call	0x164e	; 0x164e <fputc>
    1a42:	73 94       	inc	r7
    1a44:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a46:	f5 cf       	rjmp	.-22     	; 0x1a32 <vfprintf+0x2f0>
    1a48:	73 14       	cp	r7, r3
    1a4a:	10 f4       	brcc	.+4      	; 0x1a50 <vfprintf+0x30e>
    1a4c:	37 18       	sub	r3, r7
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <vfprintf+0x310>
    1a50:	31 2c       	mov	r3, r1
    1a52:	24 ff       	sbrs	r18, 4
    1a54:	12 c0       	rjmp	.+36     	; 0x1a7a <vfprintf+0x338>
    1a56:	b7 01       	movw	r22, r14
    1a58:	80 e3       	ldi	r24, 0x30	; 48
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	2c 87       	std	Y+12, r18	; 0x0c
    1a5e:	0e 94 27 0b 	call	0x164e	; 0x164e <fputc>
    1a62:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a64:	22 ff       	sbrs	r18, 2
    1a66:	17 c0       	rjmp	.+46     	; 0x1a96 <vfprintf+0x354>
    1a68:	21 ff       	sbrs	r18, 1
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <vfprintf+0x330>
    1a6c:	88 e5       	ldi	r24, 0x58	; 88
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <vfprintf+0x334>
    1a72:	88 e7       	ldi	r24, 0x78	; 120
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	b7 01       	movw	r22, r14
    1a78:	0c c0       	rjmp	.+24     	; 0x1a92 <vfprintf+0x350>
    1a7a:	82 2f       	mov	r24, r18
    1a7c:	86 78       	andi	r24, 0x86	; 134
    1a7e:	59 f0       	breq	.+22     	; 0x1a96 <vfprintf+0x354>
    1a80:	21 fd       	sbrc	r18, 1
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <vfprintf+0x346>
    1a84:	80 e2       	ldi	r24, 0x20	; 32
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <vfprintf+0x348>
    1a88:	8b e2       	ldi	r24, 0x2B	; 43
    1a8a:	27 fd       	sbrc	r18, 7
    1a8c:	8d e2       	ldi	r24, 0x2D	; 45
    1a8e:	b7 01       	movw	r22, r14
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 27 0b 	call	0x164e	; 0x164e <fputc>
    1a96:	a5 14       	cp	r10, r5
    1a98:	38 f4       	brcc	.+14     	; 0x1aa8 <vfprintf+0x366>
    1a9a:	b7 01       	movw	r22, r14
    1a9c:	80 e3       	ldi	r24, 0x30	; 48
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 27 0b 	call	0x164e	; 0x164e <fputc>
    1aa4:	5a 94       	dec	r5
    1aa6:	f7 cf       	rjmp	.-18     	; 0x1a96 <vfprintf+0x354>
    1aa8:	aa 94       	dec	r10
    1aaa:	f4 01       	movw	r30, r8
    1aac:	ea 0d       	add	r30, r10
    1aae:	f1 1d       	adc	r31, r1
    1ab0:	80 81       	ld	r24, Z
    1ab2:	b7 01       	movw	r22, r14
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 27 0b 	call	0x164e	; 0x164e <fputc>
    1aba:	a1 10       	cpse	r10, r1
    1abc:	f5 cf       	rjmp	.-22     	; 0x1aa8 <vfprintf+0x366>
    1abe:	33 20       	and	r3, r3
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <vfprintf+0x382>
    1ac2:	51 ce       	rjmp	.-862    	; 0x1766 <vfprintf+0x24>
    1ac4:	b7 01       	movw	r22, r14
    1ac6:	80 e2       	ldi	r24, 0x20	; 32
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 27 0b 	call	0x164e	; 0x164e <fputc>
    1ace:	3a 94       	dec	r3
    1ad0:	f6 cf       	rjmp	.-20     	; 0x1abe <vfprintf+0x37c>
    1ad2:	f7 01       	movw	r30, r14
    1ad4:	86 81       	ldd	r24, Z+6	; 0x06
    1ad6:	97 81       	ldd	r25, Z+7	; 0x07
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <vfprintf+0x39c>
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	9f ef       	ldi	r25, 0xFF	; 255
    1ade:	2c 96       	adiw	r28, 0x0c	; 12
    1ae0:	e2 e1       	ldi	r30, 0x12	; 18
    1ae2:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__epilogue_restores__>

00001ae6 <strnlen_P>:
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	05 90       	lpm	r0, Z+
    1aea:	61 50       	subi	r22, 0x01	; 1
    1aec:	70 40       	sbci	r23, 0x00	; 0
    1aee:	01 10       	cpse	r0, r1
    1af0:	d8 f7       	brcc	.-10     	; 0x1ae8 <strnlen_P+0x2>
    1af2:	80 95       	com	r24
    1af4:	90 95       	com	r25
    1af6:	8e 0f       	add	r24, r30
    1af8:	9f 1f       	adc	r25, r31
    1afa:	08 95       	ret

00001afc <strnlen>:
    1afc:	fc 01       	movw	r30, r24
    1afe:	61 50       	subi	r22, 0x01	; 1
    1b00:	70 40       	sbci	r23, 0x00	; 0
    1b02:	01 90       	ld	r0, Z+
    1b04:	01 10       	cpse	r0, r1
    1b06:	d8 f7       	brcc	.-10     	; 0x1afe <strnlen+0x2>
    1b08:	80 95       	com	r24
    1b0a:	90 95       	com	r25
    1b0c:	8e 0f       	add	r24, r30
    1b0e:	9f 1f       	adc	r25, r31
    1b10:	08 95       	ret

00001b12 <__ultoa_invert>:
    1b12:	fa 01       	movw	r30, r20
    1b14:	aa 27       	eor	r26, r26
    1b16:	28 30       	cpi	r18, 0x08	; 8
    1b18:	51 f1       	breq	.+84     	; 0x1b6e <__ultoa_invert+0x5c>
    1b1a:	20 31       	cpi	r18, 0x10	; 16
    1b1c:	81 f1       	breq	.+96     	; 0x1b7e <__ultoa_invert+0x6c>
    1b1e:	e8 94       	clt
    1b20:	6f 93       	push	r22
    1b22:	6e 7f       	andi	r22, 0xFE	; 254
    1b24:	6e 5f       	subi	r22, 0xFE	; 254
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255
    1b28:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2c:	af 4f       	sbci	r26, 0xFF	; 255
    1b2e:	b1 e0       	ldi	r27, 0x01	; 1
    1b30:	3e d0       	rcall	.+124    	; 0x1bae <__ultoa_invert+0x9c>
    1b32:	b4 e0       	ldi	r27, 0x04	; 4
    1b34:	3c d0       	rcall	.+120    	; 0x1bae <__ultoa_invert+0x9c>
    1b36:	67 0f       	add	r22, r23
    1b38:	78 1f       	adc	r23, r24
    1b3a:	89 1f       	adc	r24, r25
    1b3c:	9a 1f       	adc	r25, r26
    1b3e:	a1 1d       	adc	r26, r1
    1b40:	68 0f       	add	r22, r24
    1b42:	79 1f       	adc	r23, r25
    1b44:	8a 1f       	adc	r24, r26
    1b46:	91 1d       	adc	r25, r1
    1b48:	a1 1d       	adc	r26, r1
    1b4a:	6a 0f       	add	r22, r26
    1b4c:	71 1d       	adc	r23, r1
    1b4e:	81 1d       	adc	r24, r1
    1b50:	91 1d       	adc	r25, r1
    1b52:	a1 1d       	adc	r26, r1
    1b54:	20 d0       	rcall	.+64     	; 0x1b96 <__ultoa_invert+0x84>
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <__ultoa_invert+0x48>
    1b58:	68 94       	set
    1b5a:	3f 91       	pop	r19
    1b5c:	2a e0       	ldi	r18, 0x0A	; 10
    1b5e:	26 9f       	mul	r18, r22
    1b60:	11 24       	eor	r1, r1
    1b62:	30 19       	sub	r19, r0
    1b64:	30 5d       	subi	r19, 0xD0	; 208
    1b66:	31 93       	st	Z+, r19
    1b68:	de f6       	brtc	.-74     	; 0x1b20 <__ultoa_invert+0xe>
    1b6a:	cf 01       	movw	r24, r30
    1b6c:	08 95       	ret
    1b6e:	46 2f       	mov	r20, r22
    1b70:	47 70       	andi	r20, 0x07	; 7
    1b72:	40 5d       	subi	r20, 0xD0	; 208
    1b74:	41 93       	st	Z+, r20
    1b76:	b3 e0       	ldi	r27, 0x03	; 3
    1b78:	0f d0       	rcall	.+30     	; 0x1b98 <__ultoa_invert+0x86>
    1b7a:	c9 f7       	brne	.-14     	; 0x1b6e <__ultoa_invert+0x5c>
    1b7c:	f6 cf       	rjmp	.-20     	; 0x1b6a <__ultoa_invert+0x58>
    1b7e:	46 2f       	mov	r20, r22
    1b80:	4f 70       	andi	r20, 0x0F	; 15
    1b82:	40 5d       	subi	r20, 0xD0	; 208
    1b84:	4a 33       	cpi	r20, 0x3A	; 58
    1b86:	18 f0       	brcs	.+6      	; 0x1b8e <__ultoa_invert+0x7c>
    1b88:	49 5d       	subi	r20, 0xD9	; 217
    1b8a:	31 fd       	sbrc	r19, 1
    1b8c:	40 52       	subi	r20, 0x20	; 32
    1b8e:	41 93       	st	Z+, r20
    1b90:	02 d0       	rcall	.+4      	; 0x1b96 <__ultoa_invert+0x84>
    1b92:	a9 f7       	brne	.-22     	; 0x1b7e <__ultoa_invert+0x6c>
    1b94:	ea cf       	rjmp	.-44     	; 0x1b6a <__ultoa_invert+0x58>
    1b96:	b4 e0       	ldi	r27, 0x04	; 4
    1b98:	a6 95       	lsr	r26
    1b9a:	97 95       	ror	r25
    1b9c:	87 95       	ror	r24
    1b9e:	77 95       	ror	r23
    1ba0:	67 95       	ror	r22
    1ba2:	ba 95       	dec	r27
    1ba4:	c9 f7       	brne	.-14     	; 0x1b98 <__ultoa_invert+0x86>
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	61 05       	cpc	r22, r1
    1baa:	71 05       	cpc	r23, r1
    1bac:	08 95       	ret
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	0a 2e       	mov	r0, r26
    1bb4:	06 94       	lsr	r0
    1bb6:	57 95       	ror	r21
    1bb8:	47 95       	ror	r20
    1bba:	37 95       	ror	r19
    1bbc:	27 95       	ror	r18
    1bbe:	ba 95       	dec	r27
    1bc0:	c9 f7       	brne	.-14     	; 0x1bb4 <__ultoa_invert+0xa2>
    1bc2:	62 0f       	add	r22, r18
    1bc4:	73 1f       	adc	r23, r19
    1bc6:	84 1f       	adc	r24, r20
    1bc8:	95 1f       	adc	r25, r21
    1bca:	a0 1d       	adc	r26, r0
    1bcc:	08 95       	ret

00001bce <__prologue_saves__>:
    1bce:	2f 92       	push	r2
    1bd0:	3f 92       	push	r3
    1bd2:	4f 92       	push	r4
    1bd4:	5f 92       	push	r5
    1bd6:	6f 92       	push	r6
    1bd8:	7f 92       	push	r7
    1bda:	8f 92       	push	r8
    1bdc:	9f 92       	push	r9
    1bde:	af 92       	push	r10
    1be0:	bf 92       	push	r11
    1be2:	cf 92       	push	r12
    1be4:	df 92       	push	r13
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	ca 1b       	sub	r28, r26
    1bf8:	db 0b       	sbc	r29, r27
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	09 94       	ijmp

00001c06 <__epilogue_restores__>:
    1c06:	2a 88       	ldd	r2, Y+18	; 0x12
    1c08:	39 88       	ldd	r3, Y+17	; 0x11
    1c0a:	48 88       	ldd	r4, Y+16	; 0x10
    1c0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c10:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c12:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c14:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c16:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c18:	b9 84       	ldd	r11, Y+9	; 0x09
    1c1a:	c8 84       	ldd	r12, Y+8	; 0x08
    1c1c:	df 80       	ldd	r13, Y+7	; 0x07
    1c1e:	ee 80       	ldd	r14, Y+6	; 0x06
    1c20:	fd 80       	ldd	r15, Y+5	; 0x05
    1c22:	0c 81       	ldd	r16, Y+4	; 0x04
    1c24:	1b 81       	ldd	r17, Y+3	; 0x03
    1c26:	aa 81       	ldd	r26, Y+2	; 0x02
    1c28:	b9 81       	ldd	r27, Y+1	; 0x01
    1c2a:	ce 0f       	add	r28, r30
    1c2c:	d1 1d       	adc	r29, r1
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	ed 01       	movw	r28, r26
    1c3a:	08 95       	ret

00001c3c <_exit>:
    1c3c:	f8 94       	cli

00001c3e <__stop_program>:
    1c3e:	ff cf       	rjmp	.-2      	; 0x1c3e <__stop_program>
