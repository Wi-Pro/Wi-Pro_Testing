
Communications.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003c6  00800200  00001cba  00001d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  008005c6  008005c6  00002114  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003616  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f67  00000000  00000000  00005a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001091  00000000  00000000  000069fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a18  00000000  00000000  00007a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ea  00000000  00000000  000084a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000242a  00000000  00000000  00008d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a8  00000000  00000000  0000b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_20>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_25>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	15 e0       	ldi	r17, 0x05	; 5
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ea eb       	ldi	r30, 0xBA	; 186
      f8:	fc e1       	ldi	r31, 0x1C	; 28
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	a6 3c       	cpi	r26, 0xC6	; 198
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	27 e0       	ldi	r18, 0x07	; 7
     108:	a6 ec       	ldi	r26, 0xC6	; 198
     10a:	b5 e0       	ldi	r27, 0x05	; 5
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	ae 35       	cpi	r26, 0x5E	; 94
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 1e 02 	call	0x43c	; 0x43c <main>
     11a:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <pollingInit>:

void pollingInit()
{
	//Set a 64 prescaler to achieve a ping roughly every half second
	//TCCR1B = (1<<CS11)|(1<<CS10);
	TCCR1B |= (1<<CS12); 
     122:	e1 e8       	ldi	r30, 0x81	; 129
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	84 60       	ori	r24, 0x04	; 4
     12a:	80 83       	st	Z, r24
	//Load internal counter registers with min value 
	TCNT1L = 0x00; 
     12c:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00; 
     130:	10 92 85 00 	sts	0x0085, r1
	//Set interrupt to invoke on overflow
	TIMSK1 = (1 << TOIE1);
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	80 93 6f 00 	sts	0x006F, r24
     13a:	08 95       	ret

0000013c <clearFlags>:
{
	
}

int clearFlags()
{
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
	if(Flags[ETHERNET])
     140:	80 91 37 06 	lds	r24, 0x0637
     144:	88 23       	and	r24, r24
     146:	99 f1       	breq	.+102    	; 0x1ae <clearFlags+0x72>
	{
		strcpy(filepath, GET);
     148:	c3 ed       	ldi	r28, 0xD3	; 211
     14a:	d5 e0       	ldi	r29, 0x05	; 5
     14c:	85 e0       	ldi	r24, 0x05	; 5
     14e:	e0 e3       	ldi	r30, 0x30	; 48
     150:	f2 e0       	ldi	r31, 0x02	; 2
     152:	de 01       	movw	r26, r28
     154:	01 90       	ld	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	8a 95       	dec	r24
     15a:	e1 f7       	brne	.-8      	; 0x154 <clearFlags+0x18>
		strcat(filepath, URL);
     15c:	de 01       	movw	r26, r28
     15e:	0d 90       	ld	r0, X+
     160:	00 20       	and	r0, r0
     162:	e9 f7       	brne	.-6      	; 0x15e <clearFlags+0x22>
     164:	11 97       	sbiw	r26, 0x01	; 1
     166:	85 e1       	ldi	r24, 0x15	; 21
     168:	e5 e3       	ldi	r30, 0x35	; 53
     16a:	f2 e0       	ldi	r31, 0x02	; 2
     16c:	01 90       	ld	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	8a 95       	dec	r24
     172:	e1 f7       	brne	.-8      	; 0x16c <clearFlags+0x30>
		strcat(filepath, CLEAR_FLAG);
     174:	de 01       	movw	r26, r28
     176:	0d 90       	ld	r0, X+
     178:	00 20       	and	r0, r0
     17a:	e9 f7       	brne	.-6      	; 0x176 <clearFlags+0x3a>
     17c:	11 97       	sbiw	r26, 0x01	; 1
     17e:	82 e1       	ldi	r24, 0x12	; 18
     180:	ea e4       	ldi	r30, 0x4A	; 74
     182:	f2 e0       	ldi	r31, 0x02	; 2
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	8a 95       	dec	r24
     18a:	e1 f7       	brne	.-8      	; 0x184 <clearFlags+0x48>
		strcat(filepath, WIPRO_ID);
     18c:	09 90       	ld	r0, Y+
     18e:	00 20       	and	r0, r0
     190:	e9 f7       	brne	.-6      	; 0x18c <clearFlags+0x50>
     192:	de 01       	movw	r26, r28
     194:	11 97       	sbiw	r26, 0x01	; 1
     196:	83 e1       	ldi	r24, 0x13	; 19
     198:	ec e5       	ldi	r30, 0x5C	; 92
     19a:	f2 e0       	ldi	r31, 0x02	; 2
     19c:	01 90       	ld	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	8a 95       	dec	r24
     1a2:	e1 f7       	brne	.-8      	; 0x19c <clearFlags+0x60>
		//printf("Clear: %s\n", filepath);
		updateFileEthernet(filepath);
     1a4:	83 ed       	ldi	r24, 0xD3	; 211
     1a6:	95 e0       	ldi	r25, 0x05	; 5
     1a8:	0e 94 de 02 	call	0x5bc	; 0x5bc <updateFileEthernet>
     1ac:	36 c0       	rjmp	.+108    	; 0x21a <clearFlags+0xde>
	}
	else if(Flags[WIFI])
     1ae:	80 91 38 06 	lds	r24, 0x0638
     1b2:	88 23       	and	r24, r24
     1b4:	91 f1       	breq	.+100    	; 0x21a <clearFlags+0xde>
	{
		strcpy(filepath, HTTP_GET);
     1b6:	c3 ed       	ldi	r28, 0xD3	; 211
     1b8:	d5 e0       	ldi	r29, 0x05	; 5
     1ba:	89 e0       	ldi	r24, 0x09	; 9
     1bc:	ef e6       	ldi	r30, 0x6F	; 111
     1be:	f2 e0       	ldi	r31, 0x02	; 2
     1c0:	de 01       	movw	r26, r28
     1c2:	01 90       	ld	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	8a 95       	dec	r24
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <clearFlags+0x86>
		strcat(filepath, URL); 
     1ca:	de 01       	movw	r26, r28
     1cc:	0d 90       	ld	r0, X+
     1ce:	00 20       	and	r0, r0
     1d0:	e9 f7       	brne	.-6      	; 0x1cc <clearFlags+0x90>
     1d2:	11 97       	sbiw	r26, 0x01	; 1
     1d4:	85 e1       	ldi	r24, 0x15	; 21
     1d6:	e5 e3       	ldi	r30, 0x35	; 53
     1d8:	f2 e0       	ldi	r31, 0x02	; 2
     1da:	01 90       	ld	r0, Z+
     1dc:	0d 92       	st	X+, r0
     1de:	8a 95       	dec	r24
     1e0:	e1 f7       	brne	.-8      	; 0x1da <clearFlags+0x9e>
		strcat(filepath, CLEAR_FLAG);
     1e2:	de 01       	movw	r26, r28
     1e4:	0d 90       	ld	r0, X+
     1e6:	00 20       	and	r0, r0
     1e8:	e9 f7       	brne	.-6      	; 0x1e4 <clearFlags+0xa8>
     1ea:	11 97       	sbiw	r26, 0x01	; 1
     1ec:	82 e1       	ldi	r24, 0x12	; 18
     1ee:	ea e4       	ldi	r30, 0x4A	; 74
     1f0:	f2 e0       	ldi	r31, 0x02	; 2
     1f2:	01 90       	ld	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	8a 95       	dec	r24
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <clearFlags+0xb6>
		strcat(filepath, WIPRO_ID);
     1fa:	09 90       	ld	r0, Y+
     1fc:	00 20       	and	r0, r0
     1fe:	e9 f7       	brne	.-6      	; 0x1fa <clearFlags+0xbe>
     200:	de 01       	movw	r26, r28
     202:	11 97       	sbiw	r26, 0x01	; 1
     204:	83 e1       	ldi	r24, 0x13	; 19
     206:	ec e5       	ldi	r30, 0x5C	; 92
     208:	f2 e0       	ldi	r31, 0x02	; 2
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	8a 95       	dec	r24
     210:	e1 f7       	brne	.-8      	; 0x20a <clearFlags+0xce>
		updateFileWifi(filepath);	
     212:	83 ed       	ldi	r24, 0xD3	; 211
     214:	95 e0       	ldi	r25, 0x05	; 5
     216:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <updateFileWifi>
	}
	
	memset(filepath, 0x00, 100);
     21a:	84 e6       	ldi	r24, 0x64	; 100
     21c:	e3 ed       	ldi	r30, 0xD3	; 211
     21e:	f5 e0       	ldi	r31, 0x05	; 5
     220:	df 01       	movw	r26, r30
     222:	1d 92       	st	X+, r1
     224:	8a 95       	dec	r24
     226:	e9 f7       	brne	.-6      	; 0x222 <clearFlags+0xe6>

}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <sendAvailableNetworks>:

void sendAvailableNetworks()
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
	networkScan();
     236:	0e 94 30 08 	call	0x1060	; 0x1060 <networkScan>
	uint16_t tranLength = getTransmissionLength();
     23a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <getTransmissionLength>
	printf("Tran Length: %d\n", tranLength);
     23e:	9f 93       	push	r25
     240:	8f 93       	push	r24
     242:	88 e7       	ldi	r24, 0x78	; 120
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	9f 93       	push	r25
     248:	8f 93       	push	r24
     24a:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
	//RAMPrint(WIFI_RAW_ADDRESS, tranLength);
	//_delay_ms(1000);
	//Build file path
	strcpy(filepath, GET);
     24e:	c3 ed       	ldi	r28, 0xD3	; 211
     250:	d5 e0       	ldi	r29, 0x05	; 5
     252:	85 e0       	ldi	r24, 0x05	; 5
     254:	e0 e3       	ldi	r30, 0x30	; 48
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	de 01       	movw	r26, r28
     25a:	01 90       	ld	r0, Z+
     25c:	0d 92       	st	X+, r0
     25e:	8a 95       	dec	r24
     260:	e1 f7       	brne	.-8      	; 0x25a <sendAvailableNetworks+0x2c>
	strcat(filepath, URL);
     262:	de 01       	movw	r26, r28
     264:	0d 90       	ld	r0, X+
     266:	00 20       	and	r0, r0
     268:	e9 f7       	brne	.-6      	; 0x264 <sendAvailableNetworks+0x36>
     26a:	11 97       	sbiw	r26, 0x01	; 1
     26c:	85 e1       	ldi	r24, 0x15	; 21
     26e:	e5 e3       	ldi	r30, 0x35	; 53
     270:	f2 e0       	ldi	r31, 0x02	; 2
     272:	01 90       	ld	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	8a 95       	dec	r24
     278:	e1 f7       	brne	.-8      	; 0x272 <sendAvailableNetworks+0x44>
	strcat(filepath, SSID_UPDATE);
     27a:	de 01       	movw	r26, r28
     27c:	0d 90       	ld	r0, X+
     27e:	00 20       	and	r0, r0
     280:	e9 f7       	brne	.-6      	; 0x27c <sendAvailableNetworks+0x4e>
     282:	11 97       	sbiw	r26, 0x01	; 1
     284:	83 e1       	ldi	r24, 0x13	; 19
     286:	e9 e8       	ldi	r30, 0x89	; 137
     288:	f2 e0       	ldi	r31, 0x02	; 2
     28a:	01 90       	ld	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	8a 95       	dec	r24
     290:	e1 f7       	brne	.-8      	; 0x28a <sendAvailableNetworks+0x5c>
	strcat(filepath, WIPRO_ID);
     292:	de 01       	movw	r26, r28
     294:	0d 90       	ld	r0, X+
     296:	00 20       	and	r0, r0
     298:	e9 f7       	brne	.-6      	; 0x294 <sendAvailableNetworks+0x66>
     29a:	11 97       	sbiw	r26, 0x01	; 1
     29c:	83 e1       	ldi	r24, 0x13	; 19
     29e:	ec e5       	ldi	r30, 0x5C	; 92
     2a0:	f2 e0       	ldi	r31, 0x02	; 2
     2a2:	01 90       	ld	r0, Z+
     2a4:	0d 92       	st	X+, r0
     2a6:	8a 95       	dec	r24
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <sendAvailableNetworks+0x74>
	strcat(filepath, SSID_ID);
     2aa:	de 01       	movw	r26, r28
     2ac:	0d 90       	ld	r0, X+
     2ae:	00 20       	and	r0, r0
     2b0:	e9 f7       	brne	.-6      	; 0x2ac <sendAvailableNetworks+0x7e>
     2b2:	11 97       	sbiw	r26, 0x01	; 1
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	ec e9       	ldi	r30, 0x9C	; 156
     2b8:	f2 e0       	ldi	r31, 0x02	; 2
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	8a 95       	dec	r24
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <sendAvailableNetworks+0x8c>
	printf("filepath: %s", filepath); 
     2c2:	df 93       	push	r29
     2c4:	cf 93       	push	r28
     2c6:	83 ea       	ldi	r24, 0xA3	; 163
     2c8:	92 e0       	ldi	r25, 0x02	; 2
     2ca:	9f 93       	push	r25
     2cc:	8f 93       	push	r24
     2ce:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
	//Convert List of Networks to Query String
	uint16_t qLength = networkQueryString(filepath);
     2d2:	ce 01       	movw	r24, r28
     2d4:	0e 94 66 08 	call	0x10cc	; 0x10cc <networkQueryString>
     2d8:	8c 01       	movw	r16, r24
	//printf("Query Length: %d\n", qLength);
	RAMPrint(WIFI_QSTRING_ADDRESS, qLength);
     2da:	ac 01       	movw	r20, r24
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	74 e0       	ldi	r23, 0x04	; 4
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 c1 07 	call	0xf82	; 0xf82 <RAMPrint>
	//RAMRead(WIFI_QSTRING_ADDRESS, qLength, buffer);
	SendData(WIFI_QSTRING_ADDRESS, qLength, 1);
     2e8:	41 e0       	ldi	r20, 0x01	; 1
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	b8 01       	movw	r22, r16
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	94 e0       	ldi	r25, 0x04	; 4
     2f2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <SendData>
	memset(filepath, 0x00, 100);
     2f6:	84 e6       	ldi	r24, 0x64	; 100
     2f8:	fe 01       	movw	r30, r28
     2fa:	11 92       	st	Z+, r1
     2fc:	8a 95       	dec	r24
     2fe:	e9 f7       	brne	.-6      	; 0x2fa <sendAvailableNetworks+0xcc>
	printf("Sent!");
     300:	80 eb       	ldi	r24, 0xB0	; 176
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	9f 93       	push	r25
     306:	8f 93       	push	r24
     308:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
     30c:	8d b7       	in	r24, 0x3d	; 61
     30e:	9e b7       	in	r25, 0x3e	; 62
     310:	0a 96       	adiw	r24, 0x0a	; 10
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	9e bf       	out	0x3e, r25	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	8d bf       	out	0x3d, r24	; 61
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <getFlagStatus>:

int getFlagStatus()
{
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
	//Testing 
	TIMSK1 &= ~(1 << TOIE1);
     32e:	ef e6       	ldi	r30, 0x6F	; 111
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	8e 7f       	andi	r24, 0xFE	; 254
     336:	80 83       	st	Z, r24
	Flags[ETHERNET] = 1; 
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	80 93 37 06 	sts	0x0637, r24
	Flags[WIFI] = 0; 
     33e:	10 92 38 06 	sts	0x0638, r1
	if(Flags[ETHERNET]){
		getFileEthernet(FLAG_FILE, 1, STATUS_FLAG_ADDRESS, 3); 
     342:	03 e0       	ldi	r16, 0x03	; 3
     344:	10 e0       	ldi	r17, 0x00	; 0
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e3       	ldi	r19, 0x30	; 48
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	86 eb       	ldi	r24, 0xB6	; 182
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	0e 94 72 02 	call	0x4e4	; 0x4e4 <getFileEthernet>
		RAMPrint(STATUS_FLAG_ADDRESS, 15);
     35a:	4f e0       	ldi	r20, 0x0F	; 15
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	70 e3       	ldi	r23, 0x30	; 48
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 c1 07 	call	0xf82	; 0xf82 <RAMPrint>
		//RAMRead(STATUS_FLAG_ADDRESS, 1, Flags[PROGRAM]); 
		//RAMRead(STATUS_FLAG_ADDRESS + 1, 1, Flags[PROGRAM + 1]); 
		//RAMRead(STATUS_FLAG_ADDRESS + 2, 1, Flags[PROGRAM + 2]); 
		
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e3       	ldi	r25, 0x30	; 48
     36e:	0e 94 26 08 	call	0x104c	; 0x104c <RAMReadByte>
     372:	c9 e3       	ldi	r28, 0x39	; 57
     374:	d6 e0       	ldi	r29, 0x06	; 6
     376:	8f 70       	andi	r24, 0x0F	; 15
     378:	88 83       	st	Y, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e3       	ldi	r25, 0x30	; 48
     37e:	0e 94 26 08 	call	0x104c	; 0x104c <RAMReadByte>
     382:	8f 70       	andi	r24, 0x0F	; 15
     384:	80 93 3a 06 	sts	0x063A, r24
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F); 
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	90 e3       	ldi	r25, 0x30	; 48
     38c:	0e 94 26 08 	call	0x104c	; 0x104c <RAMReadByte>
     390:	8f 70       	andi	r24, 0x0F	; 15
     392:	80 93 3b 06 	sts	0x063B, r24
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F);
		
	}
	memset(filepath, 0x00, 100); 
     396:	94 e6       	ldi	r25, 0x64	; 100
     398:	e3 ed       	ldi	r30, 0xD3	; 211
     39a:	f5 e0       	ldi	r31, 0x05	; 5
     39c:	df 01       	movw	r26, r30
     39e:	1d 92       	st	X+, r1
     3a0:	9a 95       	dec	r25
     3a2:	e9 f7       	brne	.-6      	; 0x39e <getFlagStatus+0x78>
	//Perform actions based on flags 
	if(Flags[PROGRAM] == 0x01)
     3a4:	98 81       	ld	r25, Y
     3a6:	91 30       	cpi	r25, 0x01	; 1
     3a8:	79 f0       	breq	.+30     	; 0x3c8 <getFlagStatus+0xa2>
	{
		//Program Function 
	}
	else if(Flags[NETWORK_SCAN] == 0x01)
     3aa:	90 91 3a 06 	lds	r25, 0x063A
     3ae:	91 30       	cpi	r25, 0x01	; 1
     3b0:	19 f4       	brne	.+6      	; 0x3b8 <getFlagStatus+0x92>
	{
		//printf("Network Scan!!\n"); 
		sendAvailableNetworks(); 
     3b2:	0e 94 17 01 	call	0x22e	; 0x22e <sendAvailableNetworks>
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <getFlagStatus+0xa2>
	}
	else if(Flags[NETWORK_CONNECT] == 0x01)
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	31 f4       	brne	.+12     	; 0x3c8 <getFlagStatus+0xa2>
	{
		//printf("Network Connect!\n");
		networkConnect("Wi-Pro", "brightshoe902"); 
     3bc:	6b ed       	ldi	r22, 0xDB	; 219
     3be:	72 e0       	ldi	r23, 0x02	; 2
     3c0:	89 ee       	ldi	r24, 0xE9	; 233
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 44 08 	call	0x1088	; 0x1088 <networkConnect>
		//getFileEthernet()
	}
	//_delay_ms(500);
	clearFlags(); 
     3c8:	0e 94 9e 00 	call	0x13c	; 0x13c <clearFlags>
	TIMSK1 |= (1 << TOIE1);
     3cc:	ef e6       	ldi	r30, 0x6F	; 111
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	81 60       	ori	r24, 0x01	; 1
     3d4:	80 83       	st	Z, r24
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <__vector_20>:
	}
}

//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	4f 93       	push	r20
     3f0:	5f 93       	push	r21
     3f2:	6f 93       	push	r22
     3f4:	7f 93       	push	r23
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	af 93       	push	r26
     3fc:	bf 93       	push	r27
     3fe:	ef 93       	push	r30
     400:	ff 93       	push	r31
	cli(); 
     402:	f8 94       	cli
	printf("Flag Status\n");
     404:	80 ef       	ldi	r24, 0xF0	; 240
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
	getFlagStatus(); 
     40c:	0e 94 93 01 	call	0x326	; 0x326 <getFlagStatus>
	TCNT1L = 0x00;
     410:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
     414:	10 92 85 00 	sts	0x0085, r1
	sei();  
     418:	78 94       	sei
}
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	bf 91       	pop	r27
     420:	af 91       	pop	r26
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	7f 91       	pop	r23
     428:	6f 91       	pop	r22
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	0f be       	out	0x3f, r0	; 63
     436:	0f 90       	pop	r0
     438:	1f 90       	pop	r1
     43a:	18 95       	reti

0000043c <main>:
#include "Wifi/Wifi.h"
#include "RAM/MemoryMap.h"
#include "ClientController.h"

int main(void)
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	c4 56       	subi	r28, 0x64	; 100
     446:	d1 09       	sbc	r29, r1
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
	char buffer[100];
	char* message = "What the fuck is this shit";
	uart_init();
     452:	0e 94 df 08 	call	0x11be	; 0x11be <uart_init>
	uart0_init(); 
     456:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <uart0_init>
	SPI_Init();  
     45a:	0e 94 18 08 	call	0x1030	; 0x1030 <SPI_Init>
	sei(); 
     45e:	78 94       	sei
	RAMWrite(message, 0, strlen(message));
     460:	4a e1       	ldi	r20, 0x1A	; 26
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	8c ef       	ldi	r24, 0xFC	; 252
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	0e 94 48 07 	call	0xe90	; 0xe90 <RAMWrite>
	RAMPrint(0, strlen(message));
     470:	4a e1       	ldi	r20, 0x1A	; 26
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	cb 01       	movw	r24, r22
     47a:	0e 94 c1 07 	call	0xf82	; 0xf82 <RAMPrint>
	RAMRead(0, 30, buffer);
     47e:	9e 01       	movw	r18, r28
     480:	2f 5f       	subi	r18, 0xFF	; 255
     482:	3f 4f       	sbci	r19, 0xFF	; 255
     484:	4e e1       	ldi	r20, 0x1E	; 30
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	cb 01       	movw	r24, r22
     48e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <RAMRead>
	
	ethernetInit();
     492:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <ethernetInit>
	printf("ethernetInit Done");
     496:	87 e1       	ldi	r24, 0x17	; 23
     498:	93 e0       	ldi	r25, 0x03	; 3
     49a:	9f 93       	push	r25
     49c:	8f 93       	push	r24
     49e:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
	pollingInit(); 
     4a2:	0e 94 91 00 	call	0x122	; 0x122 <pollingInit>
	

	printf("Done!\n");
     4a6:	89 e2       	ldi	r24, 0x29	; 41
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <main+0x76>

000004b4 <ethernetInit>:
//struct network currentNetwork; 


void ethernetInit()
{
	NetworkSetup(mac_addr, local_ip_addr, sub_mask, gtw_addr);
     4b4:	28 e0       	ldi	r18, 0x08	; 8
     4b6:	32 e0       	ldi	r19, 0x02	; 2
     4b8:	4c e0       	ldi	r20, 0x0C	; 12
     4ba:	52 e0       	ldi	r21, 0x02	; 2
     4bc:	60 e1       	ldi	r22, 0x10	; 16
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	84 e1       	ldi	r24, 0x14	; 20
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 3d 03 	call	0x67a	; 0x67a <NetworkSetup>
	while(!Server_Connect(TCP_MODE, server_ip_addr, server_port, source_port));
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	32 e0       	ldi	r19, 0x02	; 2
     4cc:	42 e0       	ldi	r20, 0x02	; 2
     4ce:	52 e0       	ldi	r21, 0x02	; 2
     4d0:	64 e0       	ldi	r22, 0x04	; 4
     4d2:	72 e0       	ldi	r23, 0x02	; 2
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 0c 04 	call	0x818	; 0x818 <Server_Connect>
     4da:	89 2b       	or	r24, r25
     4dc:	a9 f3       	breq	.-22     	; 0x4c8 <ethernetInit+0x14>
	//8KB Send and Receive Buffers 
	MemoryInit(); 
     4de:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <MemoryInit>
     4e2:	08 95       	ret

000004e4 <getFileEthernet>:
}

//Sends a filepath and retrieves the data contained in the file 
char* getFileEthernet(char* filepath, int externRAM, uint32_t RAMAddress, uint16_t receiveLength)
{ 
     4e4:	8f 92       	push	r8
     4e6:	9f 92       	push	r9
     4e8:	af 92       	push	r10
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	4b 01       	movw	r8, r22
     4fe:	69 01       	movw	r12, r18
     500:	7a 01       	movw	r14, r20
     502:	58 01       	movw	r10, r16
	char* receiveData; 
	strncpy(httpBuff, "GET ", 4);
     504:	cc e3       	ldi	r28, 0x3C	; 60
     506:	d6 e0       	ldi	r29, 0x06	; 6
     508:	47 e4       	ldi	r20, 0x47	; 71
     50a:	55 e4       	ldi	r21, 0x45	; 69
     50c:	64 e5       	ldi	r22, 0x54	; 84
     50e:	70 e2       	ldi	r23, 0x20	; 32
     510:	48 83       	st	Y, r20
     512:	59 83       	std	Y+1, r21	; 0x01
     514:	6a 83       	std	Y+2, r22	; 0x02
     516:	7b 83       	std	Y+3, r23	; 0x03
	strcat(httpBuff, URL); 
     518:	de 01       	movw	r26, r28
     51a:	0d 90       	ld	r0, X+
     51c:	00 20       	and	r0, r0
     51e:	e9 f7       	brne	.-6      	; 0x51a <getFileEthernet+0x36>
     520:	11 97       	sbiw	r26, 0x01	; 1
     522:	25 e1       	ldi	r18, 0x15	; 21
     524:	e5 e3       	ldi	r30, 0x35	; 53
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	01 90       	ld	r0, Z+
     52a:	0d 92       	st	X+, r0
     52c:	2a 95       	dec	r18
     52e:	e1 f7       	brne	.-8      	; 0x528 <getFileEthernet+0x44>
	strcat(httpBuff, filepath);
     530:	bc 01       	movw	r22, r24
     532:	ce 01       	movw	r24, r28
     534:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <strcat>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     538:	de 01       	movw	r26, r28
     53a:	0d 90       	ld	r0, X+
     53c:	00 20       	and	r0, r0
     53e:	e9 f7       	brne	.-6      	; 0x53a <getFileEthernet+0x56>
     540:	11 97       	sbiw	r26, 0x01	; 1
     542:	82 e2       	ldi	r24, 0x22	; 34
     544:	ef e2       	ldi	r30, 0x2F	; 47
     546:	f3 e0       	ldi	r31, 0x03	; 3
     548:	01 90       	ld	r0, Z+
     54a:	0d 92       	st	X+, r0
     54c:	8a 95       	dec	r24
     54e:	e1 f7       	brne	.-8      	; 0x548 <getFileEthernet+0x64>
	printf("Sent: %s\n", httpBuff);
     550:	df 93       	push	r29
     552:	cf 93       	push	r28
     554:	81 e5       	ldi	r24, 0x51	; 81
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
	//EnableEthernetInterrupt(); 
	SendData(httpBuff, strlen(httpBuff), 0);
     560:	fe 01       	movw	r30, r28
     562:	01 90       	ld	r0, Z+
     564:	00 20       	and	r0, r0
     566:	e9 f7       	brne	.-6      	; 0x562 <getFileEthernet+0x7e>
     568:	31 97       	sbiw	r30, 0x01	; 1
     56a:	bf 01       	movw	r22, r30
     56c:	6c 53       	subi	r22, 0x3C	; 60
     56e:	76 40       	sbci	r23, 0x06	; 6
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	ce 01       	movw	r24, r28
     576:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <SendData>
	ReceiveData(RAMAddress, receiveData, receiveLength, 1, externRAM);
     57a:	84 01       	movw	r16, r8
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	a5 01       	movw	r20, r10
     582:	a1 2c       	mov	r10, r1
     584:	b1 2c       	mov	r11, r1
     586:	b5 01       	movw	r22, r10
     588:	c6 01       	movw	r24, r12
     58a:	0e 94 16 06 	call	0xc2c	; 0xc2c <ReceiveData>
	memset(httpBuff, 0x00, 100); 
     58e:	84 e6       	ldi	r24, 0x64	; 100
     590:	fe 01       	movw	r30, r28
     592:	11 92       	st	Z+, r1
     594:	8a 95       	dec	r24
     596:	e9 f7       	brne	.-6      	; 0x592 <getFileEthernet+0xae>
	return receiveData; 
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
}
     5a0:	c5 01       	movw	r24, r10
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	9f 90       	pop	r9
     5b8:	8f 90       	pop	r8
     5ba:	08 95       	ret

000005bc <updateFileEthernet>:

void updateFileEthernet(char* filepath)
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
     5c0:	bc 01       	movw	r22, r24
     5c2:	8c e3       	ldi	r24, 0x3C	; 60
     5c4:	96 e0       	ldi	r25, 0x06	; 6
     5c6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     5ca:	cc e3       	ldi	r28, 0x3C	; 60
     5cc:	d6 e0       	ldi	r29, 0x06	; 6
     5ce:	de 01       	movw	r26, r28
     5d0:	0d 90       	ld	r0, X+
     5d2:	00 20       	and	r0, r0
     5d4:	e9 f7       	brne	.-6      	; 0x5d0 <updateFileEthernet+0x14>
     5d6:	11 97       	sbiw	r26, 0x01	; 1
     5d8:	82 e2       	ldi	r24, 0x22	; 34
     5da:	ef e2       	ldi	r30, 0x2F	; 47
     5dc:	f3 e0       	ldi	r31, 0x03	; 3
     5de:	01 90       	ld	r0, Z+
     5e0:	0d 92       	st	X+, r0
     5e2:	8a 95       	dec	r24
     5e4:	e1 f7       	brne	.-8      	; 0x5de <updateFileEthernet+0x22>
	printf("%s", httpBuff); 
     5e6:	df 93       	push	r29
     5e8:	cf 93       	push	r28
     5ea:	8d ea       	ldi	r24, 0xAD	; 173
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
     5f6:	fe 01       	movw	r30, r28
     5f8:	01 90       	ld	r0, Z+
     5fa:	00 20       	and	r0, r0
     5fc:	e9 f7       	brne	.-6      	; 0x5f8 <updateFileEthernet+0x3c>
     5fe:	31 97       	sbiw	r30, 0x01	; 1
     600:	bf 01       	movw	r22, r30
     602:	6c 53       	subi	r22, 0x3C	; 60
     604:	76 40       	sbci	r23, 0x06	; 6
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	ce 01       	movw	r24, r28
     60c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <SendData>
	memset(httpBuff, 0x00, 100); 
     610:	84 e6       	ldi	r24, 0x64	; 100
     612:	fe 01       	movw	r30, r28
     614:	11 92       	st	Z+, r1
     616:	8a 95       	dec	r24
     618:	e9 f7       	brne	.-6      	; 0x614 <updateFileEthernet+0x58>
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
}
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <SPI_EthernetWrite>:
//}

void SPI_EthernetWrite(unsigned int addr,unsigned char data)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<ETH_CS);
     628:	74 98       	cbi	0x0e, 4	; 14
	// Start Wiznet W5100 Write OpCode transmission
	SPDR = WIZNET_WRITE_OPCODE;
     62a:	20 ef       	ldi	r18, 0xF0	; 240
     62c:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     62e:	0d b4       	in	r0, 0x2d	; 45
     630:	07 fe       	sbrs	r0, 7
     632:	fd cf       	rjmp	.-6      	; 0x62e <SPI_EthernetWrite+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
     634:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     636:	0d b4       	in	r0, 0x2d	; 45
     638:	07 fe       	sbrs	r0, 7
     63a:	fd cf       	rjmp	.-6      	; 0x636 <SPI_EthernetWrite+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
     63c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     63e:	0d b4       	in	r0, 0x2d	; 45
     640:	07 fe       	sbrs	r0, 7
     642:	fd cf       	rjmp	.-6      	; 0x63e <SPI_EthernetWrite+0x16>

	// Start Data transmission
	SPDR = data;
     644:	6e bd       	out	0x2e, r22	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     646:	0d b4       	in	r0, 0x2d	; 45
     648:	07 fe       	sbrs	r0, 7
     64a:	fd cf       	rjmp	.-6      	; 0x646 <SPI_EthernetWrite+0x1e>
	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     64c:	74 9a       	sbi	0x0e, 4	; 14
     64e:	08 95       	ret

00000650 <SPI_EthernetRead>:
}

unsigned char SPI_EthernetRead(unsigned int addr)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<ETH_CS);
     650:	74 98       	cbi	0x0e, 4	; 14
	// Start Wiznet W5100 Read OpCode transmission
	SPDR = WIZNET_READ_OPCODE;
     652:	2f e0       	ldi	r18, 0x0F	; 15
     654:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     656:	0d b4       	in	r0, 0x2d	; 45
     658:	07 fe       	sbrs	r0, 7
     65a:	fd cf       	rjmp	.-6      	; 0x656 <SPI_EthernetRead+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
     65c:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <SPI_EthernetRead+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
     664:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     666:	0d b4       	in	r0, 0x2d	; 45
     668:	07 fe       	sbrs	r0, 7
     66a:	fd cf       	rjmp	.-6      	; 0x666 <SPI_EthernetRead+0x16>

	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     66c:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     66e:	0d b4       	in	r0, 0x2d	; 45
     670:	07 fe       	sbrs	r0, 7
     672:	fd cf       	rjmp	.-6      	; 0x66e <SPI_EthernetRead+0x1e>

	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     674:	74 9a       	sbi	0x0e, 4	; 14
	return(SPDR);
     676:	8e b5       	in	r24, 0x2e	; 46
}
     678:	08 95       	ret

0000067a <NetworkSetup>:

void NetworkSetup(uint8_t *mac_addr, uint8_t *local_ip_addr, uint8_t *sub_mask, uint8_t *gtw_addr)
{
     67a:	bf 92       	push	r11
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
     68e:	7b 01       	movw	r14, r22
     690:	6a 01       	movw	r12, r20
     692:	89 01       	movw	r16, r18
	
	CS_DDR |= (1<<ETH_CS);
     694:	6c 9a       	sbi	0x0d, 4	; 13
	// Set MOSI, SCK and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
     696:	87 e0       	ldi	r24, 0x07	; 7
     698:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     69a:	74 9a       	sbi	0x0e, 4	; 14
	// Enable SPI, Master Mode 0, set the clock rate fck/2
	SPCR = (1<<SPE)|(1<<MSTR);
     69c:	80 e5       	ldi	r24, 0x50	; 80
     69e:	8c bd       	out	0x2c, r24	; 44
	// Initial the Wiznet W5100
	//printf("Wiznet W5100 Init\n");
	// Ethernet Setup
	//printf("Enterting Ethernet Setup\n");
	// Setting the Wiznet W5100 Mode Register: 0x0000
	SPI_EthernetWrite(MR,0x80); 
     6a0:	60 e8       	ldi	r22, 0x80	; 128
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6aa:	8f ec       	ldi	r24, 0xCF	; 207
     6ac:	97 e0       	ldi	r25, 0x07	; 7
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <NetworkSetup+0x34>
     6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <NetworkSetup+0x3a>
     6b4:	00 00       	nop
	_delay_ms(1);
	/*printf("Reading MR: %d\n\n",SPI_EthernetRead(MR));
	// Setting the Wiznet W5100 Gateway Address
	//printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],\
	gtw_addr[2],gtw_addr[3]);*/
	SPI_EthernetWrite(GAR + 0,gtw_addr[0]);
     6b6:	f8 01       	movw	r30, r16
     6b8:	60 81       	ld	r22, Z
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(GAR + 1,gtw_addr[1]);
     6c2:	f8 01       	movw	r30, r16
     6c4:	61 81       	ldd	r22, Z+1	; 0x01
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(GAR + 2,gtw_addr[2]);
     6ce:	f8 01       	movw	r30, r16
     6d0:	62 81       	ldd	r22, Z+2	; 0x02
     6d2:	83 e0       	ldi	r24, 0x03	; 3
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(GAR + 3,gtw_addr[3]);
     6da:	f8 01       	movw	r30, r16
     6dc:	63 81       	ldd	r22, Z+3	; 0x03
     6de:	84 e0       	ldi	r24, 0x04	; 4
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
     6e6:	8f ec       	ldi	r24, 0xCF	; 207
     6e8:	97 e0       	ldi	r25, 0x07	; 7
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <NetworkSetup+0x70>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <NetworkSetup+0x76>
     6f0:	00 00       	nop
	_delay_ms(1);
	printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_EthernetRead(GAR + 0),SPI_EthernetRead(GAR + 1),\
	SPI_EthernetRead(GAR + 2),SPI_EthernetRead(GAR + 3));
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     6fa:	b8 2e       	mov	r11, r24
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     704:	08 2f       	mov	r16, r24
	SPI_EthernetWrite(GAR + 0,gtw_addr[0]);
	SPI_EthernetWrite(GAR + 1,gtw_addr[1]);
	SPI_EthernetWrite(GAR + 2,gtw_addr[2]);
	SPI_EthernetWrite(GAR + 3,gtw_addr[3]);
	_delay_ms(1);
	printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_EthernetRead(GAR + 0),SPI_EthernetRead(GAR + 1),\
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     70e:	18 2f       	mov	r17, r24
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     718:	1f 92       	push	r1
     71a:	bf 92       	push	r11
     71c:	1f 92       	push	r1
     71e:	0f 93       	push	r16
     720:	1f 92       	push	r1
     722:	1f 93       	push	r17
     724:	1f 92       	push	r1
     726:	8f 93       	push	r24
     728:	8b e5       	ldi	r24, 0x5B	; 91
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
	SPI_EthernetRead(GAR + 2),SPI_EthernetRead(GAR + 3));
	
	// Setting the Wiznet W5100 Source Address Register
	//printf("Setting Source Address %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n",mac_addr[0],mac_addr[1],\
	mac_addr[2],mac_addr[3],mac_addr[4],mac_addr[5]);
	SPI_EthernetWrite(SAR + 0,mac_addr[0]);
     734:	68 81       	ld	r22, Y
     736:	89 e0       	ldi	r24, 0x09	; 9
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SAR + 1,mac_addr[1]);
     73e:	69 81       	ldd	r22, Y+1	; 0x01
     740:	8a e0       	ldi	r24, 0x0A	; 10
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SAR + 2,mac_addr[2]);
     748:	6a 81       	ldd	r22, Y+2	; 0x02
     74a:	8b e0       	ldi	r24, 0x0B	; 11
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SAR + 3,mac_addr[3]);
     752:	6b 81       	ldd	r22, Y+3	; 0x03
     754:	8c e0       	ldi	r24, 0x0C	; 12
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SAR + 4,mac_addr[4]);
     75c:	6c 81       	ldd	r22, Y+4	; 0x04
     75e:	8d e0       	ldi	r24, 0x0D	; 13
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SAR + 5,mac_addr[5]);
     766:	6d 81       	ldd	r22, Y+5	; 0x05
     768:	8e e0       	ldi	r24, 0x0E	; 14
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
     770:	ef ec       	ldi	r30, 0xCF	; 207
     772:	f7 e0       	ldi	r31, 0x07	; 7
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <NetworkSetup+0xfa>
     778:	00 c0       	rjmp	.+0      	; 0x77a <NetworkSetup+0x100>
     77a:	00 00       	nop
	SPI_EthernetRead(SAR + 2),SPI_EthernetRead(SAR + 3),SPI_EthernetRead(SAR + 4),SPI_EthernetRead(SAR + 5));
	
	// Setting the Wiznet W5100 Sub Mask Address
	//printf("Setting Sub Mask Address %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],\
	sub_mask[2],sub_mask[3]);
	SPI_EthernetWrite(SUBR + 0,sub_mask[0]);
     77c:	f6 01       	movw	r30, r12
     77e:	60 81       	ld	r22, Z
     780:	85 e0       	ldi	r24, 0x05	; 5
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SUBR + 1,sub_mask[1]);
     788:	f6 01       	movw	r30, r12
     78a:	61 81       	ldd	r22, Z+1	; 0x01
     78c:	86 e0       	ldi	r24, 0x06	; 6
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SUBR + 2,sub_mask[2]);
     794:	f6 01       	movw	r30, r12
     796:	62 81       	ldd	r22, Z+2	; 0x02
     798:	87 e0       	ldi	r24, 0x07	; 7
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SUBR + 3,sub_mask[3]);
     7a0:	f6 01       	movw	r30, r12
     7a2:	63 81       	ldd	r22, Z+3	; 0x03
     7a4:	88 e0       	ldi	r24, 0x08	; 8
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
     7ac:	8f ec       	ldi	r24, 0xCF	; 207
     7ae:	97 e0       	ldi	r25, 0x07	; 7
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <NetworkSetup+0x136>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <NetworkSetup+0x13c>
     7b6:	00 00       	nop
	SPI_EthernetRead(SUBR + 2),SPI_EthernetRead(SUBR + 3));
	
	// Setting the Wiznet W5100 IP Address (SIPR): 0x000F to 0x0012
	//printf("Setting IP Address %d.%d.%d.%d\n",local_ip_addr[0],local_ip_addr[1],\
	local_ip_addr[2],local_ip_addr[3]);
	SPI_EthernetWrite(SIPR + 0,local_ip_addr[0]);
     7b8:	f7 01       	movw	r30, r14
     7ba:	60 81       	ld	r22, Z
     7bc:	8f e0       	ldi	r24, 0x0F	; 15
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SIPR + 1,local_ip_addr[1]);
     7c4:	f7 01       	movw	r30, r14
     7c6:	61 81       	ldd	r22, Z+1	; 0x01
     7c8:	80 e1       	ldi	r24, 0x10	; 16
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SIPR + 2,local_ip_addr[2]);
     7d0:	f7 01       	movw	r30, r14
     7d2:	62 81       	ldd	r22, Z+2	; 0x02
     7d4:	81 e1       	ldi	r24, 0x11	; 17
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(SIPR + 3,local_ip_addr[3]);
     7dc:	f7 01       	movw	r30, r14
     7de:	63 81       	ldd	r22, Z+3	; 0x03
     7e0:	82 e1       	ldi	r24, 0x12	; 18
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
     7e8:	8f ec       	ldi	r24, 0xCF	; 207
     7ea:	97 e0       	ldi	r25, 0x07	; 7
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <NetworkSetup+0x172>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <NetworkSetup+0x178>
     7f2:	00 00       	nop
     7f4:	ed b7       	in	r30, 0x3d	; 61
     7f6:	fe b7       	in	r31, 0x3e	; 62
     7f8:	3a 96       	adiw	r30, 0x0a	; 10
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	fe bf       	out	0x3e, r31	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	ed bf       	out	0x3d, r30	; 61
	
	//printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_EthernetRead(SIPR + 0),SPI_EthernetRead(SIPR + 1),\
	SPI_EthernetRead(SIPR + 2),SPI_EthernetRead(SIPR + 3));
	//printf("Done Wiznet W5100 Initialized!\n");
	//Memory_Init(); 
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	df 90       	pop	r13
     812:	cf 90       	pop	r12
     814:	bf 90       	pop	r11
     816:	08 95       	ret

00000818 <Server_Connect>:

int Server_Connect(uint8_t socketMode, uint8_t *server_ip_addr, uint8_t *server_port, uint8_t *source_port)
{
     818:	bf 92       	push	r11
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	b8 2e       	mov	r11, r24
     82c:	7b 01       	movw	r14, r22
     82e:	6a 01       	movw	r12, r20
     830:	89 01       	movw	r16, r18
	do 
	{
		printf("SPI SR Status: %d\n", SPI_EthernetRead(S0_SR));
     832:	c6 e7       	ldi	r28, 0x76	; 118
     834:	d3 e0       	ldi	r29, 0x03	; 3
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	94 e0       	ldi	r25, 0x04	; 4
     83a:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     83e:	1f 92       	push	r1
     840:	8f 93       	push	r24
     842:	df 93       	push	r29
     844:	cf 93       	push	r28
     846:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
		SPI_EthernetWrite(S0_CR, CLOSE);
     84a:	60 e1       	ldi	r22, 0x10	; 16
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	94 e0       	ldi	r25, 0x04	; 4
     850:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
		//SPI_Write(S0_MR, TCP_MODE);
		SPI_EthernetWrite(S0_MR, socketMode);
     854:	6b 2d       	mov	r22, r11
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	94 e0       	ldi	r25, 0x04	; 4
     85a:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
		//printf("Setting Source Port on Socket 0 %d%d\n",source_port[0],source_port[1]);
		SPI_EthernetWrite(S0_SPORT + 0, source_port[0]);
     85e:	f8 01       	movw	r30, r16
     860:	60 81       	ld	r22, Z
     862:	84 e0       	ldi	r24, 0x04	; 4
     864:	94 e0       	ldi	r25, 0x04	; 4
     866:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
		SPI_EthernetWrite(S0_SPORT + 1, source_port[1]);
     86a:	f8 01       	movw	r30, r16
     86c:	61 81       	ldd	r22, Z+1	; 0x01
     86e:	85 e0       	ldi	r24, 0x05	; 5
     870:	94 e0       	ldi	r25, 0x04	; 4
     872:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
		//printf("Reading Source Port on Socket 0 %d%d\n\n",SPI_EthernetRead(S0_SPORT),SPI_EthernetRead(S0_SPORT + 1));
		
		//printf("Setting Socket 0 to Open\n\n");
		SPI_EthernetWrite(S0_CR, OPEN);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	94 e0       	ldi	r25, 0x04	; 4
     87c:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
		//printf("SPI SR Status: %d\n", SPI_EthernetRead(S0_SR));
		
	} while (SPI_EthernetRead(S0_SR) != SOCK_INIT);
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	94 e0       	ldi	r25, 0x04	; 4
     884:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	83 31       	cpi	r24, 0x13	; 19
     892:	89 f6       	brne	.-94     	; 0x836 <Server_Connect+0x1e>
	
	//Write Server IP to Socket 0 IP Register
	//printf("Setting Server IP Address %d.%d.%d.%d\n",server_ip_addr[0],server_ip_addr[1],\
	server_ip_addr[2],server_ip_addr[3]); 
	SPI_EthernetWrite(S0_DIPR + 0,server_ip_addr[0]);
     894:	f7 01       	movw	r30, r14
     896:	60 81       	ld	r22, Z
     898:	8c e0       	ldi	r24, 0x0C	; 12
     89a:	94 e0       	ldi	r25, 0x04	; 4
     89c:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 1, server_ip_addr[1]);
     8a0:	f7 01       	movw	r30, r14
     8a2:	61 81       	ldd	r22, Z+1	; 0x01
     8a4:	8d e0       	ldi	r24, 0x0D	; 13
     8a6:	94 e0       	ldi	r25, 0x04	; 4
     8a8:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 2,server_ip_addr[2]);
     8ac:	f7 01       	movw	r30, r14
     8ae:	62 81       	ldd	r22, Z+2	; 0x02
     8b0:	8e e0       	ldi	r24, 0x0E	; 14
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 3, server_ip_addr[3]);
     8b8:	f7 01       	movw	r30, r14
     8ba:	63 81       	ldd	r22, Z+3	; 0x03
     8bc:	8f e0       	ldi	r24, 0x0F	; 15
     8be:	94 e0       	ldi	r25, 0x04	; 4
     8c0:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetRead(S0_DIPR + 2),SPI_EthernetRead(S0_DIPR + 3));
	//printf("SPI SR Status: 0x%02x\n", SPI_EthernetRead(S0_SR));
	
	//Write Server Port to Socket 0 IP Register 
	//printf("Setting Server Port\n");
	SPI_EthernetWrite(S0_DPORT + 0, server_port[0]); 
     8c4:	f6 01       	movw	r30, r12
     8c6:	60 81       	ld	r22, Z
     8c8:	80 e1       	ldi	r24, 0x10	; 16
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DPORT + 1, server_port[1]);
     8d0:	f6 01       	movw	r30, r12
     8d2:	61 81       	ldd	r22, Z+1	; 0x01
     8d4:	81 e1       	ldi	r24, 0x11	; 17
     8d6:	94 e0       	ldi	r25, 0x04	; 4
     8d8:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	//printf("Reading S0_DPORT: %d%d\n\n",SPI_EthernetRead(S0_DPORT + 0),SPI_EthernetRead(S0_DPORT + 1)); 
	//printf("SPI SR Status: 0x%02x\n", SPI_EthernetRead(S0_SR));
	
	//Try to connect 
	SPI_EthernetWrite(S0_CR, CONNECT);
     8dc:	64 e0       	ldi	r22, 0x04	; 4
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	94 e0       	ldi	r25, 0x04	; 4
     8e2:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
     8e6:	c0 e0       	ldi	r28, 0x00	; 0
     8e8:	d0 e0       	ldi	r29, 0x00	; 0
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
	{
		_delay_us(300); 
		delayCount += 1; 
		//Every 3 seconds
		if(delayCount%10000 == 0)
     8ea:	00 e1       	ldi	r16, 0x10	; 16
     8ec:	17 e2       	ldi	r17, 0x27	; 39
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
     8ee:	36 c0       	rjmp	.+108    	; 0x95c <Server_Connect+0x144>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f0:	87 e5       	ldi	r24, 0x57	; 87
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <Server_Connect+0xdc>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <Server_Connect+0xe2>
     8fa:	00 00       	nop
	{
		_delay_us(300); 
		delayCount += 1; 
     8fc:	21 96       	adiw	r28, 0x01	; 1
		//Every 3 seconds
		if(delayCount%10000 == 0)
     8fe:	9e 01       	movw	r18, r28
     900:	32 95       	swap	r19
     902:	22 95       	swap	r18
     904:	2f 70       	andi	r18, 0x0F	; 15
     906:	23 27       	eor	r18, r19
     908:	3f 70       	andi	r19, 0x0F	; 15
     90a:	23 27       	eor	r18, r19
     90c:	a7 e4       	ldi	r26, 0x47	; 71
     90e:	b3 e0       	ldi	r27, 0x03	; 3
     910:	0e 94 43 0b 	call	0x1686	; 0x1686 <__umulhisi3>
     914:	96 95       	lsr	r25
     916:	87 95       	ror	r24
     918:	96 95       	lsr	r25
     91a:	87 95       	ror	r24
     91c:	96 95       	lsr	r25
     91e:	87 95       	ror	r24
     920:	80 9f       	mul	r24, r16
     922:	90 01       	movw	r18, r0
     924:	81 9f       	mul	r24, r17
     926:	30 0d       	add	r19, r0
     928:	90 9f       	mul	r25, r16
     92a:	30 0d       	add	r19, r0
     92c:	11 24       	eor	r1, r1
     92e:	c2 17       	cp	r28, r18
     930:	d3 07       	cpc	r29, r19
     932:	a1 f4       	brne	.+40     	; 0x95c <Server_Connect+0x144>
		{
			printf("Trying to Establish Connection...\n");
     934:	89 e8       	ldi	r24, 0x89	; 137
     936:	93 e0       	ldi	r25, 0x03	; 3
     938:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
			//delayCount = 0; 
			//15 seconds
			if(delayCount > 50000)
     93c:	c1 35       	cpi	r28, 0x51	; 81
     93e:	93 ec       	ldi	r25, 0xC3	; 195
     940:	d9 07       	cpc	r29, r25
     942:	60 f0       	brcs	.+24     	; 0x95c <Server_Connect+0x144>
			{
				printf("Timeout, disconnecting!\n"); 
     944:	8b ea       	ldi	r24, 0xAB	; 171
     946:	93 e0       	ldi	r25, 0x03	; 3
     948:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
				SPI_EthernetWrite(S0_CR, CLOSE); 
     94c:	60 e1       	ldi	r22, 0x10	; 16
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	94 e0       	ldi	r25, 0x04	; 4
     952:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
				return 0; 
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	19 c0       	rjmp	.+50     	; 0x98e <Server_Connect+0x176>
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     964:	87 31       	cpi	r24, 0x17	; 23
     966:	21 f6       	brne	.-120    	; 0x8f0 <Server_Connect+0xd8>
				return 0; 
			}
		}
	}
	
	uint8_t sr_status = SPI_EthernetRead(S0_SR);
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	94 e0       	ldi	r25, 0x04	; 4
     96c:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
	if(sr_status == SOCK_ESTABLISHED)
     970:	87 31       	cpi	r24, 0x17	; 23
     972:	39 f4       	brne	.+14     	; 0x982 <Server_Connect+0x16a>
	{
		//printf("SPI SR Status: 0x%02x\n", sr_status);
		printf("Connection Succeeded!\n\n");
     974:	83 ec       	ldi	r24, 0xC3	; 195
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
		return 1; 
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	06 c0       	rjmp	.+12     	; 0x98e <Server_Connect+0x176>
	}
	//Connection Failed 
	else
	{
		//printf("SPI SR Status: 0x%02x\n", sr_status);
		printf("Could not connect. Exiting...\n\n");
     982:	8a ed       	ldi	r24, 0xDA	; 218
     984:	93 e0       	ldi	r25, 0x03	; 3
     986:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
		return 0; 
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	bf 90       	pop	r11
     9a0:	08 95       	ret

000009a2 <MemoryInit>:

void MemoryInit()
{
	//assign 8kb rx memory to socket 0 
	SPI_EthernetWrite(RMSR, 0x03);
     9a2:	63 e0       	ldi	r22, 0x03	; 3
     9a4:	8a e1       	ldi	r24, 0x1A	; 26
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	//assign 8kb tx memory to socket 0 
	SPI_EthernetWrite(TMSR, 0x03);	
     9ac:	63 e0       	ldi	r22, 0x03	; 3
     9ae:	8b e1       	ldi	r24, 0x1B	; 27
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	//S0_TX_BASE = 0x4000;
	//S0_RX_MASK = 0x07FF;
	//S0_RX_BASE = 0x6000;
	//
	//8k RX and TX Socket 0 
	S0_TX_MASK = 0x1FFF;
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	9f e1       	ldi	r25, 0x1F	; 31
     9ba:	90 93 d3 06 	sts	0x06D3, r25
     9be:	80 93 d2 06 	sts	0x06D2, r24
	S0_TX_BASE = 0x4000;
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e4       	ldi	r19, 0x40	; 64
     9c6:	30 93 d5 06 	sts	0x06D5, r19
     9ca:	20 93 d4 06 	sts	0x06D4, r18
	S0_RX_MASK = 0x1FFF;
     9ce:	90 93 d9 06 	sts	0x06D9, r25
     9d2:	80 93 d8 06 	sts	0x06D8, r24
	S0_RX_BASE = 0x6000;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e6       	ldi	r25, 0x60	; 96
     9da:	90 93 d7 06 	sts	0x06D7, r25
     9de:	80 93 d6 06 	sts	0x06D6, r24
     9e2:	08 95       	ret

000009e4 <SocketCommand>:
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     9e4:	68 2f       	mov	r22, r24
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	94 e0       	ldi	r25, 0x04	; 4
     9ea:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
     9ee:	08 95       	ret

000009f0 <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     9f0:	4f 92       	push	r4
     9f2:	5f 92       	push	r5
     9f4:	6f 92       	push	r6
     9f6:	7f 92       	push	r7
     9f8:	8f 92       	push	r8
     9fa:	9f 92       	push	r9
     9fc:	af 92       	push	r10
     9fe:	bf 92       	push	r11
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	7c 01       	movw	r14, r24
     a12:	6b 01       	movw	r12, r22
     a14:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	94 e0       	ldi	r25, 0x04	; 4
     a1a:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     a1e:	1f 92       	push	r1
     a20:	8f 93       	push	r24
     a22:	89 ef       	ldi	r24, 0xF9	; 249
     a24:	93 e0       	ldi	r25, 0x03	; 3
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
     a2a:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	94 e0       	ldi	r25, 0x04	; 4
     a32:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	87 31       	cpi	r24, 0x17	; 23
     a40:	59 f0       	breq	.+22     	; 0xa58 <SendData+0x68>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     a42:	2a e1       	ldi	r18, 0x1A	; 26
     a44:	32 e0       	ldi	r19, 0x02	; 2
     a46:	4c e1       	ldi	r20, 0x1C	; 28
     a48:	52 e0       	ldi	r21, 0x02	; 2
     a4a:	6e e1       	ldi	r22, 0x1E	; 30
     a4c:	72 e0       	ldi	r23, 0x02	; 2
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	0e 94 0c 04 	call	0x818	; 0x818 <Server_Connect>
     a54:	89 2b       	or	r24, r25
     a56:	a9 f3       	breq	.-22     	; 0xa42 <SendData+0x52>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     a58:	80 e2       	ldi	r24, 0x20	; 32
     a5a:	94 e0       	ldi	r25, 0x04	; 4
     a5c:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     a60:	c8 2f       	mov	r28, r24
     a62:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     a64:	dc 2f       	mov	r29, r28
     a66:	cc 27       	eor	r28, r28
     a68:	81 e2       	ldi	r24, 0x21	; 33
     a6a:	94 e0       	ldi	r25, 0x04	; 4
     a6c:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     a70:	c8 0f       	add	r28, r24
     a72:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     a74:	cc 15       	cp	r28, r12
     a76:	dd 05       	cpc	r29, r13
     a78:	08 f4       	brcc	.+2      	; 0xa7c <SendData+0x8c>
     a7a:	9e c0       	rjmp	.+316    	; 0xbb8 <SendData+0x1c8>
     a7c:	30 c0       	rjmp	.+96     	; 0xade <SendData+0xee>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a7e:	8f ec       	ldi	r24, 0xCF	; 207
     a80:	97 e0       	ldi	r25, 0x07	; 7
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	f1 f7       	brne	.-4      	; 0xa82 <SendData+0x92>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <SendData+0x98>
     a88:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     a8a:	80 e2       	ldi	r24, 0x20	; 32
     a8c:	94 e0       	ldi	r25, 0x04	; 4
     a8e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     a92:	c8 2f       	mov	r28, r24
     a94:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     a96:	dc 2f       	mov	r29, r28
     a98:	cc 27       	eor	r28, r28
     a9a:	81 e2       	ldi	r24, 0x21	; 33
     a9c:	94 e0       	ldi	r25, 0x04	; 4
     a9e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     aa2:	c8 0f       	add	r28, r24
     aa4:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     aa6:	df 93       	push	r29
     aa8:	cf 93       	push	r28
     aaa:	9f 92       	push	r9
     aac:	8f 92       	push	r8
     aae:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
     ab2:	01 50       	subi	r16, 0x01	; 1
     ab4:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	01 15       	cp	r16, r1
     ac0:	11 05       	cpc	r17, r1
     ac2:	51 f4       	brne	.+20     	; 0xad8 <SendData+0xe8>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     ac4:	88 e0       	ldi	r24, 0x08	; 8
     ac6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	94 e0       	ldi	r25, 0x04	; 4
     ace:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     ad2:	81 11       	cpse	r24, r1
     ad4:	fa cf       	rjmp	.-12     	; 0xaca <SendData+0xda>
     ad6:	6a c0       	rjmp	.+212    	; 0xbac <SendData+0x1bc>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     ad8:	cc 15       	cp	r28, r12
     ada:	dd 05       	cpc	r29, r13
     adc:	80 f2       	brcs	.-96     	; 0xa7e <SendData+0x8e>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     ade:	84 e2       	ldi	r24, 0x24	; 36
     ae0:	94 e0       	ldi	r25, 0x04	; 4
     ae2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     ae6:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     ae8:	85 e2       	ldi	r24, 0x25	; 37
     aea:	94 e0       	ldi	r25, 0x04	; 4
     aec:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     af0:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     af2:	54 2c       	mov	r5, r4
     af4:	44 24       	eor	r4, r4
     af6:	48 0e       	add	r4, r24
     af8:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     afa:	82 e2       	ldi	r24, 0x22	; 34
     afc:	94 e0       	ldi	r25, 0x04	; 4
     afe:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     b02:	83 e2       	ldi	r24, 0x23	; 35
     b04:	94 e0       	ldi	r25, 0x04	; 4
     b06:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     b0a:	81 e1       	ldi	r24, 0x11	; 17
     b0c:	94 e0       	ldi	r25, 0x04	; 4
     b0e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
	while(i < bufferLength) {
     b12:	c1 14       	cp	r12, r1
     b14:	d1 04       	cpc	r13, r1
     b16:	69 f1       	breq	.+90     	; 0xb72 <SendData+0x182>
     b18:	47 01       	movw	r8, r14
     b1a:	8c 0c       	add	r8, r12
     b1c:	9d 1c       	adc	r9, r13
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     b1e:	82 01       	movw	r16, r4
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     b20:	c0 e0       	ldi	r28, 0x00	; 0
     b22:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     b24:	a0 90 d2 06 	lds	r10, 0x06D2
     b28:	b0 90 d3 06 	lds	r11, 0x06D3
     b2c:	a0 22       	and	r10, r16
     b2e:	b1 22       	and	r11, r17
     b30:	80 91 d4 06 	lds	r24, 0x06D4
     b34:	90 91 d5 06 	lds	r25, 0x06D5
     b38:	a8 0e       	add	r10, r24
     b3a:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     b3c:	61 14       	cp	r6, r1
     b3e:	71 04       	cpc	r7, r1
     b40:	41 f0       	breq	.+16     	; 0xb52 <SendData+0x162>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     b42:	ce 01       	movw	r24, r28
     b44:	0e 94 26 08 	call	0x104c	; 0x104c <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     b48:	68 2f       	mov	r22, r24
     b4a:	c5 01       	movw	r24, r10
     b4c:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
     b50:	05 c0       	rjmp	.+10     	; 0xb5c <SendData+0x16c>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     b52:	f7 01       	movw	r30, r14
     b54:	60 81       	ld	r22, Z
     b56:	c5 01       	movw	r24, r10
     b58:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
		}
		offaddr++;
     b5c:	0f 5f       	subi	r16, 0xFF	; 255
     b5e:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     b60:	ff ef       	ldi	r31, 0xFF	; 255
     b62:	ef 1a       	sub	r14, r31
     b64:	ff 0a       	sbc	r15, r31
     b66:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     b68:	e8 14       	cp	r14, r8
     b6a:	f9 04       	cpc	r15, r9
     b6c:	d9 f6       	brne	.-74     	; 0xb24 <SendData+0x134>
     b6e:	4c 0c       	add	r4, r12
     b70:	5d 1c       	adc	r5, r13
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	c5 01       	movw	r24, r10
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     b7c:	84 e2       	ldi	r24, 0x24	; 36
     b7e:	94 e0       	ldi	r25, 0x04	; 4
     b80:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     b84:	6f ef       	ldi	r22, 0xFF	; 255
     b86:	84 e2       	ldi	r24, 0x24	; 36
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     b8e:	64 2d       	mov	r22, r4
     b90:	85 e2       	ldi	r24, 0x25	; 37
     b92:	94 e0       	ldi	r25, 0x04	; 4
     b94:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     b98:	80 e2       	ldi	r24, 0x20	; 32
     b9a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	94 e0       	ldi	r25, 0x04	; 4
     ba2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     ba6:	81 11       	cpse	r24, r1
     ba8:	fa cf       	rjmp	.-12     	; 0xb9e <SendData+0x1ae>
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <SendData+0x1c2>
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_EthernetRead(S0_CR));
			return 0;
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	2c c0       	rjmp	.+88     	; 0xc0a <SendData+0x21a>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	29 c0       	rjmp	.+82     	; 0xc0a <SendData+0x21a>
     bb8:	8f ec       	ldi	r24, 0xCF	; 207
     bba:	97 e0       	ldi	r25, 0x07	; 7
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <SendData+0x1cc>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <SendData+0x1d2>
     bc2:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     bc4:	80 e2       	ldi	r24, 0x20	; 32
     bc6:	94 e0       	ldi	r25, 0x04	; 4
     bc8:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     bcc:	c8 2f       	mov	r28, r24
     bce:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     bd0:	dc 2f       	mov	r29, r28
     bd2:	cc 27       	eor	r28, r28
     bd4:	81 e2       	ldi	r24, 0x21	; 33
     bd6:	94 e0       	ldi	r25, 0x04	; 4
     bd8:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     bdc:	c8 0f       	add	r28, r24
     bde:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	85 e0       	ldi	r24, 0x05	; 5
     be6:	94 e0       	ldi	r25, 0x04	; 4
     be8:	9f 93       	push	r25
     bea:	8f 93       	push	r24
     bec:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	09 ee       	ldi	r16, 0xE9	; 233
     bfa:	13 e0       	ldi	r17, 0x03	; 3
     bfc:	0f 2e       	mov	r0, r31
     bfe:	f5 e0       	ldi	r31, 0x05	; 5
     c00:	8f 2e       	mov	r8, r31
     c02:	f4 e0       	ldi	r31, 0x04	; 4
     c04:	9f 2e       	mov	r9, r31
     c06:	f0 2d       	mov	r31, r0
     c08:	67 cf       	rjmp	.-306    	; 0xad8 <SendData+0xe8>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	bf 90       	pop	r11
     c1c:	af 90       	pop	r10
     c1e:	9f 90       	pop	r9
     c20:	8f 90       	pop	r8
     c22:	7f 90       	pop	r7
     c24:	6f 90       	pop	r6
     c26:	5f 90       	pop	r5
     c28:	4f 90       	pop	r4
     c2a:	08 95       	ret

00000c2c <ReceiveData>:

int ReceiveData(uint16_t RAMAddress, char* buffer, uint16_t dataLength, int header, int externRAM)
{
     c2c:	5f 92       	push	r5
     c2e:	6f 92       	push	r6
     c30:	7f 92       	push	r7
     c32:	8f 92       	push	r8
     c34:	9f 92       	push	r9
     c36:	af 92       	push	r10
     c38:	bf 92       	push	r11
     c3a:	cf 92       	push	r12
     c3c:	df 92       	push	r13
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	4c 01       	movw	r8, r24
     c4c:	5b 01       	movw	r10, r22
     c4e:	6a 01       	movw	r12, r20
     c50:	79 01       	movw	r14, r18
     c52:	ca ee       	ldi	r28, 0xEA	; 234
     c54:	d3 e0       	ldi	r29, 0x03	; 3
	if (dataLength > MAX_BUFF)
		dataLength = MAX_BUFF - 2;
		
	while(1)
	{
		if(SPI_EthernetRead(S0_SR) == SOCK_ESTABLISHED)
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	94 e0       	ldi	r25, 0x04	; 4
     c5a:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     c5e:	87 31       	cpi	r24, 0x17	; 23
     c60:	09 f0       	breq	.+2      	; 0xc64 <ReceiveData+0x38>
     c62:	5c c0       	rjmp	.+184    	; 0xd1c <ReceiveData+0xf0>
		{
			// Read the Rx Read Pointer
			ptr = SPI_EthernetRead(S0_RX_RD);
     c64:	88 e2       	ldi	r24, 0x28	; 40
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     c6c:	c8 2f       	mov	r28, r24
			//printf("RX Read Pointer: %d\n", ptr);
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
     c6e:	89 e2       	ldi	r24, 0x29	; 41
     c70:	94 e0       	ldi	r25, 0x04	; 4
     c72:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
	while(1)
	{
		if(SPI_EthernetRead(S0_SR) == SOCK_ESTABLISHED)
		{
			// Read the Rx Read Pointer
			ptr = SPI_EthernetRead(S0_RX_RD);
     c76:	d0 e0       	ldi	r29, 0x00	; 0
			//printf("RX Read Pointer: %d\n", ptr);
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
     c78:	dc 2f       	mov	r29, r28
     c7a:	cc 27       	eor	r28, r28
     c7c:	c8 0f       	add	r28, r24
     c7e:	d1 1d       	adc	r29, r1
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
     c80:	c1 14       	cp	r12, r1
     c82:	d1 04       	cpc	r13, r1
     c84:	b9 f1       	breq	.+110    	; 0xcf4 <ReceiveData+0xc8>
{
	uint16_t ptr,offaddr,realaddr;
	//uint16_t RAMAddress = 0; 
	char tempvar; 
	//uint8_t header = 1; 
	uint8_t headerCount = 0; 
     c86:	51 2c       	mov	r5, r1
					else{
						//printf("Writing to Buffer\n"); 
						*buffer = tempvar; 
						buffer++; 
					}
					dataLength--;
     c88:	61 2c       	mov	r6, r1
     c8a:	71 2c       	mov	r7, r1
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
				realaddr = S0_RX_BASE + (offaddr & S0_RX_MASK);
     c8c:	80 91 d8 06 	lds	r24, 0x06D8
     c90:	90 91 d9 06 	lds	r25, 0x06D9
     c94:	8c 23       	and	r24, r28
     c96:	9d 23       	and	r25, r29
     c98:	20 91 d6 06 	lds	r18, 0x06D6
     c9c:	30 91 d7 06 	lds	r19, 0x06D7
				//printf("Real Address: %d\n", realaddr);
				tempvar = SPI_EthernetRead(realaddr);
     ca0:	82 0f       	add	r24, r18
     ca2:	93 1f       	adc	r25, r19
     ca4:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
				//printf("Buffer: %c\n", tempvar);
				if(tempvar == '\n' && header)
     ca8:	8a 30       	cpi	r24, 0x0A	; 10
     caa:	41 f4       	brne	.+16     	; 0xcbc <ReceiveData+0x90>
     cac:	e1 14       	cp	r14, r1
     cae:	f1 04       	cpc	r15, r1
     cb0:	41 f0       	breq	.+16     	; 0xcc2 <ReceiveData+0x96>
				{
					//printf("Found New Line!\n");
					headerCount++; 
     cb2:	53 94       	inc	r5
					if(headerCount >= 10)
     cb4:	89 e0       	ldi	r24, 0x09	; 9
     cb6:	85 15       	cp	r24, r5
     cb8:	b8 f0       	brcs	.+46     	; 0xce8 <ReceiveData+0xbc>
     cba:	18 c0       	rjmp	.+48     	; 0xcec <ReceiveData+0xc0>
						header = 0; 
				}
				else if(!header)
     cbc:	e1 14       	cp	r14, r1
     cbe:	f1 04       	cpc	r15, r1
     cc0:	a9 f4       	brne	.+42     	; 0xcec <ReceiveData+0xc0>
				{
					//printf("Write to RAM!\n");
					//printf("Writing to RAM: %c @ address %d\n", tempvar, RAMAddress); 
					if(externRAM){
     cc2:	01 15       	cp	r16, r1
     cc4:	11 05       	cpc	r17, r1
     cc6:	39 f0       	breq	.+14     	; 0xcd6 <ReceiveData+0xaa>
						RAMWriteByte(tempvar, RAMAddress);	
     cc8:	b4 01       	movw	r22, r8
     cca:	0e 94 0b 08 	call	0x1016	; 0x1016 <RAMWriteByte>
						RAMAddress++;
     cce:	9f ef       	ldi	r25, 0xFF	; 255
     cd0:	89 1a       	sub	r8, r25
     cd2:	99 0a       	sbc	r9, r25
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <ReceiveData+0xb0>
					}
					else{
						//printf("Writing to Buffer\n"); 
						*buffer = tempvar; 
     cd6:	f5 01       	movw	r30, r10
     cd8:	81 93       	st	Z+, r24
     cda:	5f 01       	movw	r10, r30
						buffer++; 
					}
					dataLength--;
     cdc:	f1 e0       	ldi	r31, 0x01	; 1
     cde:	cf 1a       	sub	r12, r31
     ce0:	d1 08       	sbc	r13, r1
     ce2:	e6 2c       	mov	r14, r6
     ce4:	f7 2c       	mov	r15, r7
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <ReceiveData+0xc0>
				if(tempvar == '\n' && header)
				{
					//printf("Found New Line!\n");
					headerCount++; 
					if(headerCount >= 10)
						header = 0; 
     ce8:	e6 2c       	mov	r14, r6
     cea:	f7 2c       	mov	r15, r7
						*buffer = tempvar; 
						buffer++; 
					}
					dataLength--;
				}
				offaddr++;
     cec:	21 96       	adiw	r28, 0x01	; 1
			offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RD + 1));
			//#if _DEBUG_MODE
			//printf("RX Buffer: %x\n",offaddr);
			//#endif
			//RAMWriteByte(0x32, 0000);
			while(dataLength) {
     cee:	c1 14       	cp	r12, r1
     cf0:	d1 04       	cpc	r13, r1
     cf2:	61 f6       	brne	.-104    	; 0xc8c <ReceiveData+0x60>
					}
					dataLength--;
				}
				offaddr++;
			}
			*buffer='\0';        // String terminated character
     cf4:	f5 01       	movw	r30, r10
     cf6:	10 82       	st	Z, r1
			//printf("%s", buffer);

			// Increase the S0_RX_RD value, so it point to the next receive
			SPI_EthernetWrite(S0_RX_RD,(offaddr & 0xFF00) >> 8 );
     cf8:	6d 2f       	mov	r22, r29
     cfa:	88 e2       	ldi	r24, 0x28	; 40
     cfc:	94 e0       	ldi	r25, 0x04	; 4
     cfe:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>
			SPI_EthernetWrite(S0_RX_RD + 1,(offaddr & 0x00FF));
     d02:	6c 2f       	mov	r22, r28
     d04:	89 e2       	ldi	r24, 0x29	; 41
     d06:	94 e0       	ldi	r25, 0x04	; 4
     d08:	0e 94 14 03 	call	0x628	; 0x628 <SPI_EthernetWrite>

			// Now Send the RECV command
			SocketCommand(RECV);
     d0c:	80 e4       	ldi	r24, 0x40	; 64
     d0e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <SocketCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d12:	fd e0       	ldi	r31, 0x0D	; 13
     d14:	fa 95       	dec	r31
     d16:	f1 f7       	brne	.-4      	; 0xd14 <ReceiveData+0xe8>
     d18:	00 00       	nop
     d1a:	1f c0       	rjmp	.+62     	; 0xd5a <ReceiveData+0x12e>
     d1c:	21 97       	sbiw	r28, 0x01	; 1
			_delay_us(5);    // Wait for Receive Process
			break; 
		}
		else if(timeCount > MAX_TIME_COUNT)
     d1e:	20 97       	sbiw	r28, 0x00	; 0
     d20:	a9 f4       	brne	.+42     	; 0xd4c <ReceiveData+0x120>
		{
			printf("Ethernet Receive Data Timeout!\n");
     d22:	8d e1       	ldi	r24, 0x1D	; 29
     d24:	94 e0       	ldi	r25, 0x04	; 4
     d26:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
			printf("Stats Reg: 0x%02x", SPI_EthernetRead(S0_SR));
     d2a:	83 e0       	ldi	r24, 0x03	; 3
     d2c:	94 e0       	ldi	r25, 0x04	; 4
     d2e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_EthernetRead>
     d32:	1f 92       	push	r1
     d34:	8f 93       	push	r24
     d36:	8c e3       	ldi	r24, 0x3C	; 60
     d38:	94 e0       	ldi	r25, 0x04	; 4
     d3a:	9f 93       	push	r25
     d3c:	8f 93       	push	r24
     d3e:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
			break; 
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	07 c0       	rjmp	.+14     	; 0xd5a <ReceiveData+0x12e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d4c:	8f e1       	ldi	r24, 0x1F	; 31
     d4e:	9e e4       	ldi	r25, 0x4E	; 78
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <ReceiveData+0x124>
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <ReceiveData+0x12a>
     d56:	00 00       	nop
     d58:	7e cf       	rjmp	.-260    	; 0xc56 <ReceiveData+0x2a>
		}
		
	}	

	return 1;
}
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	ef 90       	pop	r14
     d6a:	df 90       	pop	r13
     d6c:	cf 90       	pop	r12
     d6e:	bf 90       	pop	r11
     d70:	af 90       	pop	r10
     d72:	9f 90       	pop	r9
     d74:	8f 90       	pop	r8
     d76:	7f 90       	pop	r7
     d78:	6f 90       	pop	r6
     d7a:	5f 90       	pop	r5
     d7c:	08 95       	ret

00000d7e <uart_sendStream>:
	putchar('m');
}


int uart_sendStream(char ch,FILE *stream)
{
     d7e:	cf 93       	push	r28
     d80:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     d82:	8a 30       	cpi	r24, 0x0A	; 10
     d84:	19 f4       	brne	.+6      	; 0xd8c <uart_sendStream+0xe>
	uart_sendStream('\r', stream);
     d86:	8d e0       	ldi	r24, 0x0D	; 13
     d88:	0e 94 bf 06 	call	0xd7e	; 0xd7e <uart_sendStream>
	while (!(UCSR2A & (1<<UDRE2)));
     d8c:	e0 ed       	ldi	r30, 0xD0	; 208
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	90 81       	ld	r25, Z
     d92:	95 ff       	sbrs	r25, 5
     d94:	fd cf       	rjmp	.-6      	; 0xd90 <uart_sendStream+0x12>
	UDR2=ch;
     d96:	c0 93 d6 00 	sts	0x00D6, r28
	return 0;
}
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <uart_receiveStream>:

int uart_receiveStream(FILE *stream)
{
     da2:	cf 93       	push	r28
     da4:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR2A & (1<<RXC2)));
     da6:	e0 ed       	ldi	r30, 0xD0	; 208
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	88 23       	and	r24, r24
     dae:	ec f7       	brge	.-6      	; 0xdaa <uart_receiveStream+0x8>
	ch=UDR2;
     db0:	c0 91 d6 00 	lds	r28, 0x00D6

	/* Echo the Output Back to terminal */
	uart_sendStream(ch,stream);
     db4:	8c 2f       	mov	r24, r28
     db6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <uart_sendStream>

	return ch;
}
     dba:	8c 2f       	mov	r24, r28
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <uart0_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart0_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     dc2:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     dc6:	83 e3       	ldi	r24, 0x33	; 51
     dc8:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     dcc:	88 e1       	ldi	r24, 0x18	; 24
     dce:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     dd2:	86 e0       	ldi	r24, 0x06	; 6
     dd4:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     dd8:	82 e2       	ldi	r24, 0x22	; 34
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	90 93 59 07 	sts	0x0759, r25
     de0:	80 93 58 07 	sts	0x0758, r24
     de4:	90 93 5b 07 	sts	0x075B, r25
     de8:	80 93 5a 07 	sts	0x075A, r24
     dec:	08 95       	ret

00000dee <getRAMStatus>:
}

int getRAMStatus()
{
	//Enable RAM CS
	RAM_PORT &= ~(1<<RAM_CS);
     dee:	a3 98       	cbi	0x14, 3	; 20
	SPDR = RDSR;
     df0:	85 e0       	ldi	r24, 0x05	; 5
     df2:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     df4:	0d b4       	in	r0, 0x2d	; 45
     df6:	07 fe       	sbrs	r0, 7
     df8:	fd cf       	rjmp	.-6      	; 0xdf4 <getRAMStatus+0x6>
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     dfa:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     dfc:	0d b4       	in	r0, 0x2d	; 45
     dfe:	07 fe       	sbrs	r0, 7
     e00:	fd cf       	rjmp	.-6      	; 0xdfc <getRAMStatus+0xe>
	//Disable RAM CS
	RAM_PORT |= (1<<RAM_CS);
     e02:	a3 9a       	sbi	0x14, 3	; 20
	return(SPDR);
     e04:	8e b5       	in	r24, 0x2e	; 46
}
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	08 95       	ret

00000e0a <setRAMStatus>:

void setRAMStatus(char mode)
{
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     e0a:	a3 98       	cbi	0x14, 3	; 20
	SPDR = WRSR;
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e10:	0d b4       	in	r0, 0x2d	; 45
     e12:	07 fe       	sbrs	r0, 7
     e14:	fd cf       	rjmp	.-6      	; 0xe10 <setRAMStatus+0x6>
	// Start Data transmission
	SPDR = mode;
     e16:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e18:	0d b4       	in	r0, 0x2d	; 45
     e1a:	07 fe       	sbrs	r0, 7
     e1c:	fd cf       	rjmp	.-6      	; 0xe18 <setRAMStatus+0xe>
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
     e1e:	a3 9a       	sbi	0x14, 3	; 20
     e20:	08 95       	ret

00000e22 <SPI_WriteAddress>:
}

void SPI_WriteAddress(uint32_t address)
{
     e22:	26 2f       	mov	r18, r22
     e24:	97 2f       	mov	r25, r23
     e26:	48 2f       	mov	r20, r24
	SPDR = WRITE;
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e2c:	0d b4       	in	r0, 0x2d	; 45
     e2e:	07 fe       	sbrs	r0, 7
     e30:	fd cf       	rjmp	.-6      	; 0xe2c <SPI_WriteAddress+0xa>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (address & 0x00FF0000) >> 16;
     e32:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e34:	0d b4       	in	r0, 0x2d	; 45
     e36:	07 fe       	sbrs	r0, 7
     e38:	fd cf       	rjmp	.-6      	; 0xe34 <SPI_WriteAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x0000FF00) >> 8;
     e3a:	89 2f       	mov	r24, r25
     e3c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e3e:	0d b4       	in	r0, 0x2d	; 45
     e40:	07 fe       	sbrs	r0, 7
     e42:	fd cf       	rjmp	.-6      	; 0xe3e <SPI_WriteAddress+0x1c>
	SPDR = (address & 0x000000FF);
     e44:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e46:	0d b4       	in	r0, 0x2d	; 45
     e48:	07 fe       	sbrs	r0, 7
     e4a:	fd cf       	rjmp	.-6      	; 0xe46 <SPI_WriteAddress+0x24>
}
     e4c:	08 95       	ret

00000e4e <SPI_WriteData>:

void SPI_WriteData(char data)
{
	// Start Data transmission
	SPDR = data;
     e4e:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e50:	0d b4       	in	r0, 0x2d	; 45
     e52:	07 fe       	sbrs	r0, 7
     e54:	fd cf       	rjmp	.-6      	; 0xe50 <SPI_WriteData+0x2>
}
     e56:	08 95       	ret

00000e58 <SPI_ReadAddress>:

void SPI_ReadAddress(uint32_t address)
{
     e58:	26 2f       	mov	r18, r22
     e5a:	97 2f       	mov	r25, r23
     e5c:	48 2f       	mov	r20, r24
	SPDR = READ;
     e5e:	83 e0       	ldi	r24, 0x03	; 3
     e60:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e62:	0d b4       	in	r0, 0x2d	; 45
     e64:	07 fe       	sbrs	r0, 7
     e66:	fd cf       	rjmp	.-6      	; 0xe62 <SPI_ReadAddress+0xa>
	SPDR = (address & 0x00FF0000) >> 16;
     e68:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e6a:	0d b4       	in	r0, 0x2d	; 45
     e6c:	07 fe       	sbrs	r0, 7
     e6e:	fd cf       	rjmp	.-6      	; 0xe6a <SPI_ReadAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x0000FF00) >> 8;
     e70:	89 2f       	mov	r24, r25
     e72:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e74:	0d b4       	in	r0, 0x2d	; 45
     e76:	07 fe       	sbrs	r0, 7
     e78:	fd cf       	rjmp	.-6      	; 0xe74 <SPI_ReadAddress+0x1c>
	SPDR = (address & 0x000000FF);
     e7a:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e7c:	0d b4       	in	r0, 0x2d	; 45
     e7e:	07 fe       	sbrs	r0, 7
     e80:	fd cf       	rjmp	.-6      	; 0xe7c <SPI_ReadAddress+0x24>
}
     e82:	08 95       	ret

00000e84 <SPI_ReadData>:

char SPI_ReadData()
{
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     e84:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     e86:	0d b4       	in	r0, 0x2d	; 45
     e88:	07 fe       	sbrs	r0, 7
     e8a:	fd cf       	rjmp	.-6      	; 0xe86 <SPI_ReadData+0x2>
	return(SPDR);
     e8c:	8e b5       	in	r24, 0x2e	; 46
}
     e8e:	08 95       	ret

00000e90 <RAMWrite>:

uint16_t RAMWrite(char* data, uint16_t startAddress, uint16_t length)
{
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	ec 01       	movw	r28, r24
     ea6:	8b 01       	movw	r16, r22
     ea8:	5a 01       	movw	r10, r20
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     eaa:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     eac:	6b 01       	movw	r12, r22
     eae:	e1 2c       	mov	r14, r1
     eb0:	f1 2c       	mov	r15, r1
     eb2:	c7 01       	movw	r24, r14
     eb4:	b6 01       	movw	r22, r12
     eb6:	0e 94 11 07 	call	0xe22	; 0xe22 <SPI_WriteAddress>
	SPI_WriteData(0x00);
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	0e 94 27 07 	call	0xe4e	; 0xe4e <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     ec0:	a3 9a       	sbi	0x14, 3	; 20
	setRAMStatus(SEQ);
     ec2:	80 e4       	ldi	r24, 0x40	; 64
     ec4:	0e 94 05 07 	call	0xe0a	; 0xe0a <setRAMStatus>
	getRAMStatus();
     ec8:	0e 94 f7 06 	call	0xdee	; 0xdee <getRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     ecc:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(startAddress);
     ece:	c7 01       	movw	r24, r14
     ed0:	b6 01       	movw	r22, r12
     ed2:	0e 94 11 07 	call	0xe22	; 0xe22 <SPI_WriteAddress>
	for(int i = 0; i < length; i++)
     ed6:	a1 14       	cp	r10, r1
     ed8:	b1 04       	cpc	r11, r1
     eda:	91 f0       	breq	.+36     	; 0xf00 <RAMWrite+0x70>
     edc:	65 01       	movw	r12, r10
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	e1 2c       	mov	r14, r1
     ee4:	f1 2c       	mov	r15, r1
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
     ee6:	fe 01       	movw	r30, r28
     ee8:	e8 0f       	add	r30, r24
     eea:	f9 1f       	adc	r31, r25
     eec:	80 81       	ld	r24, Z
     eee:	0e 94 27 07 	call	0xe4e	; 0xe4e <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
	setRAMStatus(SEQ);
	getRAMStatus();
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_WriteAddress(startAddress);
	for(int i = 0; i < length; i++)
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	e8 1a       	sub	r14, r24
     ef6:	f8 0a       	sbc	r15, r24
     ef8:	c7 01       	movw	r24, r14
     efa:	ec 14       	cp	r14, r12
     efc:	fd 04       	cpc	r15, r13
     efe:	99 f7       	brne	.-26     	; 0xee6 <RAMWrite+0x56>
	{
		//SPI_WriteAddress(startAddress + i);
		SPI_WriteData(*(data + i));
	}
	RAM_PORT |= (1<<RAM_CS);
     f00:	a3 9a       	sbi	0x14, 3	; 20
		

	return startAddress; 
}
     f02:	c8 01       	movw	r24, r16
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	bf 90       	pop	r11
     f16:	af 90       	pop	r10
     f18:	08 95       	ret

00000f1a <RAMRead>:

char* RAMRead(uint32_t startAddress, uint16_t length, char* buffer)
{
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	6b 01       	movw	r12, r22
     f2c:	7c 01       	movw	r14, r24
     f2e:	8a 01       	movw	r16, r20
     f30:	e9 01       	movw	r28, r18
	setRAMStatus(SEQ);
     f32:	80 e4       	ldi	r24, 0x40	; 64
     f34:	0e 94 05 07 	call	0xe0a	; 0xe0a <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     f38:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     f3a:	c7 01       	movw	r24, r14
     f3c:	b6 01       	movw	r22, r12
     f3e:	0e 94 2c 07 	call	0xe58	; 0xe58 <SPI_ReadAddress>
	int i; 
	for(i=0; i<length; i++)
     f42:	01 15       	cp	r16, r1
     f44:	11 05       	cpc	r17, r1
     f46:	91 f0       	breq	.+36     	; 0xf6c <RAMRead+0x52>
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	e1 2c       	mov	r14, r1
     f4e:	f1 2c       	mov	r15, r1
	{
		*(buffer + i) = SPI_ReadData();
     f50:	6e 01       	movw	r12, r28
     f52:	c6 0e       	add	r12, r22
     f54:	d7 1e       	adc	r13, r23
     f56:	0e 94 42 07 	call	0xe84	; 0xe84 <SPI_ReadData>
     f5a:	f6 01       	movw	r30, r12
     f5c:	80 83       	st	Z, r24
{
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	int i; 
	for(i=0; i<length; i++)
     f5e:	ff ef       	ldi	r31, 0xFF	; 255
     f60:	ef 1a       	sub	r14, r31
     f62:	ff 0a       	sbc	r15, r31
     f64:	b7 01       	movw	r22, r14
     f66:	e0 16       	cp	r14, r16
     f68:	f1 06       	cpc	r15, r17
     f6a:	91 f7       	brne	.-28     	; 0xf50 <RAMRead+0x36>
	{
		*(buffer + i) = SPI_ReadData();
	}
	RAM_PORT |= (1<<RAM_CS); 
     f6c:	a3 9a       	sbi	0x14, 3	; 20
	//printf("%d\n", buffer);
	return buffer; 
}
     f6e:	ce 01       	movw	r24, r28
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	ef 90       	pop	r14
     f7c:	df 90       	pop	r13
     f7e:	cf 90       	pop	r12
     f80:	08 95       	ret

00000f82 <RAMPrint>:

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	c6 2f       	mov	r28, r22
     f90:	d7 2f       	mov	r29, r23
     f92:	f8 2e       	mov	r15, r24
     f94:	e9 2e       	mov	r14, r25
     f96:	8a 01       	movw	r16, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     f98:	80 e4       	ldi	r24, 0x40	; 64
     f9a:	0e 94 05 07 	call	0xe0a	; 0xe0a <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     f9e:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     fa0:	6c 2f       	mov	r22, r28
     fa2:	7d 2f       	mov	r23, r29
     fa4:	8f 2d       	mov	r24, r15
     fa6:	9e 2d       	mov	r25, r14
     fa8:	0e 94 2c 07 	call	0xe58	; 0xe58 <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	8e e4       	ldi	r24, 0x4E	; 78
     fb6:	94 e0       	ldi	r25, 0x04	; 4
     fb8:	9f 93       	push	r25
     fba:	8f 93       	push	r24
     fbc:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
	int i; 
	for(i=0; i<length; i++)
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	01 15       	cp	r16, r1
     fce:	11 05       	cpc	r17, r1
     fd0:	61 f0       	breq	.+24     	; 0xfea <RAMPrint+0x68>
     fd2:	c0 e0       	ldi	r28, 0x00	; 0
     fd4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("%c", SPI_ReadData());
     fd6:	0e 94 42 07 	call	0xe84	; 0xe84 <SPI_ReadData>
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 aa 0b 	call	0x1754	; 0x1754 <putchar>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     fe0:	21 96       	adiw	r28, 0x01	; 1
     fe2:	c0 17       	cp	r28, r16
     fe4:	d1 07       	cpc	r29, r17
     fe6:	b9 f7       	brne	.-18     	; 0xfd6 <RAMPrint+0x54>
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <RAMPrint+0x6c>
     fea:	00 e0       	ldi	r16, 0x00	; 0
     fec:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("%c", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     fee:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     ff0:	1f 93       	push	r17
     ff2:	0f 93       	push	r16
     ff4:	8f e5       	ldi	r24, 0x5F	; 95
     ff6:	94 e0       	ldi	r25, 0x04	; 4
     ff8:	9f 93       	push	r25
     ffa:	8f 93       	push	r24
     ffc:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	08 95       	ret

00001016 <RAMWriteByte>:

void RAMWriteByte(char data, uint16_t address)
{
    1016:	cf 93       	push	r28
    1018:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
    101a:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 11 07 	call	0xe22	; 0xe22 <SPI_WriteAddress>
	SPI_WriteData(data);
    1024:	8c 2f       	mov	r24, r28
    1026:	0e 94 27 07 	call	0xe4e	; 0xe4e <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
    102a:	a3 9a       	sbi	0x14, 3	; 20
}
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS)|(1<<HOLD);
    1030:	84 b1       	in	r24, 0x04	; 4
    1032:	87 68       	ori	r24, 0x87	; 135
    1034:	84 b9       	out	0x04, r24	; 4
	//Set MISO as Input 
	SPI_DDR &= ~(1<<MISO);
    1036:	23 98       	cbi	0x04, 3	; 4
	SPI_PORT |= (1<<HOLD);
    1038:	2f 9a       	sbi	0x05, 7	; 5
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
    103a:	9b 9a       	sbi	0x13, 3	; 19
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
    103c:	83 e5       	ldi	r24, 0x53	; 83
    103e:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	82 e3       	ldi	r24, 0x32	; 50
    1046:	0e 94 0b 08 	call	0x1016	; 0x1016 <RAMWriteByte>
    104a:	08 95       	ret

0000104c <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint16_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
    104c:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
    104e:	bc 01       	movw	r22, r24
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 2c 07 	call	0xe58	; 0xe58 <SPI_ReadAddress>
	char data = SPI_ReadData();
    1058:	0e 94 42 07 	call	0xe84	; 0xe84 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
    105c:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
    105e:	08 95       	ret

00001060 <networkScan>:
	sendCommand(SET, SYSTEM_PRINT_LEVEL, ONE);
}

char* networkScan()
{
	updateRAMAddress(WIFI_RAW_ADDRESS);
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	cb 01       	movw	r24, r22
    1066:	0e 94 03 0a 	call	0x1406	; 0x1406 <updateRAMAddress>
	enableReceiveINT(); 
    106a:	0e 94 23 09 	call	0x1246	; 0x1246 <enableReceiveINT>
	sendCommand(NOPREFIX, SCAN, NOVAL);
    106e:	40 e5       	ldi	r20, 0x50	; 80
    1070:	53 e0       	ldi	r21, 0x03	; 3
    1072:	6a ec       	ldi	r22, 0xCA	; 202
    1074:	74 e0       	ldi	r23, 0x04	; 4
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	0e 94 0c 0a 	call	0x1418	; 0x1418 <sendCommand>
	//_delay_ms(3000);
	PORTD &= ~(1<<RTS);
    107c:	5d 98       	cbi	0x0b, 5	; 11
	receiveStatus(); 
    107e:	0e 94 34 09 	call	0x1268	; 0x1268 <receiveStatus>
	//{
		//printf("%c", networks[i]);
	//}
	//printf("\n");
	return ""; 
}
    1082:	80 e5       	ldi	r24, 0x50	; 80
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	08 95       	ret

00001088 <networkConnect>:

int networkConnect(char* SSID, char* password)
{
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	eb 01       	movw	r28, r22
	//printf("Begin Network Connection.\n");
	sendCommand(SET, WLAN_SSID, SSID);
    108e:	ac 01       	movw	r20, r24
    1090:	6f ec       	ldi	r22, 0xCF	; 207
    1092:	74 e0       	ldi	r23, 0x04	; 4
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	0e 94 0c 0a 	call	0x1418	; 0x1418 <sendCommand>
	//printf("Set Password\n");
	sendCommand(SET, WLAN_PWD, password);
    109a:	ae 01       	movw	r20, r28
    109c:	69 ed       	ldi	r22, 0xD9	; 217
    109e:	74 e0       	ldi	r23, 0x04	; 4
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	0e 94 0c 0a 	call	0x1418	; 0x1418 <sendCommand>
	sendCommand(NOPREFIX, HTTP_GET, "www.wi-pro.us"); 
    10a6:	4c e3       	ldi	r20, 0x3C	; 60
    10a8:	52 e0       	ldi	r21, 0x02	; 2
    10aa:	6f e6       	ldi	r22, 0x6F	; 111
    10ac:	72 e0       	ldi	r23, 0x02	; 2
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	0e 94 0c 0a 	call	0x1418	; 0x1418 <sendCommand>
	if(errorCheck())
    10b4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <errorCheck>
    10b8:	21 e0       	ldi	r18, 0x01	; 1
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	89 2b       	or	r24, r25
    10be:	11 f0       	breq	.+4      	; 0x10c4 <networkConnect+0x3c>
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
		return 0; 
	else
		return 1; 
}
    10c4:	c9 01       	movw	r24, r18
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <networkQueryString>:
	else
		return 1; 
}

uint16_t networkQueryString(char* filepath)
{
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	ec 01       	movw	r28, r24
	char* footer = " HTTP/1.1\nhost: www.wi-pro.us\n\n";
	char data; 
	uint16_t i = 0;
	uint16_t j = 0;  
	uint8_t lineNum = 0; 
	RAMWrite(filepath, WIFI_QSTRING_ADDRESS + j, strlen(filepath));
    10da:	fc 01       	movw	r30, r24
    10dc:	01 90       	ld	r0, Z+
    10de:	00 20       	and	r0, r0
    10e0:	e9 f7       	brne	.-6      	; 0x10dc <networkQueryString+0x10>
    10e2:	31 97       	sbiw	r30, 0x01	; 1
    10e4:	af 01       	movw	r20, r30
    10e6:	48 1b       	sub	r20, r24
    10e8:	59 0b       	sbc	r21, r25
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	74 e0       	ldi	r23, 0x04	; 4
    10ee:	0e 94 48 07 	call	0xe90	; 0xe90 <RAMWrite>
	j+=strlen(filepath); 
    10f2:	fe 01       	movw	r30, r28
    10f4:	01 90       	ld	r0, Z+
    10f6:	00 20       	and	r0, r0
    10f8:	e9 f7       	brne	.-6      	; 0x10f4 <networkQueryString+0x28>
    10fa:	31 97       	sbiw	r30, 0x01	; 1
    10fc:	6f 01       	movw	r12, r30
    10fe:	cc 1a       	sub	r12, r28
    1100:	dd 0a       	sbc	r13, r29
    1102:	c1 e0       	ldi	r28, 0x01	; 1
    1104:	d0 e0       	ldi	r29, 0x00	; 0
	//printf("Network Query String!\n");
	char* footer = " HTTP/1.1\nhost: www.wi-pro.us\n\n";
	char data; 
	uint16_t i = 0;
	uint16_t j = 0;  
	uint8_t lineNum = 0; 
    1106:	e1 2c       	mov	r14, r1
	RAMWrite(filepath, WIFI_QSTRING_ADDRESS + j, strlen(filepath));
	j+=strlen(filepath); 
	
	do 
	{
		data = RAMReadByte(WIFI_RAW_ADDRESS + i);
    1108:	ce 01       	movw	r24, r28
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	0e 94 26 08 	call	0x104c	; 0x104c <RAMReadByte>
    1110:	18 2f       	mov	r17, r24
		//throw out a specified number of lines before recording 
		//printf("RAW: %c, 0x%02x Add: 0x%04x\n", data, data, WIFI_RAW_ADDRESS + i);
		if(lineNum <= 2)
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	8e 15       	cp	r24, r14
    1116:	20 f0       	brcs	.+8      	; 0x1120 <networkQueryString+0x54>
		{
			if(data == '\n')
    1118:	1a 30       	cpi	r17, 0x0A	; 10
    111a:	51 f5       	brne	.+84     	; 0x1170 <networkQueryString+0xa4>
				lineNum++;
    111c:	e3 94       	inc	r14
    111e:	28 c0       	rjmp	.+80     	; 0x1170 <networkQueryString+0xa4>
			i++;  
		}
		
		else
		{
			switch(data)
    1120:	1d 30       	cpi	r17, 0x0D	; 13
    1122:	41 f1       	breq	.+80     	; 0x1174 <networkQueryString+0xa8>
    1124:	18 f4       	brcc	.+6      	; 0x112c <networkQueryString+0x60>
    1126:	1a 30       	cpi	r17, 0x0A	; 10
    1128:	29 f1       	breq	.+74     	; 0x1174 <networkQueryString+0xa8>
    112a:	1a c0       	rjmp	.+52     	; 0x1160 <networkQueryString+0x94>
    112c:	10 32       	cpi	r17, 0x20	; 32
    112e:	19 f0       	breq	.+6      	; 0x1136 <networkQueryString+0x6a>
    1130:	13 32       	cpi	r17, 0x23	; 35
    1132:	01 f1       	breq	.+64     	; 0x1174 <networkQueryString+0xa8>
    1134:	15 c0       	rjmp	.+42     	; 0x1160 <networkQueryString+0x94>
			{
				case ' ':
					//printf("Found a space!\n");
					RAMWriteByte('%', WIFI_QSTRING_ADDRESS + j);
    1136:	b6 01       	movw	r22, r12
    1138:	7c 5f       	subi	r23, 0xFC	; 252
    113a:	85 e2       	ldi	r24, 0x25	; 37
    113c:	0e 94 0b 08 	call	0x1016	; 0x1016 <RAMWriteByte>
					RAMWriteByte('2', WIFI_QSTRING_ADDRESS + j+1);
    1140:	b6 01       	movw	r22, r12
    1142:	6f 5f       	subi	r22, 0xFF	; 255
    1144:	7b 4f       	sbci	r23, 0xFB	; 251
    1146:	82 e3       	ldi	r24, 0x32	; 50
    1148:	0e 94 0b 08 	call	0x1016	; 0x1016 <RAMWriteByte>
					RAMWriteByte('0', WIFI_QSTRING_ADDRESS + j+2);
    114c:	b6 01       	movw	r22, r12
    114e:	6e 5f       	subi	r22, 0xFE	; 254
    1150:	7b 4f       	sbci	r23, 0xFB	; 251
    1152:	80 e3       	ldi	r24, 0x30	; 48
    1154:	0e 94 0b 08 	call	0x1016	; 0x1016 <RAMWriteByte>
					i++;
					j+=3;
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	c8 0e       	add	r12, r24
    115c:	d1 1c       	adc	r13, r1
					break;
    115e:	0a c0       	rjmp	.+20     	; 0x1174 <networkQueryString+0xa8>
				case '\r':
					//printf("Found a carriage return!\n");
					i++;
				break;
				default:
					RAMWriteByte(data, WIFI_QSTRING_ADDRESS + j);
    1160:	b6 01       	movw	r22, r12
    1162:	7c 5f       	subi	r23, 0xFC	; 252
    1164:	81 2f       	mov	r24, r17
    1166:	0e 94 0b 08 	call	0x1016	; 0x1016 <RAMWriteByte>
					//printf("Query: %c, 0x%02x Add: 0x%04x\n", RAMReadByte(WIFI_QSTRING_ADDRESS + j), RAMReadByte(WIFI_QSTRING_ADDRESS + j), WIFI_QSTRING_ADDRESS +j);
					i++;
					j++;
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	c8 1a       	sub	r12, r24
    116e:	d8 0a       	sbc	r13, r24
				break;
			}	
		}

	} while (data != 0x00 && i < WIFI_QSTRING_SIZE - 2);
    1170:	11 23       	and	r17, r17
    1172:	29 f0       	breq	.+10     	; 0x117e <networkQueryString+0xb2>
    1174:	21 96       	adiw	r28, 0x01	; 1
    1176:	cf 3f       	cpi	r28, 0xFF	; 255
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	d8 07       	cpc	r29, r24
    117c:	29 f6       	brne	.-118    	; 0x1108 <networkQueryString+0x3c>
	
	//Overwrite the terminating byte with two new lines for the http request 
	RAMWrite(footer, WIFI_QSTRING_ADDRESS + j-1, strlen(footer));
    117e:	b6 01       	movw	r22, r12
    1180:	61 50       	subi	r22, 0x01	; 1
    1182:	7c 4f       	sbci	r23, 0xFC	; 252
    1184:	4f e1       	ldi	r20, 0x1F	; 31
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	81 ef       	ldi	r24, 0xF1	; 241
    118a:	94 e0       	ldi	r25, 0x04	; 4
    118c:	0e 94 48 07 	call	0xe90	; 0xe90 <RAMWrite>
	j+=strlen(footer)-1; 
	
	return j; 
}
    1190:	c6 01       	movw	r24, r12
    1192:	4e 96       	adiw	r24, 0x1e	; 30
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	08 95       	ret

000011a2 <updateFileWifi>:
	disableReceiveINT(); 
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
}

void updateFileWifi(char* filepath)
{
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
    11a8:	0e 94 2c 09 	call	0x1258	; 0x1258 <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL); 	
    11ac:	40 e5       	ldi	r20, 0x50	; 80
    11ae:	53 e0       	ldi	r21, 0x03	; 3
    11b0:	be 01       	movw	r22, r28
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	0e 94 0c 0a 	call	0x1418	; 0x1418 <sendCommand>
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <uart_init>:
	testPrint = 1; 
}

void uart_init()
{
	UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
    11be:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
    11c2:	87 e0       	ldi	r24, 0x07	; 7
    11c4:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); // enable Rx & Tx
    11c8:	e1 ec       	ldi	r30, 0xC1	; 193
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	88 e1       	ldi	r24, 0x18	; 24
    11ce:	80 83       	st	Z, r24
	UCSR0C =  (1<<UCSZ01)|(1<<UCSZ00); // config USART; 8N1
    11d0:	86 e0       	ldi	r24, 0x06	; 6
    11d2:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B |= (1<<RXCIE0);	//Enable Receive Interrupt 
    11d6:	80 81       	ld	r24, Z
    11d8:	80 68       	ori	r24, 0x80	; 128
    11da:	80 83       	st	Z, r24
    11dc:	08 95       	ret

000011de <uart_send>:
	}
	return count; 
}

int uart_send(char* data, unsigned int length)
{
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
	//UCSR1B |= (1<<RXCIE1);
	receiveWifiFlag = 0;
    11e2:	10 92 cc 05 	sts	0x05CC, r1
	memset(receiveBuffer, 0x00, MaxRecSize);
    11e6:	29 e1       	ldi	r18, 0x19	; 25
    11e8:	eb ed       	ldi	r30, 0xDB	; 219
    11ea:	f6 e0       	ldi	r31, 0x06	; 6
    11ec:	df 01       	movw	r26, r30
    11ee:	1d 92       	st	X+, r1
    11f0:	2a 95       	dec	r18
    11f2:	e9 f7       	brne	.-6      	; 0x11ee <uart_send+0x10>
	//PORTD |= (1<<RTS);
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
    11f4:	61 15       	cp	r22, r1
    11f6:	71 05       	cpc	r23, r1
    11f8:	a9 f0       	breq	.+42     	; 0x1224 <uart_send+0x46>
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
}

int uart_send(char* data, unsigned int length)
{
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
    11fe:	50 e0       	ldi	r21, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR1A & (1<<UDRE1)));
    1200:	e8 ec       	ldi	r30, 0xC8	; 200
    1202:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = data[i];
    1204:	ae ec       	ldi	r26, 0xCE	; 206
    1206:	b0 e0       	ldi	r27, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR1A & (1<<UDRE1)));
    1208:	40 81       	ld	r20, Z
    120a:	45 ff       	sbrs	r20, 5
    120c:	fd cf       	rjmp	.-6      	; 0x1208 <uart_send+0x2a>
		UDR1 = data[i];
    120e:	ec 01       	movw	r28, r24
    1210:	c2 0f       	add	r28, r18
    1212:	d3 1f       	adc	r29, r19
    1214:	28 81       	ld	r18, Y
    1216:	2c 93       	st	X, r18
		i++;
    1218:	5f 5f       	subi	r21, 0xFF	; 255
	//PORTD |= (1<<RTS);
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
    121a:	25 2f       	mov	r18, r21
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	26 17       	cp	r18, r22
    1220:	37 07       	cpc	r19, r23
    1222:	90 f3       	brcs	.-28     	; 0x1208 <uart_send+0x2a>
		while(!(UCSR1A & (1<<UDRE1)));
		UDR1 = data[i];
		i++;
	}
	//while(!(PIND & (1<<CTS))){_delay_us(100);}
	printf("Sent!\n");
    1224:	80 eb       	ldi	r24, 0xB0	; 176
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
	return 0;
}
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	08 95       	ret

00001236 <uart_receiveChar>:
}

unsigned char uart_receiveChar()
{
	//printf("Receiving...\n");
	while (!(UCSR0A & (1<<RXC0)));
    1236:	e0 ec       	ldi	r30, 0xC0	; 192
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	88 23       	and	r24, r24
    123e:	ec f7       	brge	.-6      	; 0x123a <uart_receiveChar+0x4>
	return UDR0; 
    1240:	80 91 c6 00 	lds	r24, 0x00C6
}
    1244:	08 95       	ret

00001246 <enableReceiveINT>:

int enableReceiveINT()
{
	UCSR0B |= (1<<RXCIE0);
    1246:	e1 ec       	ldi	r30, 0xC1	; 193
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 68       	ori	r24, 0x80	; 128
    124e:	80 83       	st	Z, r24
	sei(); 
    1250:	78 94       	sei
	return 1; 
}
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	08 95       	ret

00001258 <disableReceiveINT>:

int disableReceiveINT()
{
	UCSR0B &= ~(1<<RXCIE0);
    1258:	e1 ec       	ldi	r30, 0xC1	; 193
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	8f 77       	andi	r24, 0x7F	; 127
    1260:	80 83       	st	Z, r24
	return 1; 
}
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	08 95       	ret

00001268 <receiveStatus>:
	return ""; 
}

int receiveStatus()
{
	while(receiveWifiFlag == 0)
    1268:	80 91 cc 05 	lds	r24, 0x05CC
    126c:	81 11       	cpse	r24, r1
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <receiveStatus+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1270:	81 e2       	ldi	r24, 0x21	; 33
    1272:	8a 95       	dec	r24
    1274:	f1 f7       	brne	.-4      	; 0x1272 <receiveStatus+0xa>
    1276:	00 00       	nop
    1278:	80 91 cc 05 	lds	r24, 0x05CC
    127c:	88 23       	and	r24, r24
    127e:	c1 f3       	breq	.-16     	; 0x1270 <receiveStatus+0x8>
		//printf("Receive Flag: %d\n", receiveWifiFlag);
		//printf("Loooop\n");
	}
	
	return 1; 
}
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	08 95       	ret

00001286 <buildTransmissionLength>:

unsigned int buildTransmissionLength()
{
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
	if(testPrint)
    128e:	80 91 cf 05 	lds	r24, 0x05CF
    1292:	90 91 d0 05 	lds	r25, 0x05D0
    1296:	89 2b       	or	r24, r25
    1298:	f1 f0       	breq	.+60     	; 0x12d6 <buildTransmissionLength+0x50>
    129a:	c0 e0       	ldi	r28, 0x00	; 0
    129c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
		{
			printf("Value: %c, Address: %p\n", receiveBuffer[i], receiveBuffer + i);
    129e:	03 e4       	ldi	r16, 0x43	; 67
    12a0:	15 e0       	ldi	r17, 0x05	; 5
    12a2:	fe 01       	movw	r30, r28
    12a4:	e5 52       	subi	r30, 0x25	; 37
    12a6:	f9 4f       	sbci	r31, 0xF9	; 249
    12a8:	80 81       	ld	r24, Z
    12aa:	ff 93       	push	r31
    12ac:	ef 93       	push	r30
    12ae:	1f 92       	push	r1
    12b0:	8f 93       	push	r24
    12b2:	1f 93       	push	r17
    12b4:	0f 93       	push	r16
    12b6:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
unsigned int buildTransmissionLength()
{
	if(testPrint)
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
    12ba:	21 96       	adiw	r28, 0x01	; 1
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	c7 30       	cpi	r28, 0x07	; 7
    12ca:	d1 05       	cpc	r29, r1
    12cc:	51 f7       	brne	.-44     	; 0x12a2 <buildTransmissionLength+0x1c>
		{
			printf("Value: %c, Address: %p\n", receiveBuffer[i], receiveBuffer + i);
			//printf("0x%02x ", receiveBuffer[i]);
		}
		printf("\n");
    12ce:	8a e0       	ldi	r24, 0x0A	; 10
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <putchar>
	}
	transLength = 0; 
    12d6:	10 92 cb 05 	sts	0x05CB, r1
    12da:	10 92 ca 05 	sts	0x05CA, r1
	transLength += (receiveBuffer[ones] & 0x0F);
    12de:	20 91 e1 06 	lds	r18, 0x06E1
    12e2:	80 91 ca 05 	lds	r24, 0x05CA
    12e6:	90 91 cb 05 	lds	r25, 0x05CB
    12ea:	2f 70       	andi	r18, 0x0F	; 15
    12ec:	82 0f       	add	r24, r18
    12ee:	91 1d       	adc	r25, r1
    12f0:	90 93 cb 05 	sts	0x05CB, r25
    12f4:	80 93 ca 05 	sts	0x05CA, r24
	transLength += (receiveBuffer[tens] & 0x0F) * 10; 
    12f8:	80 91 e0 06 	lds	r24, 0x06E0
    12fc:	20 91 ca 05 	lds	r18, 0x05CA
    1300:	30 91 cb 05 	lds	r19, 0x05CB
    1304:	8f 70       	andi	r24, 0x0F	; 15
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	ac 01       	movw	r20, r24
    130a:	44 0f       	add	r20, r20
    130c:	55 1f       	adc	r21, r21
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	84 0f       	add	r24, r20
    131c:	95 1f       	adc	r25, r21
    131e:	82 0f       	add	r24, r18
    1320:	93 1f       	adc	r25, r19
    1322:	90 93 cb 05 	sts	0x05CB, r25
    1326:	80 93 ca 05 	sts	0x05CA, r24
	transLength += (receiveBuffer[hundreds] & 0x0F) * 100; 
    132a:	20 91 df 06 	lds	r18, 0x06DF
    132e:	80 91 ca 05 	lds	r24, 0x05CA
    1332:	90 91 cb 05 	lds	r25, 0x05CB
    1336:	2f 70       	andi	r18, 0x0F	; 15
    1338:	34 e6       	ldi	r19, 0x64	; 100
    133a:	23 9f       	mul	r18, r19
    133c:	80 0d       	add	r24, r0
    133e:	91 1d       	adc	r25, r1
    1340:	11 24       	eor	r1, r1
    1342:	90 93 cb 05 	sts	0x05CB, r25
    1346:	80 93 ca 05 	sts	0x05CA, r24
	transLength += (receiveBuffer[thousands] & 0x0F) * 1000; 
    134a:	60 91 de 06 	lds	r22, 0x06DE
    134e:	80 91 ca 05 	lds	r24, 0x05CA
    1352:	90 91 cb 05 	lds	r25, 0x05CB
    1356:	6f 70       	andi	r22, 0x0F	; 15
    1358:	48 ee       	ldi	r20, 0xE8	; 232
    135a:	53 e0       	ldi	r21, 0x03	; 3
    135c:	64 9f       	mul	r22, r20
    135e:	90 01       	movw	r18, r0
    1360:	65 9f       	mul	r22, r21
    1362:	30 0d       	add	r19, r0
    1364:	11 24       	eor	r1, r1
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	90 93 cb 05 	sts	0x05CB, r25
    136e:	80 93 ca 05 	sts	0x05CA, r24
	transLength += (receiveBuffer[tenThousands] & 0x0F) * 10000; 
    1372:	60 91 dd 06 	lds	r22, 0x06DD
    1376:	80 91 ca 05 	lds	r24, 0x05CA
    137a:	90 91 cb 05 	lds	r25, 0x05CB
    137e:	6f 70       	andi	r22, 0x0F	; 15
    1380:	40 e1       	ldi	r20, 0x10	; 16
    1382:	57 e2       	ldi	r21, 0x27	; 39
    1384:	64 9f       	mul	r22, r20
    1386:	90 01       	movw	r18, r0
    1388:	65 9f       	mul	r22, r21
    138a:	30 0d       	add	r19, r0
    138c:	11 24       	eor	r1, r1
    138e:	82 0f       	add	r24, r18
    1390:	93 1f       	adc	r25, r19
    1392:	90 93 cb 05 	sts	0x05CB, r25
    1396:	80 93 ca 05 	sts	0x05CA, r24
	//if(transLength < MaxRecSize)
	return transLength; 
    139a:	80 91 ca 05 	lds	r24, 0x05CA
    139e:	90 91 cb 05 	lds	r25, 0x05CB
	//else
		////8 is the length of the header 
		//return MaxRecSize - 8; 
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret

000013ac <getTransmissionLength>:

uint16_t getTransmissionLength()
{
	return transLength; 
    13ac:	80 91 ca 05 	lds	r24, 0x05CA
    13b0:	90 91 cb 05 	lds	r25, 0x05CB
}
    13b4:	08 95       	ret

000013b6 <getMessageHeader>:

char* getMessageHeader()
{
    13b6:	e0 e5       	ldi	r30, 0x50	; 80
    13b8:	f3 e0       	ldi	r31, 0x03	; 3
	char* header = ""; 
	
	for(int i = 0; i < endHeader; i++)
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
	{
		*(header + i) = receiveBuffer[i]; 
    13be:	dc 01       	movw	r26, r24
    13c0:	a5 52       	subi	r26, 0x25	; 37
    13c2:	b9 4f       	sbci	r27, 0xF9	; 249
    13c4:	2c 91       	ld	r18, X
    13c6:	21 93       	st	Z+, r18

char* getMessageHeader()
{
	char* header = ""; 
	
	for(int i = 0; i < endHeader; i++)
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	87 30       	cpi	r24, 0x07	; 7
    13cc:	91 05       	cpc	r25, r1
    13ce:	b9 f7       	brne	.-18     	; 0x13be <getMessageHeader+0x8>
	{
		*(header + i) = receiveBuffer[i]; 
	}
	
	return header; 
}
    13d0:	80 e5       	ldi	r24, 0x50	; 80
    13d2:	93 e0       	ldi	r25, 0x03	; 3
    13d4:	08 95       	ret

000013d6 <errorCheck>:

int errorCheck() 
{
	while(!receiveWifiFlag & 1)
    13d6:	80 91 cc 05 	lds	r24, 0x05CC
    13da:	81 11       	cpse	r24, r1
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <errorCheck+0x18>
    13de:	81 e2       	ldi	r24, 0x21	; 33
    13e0:	8a 95       	dec	r24
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <errorCheck+0xa>
    13e4:	00 00       	nop
    13e6:	80 91 cc 05 	lds	r24, 0x05CC
    13ea:	88 23       	and	r24, r24
    13ec:	c1 f3       	breq	.-16     	; 0x13de <errorCheck+0x8>
		//While loop does not work correctly without a delay
		//An issue with the compiler or the stack pointer when invoking the interrupt
		_delay_us(100);
	}
	
	char* header = getMessageHeader();
    13ee:	0e 94 db 09 	call	0x13b6	; 0x13b6 <getMessageHeader>
	//0 denotes a successful command 
	if(header[errorCode] != '0')
    13f2:	21 e0       	ldi	r18, 0x01	; 1
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	fc 01       	movw	r30, r24
    13f8:	81 81       	ldd	r24, Z+1	; 0x01
    13fa:	80 33       	cpi	r24, 0x30	; 48
    13fc:	11 f4       	brne	.+4      	; 0x1402 <errorCheck+0x2c>
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
		return 1; 
	else 
		return 0; 
}
    1402:	c9 01       	movw	r24, r18
    1404:	08 95       	ret

00001406 <updateRAMAddress>:

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
    1406:	60 93 c6 05 	sts	0x05C6, r22
    140a:	70 93 c7 05 	sts	0x05C7, r23
    140e:	80 93 c8 05 	sts	0x05C8, r24
    1412:	90 93 c9 05 	sts	0x05C9, r25
    1416:	08 95       	ret

00001418 <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	ea 01       	movw	r28, r20
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	31 f0       	breq	.+12     	; 0x1432 <sendCommand+0x1a>
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	71 f0       	breq	.+28     	; 0x1446 <sendCommand+0x2e>
    142a:	8f 3f       	cpi	r24, 0xFF	; 255
    142c:	09 f0       	breq	.+2      	; 0x1430 <sendCommand+0x18>
    142e:	6c c0       	rjmp	.+216    	; 0x1508 <sendCommand+0xf0>
    1430:	17 c0       	rjmp	.+46     	; 0x1460 <sendCommand+0x48>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
    1432:	85 e0       	ldi	r24, 0x05	; 5
    1434:	eb e5       	ldi	r30, 0x5B	; 91
    1436:	f5 e0       	ldi	r31, 0x05	; 5
    1438:	a4 ef       	ldi	r26, 0xF4	; 244
    143a:	b6 e0       	ldi	r27, 0x06	; 6
    143c:	01 90       	ld	r0, Z+
    143e:	0d 92       	st	X+, r0
    1440:	8a 95       	dec	r24
    1442:	e1 f7       	brne	.-8      	; 0x143c <sendCommand+0x24>
			//strcat(fullCommand, "get ");
			break; 
    1444:	0d c0       	rjmp	.+26     	; 0x1460 <sendCommand+0x48>
		case SET: 
			strcat(fullCommand, "set ");
    1446:	a4 ef       	ldi	r26, 0xF4	; 244
    1448:	b6 e0       	ldi	r27, 0x06	; 6
    144a:	0d 90       	ld	r0, X+
    144c:	00 20       	and	r0, r0
    144e:	e9 f7       	brne	.-6      	; 0x144a <sendCommand+0x32>
    1450:	11 97       	sbiw	r26, 0x01	; 1
    1452:	85 e0       	ldi	r24, 0x05	; 5
    1454:	e0 e6       	ldi	r30, 0x60	; 96
    1456:	f5 e0       	ldi	r31, 0x05	; 5
    1458:	01 90       	ld	r0, Z+
    145a:	0d 92       	st	X+, r0
    145c:	8a 95       	dec	r24
    145e:	e1 f7       	brne	.-8      	; 0x1458 <sendCommand+0x40>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
    1460:	84 ef       	ldi	r24, 0xF4	; 244
    1462:	96 e0       	ldi	r25, 0x06	; 6
    1464:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	c0 35       	cpi	r28, 0x50	; 80
    146c:	d8 07       	cpc	r29, r24
    146e:	79 f0       	breq	.+30     	; 0x148e <sendCommand+0x76>
	{
		strcat(fullCommand, " ");
    1470:	e4 ef       	ldi	r30, 0xF4	; 244
    1472:	f6 e0       	ldi	r31, 0x06	; 6
    1474:	01 90       	ld	r0, Z+
    1476:	00 20       	and	r0, r0
    1478:	e9 f7       	brne	.-6      	; 0x1474 <sendCommand+0x5c>
    147a:	31 97       	sbiw	r30, 0x01	; 1
    147c:	80 e2       	ldi	r24, 0x20	; 32
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	91 83       	std	Z+1, r25	; 0x01
    1482:	80 83       	st	Z, r24
		strcat(fullCommand, value);
    1484:	be 01       	movw	r22, r28
    1486:	84 ef       	ldi	r24, 0xF4	; 244
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
    148e:	c4 ef       	ldi	r28, 0xF4	; 244
    1490:	d6 e0       	ldi	r29, 0x06	; 6
    1492:	fe 01       	movw	r30, r28
    1494:	01 90       	ld	r0, Z+
    1496:	00 20       	and	r0, r0
    1498:	e9 f7       	brne	.-6      	; 0x1494 <sendCommand+0x7c>
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	8d e0       	ldi	r24, 0x0D	; 13
    149e:	9a e0       	ldi	r25, 0x0A	; 10
    14a0:	a0 e0       	ldi	r26, 0x00	; 0
    14a2:	80 83       	st	Z, r24
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
    14a8:	fe 01       	movw	r30, r28
    14aa:	01 90       	ld	r0, Z+
    14ac:	00 20       	and	r0, r0
    14ae:	e9 f7       	brne	.-6      	; 0x14aa <sendCommand+0x92>
    14b0:	31 97       	sbiw	r30, 0x01	; 1
    14b2:	8f 01       	movw	r16, r30
    14b4:	04 5f       	subi	r16, 0xF4	; 244
    14b6:	16 40       	sbci	r17, 0x06	; 6
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	1f 93       	push	r17
    14be:	0f 93       	push	r16
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	85 e6       	ldi	r24, 0x65	; 101
    14c6:	95 e0       	ldi	r25, 0x05	; 5
    14c8:	9f 93       	push	r25
    14ca:	8f 93       	push	r24
    14cc:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
	uart_send(fullCommand, length);
    14d0:	b8 01       	movw	r22, r16
    14d2:	ce 01       	movw	r24, r28
    14d4:	0e 94 ef 08 	call	0x11de	; 0x11de <uart_send>
	memset(fullCommand, 0x00, 100);
    14d8:	84 e6       	ldi	r24, 0x64	; 100
    14da:	fe 01       	movw	r30, r28
    14dc:	11 92       	st	Z+, r1
    14de:	8a 95       	dec	r24
    14e0:	e9 f7       	brne	.-6      	; 0x14dc <sendCommand+0xc4>
		//printf("Loop\n");
	//}
	//free(fullCommand);
	//printf("Freed!\n");
	//free(command);
	printf("Freed!\n");
    14e2:	8a e8       	ldi	r24, 0x8A	; 138
    14e4:	95 e0       	ldi	r25, 0x05	; 5
    14e6:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
	printf("Returning!\n");
    14ea:	81 e9       	ldi	r24, 0x91	; 145
    14ec:	95 e0       	ldi	r25, 0x05	; 5
    14ee:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
	return 1; 
    14f2:	8d b7       	in	r24, 0x3d	; 61
    14f4:	9e b7       	in	r25, 0x3e	; 62
    14f6:	08 96       	adiw	r24, 0x08	; 8
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	9e bf       	out	0x3e, r25	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	8d bf       	out	0x3d, r24	; 61
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 c0       	rjmp	.+4      	; 0x150c <sendCommand+0xf4>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
	//printf("Freed!\n");
	//free(command);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <__vector_25>:

ISR(USART0_RX_vect)
{
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	2f 93       	push	r18
    1522:	3f 93       	push	r19
    1524:	4f 93       	push	r20
    1526:	5f 93       	push	r21
    1528:	6f 93       	push	r22
    152a:	7f 93       	push	r23
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	ef 93       	push	r30
    153a:	ff 93       	push	r31
	//printf("Receive Interrupt!\n");
	cli();
    153c:	f8 94       	cli
	//PORTD &= ~(1<<CTS);
	if(!bufferStart)
    153e:	80 91 d1 05 	lds	r24, 0x05D1
    1542:	90 91 d2 05 	lds	r25, 0x05D2
    1546:	89 2b       	or	r24, r25
    1548:	d1 f4       	brne	.+52     	; 0x157e <__vector_25+0x68>
	{
		receiveBuffer[i] = uart_receiveChar();
    154a:	c0 91 cd 05 	lds	r28, 0x05CD
    154e:	d0 91 ce 05 	lds	r29, 0x05CE
    1552:	0e 94 1b 09 	call	0x1236	; 0x1236 <uart_receiveChar>
    1556:	c5 52       	subi	r28, 0x25	; 37
    1558:	d9 4f       	sbci	r29, 0xF9	; 249
    155a:	88 83       	st	Y, r24
		if(receiveBuffer[i] == 'R')
    155c:	e0 91 cd 05 	lds	r30, 0x05CD
    1560:	f0 91 ce 05 	lds	r31, 0x05CE
    1564:	e5 52       	subi	r30, 0x25	; 37
    1566:	f9 4f       	sbci	r31, 0xF9	; 249
    1568:	80 81       	ld	r24, Z
    156a:	82 35       	cpi	r24, 0x52	; 82
    156c:	09 f0       	breq	.+2      	; 0x1570 <__vector_25+0x5a>
    156e:	6e c0       	rjmp	.+220    	; 0x164c <__vector_25+0x136>
		{
			//printf("Found Beginning!\n");
			bufferStart = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	90 93 d2 05 	sts	0x05D2, r25
    1578:	80 93 d1 05 	sts	0x05D1, r24
    157c:	67 c0       	rjmp	.+206    	; 0x164c <__vector_25+0x136>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
    157e:	80 91 cd 05 	lds	r24, 0x05CD
    1582:	90 91 ce 05 	lds	r25, 0x05CE
    1586:	07 97       	sbiw	r24, 0x07	; 7
    1588:	50 f4       	brcc	.+20     	; 0x159e <__vector_25+0x88>
		{
			receiveBuffer[i] = uart_receiveChar();
    158a:	c0 91 cd 05 	lds	r28, 0x05CD
    158e:	d0 91 ce 05 	lds	r29, 0x05CE
    1592:	0e 94 1b 09 	call	0x1236	; 0x1236 <uart_receiveChar>
    1596:	c5 52       	subi	r28, 0x25	; 37
    1598:	d9 4f       	sbci	r29, 0xF9	; 249
    159a:	88 83       	st	Y, r24
    159c:	57 c0       	rjmp	.+174    	; 0x164c <__vector_25+0x136>
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
		}
		else if(i == endHeader)
    159e:	80 91 cd 05 	lds	r24, 0x05CD
    15a2:	90 91 ce 05 	lds	r25, 0x05CE
    15a6:	07 97       	sbiw	r24, 0x07	; 7
    15a8:	39 f4       	brne	.+14     	; 0x15b8 <__vector_25+0xa2>
		{
			transLength = buildTransmissionLength();
    15aa:	0e 94 43 09 	call	0x1286	; 0x1286 <buildTransmissionLength>
    15ae:	90 93 cb 05 	sts	0x05CB, r25
    15b2:	80 93 ca 05 	sts	0x05CA, r24
    15b6:	4a c0       	rjmp	.+148    	; 0x164c <__vector_25+0x136>
			//printf("Transmission Length: %d\n", transLength);
		}
		else
		{
			if(i < transLength + endHeader)
    15b8:	20 91 ca 05 	lds	r18, 0x05CA
    15bc:	30 91 cb 05 	lds	r19, 0x05CB
    15c0:	80 91 cd 05 	lds	r24, 0x05CD
    15c4:	90 91 ce 05 	lds	r25, 0x05CE
    15c8:	29 5f       	subi	r18, 0xF9	; 249
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	82 17       	cp	r24, r18
    15ce:	93 07       	cpc	r25, r19
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <__vector_25+0xc6>
			{
				//printf("Translength: %d", transLength);
				//_delay_ms(5);
				buff = uart_receiveChar();
    15d2:	0e 94 1b 09 	call	0x1236	; 0x1236 <uart_receiveChar>
    15d6:	80 93 da 06 	sts	0x06DA, r24
    15da:	38 c0       	rjmp	.+112    	; 0x164c <__vector_25+0x136>
			}

			else
			{
				//printf("End of String!\n");
				receiveBuffer[i] = 0;
    15dc:	e0 91 cd 05 	lds	r30, 0x05CD
    15e0:	f0 91 ce 05 	lds	r31, 0x05CE
    15e4:	e5 52       	subi	r30, 0x25	; 37
    15e6:	f9 4f       	sbci	r31, 0xF9	; 249
    15e8:	10 82       	st	Z, r1
				RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
    15ea:	80 91 c6 05 	lds	r24, 0x05C6
    15ee:	90 91 c7 05 	lds	r25, 0x05C7
    15f2:	a0 91 c8 05 	lds	r26, 0x05C8
    15f6:	b0 91 c9 05 	lds	r27, 0x05C9
    15fa:	20 91 cd 05 	lds	r18, 0x05CD
    15fe:	30 91 ce 05 	lds	r19, 0x05CE
    1602:	28 50       	subi	r18, 0x08	; 8
    1604:	31 09       	sbc	r19, r1
    1606:	b9 01       	movw	r22, r18
    1608:	68 0f       	add	r22, r24
    160a:	79 1f       	adc	r23, r25
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	0e 94 0b 08 	call	0x1016	; 0x1016 <RAMWriteByte>
				//UCSR1B &= ~(1<<RXCIE1);
				//cli();
				i = 0;
    1612:	10 92 ce 05 	sts	0x05CE, r1
    1616:	10 92 cd 05 	sts	0x05CD, r1
				bufferStart = 0;
    161a:	10 92 d2 05 	sts	0x05D2, r1
    161e:	10 92 d1 05 	sts	0x05D1, r1
				//done receiving
				receiveWifiFlag = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	80 93 cc 05 	sts	0x05CC, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
    1628:	0e 94 43 09 	call	0x1286	; 0x1286 <buildTransmissionLength>
    162c:	9f 93       	push	r25
    162e:	8f 93       	push	r24
    1630:	8c e9       	ldi	r24, 0x9C	; 156
    1632:	95 e0       	ldi	r25, 0x05	; 5
    1634:	9f 93       	push	r25
    1636:	8f 93       	push	r24
    1638:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
				printf("Done Receiving!\n");
    163c:	85 eb       	ldi	r24, 0xB5	; 181
    163e:	95 e0       	ldi	r25, 0x05	; 5
    1640:	0e 94 b1 0b 	call	0x1762	; 0x1762 <puts>
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
			}
		}
		//printf("%d\n", i);
	}
	i++; 
    164c:	80 91 cd 05 	lds	r24, 0x05CD
    1650:	90 91 ce 05 	lds	r25, 0x05CE
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	90 93 ce 05 	sts	0x05CE, r25
    165a:	80 93 cd 05 	sts	0x05CD, r24
	//PORTD |= (1<<CTS); 
	sei(); 
    165e:	78 94       	sei
}
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	bf 91       	pop	r27
    166a:	af 91       	pop	r26
    166c:	9f 91       	pop	r25
    166e:	8f 91       	pop	r24
    1670:	7f 91       	pop	r23
    1672:	6f 91       	pop	r22
    1674:	5f 91       	pop	r21
    1676:	4f 91       	pop	r20
    1678:	3f 91       	pop	r19
    167a:	2f 91       	pop	r18
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <__umulhisi3>:
    1686:	a2 9f       	mul	r26, r18
    1688:	b0 01       	movw	r22, r0
    168a:	b3 9f       	mul	r27, r19
    168c:	c0 01       	movw	r24, r0
    168e:	a3 9f       	mul	r26, r19
    1690:	70 0d       	add	r23, r0
    1692:	81 1d       	adc	r24, r1
    1694:	11 24       	eor	r1, r1
    1696:	91 1d       	adc	r25, r1
    1698:	b2 9f       	mul	r27, r18
    169a:	70 0d       	add	r23, r0
    169c:	81 1d       	adc	r24, r1
    169e:	11 24       	eor	r1, r1
    16a0:	91 1d       	adc	r25, r1
    16a2:	08 95       	ret

000016a4 <strcat>:
    16a4:	fb 01       	movw	r30, r22
    16a6:	dc 01       	movw	r26, r24
    16a8:	0d 90       	ld	r0, X+
    16aa:	00 20       	and	r0, r0
    16ac:	e9 f7       	brne	.-6      	; 0x16a8 <strcat+0x4>
    16ae:	11 97       	sbiw	r26, 0x01	; 1
    16b0:	01 90       	ld	r0, Z+
    16b2:	0d 92       	st	X+, r0
    16b4:	00 20       	and	r0, r0
    16b6:	e1 f7       	brne	.-8      	; 0x16b0 <strcat+0xc>
    16b8:	08 95       	ret

000016ba <strcpy>:
    16ba:	fb 01       	movw	r30, r22
    16bc:	dc 01       	movw	r26, r24
    16be:	01 90       	ld	r0, Z+
    16c0:	0d 92       	st	X+, r0
    16c2:	00 20       	and	r0, r0
    16c4:	e1 f7       	brne	.-8      	; 0x16be <strcpy+0x4>
    16c6:	08 95       	ret

000016c8 <fputc>:
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	18 2f       	mov	r17, r24
    16d2:	09 2f       	mov	r16, r25
    16d4:	eb 01       	movw	r28, r22
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	81 fd       	sbrc	r24, 1
    16da:	03 c0       	rjmp	.+6      	; 0x16e2 <fputc+0x1a>
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	9f ef       	ldi	r25, 0xFF	; 255
    16e0:	20 c0       	rjmp	.+64     	; 0x1722 <fputc+0x5a>
    16e2:	82 ff       	sbrs	r24, 2
    16e4:	10 c0       	rjmp	.+32     	; 0x1706 <fputc+0x3e>
    16e6:	4e 81       	ldd	r20, Y+6	; 0x06
    16e8:	5f 81       	ldd	r21, Y+7	; 0x07
    16ea:	2c 81       	ldd	r18, Y+4	; 0x04
    16ec:	3d 81       	ldd	r19, Y+5	; 0x05
    16ee:	42 17       	cp	r20, r18
    16f0:	53 07       	cpc	r21, r19
    16f2:	7c f4       	brge	.+30     	; 0x1712 <fputc+0x4a>
    16f4:	e8 81       	ld	r30, Y
    16f6:	f9 81       	ldd	r31, Y+1	; 0x01
    16f8:	9f 01       	movw	r18, r30
    16fa:	2f 5f       	subi	r18, 0xFF	; 255
    16fc:	3f 4f       	sbci	r19, 0xFF	; 255
    16fe:	39 83       	std	Y+1, r19	; 0x01
    1700:	28 83       	st	Y, r18
    1702:	10 83       	st	Z, r17
    1704:	06 c0       	rjmp	.+12     	; 0x1712 <fputc+0x4a>
    1706:	e8 85       	ldd	r30, Y+8	; 0x08
    1708:	f9 85       	ldd	r31, Y+9	; 0x09
    170a:	81 2f       	mov	r24, r17
    170c:	09 95       	icall
    170e:	89 2b       	or	r24, r25
    1710:	29 f7       	brne	.-54     	; 0x16dc <fputc+0x14>
    1712:	2e 81       	ldd	r18, Y+6	; 0x06
    1714:	3f 81       	ldd	r19, Y+7	; 0x07
    1716:	2f 5f       	subi	r18, 0xFF	; 255
    1718:	3f 4f       	sbci	r19, 0xFF	; 255
    171a:	3f 83       	std	Y+7, r19	; 0x07
    171c:	2e 83       	std	Y+6, r18	; 0x06
    171e:	81 2f       	mov	r24, r17
    1720:	90 2f       	mov	r25, r16
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	08 95       	ret

0000172c <printf>:
    172c:	a0 e0       	ldi	r26, 0x00	; 0
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ec e9       	ldi	r30, 0x9C	; 156
    1732:	fb e0       	ldi	r31, 0x0B	; 11
    1734:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x20>
    1738:	fe 01       	movw	r30, r28
    173a:	35 96       	adiw	r30, 0x05	; 5
    173c:	61 91       	ld	r22, Z+
    173e:	71 91       	ld	r23, Z+
    1740:	af 01       	movw	r20, r30
    1742:	80 91 5a 07 	lds	r24, 0x075A
    1746:	90 91 5b 07 	lds	r25, 0x075B
    174a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <vfprintf>
    174e:	e2 e0       	ldi	r30, 0x02	; 2
    1750:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x20>

00001754 <putchar>:
    1754:	60 91 5a 07 	lds	r22, 0x075A
    1758:	70 91 5b 07 	lds	r23, 0x075B
    175c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <fputc>
    1760:	08 95       	ret

00001762 <puts>:
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	e0 91 5a 07 	lds	r30, 0x075A
    176e:	f0 91 5b 07 	lds	r31, 0x075B
    1772:	23 81       	ldd	r18, Z+3	; 0x03
    1774:	21 ff       	sbrs	r18, 1
    1776:	1b c0       	rjmp	.+54     	; 0x17ae <puts+0x4c>
    1778:	ec 01       	movw	r28, r24
    177a:	00 e0       	ldi	r16, 0x00	; 0
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	89 91       	ld	r24, Y+
    1780:	60 91 5a 07 	lds	r22, 0x075A
    1784:	70 91 5b 07 	lds	r23, 0x075B
    1788:	db 01       	movw	r26, r22
    178a:	18 96       	adiw	r26, 0x08	; 8
    178c:	ed 91       	ld	r30, X+
    178e:	fc 91       	ld	r31, X
    1790:	19 97       	sbiw	r26, 0x09	; 9
    1792:	88 23       	and	r24, r24
    1794:	31 f0       	breq	.+12     	; 0x17a2 <puts+0x40>
    1796:	09 95       	icall
    1798:	89 2b       	or	r24, r25
    179a:	89 f3       	breq	.-30     	; 0x177e <puts+0x1c>
    179c:	0f ef       	ldi	r16, 0xFF	; 255
    179e:	1f ef       	ldi	r17, 0xFF	; 255
    17a0:	ee cf       	rjmp	.-36     	; 0x177e <puts+0x1c>
    17a2:	8a e0       	ldi	r24, 0x0A	; 10
    17a4:	09 95       	icall
    17a6:	89 2b       	or	r24, r25
    17a8:	11 f4       	brne	.+4      	; 0x17ae <puts+0x4c>
    17aa:	c8 01       	movw	r24, r16
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <puts+0x50>
    17ae:	8f ef       	ldi	r24, 0xFF	; 255
    17b0:	9f ef       	ldi	r25, 0xFF	; 255
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	08 95       	ret

000017bc <vfprintf>:
    17bc:	ac e0       	ldi	r26, 0x0C	; 12
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e4 ee       	ldi	r30, 0xE4	; 228
    17c2:	fb e0       	ldi	r31, 0x0B	; 11
    17c4:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <__prologue_saves__>
    17c8:	7c 01       	movw	r14, r24
    17ca:	6b 01       	movw	r12, r22
    17cc:	8a 01       	movw	r16, r20
    17ce:	fc 01       	movw	r30, r24
    17d0:	17 82       	std	Z+7, r1	; 0x07
    17d2:	16 82       	std	Z+6, r1	; 0x06
    17d4:	83 81       	ldd	r24, Z+3	; 0x03
    17d6:	81 ff       	sbrs	r24, 1
    17d8:	bd c1       	rjmp	.+890    	; 0x1b54 <vfprintf+0x398>
    17da:	ce 01       	movw	r24, r28
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	4c 01       	movw	r8, r24
    17e0:	f7 01       	movw	r30, r14
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	f6 01       	movw	r30, r12
    17e6:	93 fd       	sbrc	r25, 3
    17e8:	85 91       	lpm	r24, Z+
    17ea:	93 ff       	sbrs	r25, 3
    17ec:	81 91       	ld	r24, Z+
    17ee:	6f 01       	movw	r12, r30
    17f0:	88 23       	and	r24, r24
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <vfprintf+0x3a>
    17f4:	ab c1       	rjmp	.+854    	; 0x1b4c <vfprintf+0x390>
    17f6:	85 32       	cpi	r24, 0x25	; 37
    17f8:	39 f4       	brne	.+14     	; 0x1808 <vfprintf+0x4c>
    17fa:	93 fd       	sbrc	r25, 3
    17fc:	85 91       	lpm	r24, Z+
    17fe:	93 ff       	sbrs	r25, 3
    1800:	81 91       	ld	r24, Z+
    1802:	6f 01       	movw	r12, r30
    1804:	85 32       	cpi	r24, 0x25	; 37
    1806:	29 f4       	brne	.+10     	; 0x1812 <vfprintf+0x56>
    1808:	b7 01       	movw	r22, r14
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <fputc>
    1810:	e7 cf       	rjmp	.-50     	; 0x17e0 <vfprintf+0x24>
    1812:	51 2c       	mov	r5, r1
    1814:	31 2c       	mov	r3, r1
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	20 32       	cpi	r18, 0x20	; 32
    181a:	a0 f4       	brcc	.+40     	; 0x1844 <vfprintf+0x88>
    181c:	8b 32       	cpi	r24, 0x2B	; 43
    181e:	69 f0       	breq	.+26     	; 0x183a <vfprintf+0x7e>
    1820:	30 f4       	brcc	.+12     	; 0x182e <vfprintf+0x72>
    1822:	80 32       	cpi	r24, 0x20	; 32
    1824:	59 f0       	breq	.+22     	; 0x183c <vfprintf+0x80>
    1826:	83 32       	cpi	r24, 0x23	; 35
    1828:	69 f4       	brne	.+26     	; 0x1844 <vfprintf+0x88>
    182a:	20 61       	ori	r18, 0x10	; 16
    182c:	2c c0       	rjmp	.+88     	; 0x1886 <vfprintf+0xca>
    182e:	8d 32       	cpi	r24, 0x2D	; 45
    1830:	39 f0       	breq	.+14     	; 0x1840 <vfprintf+0x84>
    1832:	80 33       	cpi	r24, 0x30	; 48
    1834:	39 f4       	brne	.+14     	; 0x1844 <vfprintf+0x88>
    1836:	21 60       	ori	r18, 0x01	; 1
    1838:	26 c0       	rjmp	.+76     	; 0x1886 <vfprintf+0xca>
    183a:	22 60       	ori	r18, 0x02	; 2
    183c:	24 60       	ori	r18, 0x04	; 4
    183e:	23 c0       	rjmp	.+70     	; 0x1886 <vfprintf+0xca>
    1840:	28 60       	ori	r18, 0x08	; 8
    1842:	21 c0       	rjmp	.+66     	; 0x1886 <vfprintf+0xca>
    1844:	27 fd       	sbrc	r18, 7
    1846:	27 c0       	rjmp	.+78     	; 0x1896 <vfprintf+0xda>
    1848:	30 ed       	ldi	r19, 0xD0	; 208
    184a:	38 0f       	add	r19, r24
    184c:	3a 30       	cpi	r19, 0x0A	; 10
    184e:	78 f4       	brcc	.+30     	; 0x186e <vfprintf+0xb2>
    1850:	26 ff       	sbrs	r18, 6
    1852:	06 c0       	rjmp	.+12     	; 0x1860 <vfprintf+0xa4>
    1854:	fa e0       	ldi	r31, 0x0A	; 10
    1856:	5f 9e       	mul	r5, r31
    1858:	30 0d       	add	r19, r0
    185a:	11 24       	eor	r1, r1
    185c:	53 2e       	mov	r5, r19
    185e:	13 c0       	rjmp	.+38     	; 0x1886 <vfprintf+0xca>
    1860:	8a e0       	ldi	r24, 0x0A	; 10
    1862:	38 9e       	mul	r3, r24
    1864:	30 0d       	add	r19, r0
    1866:	11 24       	eor	r1, r1
    1868:	33 2e       	mov	r3, r19
    186a:	20 62       	ori	r18, 0x20	; 32
    186c:	0c c0       	rjmp	.+24     	; 0x1886 <vfprintf+0xca>
    186e:	8e 32       	cpi	r24, 0x2E	; 46
    1870:	21 f4       	brne	.+8      	; 0x187a <vfprintf+0xbe>
    1872:	26 fd       	sbrc	r18, 6
    1874:	6b c1       	rjmp	.+726    	; 0x1b4c <vfprintf+0x390>
    1876:	20 64       	ori	r18, 0x40	; 64
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <vfprintf+0xca>
    187a:	8c 36       	cpi	r24, 0x6C	; 108
    187c:	11 f4       	brne	.+4      	; 0x1882 <vfprintf+0xc6>
    187e:	20 68       	ori	r18, 0x80	; 128
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0xca>
    1882:	88 36       	cpi	r24, 0x68	; 104
    1884:	41 f4       	brne	.+16     	; 0x1896 <vfprintf+0xda>
    1886:	f6 01       	movw	r30, r12
    1888:	93 fd       	sbrc	r25, 3
    188a:	85 91       	lpm	r24, Z+
    188c:	93 ff       	sbrs	r25, 3
    188e:	81 91       	ld	r24, Z+
    1890:	6f 01       	movw	r12, r30
    1892:	81 11       	cpse	r24, r1
    1894:	c1 cf       	rjmp	.-126    	; 0x1818 <vfprintf+0x5c>
    1896:	98 2f       	mov	r25, r24
    1898:	9f 7d       	andi	r25, 0xDF	; 223
    189a:	95 54       	subi	r25, 0x45	; 69
    189c:	93 30       	cpi	r25, 0x03	; 3
    189e:	28 f4       	brcc	.+10     	; 0x18aa <vfprintf+0xee>
    18a0:	0c 5f       	subi	r16, 0xFC	; 252
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	ff e3       	ldi	r31, 0x3F	; 63
    18a6:	f9 83       	std	Y+1, r31	; 0x01
    18a8:	0d c0       	rjmp	.+26     	; 0x18c4 <vfprintf+0x108>
    18aa:	83 36       	cpi	r24, 0x63	; 99
    18ac:	31 f0       	breq	.+12     	; 0x18ba <vfprintf+0xfe>
    18ae:	83 37       	cpi	r24, 0x73	; 115
    18b0:	71 f0       	breq	.+28     	; 0x18ce <vfprintf+0x112>
    18b2:	83 35       	cpi	r24, 0x53	; 83
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <vfprintf+0xfc>
    18b6:	5b c0       	rjmp	.+182    	; 0x196e <vfprintf+0x1b2>
    18b8:	22 c0       	rjmp	.+68     	; 0x18fe <vfprintf+0x142>
    18ba:	f8 01       	movw	r30, r16
    18bc:	80 81       	ld	r24, Z
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	0e 5f       	subi	r16, 0xFE	; 254
    18c2:	1f 4f       	sbci	r17, 0xFF	; 255
    18c4:	44 24       	eor	r4, r4
    18c6:	43 94       	inc	r4
    18c8:	51 2c       	mov	r5, r1
    18ca:	54 01       	movw	r10, r8
    18cc:	15 c0       	rjmp	.+42     	; 0x18f8 <vfprintf+0x13c>
    18ce:	38 01       	movw	r6, r16
    18d0:	f2 e0       	ldi	r31, 0x02	; 2
    18d2:	6f 0e       	add	r6, r31
    18d4:	71 1c       	adc	r7, r1
    18d6:	f8 01       	movw	r30, r16
    18d8:	a0 80       	ld	r10, Z
    18da:	b1 80       	ldd	r11, Z+1	; 0x01
    18dc:	26 ff       	sbrs	r18, 6
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <vfprintf+0x12a>
    18e0:	65 2d       	mov	r22, r5
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <vfprintf+0x12e>
    18e6:	6f ef       	ldi	r22, 0xFF	; 255
    18e8:	7f ef       	ldi	r23, 0xFF	; 255
    18ea:	c5 01       	movw	r24, r10
    18ec:	2c 87       	std	Y+12, r18	; 0x0c
    18ee:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <strnlen>
    18f2:	2c 01       	movw	r4, r24
    18f4:	83 01       	movw	r16, r6
    18f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    18f8:	2f 77       	andi	r18, 0x7F	; 127
    18fa:	22 2e       	mov	r2, r18
    18fc:	17 c0       	rjmp	.+46     	; 0x192c <vfprintf+0x170>
    18fe:	38 01       	movw	r6, r16
    1900:	f2 e0       	ldi	r31, 0x02	; 2
    1902:	6f 0e       	add	r6, r31
    1904:	71 1c       	adc	r7, r1
    1906:	f8 01       	movw	r30, r16
    1908:	a0 80       	ld	r10, Z
    190a:	b1 80       	ldd	r11, Z+1	; 0x01
    190c:	26 ff       	sbrs	r18, 6
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <vfprintf+0x15a>
    1910:	65 2d       	mov	r22, r5
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	02 c0       	rjmp	.+4      	; 0x191a <vfprintf+0x15e>
    1916:	6f ef       	ldi	r22, 0xFF	; 255
    1918:	7f ef       	ldi	r23, 0xFF	; 255
    191a:	c5 01       	movw	r24, r10
    191c:	2c 87       	std	Y+12, r18	; 0x0c
    191e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <strnlen_P>
    1922:	2c 01       	movw	r4, r24
    1924:	2c 85       	ldd	r18, Y+12	; 0x0c
    1926:	20 68       	ori	r18, 0x80	; 128
    1928:	22 2e       	mov	r2, r18
    192a:	83 01       	movw	r16, r6
    192c:	23 fc       	sbrc	r2, 3
    192e:	1b c0       	rjmp	.+54     	; 0x1966 <vfprintf+0x1aa>
    1930:	83 2d       	mov	r24, r3
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	48 16       	cp	r4, r24
    1936:	59 06       	cpc	r5, r25
    1938:	b0 f4       	brcc	.+44     	; 0x1966 <vfprintf+0x1aa>
    193a:	b7 01       	movw	r22, r14
    193c:	80 e2       	ldi	r24, 0x20	; 32
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <fputc>
    1944:	3a 94       	dec	r3
    1946:	f4 cf       	rjmp	.-24     	; 0x1930 <vfprintf+0x174>
    1948:	f5 01       	movw	r30, r10
    194a:	27 fc       	sbrc	r2, 7
    194c:	85 91       	lpm	r24, Z+
    194e:	27 fe       	sbrs	r2, 7
    1950:	81 91       	ld	r24, Z+
    1952:	5f 01       	movw	r10, r30
    1954:	b7 01       	movw	r22, r14
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <fputc>
    195c:	31 10       	cpse	r3, r1
    195e:	3a 94       	dec	r3
    1960:	f1 e0       	ldi	r31, 0x01	; 1
    1962:	4f 1a       	sub	r4, r31
    1964:	51 08       	sbc	r5, r1
    1966:	41 14       	cp	r4, r1
    1968:	51 04       	cpc	r5, r1
    196a:	71 f7       	brne	.-36     	; 0x1948 <vfprintf+0x18c>
    196c:	e5 c0       	rjmp	.+458    	; 0x1b38 <vfprintf+0x37c>
    196e:	84 36       	cpi	r24, 0x64	; 100
    1970:	11 f0       	breq	.+4      	; 0x1976 <vfprintf+0x1ba>
    1972:	89 36       	cpi	r24, 0x69	; 105
    1974:	39 f5       	brne	.+78     	; 0x19c4 <vfprintf+0x208>
    1976:	f8 01       	movw	r30, r16
    1978:	27 ff       	sbrs	r18, 7
    197a:	07 c0       	rjmp	.+14     	; 0x198a <vfprintf+0x1ce>
    197c:	60 81       	ld	r22, Z
    197e:	71 81       	ldd	r23, Z+1	; 0x01
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	93 81       	ldd	r25, Z+3	; 0x03
    1984:	0c 5f       	subi	r16, 0xFC	; 252
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
    1988:	08 c0       	rjmp	.+16     	; 0x199a <vfprintf+0x1de>
    198a:	60 81       	ld	r22, Z
    198c:	71 81       	ldd	r23, Z+1	; 0x01
    198e:	88 27       	eor	r24, r24
    1990:	77 fd       	sbrc	r23, 7
    1992:	80 95       	com	r24
    1994:	98 2f       	mov	r25, r24
    1996:	0e 5f       	subi	r16, 0xFE	; 254
    1998:	1f 4f       	sbci	r17, 0xFF	; 255
    199a:	2f 76       	andi	r18, 0x6F	; 111
    199c:	b2 2e       	mov	r11, r18
    199e:	97 ff       	sbrs	r25, 7
    19a0:	09 c0       	rjmp	.+18     	; 0x19b4 <vfprintf+0x1f8>
    19a2:	90 95       	com	r25
    19a4:	80 95       	com	r24
    19a6:	70 95       	com	r23
    19a8:	61 95       	neg	r22
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	8f 4f       	sbci	r24, 0xFF	; 255
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	20 68       	ori	r18, 0x80	; 128
    19b2:	b2 2e       	mov	r11, r18
    19b4:	2a e0       	ldi	r18, 0x0A	; 10
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	a4 01       	movw	r20, r8
    19ba:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__ultoa_invert>
    19be:	a8 2e       	mov	r10, r24
    19c0:	a8 18       	sub	r10, r8
    19c2:	44 c0       	rjmp	.+136    	; 0x1a4c <vfprintf+0x290>
    19c4:	85 37       	cpi	r24, 0x75	; 117
    19c6:	29 f4       	brne	.+10     	; 0x19d2 <vfprintf+0x216>
    19c8:	2f 7e       	andi	r18, 0xEF	; 239
    19ca:	b2 2e       	mov	r11, r18
    19cc:	2a e0       	ldi	r18, 0x0A	; 10
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	25 c0       	rjmp	.+74     	; 0x1a1c <vfprintf+0x260>
    19d2:	f2 2f       	mov	r31, r18
    19d4:	f9 7f       	andi	r31, 0xF9	; 249
    19d6:	bf 2e       	mov	r11, r31
    19d8:	8f 36       	cpi	r24, 0x6F	; 111
    19da:	c1 f0       	breq	.+48     	; 0x1a0c <vfprintf+0x250>
    19dc:	18 f4       	brcc	.+6      	; 0x19e4 <vfprintf+0x228>
    19de:	88 35       	cpi	r24, 0x58	; 88
    19e0:	79 f0       	breq	.+30     	; 0x1a00 <vfprintf+0x244>
    19e2:	b4 c0       	rjmp	.+360    	; 0x1b4c <vfprintf+0x390>
    19e4:	80 37       	cpi	r24, 0x70	; 112
    19e6:	19 f0       	breq	.+6      	; 0x19ee <vfprintf+0x232>
    19e8:	88 37       	cpi	r24, 0x78	; 120
    19ea:	21 f0       	breq	.+8      	; 0x19f4 <vfprintf+0x238>
    19ec:	af c0       	rjmp	.+350    	; 0x1b4c <vfprintf+0x390>
    19ee:	2f 2f       	mov	r18, r31
    19f0:	20 61       	ori	r18, 0x10	; 16
    19f2:	b2 2e       	mov	r11, r18
    19f4:	b4 fe       	sbrs	r11, 4
    19f6:	0d c0       	rjmp	.+26     	; 0x1a12 <vfprintf+0x256>
    19f8:	8b 2d       	mov	r24, r11
    19fa:	84 60       	ori	r24, 0x04	; 4
    19fc:	b8 2e       	mov	r11, r24
    19fe:	09 c0       	rjmp	.+18     	; 0x1a12 <vfprintf+0x256>
    1a00:	24 ff       	sbrs	r18, 4
    1a02:	0a c0       	rjmp	.+20     	; 0x1a18 <vfprintf+0x25c>
    1a04:	9f 2f       	mov	r25, r31
    1a06:	96 60       	ori	r25, 0x06	; 6
    1a08:	b9 2e       	mov	r11, r25
    1a0a:	06 c0       	rjmp	.+12     	; 0x1a18 <vfprintf+0x25c>
    1a0c:	28 e0       	ldi	r18, 0x08	; 8
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	05 c0       	rjmp	.+10     	; 0x1a1c <vfprintf+0x260>
    1a12:	20 e1       	ldi	r18, 0x10	; 16
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <vfprintf+0x260>
    1a18:	20 e1       	ldi	r18, 0x10	; 16
    1a1a:	32 e0       	ldi	r19, 0x02	; 2
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	b7 fe       	sbrs	r11, 7
    1a20:	07 c0       	rjmp	.+14     	; 0x1a30 <vfprintf+0x274>
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	0c 5f       	subi	r16, 0xFC	; 252
    1a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2e:	06 c0       	rjmp	.+12     	; 0x1a3c <vfprintf+0x280>
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	0e 5f       	subi	r16, 0xFE	; 254
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	a4 01       	movw	r20, r8
    1a3e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__ultoa_invert>
    1a42:	a8 2e       	mov	r10, r24
    1a44:	a8 18       	sub	r10, r8
    1a46:	fb 2d       	mov	r31, r11
    1a48:	ff 77       	andi	r31, 0x7F	; 127
    1a4a:	bf 2e       	mov	r11, r31
    1a4c:	b6 fe       	sbrs	r11, 6
    1a4e:	0b c0       	rjmp	.+22     	; 0x1a66 <vfprintf+0x2aa>
    1a50:	2b 2d       	mov	r18, r11
    1a52:	2e 7f       	andi	r18, 0xFE	; 254
    1a54:	a5 14       	cp	r10, r5
    1a56:	50 f4       	brcc	.+20     	; 0x1a6c <vfprintf+0x2b0>
    1a58:	b4 fe       	sbrs	r11, 4
    1a5a:	0a c0       	rjmp	.+20     	; 0x1a70 <vfprintf+0x2b4>
    1a5c:	b2 fc       	sbrc	r11, 2
    1a5e:	08 c0       	rjmp	.+16     	; 0x1a70 <vfprintf+0x2b4>
    1a60:	2b 2d       	mov	r18, r11
    1a62:	2e 7e       	andi	r18, 0xEE	; 238
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <vfprintf+0x2b4>
    1a66:	7a 2c       	mov	r7, r10
    1a68:	2b 2d       	mov	r18, r11
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <vfprintf+0x2b6>
    1a6c:	7a 2c       	mov	r7, r10
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <vfprintf+0x2b6>
    1a70:	75 2c       	mov	r7, r5
    1a72:	24 ff       	sbrs	r18, 4
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <vfprintf+0x2d4>
    1a76:	fe 01       	movw	r30, r28
    1a78:	ea 0d       	add	r30, r10
    1a7a:	f1 1d       	adc	r31, r1
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 33       	cpi	r24, 0x30	; 48
    1a80:	11 f4       	brne	.+4      	; 0x1a86 <vfprintf+0x2ca>
    1a82:	29 7e       	andi	r18, 0xE9	; 233
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <vfprintf+0x2dc>
    1a86:	22 ff       	sbrs	r18, 2
    1a88:	06 c0       	rjmp	.+12     	; 0x1a96 <vfprintf+0x2da>
    1a8a:	73 94       	inc	r7
    1a8c:	73 94       	inc	r7
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <vfprintf+0x2dc>
    1a90:	82 2f       	mov	r24, r18
    1a92:	86 78       	andi	r24, 0x86	; 134
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <vfprintf+0x2dc>
    1a96:	73 94       	inc	r7
    1a98:	23 fd       	sbrc	r18, 3
    1a9a:	13 c0       	rjmp	.+38     	; 0x1ac2 <vfprintf+0x306>
    1a9c:	20 ff       	sbrs	r18, 0
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <vfprintf+0x2f0>
    1aa0:	5a 2c       	mov	r5, r10
    1aa2:	73 14       	cp	r7, r3
    1aa4:	18 f4       	brcc	.+6      	; 0x1aac <vfprintf+0x2f0>
    1aa6:	53 0c       	add	r5, r3
    1aa8:	57 18       	sub	r5, r7
    1aaa:	73 2c       	mov	r7, r3
    1aac:	73 14       	cp	r7, r3
    1aae:	68 f4       	brcc	.+26     	; 0x1aca <vfprintf+0x30e>
    1ab0:	b7 01       	movw	r22, r14
    1ab2:	80 e2       	ldi	r24, 0x20	; 32
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	2c 87       	std	Y+12, r18	; 0x0c
    1ab8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <fputc>
    1abc:	73 94       	inc	r7
    1abe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ac0:	f5 cf       	rjmp	.-22     	; 0x1aac <vfprintf+0x2f0>
    1ac2:	73 14       	cp	r7, r3
    1ac4:	10 f4       	brcc	.+4      	; 0x1aca <vfprintf+0x30e>
    1ac6:	37 18       	sub	r3, r7
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <vfprintf+0x310>
    1aca:	31 2c       	mov	r3, r1
    1acc:	24 ff       	sbrs	r18, 4
    1ace:	12 c0       	rjmp	.+36     	; 0x1af4 <vfprintf+0x338>
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	80 e3       	ldi	r24, 0x30	; 48
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	2c 87       	std	Y+12, r18	; 0x0c
    1ad8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <fputc>
    1adc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ade:	22 ff       	sbrs	r18, 2
    1ae0:	17 c0       	rjmp	.+46     	; 0x1b10 <vfprintf+0x354>
    1ae2:	21 ff       	sbrs	r18, 1
    1ae4:	03 c0       	rjmp	.+6      	; 0x1aec <vfprintf+0x330>
    1ae6:	88 e5       	ldi	r24, 0x58	; 88
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <vfprintf+0x334>
    1aec:	88 e7       	ldi	r24, 0x78	; 120
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	b7 01       	movw	r22, r14
    1af2:	0c c0       	rjmp	.+24     	; 0x1b0c <vfprintf+0x350>
    1af4:	82 2f       	mov	r24, r18
    1af6:	86 78       	andi	r24, 0x86	; 134
    1af8:	59 f0       	breq	.+22     	; 0x1b10 <vfprintf+0x354>
    1afa:	21 fd       	sbrc	r18, 1
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <vfprintf+0x346>
    1afe:	80 e2       	ldi	r24, 0x20	; 32
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <vfprintf+0x348>
    1b02:	8b e2       	ldi	r24, 0x2B	; 43
    1b04:	27 fd       	sbrc	r18, 7
    1b06:	8d e2       	ldi	r24, 0x2D	; 45
    1b08:	b7 01       	movw	r22, r14
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <fputc>
    1b10:	a5 14       	cp	r10, r5
    1b12:	38 f4       	brcc	.+14     	; 0x1b22 <vfprintf+0x366>
    1b14:	b7 01       	movw	r22, r14
    1b16:	80 e3       	ldi	r24, 0x30	; 48
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <fputc>
    1b1e:	5a 94       	dec	r5
    1b20:	f7 cf       	rjmp	.-18     	; 0x1b10 <vfprintf+0x354>
    1b22:	aa 94       	dec	r10
    1b24:	f4 01       	movw	r30, r8
    1b26:	ea 0d       	add	r30, r10
    1b28:	f1 1d       	adc	r31, r1
    1b2a:	80 81       	ld	r24, Z
    1b2c:	b7 01       	movw	r22, r14
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <fputc>
    1b34:	a1 10       	cpse	r10, r1
    1b36:	f5 cf       	rjmp	.-22     	; 0x1b22 <vfprintf+0x366>
    1b38:	33 20       	and	r3, r3
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <vfprintf+0x382>
    1b3c:	51 ce       	rjmp	.-862    	; 0x17e0 <vfprintf+0x24>
    1b3e:	b7 01       	movw	r22, r14
    1b40:	80 e2       	ldi	r24, 0x20	; 32
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <fputc>
    1b48:	3a 94       	dec	r3
    1b4a:	f6 cf       	rjmp	.-20     	; 0x1b38 <vfprintf+0x37c>
    1b4c:	f7 01       	movw	r30, r14
    1b4e:	86 81       	ldd	r24, Z+6	; 0x06
    1b50:	97 81       	ldd	r25, Z+7	; 0x07
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <vfprintf+0x39c>
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	9f ef       	ldi	r25, 0xFF	; 255
    1b58:	2c 96       	adiw	r28, 0x0c	; 12
    1b5a:	e2 e1       	ldi	r30, 0x12	; 18
    1b5c:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__epilogue_restores__>

00001b60 <strnlen_P>:
    1b60:	fc 01       	movw	r30, r24
    1b62:	05 90       	lpm	r0, Z+
    1b64:	61 50       	subi	r22, 0x01	; 1
    1b66:	70 40       	sbci	r23, 0x00	; 0
    1b68:	01 10       	cpse	r0, r1
    1b6a:	d8 f7       	brcc	.-10     	; 0x1b62 <strnlen_P+0x2>
    1b6c:	80 95       	com	r24
    1b6e:	90 95       	com	r25
    1b70:	8e 0f       	add	r24, r30
    1b72:	9f 1f       	adc	r25, r31
    1b74:	08 95       	ret

00001b76 <strnlen>:
    1b76:	fc 01       	movw	r30, r24
    1b78:	61 50       	subi	r22, 0x01	; 1
    1b7a:	70 40       	sbci	r23, 0x00	; 0
    1b7c:	01 90       	ld	r0, Z+
    1b7e:	01 10       	cpse	r0, r1
    1b80:	d8 f7       	brcc	.-10     	; 0x1b78 <strnlen+0x2>
    1b82:	80 95       	com	r24
    1b84:	90 95       	com	r25
    1b86:	8e 0f       	add	r24, r30
    1b88:	9f 1f       	adc	r25, r31
    1b8a:	08 95       	ret

00001b8c <__ultoa_invert>:
    1b8c:	fa 01       	movw	r30, r20
    1b8e:	aa 27       	eor	r26, r26
    1b90:	28 30       	cpi	r18, 0x08	; 8
    1b92:	51 f1       	breq	.+84     	; 0x1be8 <__ultoa_invert+0x5c>
    1b94:	20 31       	cpi	r18, 0x10	; 16
    1b96:	81 f1       	breq	.+96     	; 0x1bf8 <__ultoa_invert+0x6c>
    1b98:	e8 94       	clt
    1b9a:	6f 93       	push	r22
    1b9c:	6e 7f       	andi	r22, 0xFE	; 254
    1b9e:	6e 5f       	subi	r22, 0xFE	; 254
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba6:	af 4f       	sbci	r26, 0xFF	; 255
    1ba8:	b1 e0       	ldi	r27, 0x01	; 1
    1baa:	3e d0       	rcall	.+124    	; 0x1c28 <__ultoa_invert+0x9c>
    1bac:	b4 e0       	ldi	r27, 0x04	; 4
    1bae:	3c d0       	rcall	.+120    	; 0x1c28 <__ultoa_invert+0x9c>
    1bb0:	67 0f       	add	r22, r23
    1bb2:	78 1f       	adc	r23, r24
    1bb4:	89 1f       	adc	r24, r25
    1bb6:	9a 1f       	adc	r25, r26
    1bb8:	a1 1d       	adc	r26, r1
    1bba:	68 0f       	add	r22, r24
    1bbc:	79 1f       	adc	r23, r25
    1bbe:	8a 1f       	adc	r24, r26
    1bc0:	91 1d       	adc	r25, r1
    1bc2:	a1 1d       	adc	r26, r1
    1bc4:	6a 0f       	add	r22, r26
    1bc6:	71 1d       	adc	r23, r1
    1bc8:	81 1d       	adc	r24, r1
    1bca:	91 1d       	adc	r25, r1
    1bcc:	a1 1d       	adc	r26, r1
    1bce:	20 d0       	rcall	.+64     	; 0x1c10 <__ultoa_invert+0x84>
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <__ultoa_invert+0x48>
    1bd2:	68 94       	set
    1bd4:	3f 91       	pop	r19
    1bd6:	2a e0       	ldi	r18, 0x0A	; 10
    1bd8:	26 9f       	mul	r18, r22
    1bda:	11 24       	eor	r1, r1
    1bdc:	30 19       	sub	r19, r0
    1bde:	30 5d       	subi	r19, 0xD0	; 208
    1be0:	31 93       	st	Z+, r19
    1be2:	de f6       	brtc	.-74     	; 0x1b9a <__ultoa_invert+0xe>
    1be4:	cf 01       	movw	r24, r30
    1be6:	08 95       	ret
    1be8:	46 2f       	mov	r20, r22
    1bea:	47 70       	andi	r20, 0x07	; 7
    1bec:	40 5d       	subi	r20, 0xD0	; 208
    1bee:	41 93       	st	Z+, r20
    1bf0:	b3 e0       	ldi	r27, 0x03	; 3
    1bf2:	0f d0       	rcall	.+30     	; 0x1c12 <__ultoa_invert+0x86>
    1bf4:	c9 f7       	brne	.-14     	; 0x1be8 <__ultoa_invert+0x5c>
    1bf6:	f6 cf       	rjmp	.-20     	; 0x1be4 <__ultoa_invert+0x58>
    1bf8:	46 2f       	mov	r20, r22
    1bfa:	4f 70       	andi	r20, 0x0F	; 15
    1bfc:	40 5d       	subi	r20, 0xD0	; 208
    1bfe:	4a 33       	cpi	r20, 0x3A	; 58
    1c00:	18 f0       	brcs	.+6      	; 0x1c08 <__ultoa_invert+0x7c>
    1c02:	49 5d       	subi	r20, 0xD9	; 217
    1c04:	31 fd       	sbrc	r19, 1
    1c06:	40 52       	subi	r20, 0x20	; 32
    1c08:	41 93       	st	Z+, r20
    1c0a:	02 d0       	rcall	.+4      	; 0x1c10 <__ultoa_invert+0x84>
    1c0c:	a9 f7       	brne	.-22     	; 0x1bf8 <__ultoa_invert+0x6c>
    1c0e:	ea cf       	rjmp	.-44     	; 0x1be4 <__ultoa_invert+0x58>
    1c10:	b4 e0       	ldi	r27, 0x04	; 4
    1c12:	a6 95       	lsr	r26
    1c14:	97 95       	ror	r25
    1c16:	87 95       	ror	r24
    1c18:	77 95       	ror	r23
    1c1a:	67 95       	ror	r22
    1c1c:	ba 95       	dec	r27
    1c1e:	c9 f7       	brne	.-14     	; 0x1c12 <__ultoa_invert+0x86>
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	61 05       	cpc	r22, r1
    1c24:	71 05       	cpc	r23, r1
    1c26:	08 95       	ret
    1c28:	9b 01       	movw	r18, r22
    1c2a:	ac 01       	movw	r20, r24
    1c2c:	0a 2e       	mov	r0, r26
    1c2e:	06 94       	lsr	r0
    1c30:	57 95       	ror	r21
    1c32:	47 95       	ror	r20
    1c34:	37 95       	ror	r19
    1c36:	27 95       	ror	r18
    1c38:	ba 95       	dec	r27
    1c3a:	c9 f7       	brne	.-14     	; 0x1c2e <__ultoa_invert+0xa2>
    1c3c:	62 0f       	add	r22, r18
    1c3e:	73 1f       	adc	r23, r19
    1c40:	84 1f       	adc	r24, r20
    1c42:	95 1f       	adc	r25, r21
    1c44:	a0 1d       	adc	r26, r0
    1c46:	08 95       	ret

00001c48 <__prologue_saves__>:
    1c48:	2f 92       	push	r2
    1c4a:	3f 92       	push	r3
    1c4c:	4f 92       	push	r4
    1c4e:	5f 92       	push	r5
    1c50:	6f 92       	push	r6
    1c52:	7f 92       	push	r7
    1c54:	8f 92       	push	r8
    1c56:	9f 92       	push	r9
    1c58:	af 92       	push	r10
    1c5a:	bf 92       	push	r11
    1c5c:	cf 92       	push	r12
    1c5e:	df 92       	push	r13
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	ca 1b       	sub	r28, r26
    1c72:	db 0b       	sbc	r29, r27
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	09 94       	ijmp

00001c80 <__epilogue_restores__>:
    1c80:	2a 88       	ldd	r2, Y+18	; 0x12
    1c82:	39 88       	ldd	r3, Y+17	; 0x11
    1c84:	48 88       	ldd	r4, Y+16	; 0x10
    1c86:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c88:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c90:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c92:	b9 84       	ldd	r11, Y+9	; 0x09
    1c94:	c8 84       	ldd	r12, Y+8	; 0x08
    1c96:	df 80       	ldd	r13, Y+7	; 0x07
    1c98:	ee 80       	ldd	r14, Y+6	; 0x06
    1c9a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c9c:	0c 81       	ldd	r16, Y+4	; 0x04
    1c9e:	1b 81       	ldd	r17, Y+3	; 0x03
    1ca0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ca2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ca4:	ce 0f       	add	r28, r30
    1ca6:	d1 1d       	adc	r29, r1
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	ed 01       	movw	r28, r26
    1cb4:	08 95       	ret

00001cb6 <_exit>:
    1cb6:	f8 94       	cli

00001cb8 <__stop_program>:
    1cb8:	ff cf       	rjmp	.-2      	; 0x1cb8 <__stop_program>
